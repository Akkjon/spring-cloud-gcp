/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.contactcenterinsights.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.contactcenterinsights.v1.ContactCenterInsightsClient;
import com.google.cloud.contactcenterinsights.v1.ContactCenterInsightsSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ContactCenterInsightsClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ContactCenterInsightsClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.contactcenterinsights.v1.spring.auto.contact-center-insights.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({
  ContactCenterInsightsSpringProperties.class,
  GlobalProperties.class
})
public class ContactCenterInsightsSpringAutoConfiguration {
  private final ContactCenterInsightsSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(ContactCenterInsightsSpringAutoConfiguration.class);

  protected ContactCenterInsightsSpringAutoConfiguration(
      ContactCenterInsightsSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider contactCenterInsightsCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from ContactCenterInsights-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultContactCenterInsightsTransportChannelProvider() {
    return ContactCenterInsightsSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ContactCenterInsightsClient bean configured to use the default credentials provider
   * (obtained with contactCenterInsightsCredentials()) and its default transport channel provider
   * (defaultContactCenterInsightsTransportChannelProvider()). It also configures the quota project
   * ID if provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in ContactCenterInsightsSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public ContactCenterInsightsSettings contactCenterInsightsSettings(
      @Qualifier("contactCenterInsightsCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultContactCenterInsightsTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ContactCenterInsightsSettings.Builder clientSettingsBuilder =
        ContactCenterInsightsSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ContactCenterInsightsSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          ContactCenterInsightsSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createConversationRetrySettingBuilder =
        clientSettingsBuilder.createConversationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateConversationInitialRetryDelay() != null) {
      createConversationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateConversationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationInitialRetryDelay set to "
                + this.clientProperties.getCreateConversationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateConversationRetryDelayMultiplier() != null) {
      createConversationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateConversationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationRetryDelayMultiplier set to "
                + this.clientProperties.getCreateConversationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateConversationMaxRetryDelay() != null) {
      createConversationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateConversationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationMaxRetryDelay set to "
                + this.clientProperties.getCreateConversationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateConversationInitialRpcTimeout() != null) {
      createConversationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateConversationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationInitialRpcTimeout set to "
                + this.clientProperties.getCreateConversationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateConversationRpcTimeoutMultiplier() != null) {
      createConversationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateConversationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateConversationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateConversationMaxRpcTimeout() != null) {
      createConversationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateConversationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationMaxRpcTimeout set to "
                + this.clientProperties.getCreateConversationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateConversationTotalTimeout() != null) {
      createConversationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateConversationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationTotalTimeout set to "
                + this.clientProperties.getCreateConversationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createConversationSettings()
        .setRetrySettings(createConversationRetrySettingBuilder.build());
    RetrySettings.Builder updateConversationRetrySettingBuilder =
        clientSettingsBuilder.updateConversationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateConversationInitialRetryDelay() != null) {
      updateConversationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateConversationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConversationInitialRetryDelay set to "
                + this.clientProperties.getUpdateConversationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateConversationRetryDelayMultiplier() != null) {
      updateConversationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateConversationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConversationRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateConversationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateConversationMaxRetryDelay() != null) {
      updateConversationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateConversationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConversationMaxRetryDelay set to "
                + this.clientProperties.getUpdateConversationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateConversationInitialRpcTimeout() != null) {
      updateConversationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateConversationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConversationInitialRpcTimeout set to "
                + this.clientProperties.getUpdateConversationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateConversationRpcTimeoutMultiplier() != null) {
      updateConversationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateConversationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConversationRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateConversationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateConversationMaxRpcTimeout() != null) {
      updateConversationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateConversationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConversationMaxRpcTimeout set to "
                + this.clientProperties.getUpdateConversationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateConversationTotalTimeout() != null) {
      updateConversationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateConversationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConversationTotalTimeout set to "
                + this.clientProperties.getUpdateConversationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateConversationSettings()
        .setRetrySettings(updateConversationRetrySettingBuilder.build());
    RetrySettings.Builder getConversationRetrySettingBuilder =
        clientSettingsBuilder.getConversationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetConversationInitialRetryDelay() != null) {
      getConversationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetConversationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationInitialRetryDelay set to "
                + this.clientProperties.getGetConversationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetConversationRetryDelayMultiplier() != null) {
      getConversationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetConversationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationRetryDelayMultiplier set to "
                + this.clientProperties.getGetConversationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetConversationMaxRetryDelay() != null) {
      getConversationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetConversationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationMaxRetryDelay set to "
                + this.clientProperties.getGetConversationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetConversationInitialRpcTimeout() != null) {
      getConversationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetConversationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationInitialRpcTimeout set to "
                + this.clientProperties.getGetConversationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetConversationRpcTimeoutMultiplier() != null) {
      getConversationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetConversationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetConversationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetConversationMaxRpcTimeout() != null) {
      getConversationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetConversationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationMaxRpcTimeout set to "
                + this.clientProperties.getGetConversationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetConversationTotalTimeout() != null) {
      getConversationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetConversationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationTotalTimeout set to "
                + this.clientProperties.getGetConversationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getConversationSettings()
        .setRetrySettings(getConversationRetrySettingBuilder.build());
    RetrySettings.Builder listConversationsRetrySettingBuilder =
        clientSettingsBuilder.listConversationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListConversationsInitialRetryDelay() != null) {
      listConversationsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListConversationsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationsInitialRetryDelay set to "
                + this.clientProperties.getListConversationsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListConversationsRetryDelayMultiplier() != null) {
      listConversationsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListConversationsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationsRetryDelayMultiplier set to "
                + this.clientProperties.getListConversationsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListConversationsMaxRetryDelay() != null) {
      listConversationsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListConversationsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationsMaxRetryDelay set to "
                + this.clientProperties.getListConversationsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListConversationsInitialRpcTimeout() != null) {
      listConversationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListConversationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationsInitialRpcTimeout set to "
                + this.clientProperties.getListConversationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListConversationsRpcTimeoutMultiplier() != null) {
      listConversationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListConversationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListConversationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListConversationsMaxRpcTimeout() != null) {
      listConversationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListConversationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationsMaxRpcTimeout set to "
                + this.clientProperties.getListConversationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListConversationsTotalTimeout() != null) {
      listConversationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListConversationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationsTotalTimeout set to "
                + this.clientProperties.getListConversationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listConversationsSettings()
        .setRetrySettings(listConversationsRetrySettingBuilder.build());
    RetrySettings.Builder deleteConversationRetrySettingBuilder =
        clientSettingsBuilder.deleteConversationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteConversationInitialRetryDelay() != null) {
      deleteConversationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteConversationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationInitialRetryDelay set to "
                + this.clientProperties.getDeleteConversationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteConversationRetryDelayMultiplier() != null) {
      deleteConversationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteConversationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteConversationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteConversationMaxRetryDelay() != null) {
      deleteConversationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteConversationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationMaxRetryDelay set to "
                + this.clientProperties.getDeleteConversationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteConversationInitialRpcTimeout() != null) {
      deleteConversationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteConversationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationInitialRpcTimeout set to "
                + this.clientProperties.getDeleteConversationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteConversationRpcTimeoutMultiplier() != null) {
      deleteConversationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteConversationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteConversationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteConversationMaxRpcTimeout() != null) {
      deleteConversationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteConversationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationMaxRpcTimeout set to "
                + this.clientProperties.getDeleteConversationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteConversationTotalTimeout() != null) {
      deleteConversationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteConversationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationTotalTimeout set to "
                + this.clientProperties.getDeleteConversationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteConversationSettings()
        .setRetrySettings(deleteConversationRetrySettingBuilder.build());
    RetrySettings.Builder createAnalysisRetrySettingBuilder =
        clientSettingsBuilder.createAnalysisSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateAnalysisInitialRetryDelay() != null) {
      createAnalysisRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateAnalysisInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAnalysisInitialRetryDelay set to "
                + this.clientProperties.getCreateAnalysisInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateAnalysisRetryDelayMultiplier() != null) {
      createAnalysisRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateAnalysisRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAnalysisRetryDelayMultiplier set to "
                + this.clientProperties.getCreateAnalysisRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateAnalysisMaxRetryDelay() != null) {
      createAnalysisRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateAnalysisMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAnalysisMaxRetryDelay set to "
                + this.clientProperties.getCreateAnalysisMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateAnalysisInitialRpcTimeout() != null) {
      createAnalysisRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateAnalysisInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAnalysisInitialRpcTimeout set to "
                + this.clientProperties.getCreateAnalysisInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateAnalysisRpcTimeoutMultiplier() != null) {
      createAnalysisRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateAnalysisRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAnalysisRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateAnalysisRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateAnalysisMaxRpcTimeout() != null) {
      createAnalysisRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateAnalysisMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAnalysisMaxRpcTimeout set to "
                + this.clientProperties.getCreateAnalysisMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateAnalysisTotalTimeout() != null) {
      createAnalysisRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateAnalysisTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAnalysisTotalTimeout set to "
                + this.clientProperties.getCreateAnalysisTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createAnalysisSettings()
        .setRetrySettings(createAnalysisRetrySettingBuilder.build());
    RetrySettings.Builder getAnalysisRetrySettingBuilder =
        clientSettingsBuilder.getAnalysisSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetAnalysisInitialRetryDelay() != null) {
      getAnalysisRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetAnalysisInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAnalysisInitialRetryDelay set to "
                + this.clientProperties.getGetAnalysisInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetAnalysisRetryDelayMultiplier() != null) {
      getAnalysisRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetAnalysisRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAnalysisRetryDelayMultiplier set to "
                + this.clientProperties.getGetAnalysisRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetAnalysisMaxRetryDelay() != null) {
      getAnalysisRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetAnalysisMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAnalysisMaxRetryDelay set to "
                + this.clientProperties.getGetAnalysisMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetAnalysisInitialRpcTimeout() != null) {
      getAnalysisRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetAnalysisInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAnalysisInitialRpcTimeout set to "
                + this.clientProperties.getGetAnalysisInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAnalysisRpcTimeoutMultiplier() != null) {
      getAnalysisRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetAnalysisRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAnalysisRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetAnalysisRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetAnalysisMaxRpcTimeout() != null) {
      getAnalysisRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetAnalysisMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAnalysisMaxRpcTimeout set to "
                + this.clientProperties.getGetAnalysisMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAnalysisTotalTimeout() != null) {
      getAnalysisRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetAnalysisTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAnalysisTotalTimeout set to " + this.clientProperties.getGetAnalysisTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getAnalysisSettings()
        .setRetrySettings(getAnalysisRetrySettingBuilder.build());
    RetrySettings.Builder listAnalysesRetrySettingBuilder =
        clientSettingsBuilder.listAnalysesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListAnalysesInitialRetryDelay() != null) {
      listAnalysesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListAnalysesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAnalysesInitialRetryDelay set to "
                + this.clientProperties.getListAnalysesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListAnalysesRetryDelayMultiplier() != null) {
      listAnalysesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListAnalysesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAnalysesRetryDelayMultiplier set to "
                + this.clientProperties.getListAnalysesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListAnalysesMaxRetryDelay() != null) {
      listAnalysesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListAnalysesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAnalysesMaxRetryDelay set to "
                + this.clientProperties.getListAnalysesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListAnalysesInitialRpcTimeout() != null) {
      listAnalysesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListAnalysesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAnalysesInitialRpcTimeout set to "
                + this.clientProperties.getListAnalysesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListAnalysesRpcTimeoutMultiplier() != null) {
      listAnalysesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListAnalysesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAnalysesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListAnalysesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListAnalysesMaxRpcTimeout() != null) {
      listAnalysesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListAnalysesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAnalysesMaxRpcTimeout set to "
                + this.clientProperties.getListAnalysesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListAnalysesTotalTimeout() != null) {
      listAnalysesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListAnalysesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAnalysesTotalTimeout set to "
                + this.clientProperties.getListAnalysesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listAnalysesSettings()
        .setRetrySettings(listAnalysesRetrySettingBuilder.build());
    RetrySettings.Builder deleteAnalysisRetrySettingBuilder =
        clientSettingsBuilder.deleteAnalysisSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteAnalysisInitialRetryDelay() != null) {
      deleteAnalysisRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteAnalysisInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAnalysisInitialRetryDelay set to "
                + this.clientProperties.getDeleteAnalysisInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteAnalysisRetryDelayMultiplier() != null) {
      deleteAnalysisRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteAnalysisRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAnalysisRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteAnalysisRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteAnalysisMaxRetryDelay() != null) {
      deleteAnalysisRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteAnalysisMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAnalysisMaxRetryDelay set to "
                + this.clientProperties.getDeleteAnalysisMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteAnalysisInitialRpcTimeout() != null) {
      deleteAnalysisRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteAnalysisInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAnalysisInitialRpcTimeout set to "
                + this.clientProperties.getDeleteAnalysisInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAnalysisRpcTimeoutMultiplier() != null) {
      deleteAnalysisRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteAnalysisRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAnalysisRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteAnalysisRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteAnalysisMaxRpcTimeout() != null) {
      deleteAnalysisRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteAnalysisMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAnalysisMaxRpcTimeout set to "
                + this.clientProperties.getDeleteAnalysisMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAnalysisTotalTimeout() != null) {
      deleteAnalysisRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteAnalysisTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAnalysisTotalTimeout set to "
                + this.clientProperties.getDeleteAnalysisTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteAnalysisSettings()
        .setRetrySettings(deleteAnalysisRetrySettingBuilder.build());
    RetrySettings.Builder exportInsightsDataRetrySettingBuilder =
        clientSettingsBuilder.exportInsightsDataSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getExportInsightsDataInitialRetryDelay() != null) {
      exportInsightsDataRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getExportInsightsDataInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportInsightsDataInitialRetryDelay set to "
                + this.clientProperties.getExportInsightsDataInitialRetryDelay());
      }
    }
    if (this.clientProperties.getExportInsightsDataRetryDelayMultiplier() != null) {
      exportInsightsDataRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getExportInsightsDataRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportInsightsDataRetryDelayMultiplier set to "
                + this.clientProperties.getExportInsightsDataRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getExportInsightsDataMaxRetryDelay() != null) {
      exportInsightsDataRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getExportInsightsDataMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportInsightsDataMaxRetryDelay set to "
                + this.clientProperties.getExportInsightsDataMaxRetryDelay());
      }
    }
    if (this.clientProperties.getExportInsightsDataInitialRpcTimeout() != null) {
      exportInsightsDataRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getExportInsightsDataInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportInsightsDataInitialRpcTimeout set to "
                + this.clientProperties.getExportInsightsDataInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getExportInsightsDataRpcTimeoutMultiplier() != null) {
      exportInsightsDataRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getExportInsightsDataRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportInsightsDataRpcTimeoutMultiplier set to "
                + this.clientProperties.getExportInsightsDataRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getExportInsightsDataMaxRpcTimeout() != null) {
      exportInsightsDataRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getExportInsightsDataMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportInsightsDataMaxRpcTimeout set to "
                + this.clientProperties.getExportInsightsDataMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getExportInsightsDataTotalTimeout() != null) {
      exportInsightsDataRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getExportInsightsDataTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportInsightsDataTotalTimeout set to "
                + this.clientProperties.getExportInsightsDataTotalTimeout());
      }
    }
    clientSettingsBuilder
        .exportInsightsDataSettings()
        .setRetrySettings(exportInsightsDataRetrySettingBuilder.build());
    RetrySettings.Builder createIssueModelRetrySettingBuilder =
        clientSettingsBuilder.createIssueModelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateIssueModelInitialRetryDelay() != null) {
      createIssueModelRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateIssueModelInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateIssueModelInitialRetryDelay set to "
                + this.clientProperties.getCreateIssueModelInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateIssueModelRetryDelayMultiplier() != null) {
      createIssueModelRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateIssueModelRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateIssueModelRetryDelayMultiplier set to "
                + this.clientProperties.getCreateIssueModelRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateIssueModelMaxRetryDelay() != null) {
      createIssueModelRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateIssueModelMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateIssueModelMaxRetryDelay set to "
                + this.clientProperties.getCreateIssueModelMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateIssueModelInitialRpcTimeout() != null) {
      createIssueModelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateIssueModelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateIssueModelInitialRpcTimeout set to "
                + this.clientProperties.getCreateIssueModelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateIssueModelRpcTimeoutMultiplier() != null) {
      createIssueModelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateIssueModelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateIssueModelRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateIssueModelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateIssueModelMaxRpcTimeout() != null) {
      createIssueModelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateIssueModelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateIssueModelMaxRpcTimeout set to "
                + this.clientProperties.getCreateIssueModelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateIssueModelTotalTimeout() != null) {
      createIssueModelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateIssueModelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateIssueModelTotalTimeout set to "
                + this.clientProperties.getCreateIssueModelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createIssueModelSettings()
        .setRetrySettings(createIssueModelRetrySettingBuilder.build());
    RetrySettings.Builder updateIssueModelRetrySettingBuilder =
        clientSettingsBuilder.updateIssueModelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateIssueModelInitialRetryDelay() != null) {
      updateIssueModelRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateIssueModelInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateIssueModelInitialRetryDelay set to "
                + this.clientProperties.getUpdateIssueModelInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateIssueModelRetryDelayMultiplier() != null) {
      updateIssueModelRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateIssueModelRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateIssueModelRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateIssueModelRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateIssueModelMaxRetryDelay() != null) {
      updateIssueModelRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateIssueModelMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateIssueModelMaxRetryDelay set to "
                + this.clientProperties.getUpdateIssueModelMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateIssueModelInitialRpcTimeout() != null) {
      updateIssueModelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateIssueModelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateIssueModelInitialRpcTimeout set to "
                + this.clientProperties.getUpdateIssueModelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateIssueModelRpcTimeoutMultiplier() != null) {
      updateIssueModelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateIssueModelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateIssueModelRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateIssueModelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateIssueModelMaxRpcTimeout() != null) {
      updateIssueModelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateIssueModelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateIssueModelMaxRpcTimeout set to "
                + this.clientProperties.getUpdateIssueModelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateIssueModelTotalTimeout() != null) {
      updateIssueModelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateIssueModelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateIssueModelTotalTimeout set to "
                + this.clientProperties.getUpdateIssueModelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateIssueModelSettings()
        .setRetrySettings(updateIssueModelRetrySettingBuilder.build());
    RetrySettings.Builder getIssueModelRetrySettingBuilder =
        clientSettingsBuilder.getIssueModelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetIssueModelInitialRetryDelay() != null) {
      getIssueModelRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetIssueModelInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIssueModelInitialRetryDelay set to "
                + this.clientProperties.getGetIssueModelInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetIssueModelRetryDelayMultiplier() != null) {
      getIssueModelRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetIssueModelRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIssueModelRetryDelayMultiplier set to "
                + this.clientProperties.getGetIssueModelRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetIssueModelMaxRetryDelay() != null) {
      getIssueModelRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetIssueModelMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIssueModelMaxRetryDelay set to "
                + this.clientProperties.getGetIssueModelMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetIssueModelInitialRpcTimeout() != null) {
      getIssueModelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetIssueModelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIssueModelInitialRpcTimeout set to "
                + this.clientProperties.getGetIssueModelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetIssueModelRpcTimeoutMultiplier() != null) {
      getIssueModelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetIssueModelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIssueModelRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetIssueModelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetIssueModelMaxRpcTimeout() != null) {
      getIssueModelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetIssueModelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIssueModelMaxRpcTimeout set to "
                + this.clientProperties.getGetIssueModelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetIssueModelTotalTimeout() != null) {
      getIssueModelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetIssueModelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIssueModelTotalTimeout set to "
                + this.clientProperties.getGetIssueModelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getIssueModelSettings()
        .setRetrySettings(getIssueModelRetrySettingBuilder.build());
    RetrySettings.Builder listIssueModelsRetrySettingBuilder =
        clientSettingsBuilder.listIssueModelsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListIssueModelsInitialRetryDelay() != null) {
      listIssueModelsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListIssueModelsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListIssueModelsInitialRetryDelay set to "
                + this.clientProperties.getListIssueModelsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListIssueModelsRetryDelayMultiplier() != null) {
      listIssueModelsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListIssueModelsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListIssueModelsRetryDelayMultiplier set to "
                + this.clientProperties.getListIssueModelsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListIssueModelsMaxRetryDelay() != null) {
      listIssueModelsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListIssueModelsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListIssueModelsMaxRetryDelay set to "
                + this.clientProperties.getListIssueModelsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListIssueModelsInitialRpcTimeout() != null) {
      listIssueModelsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListIssueModelsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListIssueModelsInitialRpcTimeout set to "
                + this.clientProperties.getListIssueModelsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListIssueModelsRpcTimeoutMultiplier() != null) {
      listIssueModelsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListIssueModelsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListIssueModelsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListIssueModelsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListIssueModelsMaxRpcTimeout() != null) {
      listIssueModelsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListIssueModelsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListIssueModelsMaxRpcTimeout set to "
                + this.clientProperties.getListIssueModelsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListIssueModelsTotalTimeout() != null) {
      listIssueModelsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListIssueModelsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListIssueModelsTotalTimeout set to "
                + this.clientProperties.getListIssueModelsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listIssueModelsSettings()
        .setRetrySettings(listIssueModelsRetrySettingBuilder.build());
    RetrySettings.Builder deleteIssueModelRetrySettingBuilder =
        clientSettingsBuilder.deleteIssueModelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteIssueModelInitialRetryDelay() != null) {
      deleteIssueModelRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteIssueModelInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteIssueModelInitialRetryDelay set to "
                + this.clientProperties.getDeleteIssueModelInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteIssueModelRetryDelayMultiplier() != null) {
      deleteIssueModelRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteIssueModelRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteIssueModelRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteIssueModelRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteIssueModelMaxRetryDelay() != null) {
      deleteIssueModelRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteIssueModelMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteIssueModelMaxRetryDelay set to "
                + this.clientProperties.getDeleteIssueModelMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteIssueModelInitialRpcTimeout() != null) {
      deleteIssueModelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteIssueModelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteIssueModelInitialRpcTimeout set to "
                + this.clientProperties.getDeleteIssueModelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteIssueModelRpcTimeoutMultiplier() != null) {
      deleteIssueModelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteIssueModelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteIssueModelRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteIssueModelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteIssueModelMaxRpcTimeout() != null) {
      deleteIssueModelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteIssueModelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteIssueModelMaxRpcTimeout set to "
                + this.clientProperties.getDeleteIssueModelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteIssueModelTotalTimeout() != null) {
      deleteIssueModelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteIssueModelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteIssueModelTotalTimeout set to "
                + this.clientProperties.getDeleteIssueModelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteIssueModelSettings()
        .setRetrySettings(deleteIssueModelRetrySettingBuilder.build());
    RetrySettings.Builder deployIssueModelRetrySettingBuilder =
        clientSettingsBuilder.deployIssueModelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeployIssueModelInitialRetryDelay() != null) {
      deployIssueModelRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeployIssueModelInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeployIssueModelInitialRetryDelay set to "
                + this.clientProperties.getDeployIssueModelInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeployIssueModelRetryDelayMultiplier() != null) {
      deployIssueModelRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeployIssueModelRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeployIssueModelRetryDelayMultiplier set to "
                + this.clientProperties.getDeployIssueModelRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeployIssueModelMaxRetryDelay() != null) {
      deployIssueModelRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeployIssueModelMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeployIssueModelMaxRetryDelay set to "
                + this.clientProperties.getDeployIssueModelMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeployIssueModelInitialRpcTimeout() != null) {
      deployIssueModelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeployIssueModelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeployIssueModelInitialRpcTimeout set to "
                + this.clientProperties.getDeployIssueModelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeployIssueModelRpcTimeoutMultiplier() != null) {
      deployIssueModelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeployIssueModelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeployIssueModelRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeployIssueModelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeployIssueModelMaxRpcTimeout() != null) {
      deployIssueModelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeployIssueModelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeployIssueModelMaxRpcTimeout set to "
                + this.clientProperties.getDeployIssueModelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeployIssueModelTotalTimeout() != null) {
      deployIssueModelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeployIssueModelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeployIssueModelTotalTimeout set to "
                + this.clientProperties.getDeployIssueModelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deployIssueModelSettings()
        .setRetrySettings(deployIssueModelRetrySettingBuilder.build());
    RetrySettings.Builder undeployIssueModelRetrySettingBuilder =
        clientSettingsBuilder.undeployIssueModelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUndeployIssueModelInitialRetryDelay() != null) {
      undeployIssueModelRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUndeployIssueModelInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeployIssueModelInitialRetryDelay set to "
                + this.clientProperties.getUndeployIssueModelInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUndeployIssueModelRetryDelayMultiplier() != null) {
      undeployIssueModelRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUndeployIssueModelRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeployIssueModelRetryDelayMultiplier set to "
                + this.clientProperties.getUndeployIssueModelRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUndeployIssueModelMaxRetryDelay() != null) {
      undeployIssueModelRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUndeployIssueModelMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeployIssueModelMaxRetryDelay set to "
                + this.clientProperties.getUndeployIssueModelMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUndeployIssueModelInitialRpcTimeout() != null) {
      undeployIssueModelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUndeployIssueModelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeployIssueModelInitialRpcTimeout set to "
                + this.clientProperties.getUndeployIssueModelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUndeployIssueModelRpcTimeoutMultiplier() != null) {
      undeployIssueModelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUndeployIssueModelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeployIssueModelRpcTimeoutMultiplier set to "
                + this.clientProperties.getUndeployIssueModelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUndeployIssueModelMaxRpcTimeout() != null) {
      undeployIssueModelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUndeployIssueModelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeployIssueModelMaxRpcTimeout set to "
                + this.clientProperties.getUndeployIssueModelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUndeployIssueModelTotalTimeout() != null) {
      undeployIssueModelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUndeployIssueModelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeployIssueModelTotalTimeout set to "
                + this.clientProperties.getUndeployIssueModelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .undeployIssueModelSettings()
        .setRetrySettings(undeployIssueModelRetrySettingBuilder.build());
    RetrySettings.Builder getIssueRetrySettingBuilder =
        clientSettingsBuilder.getIssueSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetIssueInitialRetryDelay() != null) {
      getIssueRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetIssueInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIssueInitialRetryDelay set to "
                + this.clientProperties.getGetIssueInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetIssueRetryDelayMultiplier() != null) {
      getIssueRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetIssueRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIssueRetryDelayMultiplier set to "
                + this.clientProperties.getGetIssueRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetIssueMaxRetryDelay() != null) {
      getIssueRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetIssueMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIssueMaxRetryDelay set to " + this.clientProperties.getGetIssueMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetIssueInitialRpcTimeout() != null) {
      getIssueRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetIssueInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIssueInitialRpcTimeout set to "
                + this.clientProperties.getGetIssueInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetIssueRpcTimeoutMultiplier() != null) {
      getIssueRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetIssueRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIssueRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetIssueRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetIssueMaxRpcTimeout() != null) {
      getIssueRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetIssueMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIssueMaxRpcTimeout set to " + this.clientProperties.getGetIssueMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetIssueTotalTimeout() != null) {
      getIssueRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetIssueTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIssueTotalTimeout set to " + this.clientProperties.getGetIssueTotalTimeout());
      }
    }
    clientSettingsBuilder.getIssueSettings().setRetrySettings(getIssueRetrySettingBuilder.build());
    RetrySettings.Builder listIssuesRetrySettingBuilder =
        clientSettingsBuilder.listIssuesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListIssuesInitialRetryDelay() != null) {
      listIssuesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListIssuesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListIssuesInitialRetryDelay set to "
                + this.clientProperties.getListIssuesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListIssuesRetryDelayMultiplier() != null) {
      listIssuesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListIssuesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListIssuesRetryDelayMultiplier set to "
                + this.clientProperties.getListIssuesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListIssuesMaxRetryDelay() != null) {
      listIssuesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListIssuesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListIssuesMaxRetryDelay set to " + this.clientProperties.getListIssuesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListIssuesInitialRpcTimeout() != null) {
      listIssuesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListIssuesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListIssuesInitialRpcTimeout set to "
                + this.clientProperties.getListIssuesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListIssuesRpcTimeoutMultiplier() != null) {
      listIssuesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListIssuesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListIssuesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListIssuesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListIssuesMaxRpcTimeout() != null) {
      listIssuesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListIssuesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListIssuesMaxRpcTimeout set to " + this.clientProperties.getListIssuesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListIssuesTotalTimeout() != null) {
      listIssuesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListIssuesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListIssuesTotalTimeout set to " + this.clientProperties.getListIssuesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listIssuesSettings()
        .setRetrySettings(listIssuesRetrySettingBuilder.build());
    RetrySettings.Builder updateIssueRetrySettingBuilder =
        clientSettingsBuilder.updateIssueSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateIssueInitialRetryDelay() != null) {
      updateIssueRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateIssueInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateIssueInitialRetryDelay set to "
                + this.clientProperties.getUpdateIssueInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateIssueRetryDelayMultiplier() != null) {
      updateIssueRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateIssueRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateIssueRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateIssueRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateIssueMaxRetryDelay() != null) {
      updateIssueRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateIssueMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateIssueMaxRetryDelay set to "
                + this.clientProperties.getUpdateIssueMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateIssueInitialRpcTimeout() != null) {
      updateIssueRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateIssueInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateIssueInitialRpcTimeout set to "
                + this.clientProperties.getUpdateIssueInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateIssueRpcTimeoutMultiplier() != null) {
      updateIssueRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateIssueRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateIssueRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateIssueRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateIssueMaxRpcTimeout() != null) {
      updateIssueRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateIssueMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateIssueMaxRpcTimeout set to "
                + this.clientProperties.getUpdateIssueMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateIssueTotalTimeout() != null) {
      updateIssueRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateIssueTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateIssueTotalTimeout set to " + this.clientProperties.getUpdateIssueTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateIssueSettings()
        .setRetrySettings(updateIssueRetrySettingBuilder.build());
    RetrySettings.Builder calculateIssueModelStatsRetrySettingBuilder =
        clientSettingsBuilder.calculateIssueModelStatsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCalculateIssueModelStatsInitialRetryDelay() != null) {
      calculateIssueModelStatsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCalculateIssueModelStatsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CalculateIssueModelStatsInitialRetryDelay set to "
                + this.clientProperties.getCalculateIssueModelStatsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCalculateIssueModelStatsRetryDelayMultiplier() != null) {
      calculateIssueModelStatsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCalculateIssueModelStatsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CalculateIssueModelStatsRetryDelayMultiplier set to "
                + this.clientProperties.getCalculateIssueModelStatsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCalculateIssueModelStatsMaxRetryDelay() != null) {
      calculateIssueModelStatsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCalculateIssueModelStatsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CalculateIssueModelStatsMaxRetryDelay set to "
                + this.clientProperties.getCalculateIssueModelStatsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCalculateIssueModelStatsInitialRpcTimeout() != null) {
      calculateIssueModelStatsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCalculateIssueModelStatsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CalculateIssueModelStatsInitialRpcTimeout set to "
                + this.clientProperties.getCalculateIssueModelStatsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCalculateIssueModelStatsRpcTimeoutMultiplier() != null) {
      calculateIssueModelStatsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCalculateIssueModelStatsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CalculateIssueModelStatsRpcTimeoutMultiplier set to "
                + this.clientProperties.getCalculateIssueModelStatsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCalculateIssueModelStatsMaxRpcTimeout() != null) {
      calculateIssueModelStatsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCalculateIssueModelStatsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CalculateIssueModelStatsMaxRpcTimeout set to "
                + this.clientProperties.getCalculateIssueModelStatsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCalculateIssueModelStatsTotalTimeout() != null) {
      calculateIssueModelStatsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCalculateIssueModelStatsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CalculateIssueModelStatsTotalTimeout set to "
                + this.clientProperties.getCalculateIssueModelStatsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .calculateIssueModelStatsSettings()
        .setRetrySettings(calculateIssueModelStatsRetrySettingBuilder.build());
    RetrySettings.Builder createPhraseMatcherRetrySettingBuilder =
        clientSettingsBuilder.createPhraseMatcherSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreatePhraseMatcherInitialRetryDelay() != null) {
      createPhraseMatcherRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreatePhraseMatcherInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePhraseMatcherInitialRetryDelay set to "
                + this.clientProperties.getCreatePhraseMatcherInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreatePhraseMatcherRetryDelayMultiplier() != null) {
      createPhraseMatcherRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreatePhraseMatcherRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePhraseMatcherRetryDelayMultiplier set to "
                + this.clientProperties.getCreatePhraseMatcherRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreatePhraseMatcherMaxRetryDelay() != null) {
      createPhraseMatcherRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreatePhraseMatcherMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePhraseMatcherMaxRetryDelay set to "
                + this.clientProperties.getCreatePhraseMatcherMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreatePhraseMatcherInitialRpcTimeout() != null) {
      createPhraseMatcherRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreatePhraseMatcherInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePhraseMatcherInitialRpcTimeout set to "
                + this.clientProperties.getCreatePhraseMatcherInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreatePhraseMatcherRpcTimeoutMultiplier() != null) {
      createPhraseMatcherRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreatePhraseMatcherRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePhraseMatcherRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreatePhraseMatcherRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreatePhraseMatcherMaxRpcTimeout() != null) {
      createPhraseMatcherRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreatePhraseMatcherMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePhraseMatcherMaxRpcTimeout set to "
                + this.clientProperties.getCreatePhraseMatcherMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreatePhraseMatcherTotalTimeout() != null) {
      createPhraseMatcherRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreatePhraseMatcherTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePhraseMatcherTotalTimeout set to "
                + this.clientProperties.getCreatePhraseMatcherTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createPhraseMatcherSettings()
        .setRetrySettings(createPhraseMatcherRetrySettingBuilder.build());
    RetrySettings.Builder getPhraseMatcherRetrySettingBuilder =
        clientSettingsBuilder.getPhraseMatcherSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetPhraseMatcherInitialRetryDelay() != null) {
      getPhraseMatcherRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetPhraseMatcherInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPhraseMatcherInitialRetryDelay set to "
                + this.clientProperties.getGetPhraseMatcherInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetPhraseMatcherRetryDelayMultiplier() != null) {
      getPhraseMatcherRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetPhraseMatcherRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPhraseMatcherRetryDelayMultiplier set to "
                + this.clientProperties.getGetPhraseMatcherRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetPhraseMatcherMaxRetryDelay() != null) {
      getPhraseMatcherRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetPhraseMatcherMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPhraseMatcherMaxRetryDelay set to "
                + this.clientProperties.getGetPhraseMatcherMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetPhraseMatcherInitialRpcTimeout() != null) {
      getPhraseMatcherRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetPhraseMatcherInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPhraseMatcherInitialRpcTimeout set to "
                + this.clientProperties.getGetPhraseMatcherInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetPhraseMatcherRpcTimeoutMultiplier() != null) {
      getPhraseMatcherRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetPhraseMatcherRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPhraseMatcherRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetPhraseMatcherRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetPhraseMatcherMaxRpcTimeout() != null) {
      getPhraseMatcherRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetPhraseMatcherMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPhraseMatcherMaxRpcTimeout set to "
                + this.clientProperties.getGetPhraseMatcherMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetPhraseMatcherTotalTimeout() != null) {
      getPhraseMatcherRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetPhraseMatcherTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPhraseMatcherTotalTimeout set to "
                + this.clientProperties.getGetPhraseMatcherTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getPhraseMatcherSettings()
        .setRetrySettings(getPhraseMatcherRetrySettingBuilder.build());
    RetrySettings.Builder listPhraseMatchersRetrySettingBuilder =
        clientSettingsBuilder.listPhraseMatchersSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListPhraseMatchersInitialRetryDelay() != null) {
      listPhraseMatchersRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListPhraseMatchersInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPhraseMatchersInitialRetryDelay set to "
                + this.clientProperties.getListPhraseMatchersInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListPhraseMatchersRetryDelayMultiplier() != null) {
      listPhraseMatchersRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListPhraseMatchersRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPhraseMatchersRetryDelayMultiplier set to "
                + this.clientProperties.getListPhraseMatchersRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListPhraseMatchersMaxRetryDelay() != null) {
      listPhraseMatchersRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListPhraseMatchersMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPhraseMatchersMaxRetryDelay set to "
                + this.clientProperties.getListPhraseMatchersMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListPhraseMatchersInitialRpcTimeout() != null) {
      listPhraseMatchersRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListPhraseMatchersInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPhraseMatchersInitialRpcTimeout set to "
                + this.clientProperties.getListPhraseMatchersInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListPhraseMatchersRpcTimeoutMultiplier() != null) {
      listPhraseMatchersRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListPhraseMatchersRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPhraseMatchersRpcTimeoutMultiplier set to "
                + this.clientProperties.getListPhraseMatchersRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListPhraseMatchersMaxRpcTimeout() != null) {
      listPhraseMatchersRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListPhraseMatchersMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPhraseMatchersMaxRpcTimeout set to "
                + this.clientProperties.getListPhraseMatchersMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListPhraseMatchersTotalTimeout() != null) {
      listPhraseMatchersRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListPhraseMatchersTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPhraseMatchersTotalTimeout set to "
                + this.clientProperties.getListPhraseMatchersTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listPhraseMatchersSettings()
        .setRetrySettings(listPhraseMatchersRetrySettingBuilder.build());
    RetrySettings.Builder deletePhraseMatcherRetrySettingBuilder =
        clientSettingsBuilder.deletePhraseMatcherSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeletePhraseMatcherInitialRetryDelay() != null) {
      deletePhraseMatcherRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeletePhraseMatcherInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePhraseMatcherInitialRetryDelay set to "
                + this.clientProperties.getDeletePhraseMatcherInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeletePhraseMatcherRetryDelayMultiplier() != null) {
      deletePhraseMatcherRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeletePhraseMatcherRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePhraseMatcherRetryDelayMultiplier set to "
                + this.clientProperties.getDeletePhraseMatcherRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeletePhraseMatcherMaxRetryDelay() != null) {
      deletePhraseMatcherRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeletePhraseMatcherMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePhraseMatcherMaxRetryDelay set to "
                + this.clientProperties.getDeletePhraseMatcherMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeletePhraseMatcherInitialRpcTimeout() != null) {
      deletePhraseMatcherRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeletePhraseMatcherInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePhraseMatcherInitialRpcTimeout set to "
                + this.clientProperties.getDeletePhraseMatcherInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeletePhraseMatcherRpcTimeoutMultiplier() != null) {
      deletePhraseMatcherRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeletePhraseMatcherRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePhraseMatcherRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeletePhraseMatcherRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeletePhraseMatcherMaxRpcTimeout() != null) {
      deletePhraseMatcherRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeletePhraseMatcherMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePhraseMatcherMaxRpcTimeout set to "
                + this.clientProperties.getDeletePhraseMatcherMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeletePhraseMatcherTotalTimeout() != null) {
      deletePhraseMatcherRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeletePhraseMatcherTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePhraseMatcherTotalTimeout set to "
                + this.clientProperties.getDeletePhraseMatcherTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deletePhraseMatcherSettings()
        .setRetrySettings(deletePhraseMatcherRetrySettingBuilder.build());
    RetrySettings.Builder updatePhraseMatcherRetrySettingBuilder =
        clientSettingsBuilder.updatePhraseMatcherSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdatePhraseMatcherInitialRetryDelay() != null) {
      updatePhraseMatcherRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdatePhraseMatcherInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePhraseMatcherInitialRetryDelay set to "
                + this.clientProperties.getUpdatePhraseMatcherInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdatePhraseMatcherRetryDelayMultiplier() != null) {
      updatePhraseMatcherRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdatePhraseMatcherRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePhraseMatcherRetryDelayMultiplier set to "
                + this.clientProperties.getUpdatePhraseMatcherRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdatePhraseMatcherMaxRetryDelay() != null) {
      updatePhraseMatcherRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdatePhraseMatcherMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePhraseMatcherMaxRetryDelay set to "
                + this.clientProperties.getUpdatePhraseMatcherMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdatePhraseMatcherInitialRpcTimeout() != null) {
      updatePhraseMatcherRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdatePhraseMatcherInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePhraseMatcherInitialRpcTimeout set to "
                + this.clientProperties.getUpdatePhraseMatcherInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdatePhraseMatcherRpcTimeoutMultiplier() != null) {
      updatePhraseMatcherRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdatePhraseMatcherRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePhraseMatcherRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdatePhraseMatcherRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdatePhraseMatcherMaxRpcTimeout() != null) {
      updatePhraseMatcherRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdatePhraseMatcherMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePhraseMatcherMaxRpcTimeout set to "
                + this.clientProperties.getUpdatePhraseMatcherMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdatePhraseMatcherTotalTimeout() != null) {
      updatePhraseMatcherRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdatePhraseMatcherTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePhraseMatcherTotalTimeout set to "
                + this.clientProperties.getUpdatePhraseMatcherTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updatePhraseMatcherSettings()
        .setRetrySettings(updatePhraseMatcherRetrySettingBuilder.build());
    RetrySettings.Builder calculateStatsRetrySettingBuilder =
        clientSettingsBuilder.calculateStatsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCalculateStatsInitialRetryDelay() != null) {
      calculateStatsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCalculateStatsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CalculateStatsInitialRetryDelay set to "
                + this.clientProperties.getCalculateStatsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCalculateStatsRetryDelayMultiplier() != null) {
      calculateStatsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCalculateStatsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CalculateStatsRetryDelayMultiplier set to "
                + this.clientProperties.getCalculateStatsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCalculateStatsMaxRetryDelay() != null) {
      calculateStatsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCalculateStatsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CalculateStatsMaxRetryDelay set to "
                + this.clientProperties.getCalculateStatsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCalculateStatsInitialRpcTimeout() != null) {
      calculateStatsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCalculateStatsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CalculateStatsInitialRpcTimeout set to "
                + this.clientProperties.getCalculateStatsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCalculateStatsRpcTimeoutMultiplier() != null) {
      calculateStatsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCalculateStatsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CalculateStatsRpcTimeoutMultiplier set to "
                + this.clientProperties.getCalculateStatsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCalculateStatsMaxRpcTimeout() != null) {
      calculateStatsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCalculateStatsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CalculateStatsMaxRpcTimeout set to "
                + this.clientProperties.getCalculateStatsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCalculateStatsTotalTimeout() != null) {
      calculateStatsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCalculateStatsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CalculateStatsTotalTimeout set to "
                + this.clientProperties.getCalculateStatsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .calculateStatsSettings()
        .setRetrySettings(calculateStatsRetrySettingBuilder.build());
    RetrySettings.Builder getSettingsRetrySettingBuilder =
        clientSettingsBuilder.getSettingsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetSettingsInitialRetryDelay() != null) {
      getSettingsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetSettingsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSettingsInitialRetryDelay set to "
                + this.clientProperties.getGetSettingsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetSettingsRetryDelayMultiplier() != null) {
      getSettingsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetSettingsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSettingsRetryDelayMultiplier set to "
                + this.clientProperties.getGetSettingsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetSettingsMaxRetryDelay() != null) {
      getSettingsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetSettingsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSettingsMaxRetryDelay set to "
                + this.clientProperties.getGetSettingsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetSettingsInitialRpcTimeout() != null) {
      getSettingsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetSettingsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSettingsInitialRpcTimeout set to "
                + this.clientProperties.getGetSettingsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetSettingsRpcTimeoutMultiplier() != null) {
      getSettingsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetSettingsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSettingsRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetSettingsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetSettingsMaxRpcTimeout() != null) {
      getSettingsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetSettingsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSettingsMaxRpcTimeout set to "
                + this.clientProperties.getGetSettingsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetSettingsTotalTimeout() != null) {
      getSettingsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetSettingsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSettingsTotalTimeout set to " + this.clientProperties.getGetSettingsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getSettingsSettings()
        .setRetrySettings(getSettingsRetrySettingBuilder.build());
    RetrySettings.Builder updateSettingsRetrySettingBuilder =
        clientSettingsBuilder.updateSettingsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateSettingsInitialRetryDelay() != null) {
      updateSettingsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateSettingsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSettingsInitialRetryDelay set to "
                + this.clientProperties.getUpdateSettingsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateSettingsRetryDelayMultiplier() != null) {
      updateSettingsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateSettingsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSettingsRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateSettingsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateSettingsMaxRetryDelay() != null) {
      updateSettingsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateSettingsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSettingsMaxRetryDelay set to "
                + this.clientProperties.getUpdateSettingsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateSettingsInitialRpcTimeout() != null) {
      updateSettingsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateSettingsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSettingsInitialRpcTimeout set to "
                + this.clientProperties.getUpdateSettingsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateSettingsRpcTimeoutMultiplier() != null) {
      updateSettingsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateSettingsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSettingsRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateSettingsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateSettingsMaxRpcTimeout() != null) {
      updateSettingsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateSettingsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSettingsMaxRpcTimeout set to "
                + this.clientProperties.getUpdateSettingsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateSettingsTotalTimeout() != null) {
      updateSettingsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateSettingsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSettingsTotalTimeout set to "
                + this.clientProperties.getUpdateSettingsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateSettingsSettings()
        .setRetrySettings(updateSettingsRetrySettingBuilder.build());
    RetrySettings.Builder createViewRetrySettingBuilder =
        clientSettingsBuilder.createViewSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateViewInitialRetryDelay() != null) {
      createViewRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateViewInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateViewInitialRetryDelay set to "
                + this.clientProperties.getCreateViewInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateViewRetryDelayMultiplier() != null) {
      createViewRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateViewRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateViewRetryDelayMultiplier set to "
                + this.clientProperties.getCreateViewRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateViewMaxRetryDelay() != null) {
      createViewRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateViewMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateViewMaxRetryDelay set to " + this.clientProperties.getCreateViewMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateViewInitialRpcTimeout() != null) {
      createViewRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateViewInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateViewInitialRpcTimeout set to "
                + this.clientProperties.getCreateViewInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateViewRpcTimeoutMultiplier() != null) {
      createViewRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateViewRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateViewRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateViewRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateViewMaxRpcTimeout() != null) {
      createViewRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateViewMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateViewMaxRpcTimeout set to " + this.clientProperties.getCreateViewMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateViewTotalTimeout() != null) {
      createViewRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateViewTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateViewTotalTimeout set to " + this.clientProperties.getCreateViewTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createViewSettings()
        .setRetrySettings(createViewRetrySettingBuilder.build());
    RetrySettings.Builder getViewRetrySettingBuilder =
        clientSettingsBuilder.getViewSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetViewInitialRetryDelay() != null) {
      getViewRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetViewInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetViewInitialRetryDelay set to "
                + this.clientProperties.getGetViewInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetViewRetryDelayMultiplier() != null) {
      getViewRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetViewRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetViewRetryDelayMultiplier set to "
                + this.clientProperties.getGetViewRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetViewMaxRetryDelay() != null) {
      getViewRetrySettingBuilder.setMaxRetryDelay(this.clientProperties.getGetViewMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetViewMaxRetryDelay set to " + this.clientProperties.getGetViewMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetViewInitialRpcTimeout() != null) {
      getViewRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetViewInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetViewInitialRpcTimeout set to "
                + this.clientProperties.getGetViewInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetViewRpcTimeoutMultiplier() != null) {
      getViewRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetViewRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetViewRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetViewRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetViewMaxRpcTimeout() != null) {
      getViewRetrySettingBuilder.setMaxRpcTimeout(this.clientProperties.getGetViewMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetViewMaxRpcTimeout set to " + this.clientProperties.getGetViewMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetViewTotalTimeout() != null) {
      getViewRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetViewTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetViewTotalTimeout set to " + this.clientProperties.getGetViewTotalTimeout());
      }
    }
    clientSettingsBuilder.getViewSettings().setRetrySettings(getViewRetrySettingBuilder.build());
    RetrySettings.Builder listViewsRetrySettingBuilder =
        clientSettingsBuilder.listViewsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListViewsInitialRetryDelay() != null) {
      listViewsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListViewsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListViewsInitialRetryDelay set to "
                + this.clientProperties.getListViewsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListViewsRetryDelayMultiplier() != null) {
      listViewsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListViewsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListViewsRetryDelayMultiplier set to "
                + this.clientProperties.getListViewsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListViewsMaxRetryDelay() != null) {
      listViewsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListViewsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListViewsMaxRetryDelay set to " + this.clientProperties.getListViewsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListViewsInitialRpcTimeout() != null) {
      listViewsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListViewsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListViewsInitialRpcTimeout set to "
                + this.clientProperties.getListViewsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListViewsRpcTimeoutMultiplier() != null) {
      listViewsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListViewsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListViewsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListViewsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListViewsMaxRpcTimeout() != null) {
      listViewsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListViewsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListViewsMaxRpcTimeout set to " + this.clientProperties.getListViewsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListViewsTotalTimeout() != null) {
      listViewsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListViewsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListViewsTotalTimeout set to " + this.clientProperties.getListViewsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listViewsSettings()
        .setRetrySettings(listViewsRetrySettingBuilder.build());
    RetrySettings.Builder updateViewRetrySettingBuilder =
        clientSettingsBuilder.updateViewSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateViewInitialRetryDelay() != null) {
      updateViewRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateViewInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateViewInitialRetryDelay set to "
                + this.clientProperties.getUpdateViewInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateViewRetryDelayMultiplier() != null) {
      updateViewRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateViewRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateViewRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateViewRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateViewMaxRetryDelay() != null) {
      updateViewRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateViewMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateViewMaxRetryDelay set to " + this.clientProperties.getUpdateViewMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateViewInitialRpcTimeout() != null) {
      updateViewRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateViewInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateViewInitialRpcTimeout set to "
                + this.clientProperties.getUpdateViewInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateViewRpcTimeoutMultiplier() != null) {
      updateViewRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateViewRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateViewRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateViewRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateViewMaxRpcTimeout() != null) {
      updateViewRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateViewMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateViewMaxRpcTimeout set to " + this.clientProperties.getUpdateViewMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateViewTotalTimeout() != null) {
      updateViewRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateViewTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateViewTotalTimeout set to " + this.clientProperties.getUpdateViewTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateViewSettings()
        .setRetrySettings(updateViewRetrySettingBuilder.build());
    RetrySettings.Builder deleteViewRetrySettingBuilder =
        clientSettingsBuilder.deleteViewSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteViewInitialRetryDelay() != null) {
      deleteViewRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteViewInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteViewInitialRetryDelay set to "
                + this.clientProperties.getDeleteViewInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteViewRetryDelayMultiplier() != null) {
      deleteViewRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteViewRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteViewRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteViewRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteViewMaxRetryDelay() != null) {
      deleteViewRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteViewMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteViewMaxRetryDelay set to " + this.clientProperties.getDeleteViewMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteViewInitialRpcTimeout() != null) {
      deleteViewRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteViewInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteViewInitialRpcTimeout set to "
                + this.clientProperties.getDeleteViewInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteViewRpcTimeoutMultiplier() != null) {
      deleteViewRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteViewRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteViewRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteViewRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteViewMaxRpcTimeout() != null) {
      deleteViewRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteViewMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteViewMaxRpcTimeout set to " + this.clientProperties.getDeleteViewMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteViewTotalTimeout() != null) {
      deleteViewRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteViewTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteViewTotalTimeout set to " + this.clientProperties.getDeleteViewTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteViewSettings()
        .setRetrySettings(deleteViewRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public ContactCenterInsightsClient contactCenterInsightsClient(
      ContactCenterInsightsSettings contactCenterInsightsSettings) throws IOException {
    return ContactCenterInsightsClient.create(contactCenterInsightsSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-contact-center-insights";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
