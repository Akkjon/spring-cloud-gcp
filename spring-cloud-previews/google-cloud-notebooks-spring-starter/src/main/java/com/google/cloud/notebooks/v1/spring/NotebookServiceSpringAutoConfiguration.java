/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.notebooks.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.notebooks.v1.NotebookServiceClient;
import com.google.cloud.notebooks.v1.NotebookServiceSettings;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link NotebookServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(NotebookServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.notebooks.v1.spring.auto.notebook-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(NotebookServiceSpringProperties.class)
public class NotebookServiceSpringAutoConfiguration {
  private final NotebookServiceSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER = LogFactory.getLog(NotebookServiceSpringAutoConfiguration.class);

  protected NotebookServiceSpringAutoConfiguration(
      NotebookServiceSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from NotebookService-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultNotebookServiceTransportChannelProvider() {
    return NotebookServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a NotebookServiceClient bean configured to use the default credentials provider
   * (obtained with notebookServiceCredentials()) and its default transport channel provider
   * (defaultNotebookServiceTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in NotebookServiceSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   */
  @Bean
  @ConditionalOnMissingBean
  public NotebookServiceSettings notebookServiceSettings(
      @Qualifier("defaultNotebookServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    NotebookServiceSettings.Builder clientSettingsBuilder =
        NotebookServiceSettings.newBuilder()
            .setCredentialsProvider(this.credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          NotebookServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings listInstancesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listInstancesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listInstancesSettings().setRetrySettings(listInstancesRetrySettings);

      RetrySettings getInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getInstanceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getInstanceSettings().setRetrySettings(getInstanceRetrySettings);

      RetrySettings createInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createInstanceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createInstanceSettings().setRetrySettings(createInstanceRetrySettings);

      RetrySettings registerInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.registerInstanceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .registerInstanceSettings()
          .setRetrySettings(registerInstanceRetrySettings);

      RetrySettings setInstanceAcceleratorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setInstanceAcceleratorSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .setInstanceAcceleratorSettings()
          .setRetrySettings(setInstanceAcceleratorRetrySettings);

      RetrySettings setInstanceMachineTypeRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setInstanceMachineTypeSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .setInstanceMachineTypeSettings()
          .setRetrySettings(setInstanceMachineTypeRetrySettings);

      RetrySettings updateInstanceConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateInstanceConfigSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateInstanceConfigSettings()
          .setRetrySettings(updateInstanceConfigRetrySettings);

      RetrySettings updateShieldedInstanceConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateShieldedInstanceConfigSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateShieldedInstanceConfigSettings()
          .setRetrySettings(updateShieldedInstanceConfigRetrySettings);

      RetrySettings setInstanceLabelsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setInstanceLabelsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .setInstanceLabelsSettings()
          .setRetrySettings(setInstanceLabelsRetrySettings);

      RetrySettings updateInstanceMetadataItemsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateInstanceMetadataItemsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateInstanceMetadataItemsSettings()
          .setRetrySettings(updateInstanceMetadataItemsRetrySettings);

      RetrySettings deleteInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteInstanceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.deleteInstanceSettings().setRetrySettings(deleteInstanceRetrySettings);

      RetrySettings startInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.startInstanceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.startInstanceSettings().setRetrySettings(startInstanceRetrySettings);

      RetrySettings stopInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.stopInstanceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.stopInstanceSettings().setRetrySettings(stopInstanceRetrySettings);

      RetrySettings resetInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.resetInstanceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.resetInstanceSettings().setRetrySettings(resetInstanceRetrySettings);

      RetrySettings reportInstanceInfoRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.reportInstanceInfoSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .reportInstanceInfoSettings()
          .setRetrySettings(reportInstanceInfoRetrySettings);

      RetrySettings isInstanceUpgradeableRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.isInstanceUpgradeableSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .isInstanceUpgradeableSettings()
          .setRetrySettings(isInstanceUpgradeableRetrySettings);

      RetrySettings getInstanceHealthRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getInstanceHealthSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getInstanceHealthSettings()
          .setRetrySettings(getInstanceHealthRetrySettings);

      RetrySettings upgradeInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.upgradeInstanceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .upgradeInstanceSettings()
          .setRetrySettings(upgradeInstanceRetrySettings);

      RetrySettings rollbackInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.rollbackInstanceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .rollbackInstanceSettings()
          .setRetrySettings(rollbackInstanceRetrySettings);

      RetrySettings diagnoseInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.diagnoseInstanceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .diagnoseInstanceSettings()
          .setRetrySettings(diagnoseInstanceRetrySettings);

      RetrySettings upgradeInstanceInternalRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.upgradeInstanceInternalSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .upgradeInstanceInternalSettings()
          .setRetrySettings(upgradeInstanceInternalRetrySettings);

      RetrySettings listEnvironmentsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listEnvironmentsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listEnvironmentsSettings()
          .setRetrySettings(listEnvironmentsRetrySettings);

      RetrySettings getEnvironmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getEnvironmentSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getEnvironmentSettings().setRetrySettings(getEnvironmentRetrySettings);

      RetrySettings createEnvironmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createEnvironmentSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createEnvironmentSettings()
          .setRetrySettings(createEnvironmentRetrySettings);

      RetrySettings deleteEnvironmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteEnvironmentSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteEnvironmentSettings()
          .setRetrySettings(deleteEnvironmentRetrySettings);

      RetrySettings listSchedulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listSchedulesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listSchedulesSettings().setRetrySettings(listSchedulesRetrySettings);

      RetrySettings getScheduleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getScheduleSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getScheduleSettings().setRetrySettings(getScheduleRetrySettings);

      RetrySettings deleteScheduleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteScheduleSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.deleteScheduleSettings().setRetrySettings(deleteScheduleRetrySettings);

      RetrySettings createScheduleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createScheduleSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createScheduleSettings().setRetrySettings(createScheduleRetrySettings);

      RetrySettings triggerScheduleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.triggerScheduleSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .triggerScheduleSettings()
          .setRetrySettings(triggerScheduleRetrySettings);

      RetrySettings listExecutionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listExecutionsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listExecutionsSettings().setRetrySettings(listExecutionsRetrySettings);

      RetrySettings getExecutionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getExecutionSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getExecutionSettings().setRetrySettings(getExecutionRetrySettings);

      RetrySettings deleteExecutionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteExecutionSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteExecutionSettings()
          .setRetrySettings(deleteExecutionRetrySettings);

      RetrySettings createExecutionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createExecutionSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createExecutionSettings()
          .setRetrySettings(createExecutionRetrySettings);

      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);

      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);

      RetrySettings setIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.setIamPolicySettings().setRetrySettings(setIamPolicyRetrySettings);

      RetrySettings getIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getIamPolicySettings().setRetrySettings(getIamPolicyRetrySettings);

      RetrySettings testIamPermissionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .testIamPermissionsSettings()
          .setRetrySettings(testIamPermissionsRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry listInstancesRetry = clientProperties.getListInstancesRetry();
    if (listInstancesRetry != null) {
      RetrySettings listInstancesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listInstancesSettings().getRetrySettings(), listInstancesRetry);
      clientSettingsBuilder.listInstancesSettings().setRetrySettings(listInstancesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listInstances from properties.");
      }
    }
    Retry getInstanceRetry = clientProperties.getGetInstanceRetry();
    if (getInstanceRetry != null) {
      RetrySettings getInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getInstanceSettings().getRetrySettings(), getInstanceRetry);
      clientSettingsBuilder.getInstanceSettings().setRetrySettings(getInstanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getInstance from properties.");
      }
    }
    Retry createInstanceRetry = clientProperties.getCreateInstanceRetry();
    if (createInstanceRetry != null) {
      RetrySettings createInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createInstanceSettings().getRetrySettings(),
              createInstanceRetry);
      clientSettingsBuilder.createInstanceSettings().setRetrySettings(createInstanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createInstance from properties.");
      }
    }
    Retry registerInstanceRetry = clientProperties.getRegisterInstanceRetry();
    if (registerInstanceRetry != null) {
      RetrySettings registerInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.registerInstanceSettings().getRetrySettings(),
              registerInstanceRetry);
      clientSettingsBuilder
          .registerInstanceSettings()
          .setRetrySettings(registerInstanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for registerInstance from properties.");
      }
    }
    Retry setInstanceAcceleratorRetry = clientProperties.getSetInstanceAcceleratorRetry();
    if (setInstanceAcceleratorRetry != null) {
      RetrySettings setInstanceAcceleratorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setInstanceAcceleratorSettings().getRetrySettings(),
              setInstanceAcceleratorRetry);
      clientSettingsBuilder
          .setInstanceAcceleratorSettings()
          .setRetrySettings(setInstanceAcceleratorRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for setInstanceAccelerator from properties.");
      }
    }
    Retry setInstanceMachineTypeRetry = clientProperties.getSetInstanceMachineTypeRetry();
    if (setInstanceMachineTypeRetry != null) {
      RetrySettings setInstanceMachineTypeRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setInstanceMachineTypeSettings().getRetrySettings(),
              setInstanceMachineTypeRetry);
      clientSettingsBuilder
          .setInstanceMachineTypeSettings()
          .setRetrySettings(setInstanceMachineTypeRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for setInstanceMachineType from properties.");
      }
    }
    Retry updateInstanceConfigRetry = clientProperties.getUpdateInstanceConfigRetry();
    if (updateInstanceConfigRetry != null) {
      RetrySettings updateInstanceConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateInstanceConfigSettings().getRetrySettings(),
              updateInstanceConfigRetry);
      clientSettingsBuilder
          .updateInstanceConfigSettings()
          .setRetrySettings(updateInstanceConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateInstanceConfig from properties.");
      }
    }
    Retry updateShieldedInstanceConfigRetry =
        clientProperties.getUpdateShieldedInstanceConfigRetry();
    if (updateShieldedInstanceConfigRetry != null) {
      RetrySettings updateShieldedInstanceConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateShieldedInstanceConfigSettings().getRetrySettings(),
              updateShieldedInstanceConfigRetry);
      clientSettingsBuilder
          .updateShieldedInstanceConfigSettings()
          .setRetrySettings(updateShieldedInstanceConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateShieldedInstanceConfig from properties.");
      }
    }
    Retry setInstanceLabelsRetry = clientProperties.getSetInstanceLabelsRetry();
    if (setInstanceLabelsRetry != null) {
      RetrySettings setInstanceLabelsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setInstanceLabelsSettings().getRetrySettings(),
              setInstanceLabelsRetry);
      clientSettingsBuilder
          .setInstanceLabelsSettings()
          .setRetrySettings(setInstanceLabelsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for setInstanceLabels from properties.");
      }
    }
    Retry updateInstanceMetadataItemsRetry = clientProperties.getUpdateInstanceMetadataItemsRetry();
    if (updateInstanceMetadataItemsRetry != null) {
      RetrySettings updateInstanceMetadataItemsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateInstanceMetadataItemsSettings().getRetrySettings(),
              updateInstanceMetadataItemsRetry);
      clientSettingsBuilder
          .updateInstanceMetadataItemsSettings()
          .setRetrySettings(updateInstanceMetadataItemsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateInstanceMetadataItems from properties.");
      }
    }
    Retry deleteInstanceRetry = clientProperties.getDeleteInstanceRetry();
    if (deleteInstanceRetry != null) {
      RetrySettings deleteInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteInstanceSettings().getRetrySettings(),
              deleteInstanceRetry);
      clientSettingsBuilder.deleteInstanceSettings().setRetrySettings(deleteInstanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteInstance from properties.");
      }
    }
    Retry startInstanceRetry = clientProperties.getStartInstanceRetry();
    if (startInstanceRetry != null) {
      RetrySettings startInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.startInstanceSettings().getRetrySettings(), startInstanceRetry);
      clientSettingsBuilder.startInstanceSettings().setRetrySettings(startInstanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for startInstance from properties.");
      }
    }
    Retry stopInstanceRetry = clientProperties.getStopInstanceRetry();
    if (stopInstanceRetry != null) {
      RetrySettings stopInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.stopInstanceSettings().getRetrySettings(), stopInstanceRetry);
      clientSettingsBuilder.stopInstanceSettings().setRetrySettings(stopInstanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for stopInstance from properties.");
      }
    }
    Retry resetInstanceRetry = clientProperties.getResetInstanceRetry();
    if (resetInstanceRetry != null) {
      RetrySettings resetInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.resetInstanceSettings().getRetrySettings(), resetInstanceRetry);
      clientSettingsBuilder.resetInstanceSettings().setRetrySettings(resetInstanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for resetInstance from properties.");
      }
    }
    Retry reportInstanceInfoRetry = clientProperties.getReportInstanceInfoRetry();
    if (reportInstanceInfoRetry != null) {
      RetrySettings reportInstanceInfoRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.reportInstanceInfoSettings().getRetrySettings(),
              reportInstanceInfoRetry);
      clientSettingsBuilder
          .reportInstanceInfoSettings()
          .setRetrySettings(reportInstanceInfoRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for reportInstanceInfo from properties.");
      }
    }
    Retry isInstanceUpgradeableRetry = clientProperties.getIsInstanceUpgradeableRetry();
    if (isInstanceUpgradeableRetry != null) {
      RetrySettings isInstanceUpgradeableRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.isInstanceUpgradeableSettings().getRetrySettings(),
              isInstanceUpgradeableRetry);
      clientSettingsBuilder
          .isInstanceUpgradeableSettings()
          .setRetrySettings(isInstanceUpgradeableRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for isInstanceUpgradeable from properties.");
      }
    }
    Retry getInstanceHealthRetry = clientProperties.getGetInstanceHealthRetry();
    if (getInstanceHealthRetry != null) {
      RetrySettings getInstanceHealthRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getInstanceHealthSettings().getRetrySettings(),
              getInstanceHealthRetry);
      clientSettingsBuilder
          .getInstanceHealthSettings()
          .setRetrySettings(getInstanceHealthRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getInstanceHealth from properties.");
      }
    }
    Retry upgradeInstanceRetry = clientProperties.getUpgradeInstanceRetry();
    if (upgradeInstanceRetry != null) {
      RetrySettings upgradeInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.upgradeInstanceSettings().getRetrySettings(),
              upgradeInstanceRetry);
      clientSettingsBuilder
          .upgradeInstanceSettings()
          .setRetrySettings(upgradeInstanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for upgradeInstance from properties.");
      }
    }
    Retry rollbackInstanceRetry = clientProperties.getRollbackInstanceRetry();
    if (rollbackInstanceRetry != null) {
      RetrySettings rollbackInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.rollbackInstanceSettings().getRetrySettings(),
              rollbackInstanceRetry);
      clientSettingsBuilder
          .rollbackInstanceSettings()
          .setRetrySettings(rollbackInstanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for rollbackInstance from properties.");
      }
    }
    Retry diagnoseInstanceRetry = clientProperties.getDiagnoseInstanceRetry();
    if (diagnoseInstanceRetry != null) {
      RetrySettings diagnoseInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.diagnoseInstanceSettings().getRetrySettings(),
              diagnoseInstanceRetry);
      clientSettingsBuilder
          .diagnoseInstanceSettings()
          .setRetrySettings(diagnoseInstanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for diagnoseInstance from properties.");
      }
    }
    Retry upgradeInstanceInternalRetry = clientProperties.getUpgradeInstanceInternalRetry();
    if (upgradeInstanceInternalRetry != null) {
      RetrySettings upgradeInstanceInternalRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.upgradeInstanceInternalSettings().getRetrySettings(),
              upgradeInstanceInternalRetry);
      clientSettingsBuilder
          .upgradeInstanceInternalSettings()
          .setRetrySettings(upgradeInstanceInternalRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for upgradeInstanceInternal from properties.");
      }
    }
    Retry listEnvironmentsRetry = clientProperties.getListEnvironmentsRetry();
    if (listEnvironmentsRetry != null) {
      RetrySettings listEnvironmentsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listEnvironmentsSettings().getRetrySettings(),
              listEnvironmentsRetry);
      clientSettingsBuilder
          .listEnvironmentsSettings()
          .setRetrySettings(listEnvironmentsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listEnvironments from properties.");
      }
    }
    Retry getEnvironmentRetry = clientProperties.getGetEnvironmentRetry();
    if (getEnvironmentRetry != null) {
      RetrySettings getEnvironmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getEnvironmentSettings().getRetrySettings(),
              getEnvironmentRetry);
      clientSettingsBuilder.getEnvironmentSettings().setRetrySettings(getEnvironmentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getEnvironment from properties.");
      }
    }
    Retry createEnvironmentRetry = clientProperties.getCreateEnvironmentRetry();
    if (createEnvironmentRetry != null) {
      RetrySettings createEnvironmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createEnvironmentSettings().getRetrySettings(),
              createEnvironmentRetry);
      clientSettingsBuilder
          .createEnvironmentSettings()
          .setRetrySettings(createEnvironmentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createEnvironment from properties.");
      }
    }
    Retry deleteEnvironmentRetry = clientProperties.getDeleteEnvironmentRetry();
    if (deleteEnvironmentRetry != null) {
      RetrySettings deleteEnvironmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteEnvironmentSettings().getRetrySettings(),
              deleteEnvironmentRetry);
      clientSettingsBuilder
          .deleteEnvironmentSettings()
          .setRetrySettings(deleteEnvironmentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteEnvironment from properties.");
      }
    }
    Retry listSchedulesRetry = clientProperties.getListSchedulesRetry();
    if (listSchedulesRetry != null) {
      RetrySettings listSchedulesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listSchedulesSettings().getRetrySettings(), listSchedulesRetry);
      clientSettingsBuilder.listSchedulesSettings().setRetrySettings(listSchedulesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listSchedules from properties.");
      }
    }
    Retry getScheduleRetry = clientProperties.getGetScheduleRetry();
    if (getScheduleRetry != null) {
      RetrySettings getScheduleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getScheduleSettings().getRetrySettings(), getScheduleRetry);
      clientSettingsBuilder.getScheduleSettings().setRetrySettings(getScheduleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getSchedule from properties.");
      }
    }
    Retry deleteScheduleRetry = clientProperties.getDeleteScheduleRetry();
    if (deleteScheduleRetry != null) {
      RetrySettings deleteScheduleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteScheduleSettings().getRetrySettings(),
              deleteScheduleRetry);
      clientSettingsBuilder.deleteScheduleSettings().setRetrySettings(deleteScheduleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteSchedule from properties.");
      }
    }
    Retry createScheduleRetry = clientProperties.getCreateScheduleRetry();
    if (createScheduleRetry != null) {
      RetrySettings createScheduleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createScheduleSettings().getRetrySettings(),
              createScheduleRetry);
      clientSettingsBuilder.createScheduleSettings().setRetrySettings(createScheduleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createSchedule from properties.");
      }
    }
    Retry triggerScheduleRetry = clientProperties.getTriggerScheduleRetry();
    if (triggerScheduleRetry != null) {
      RetrySettings triggerScheduleRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.triggerScheduleSettings().getRetrySettings(),
              triggerScheduleRetry);
      clientSettingsBuilder
          .triggerScheduleSettings()
          .setRetrySettings(triggerScheduleRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for triggerSchedule from properties.");
      }
    }
    Retry listExecutionsRetry = clientProperties.getListExecutionsRetry();
    if (listExecutionsRetry != null) {
      RetrySettings listExecutionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listExecutionsSettings().getRetrySettings(),
              listExecutionsRetry);
      clientSettingsBuilder.listExecutionsSettings().setRetrySettings(listExecutionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listExecutions from properties.");
      }
    }
    Retry getExecutionRetry = clientProperties.getGetExecutionRetry();
    if (getExecutionRetry != null) {
      RetrySettings getExecutionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getExecutionSettings().getRetrySettings(), getExecutionRetry);
      clientSettingsBuilder.getExecutionSettings().setRetrySettings(getExecutionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getExecution from properties.");
      }
    }
    Retry deleteExecutionRetry = clientProperties.getDeleteExecutionRetry();
    if (deleteExecutionRetry != null) {
      RetrySettings deleteExecutionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteExecutionSettings().getRetrySettings(),
              deleteExecutionRetry);
      clientSettingsBuilder
          .deleteExecutionSettings()
          .setRetrySettings(deleteExecutionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteExecution from properties.");
      }
    }
    Retry createExecutionRetry = clientProperties.getCreateExecutionRetry();
    if (createExecutionRetry != null) {
      RetrySettings createExecutionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createExecutionSettings().getRetrySettings(),
              createExecutionRetry);
      clientSettingsBuilder
          .createExecutionSettings()
          .setRetrySettings(createExecutionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createExecution from properties.");
      }
    }
    Retry listLocationsRetry = clientProperties.getListLocationsRetry();
    if (listLocationsRetry != null) {
      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), listLocationsRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listLocations from properties.");
      }
    }
    Retry getLocationRetry = clientProperties.getGetLocationRetry();
    if (getLocationRetry != null) {
      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), getLocationRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getLocation from properties.");
      }
    }
    Retry setIamPolicyRetry = clientProperties.getSetIamPolicyRetry();
    if (setIamPolicyRetry != null) {
      RetrySettings setIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicySettings().getRetrySettings(), setIamPolicyRetry);
      clientSettingsBuilder.setIamPolicySettings().setRetrySettings(setIamPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for setIamPolicy from properties.");
      }
    }
    Retry getIamPolicyRetry = clientProperties.getGetIamPolicyRetry();
    if (getIamPolicyRetry != null) {
      RetrySettings getIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicySettings().getRetrySettings(), getIamPolicyRetry);
      clientSettingsBuilder.getIamPolicySettings().setRetrySettings(getIamPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getIamPolicy from properties.");
      }
    }
    Retry testIamPermissionsRetry = clientProperties.getTestIamPermissionsRetry();
    if (testIamPermissionsRetry != null) {
      RetrySettings testIamPermissionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings(),
              testIamPermissionsRetry);
      clientSettingsBuilder
          .testIamPermissionsSettings()
          .setRetrySettings(testIamPermissionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for testIamPermissions from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public NotebookServiceClient notebookServiceClient(
      NotebookServiceSettings notebookServiceSettings) throws IOException {
    return NotebookServiceClient.create(notebookServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-notebook-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
