/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.notebooks.v1.spring;

import com.google.api.core.BetaApi;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.CredentialsSupplier;
import com.google.cloud.spring.core.Retry;
import javax.annotation.Generated;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.NestedConfigurationProperty;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/** Provides default property values for ManagedNotebookService client bean */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@ConfigurationProperties("com.google.cloud.notebooks.v1.spring.auto.managed-notebook-service")
public class ManagedNotebookServiceSpringProperties implements CredentialsSupplier {
  /** OAuth2 credentials to authenticate and authorize calls to Google Cloud Client Libraries. */
  @NestedConfigurationProperty
  private final Credentials credentials =
      new Credentials("https://www.googleapis.com/auth/cloud-platform");
  /** Quota project to use for billing. */
  private String quotaProjectId;
  /** Number of threads used for executors. */
  private Integer executorThreadCount;
  /** Allow override of retry settings at service level, applying to all of its RPC methods. */
  @NestedConfigurationProperty private Retry retry;
  /**
   * Allow override of retry settings at method-level for listRuntimes. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry listRuntimesRetry;
  /**
   * Allow override of retry settings at method-level for getRuntime. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry getRuntimeRetry;
  /**
   * Allow override of retry settings at method-level for createRuntime. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry createRuntimeRetry;
  /**
   * Allow override of retry settings at method-level for updateRuntime. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry updateRuntimeRetry;
  /**
   * Allow override of retry settings at method-level for deleteRuntime. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry deleteRuntimeRetry;
  /**
   * Allow override of retry settings at method-level for startRuntime. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry startRuntimeRetry;
  /**
   * Allow override of retry settings at method-level for stopRuntime. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry stopRuntimeRetry;
  /**
   * Allow override of retry settings at method-level for switchRuntime. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry switchRuntimeRetry;
  /**
   * Allow override of retry settings at method-level for resetRuntime. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry resetRuntimeRetry;
  /**
   * Allow override of retry settings at method-level for upgradeRuntime. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry upgradeRuntimeRetry;
  /**
   * Allow override of retry settings at method-level for reportRuntimeEvent. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry reportRuntimeEventRetry;
  /**
   * Allow override of retry settings at method-level for refreshRuntimeTokenInternal. If defined,
   * this takes precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry refreshRuntimeTokenInternalRetry;
  /**
   * Allow override of retry settings at method-level for diagnoseRuntime. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry diagnoseRuntimeRetry;
  /**
   * Allow override of retry settings at method-level for listLocations. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry listLocationsRetry;
  /**
   * Allow override of retry settings at method-level for getLocation. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry getLocationRetry;
  /**
   * Allow override of retry settings at method-level for setIamPolicy. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry setIamPolicyRetry;
  /**
   * Allow override of retry settings at method-level for getIamPolicy. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry getIamPolicyRetry;
  /**
   * Allow override of retry settings at method-level for testIamPermissions. If defined, this takes
   * precedence over service-level retry configurations for that RPC method.
   */
  @NestedConfigurationProperty private Retry testIamPermissionsRetry;

  @Override
  public Credentials getCredentials() {
    return this.credentials;
  }

  public String getQuotaProjectId() {
    return this.quotaProjectId;
  }

  public void setQuotaProjectId(String quotaProjectId) {
    this.quotaProjectId = quotaProjectId;
  }

  public Integer getExecutorThreadCount() {
    return this.executorThreadCount;
  }

  public void setExecutorThreadCount(Integer executorThreadCount) {
    this.executorThreadCount = executorThreadCount;
  }

  public Retry getRetry() {
    return this.retry;
  }

  public void setRetry(Retry retry) {
    this.retry = retry;
  }

  public Retry getListRuntimesRetry() {
    return this.listRuntimesRetry;
  }

  public void setListRuntimesRetry(Retry listRuntimesRetry) {
    this.listRuntimesRetry = listRuntimesRetry;
  }

  public Retry getGetRuntimeRetry() {
    return this.getRuntimeRetry;
  }

  public void setGetRuntimeRetry(Retry getRuntimeRetry) {
    this.getRuntimeRetry = getRuntimeRetry;
  }

  public Retry getCreateRuntimeRetry() {
    return this.createRuntimeRetry;
  }

  public void setCreateRuntimeRetry(Retry createRuntimeRetry) {
    this.createRuntimeRetry = createRuntimeRetry;
  }

  public Retry getUpdateRuntimeRetry() {
    return this.updateRuntimeRetry;
  }

  public void setUpdateRuntimeRetry(Retry updateRuntimeRetry) {
    this.updateRuntimeRetry = updateRuntimeRetry;
  }

  public Retry getDeleteRuntimeRetry() {
    return this.deleteRuntimeRetry;
  }

  public void setDeleteRuntimeRetry(Retry deleteRuntimeRetry) {
    this.deleteRuntimeRetry = deleteRuntimeRetry;
  }

  public Retry getStartRuntimeRetry() {
    return this.startRuntimeRetry;
  }

  public void setStartRuntimeRetry(Retry startRuntimeRetry) {
    this.startRuntimeRetry = startRuntimeRetry;
  }

  public Retry getStopRuntimeRetry() {
    return this.stopRuntimeRetry;
  }

  public void setStopRuntimeRetry(Retry stopRuntimeRetry) {
    this.stopRuntimeRetry = stopRuntimeRetry;
  }

  public Retry getSwitchRuntimeRetry() {
    return this.switchRuntimeRetry;
  }

  public void setSwitchRuntimeRetry(Retry switchRuntimeRetry) {
    this.switchRuntimeRetry = switchRuntimeRetry;
  }

  public Retry getResetRuntimeRetry() {
    return this.resetRuntimeRetry;
  }

  public void setResetRuntimeRetry(Retry resetRuntimeRetry) {
    this.resetRuntimeRetry = resetRuntimeRetry;
  }

  public Retry getUpgradeRuntimeRetry() {
    return this.upgradeRuntimeRetry;
  }

  public void setUpgradeRuntimeRetry(Retry upgradeRuntimeRetry) {
    this.upgradeRuntimeRetry = upgradeRuntimeRetry;
  }

  public Retry getReportRuntimeEventRetry() {
    return this.reportRuntimeEventRetry;
  }

  public void setReportRuntimeEventRetry(Retry reportRuntimeEventRetry) {
    this.reportRuntimeEventRetry = reportRuntimeEventRetry;
  }

  public Retry getRefreshRuntimeTokenInternalRetry() {
    return this.refreshRuntimeTokenInternalRetry;
  }

  public void setRefreshRuntimeTokenInternalRetry(Retry refreshRuntimeTokenInternalRetry) {
    this.refreshRuntimeTokenInternalRetry = refreshRuntimeTokenInternalRetry;
  }

  public Retry getDiagnoseRuntimeRetry() {
    return this.diagnoseRuntimeRetry;
  }

  public void setDiagnoseRuntimeRetry(Retry diagnoseRuntimeRetry) {
    this.diagnoseRuntimeRetry = diagnoseRuntimeRetry;
  }

  public Retry getListLocationsRetry() {
    return this.listLocationsRetry;
  }

  public void setListLocationsRetry(Retry listLocationsRetry) {
    this.listLocationsRetry = listLocationsRetry;
  }

  public Retry getGetLocationRetry() {
    return this.getLocationRetry;
  }

  public void setGetLocationRetry(Retry getLocationRetry) {
    this.getLocationRetry = getLocationRetry;
  }

  public Retry getSetIamPolicyRetry() {
    return this.setIamPolicyRetry;
  }

  public void setSetIamPolicyRetry(Retry setIamPolicyRetry) {
    this.setIamPolicyRetry = setIamPolicyRetry;
  }

  public Retry getGetIamPolicyRetry() {
    return this.getIamPolicyRetry;
  }

  public void setGetIamPolicyRetry(Retry getIamPolicyRetry) {
    this.getIamPolicyRetry = getIamPolicyRetry;
  }

  public Retry getTestIamPermissionsRetry() {
    return this.testIamPermissionsRetry;
  }

  public void setTestIamPermissionsRetry(Retry testIamPermissionsRetry) {
    this.testIamPermissionsRetry = testIamPermissionsRetry;
  }
}
