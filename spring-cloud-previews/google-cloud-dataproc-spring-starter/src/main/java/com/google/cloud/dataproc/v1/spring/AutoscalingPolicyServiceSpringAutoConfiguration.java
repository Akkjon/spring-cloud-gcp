/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dataproc.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dataproc.v1.AutoscalingPolicyServiceClient;
import com.google.cloud.dataproc.v1.AutoscalingPolicyServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link AutoscalingPolicyServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(AutoscalingPolicyServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dataproc.v1.spring.auto.autoscaling-policy-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({
  AutoscalingPolicyServiceSpringProperties.class,
  GlobalProperties.class
})
public class AutoscalingPolicyServiceSpringAutoConfiguration {
  private final AutoscalingPolicyServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(AutoscalingPolicyServiceSpringAutoConfiguration.class);

  protected AutoscalingPolicyServiceSpringAutoConfiguration(
      AutoscalingPolicyServiceSpringProperties clientProperties,
      GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider autoscalingPolicyServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from AutoscalingPolicyService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultAutoscalingPolicyServiceTransportChannelProvider() {
    return AutoscalingPolicyServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a AutoscalingPolicyServiceClient bean configured to use the default credentials
   * provider (obtained with autoscalingPolicyServiceCredentials()) and its default transport
   * channel provider (defaultAutoscalingPolicyServiceTransportChannelProvider()). It also
   * configures the quota project ID if provided. It will configure an executor provider in case
   * there is more than one thread configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in AutoscalingPolicyServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public AutoscalingPolicyServiceSettings autoscalingPolicyServiceSettings(
      @Qualifier("autoscalingPolicyServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultAutoscalingPolicyServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    AutoscalingPolicyServiceSettings.Builder clientSettingsBuilder =
        AutoscalingPolicyServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          AutoscalingPolicyServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          AutoscalingPolicyServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createAutoscalingPolicyRetrySettingBuilder =
        clientSettingsBuilder.createAutoscalingPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateAutoscalingPolicyInitialRpcTimeout() != null) {
      createAutoscalingPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateAutoscalingPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAutoscalingPolicyInitialRpcTimeout set to "
                + this.clientProperties.getCreateAutoscalingPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateAutoscalingPolicyRpcTimeoutMultiplier() != null) {
      createAutoscalingPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateAutoscalingPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAutoscalingPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateAutoscalingPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateAutoscalingPolicyMaxRpcTimeout() != null) {
      createAutoscalingPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateAutoscalingPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAutoscalingPolicyMaxRpcTimeout set to "
                + this.clientProperties.getCreateAutoscalingPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateAutoscalingPolicyTotalTimeout() != null) {
      createAutoscalingPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateAutoscalingPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAutoscalingPolicyTotalTimeout set to "
                + this.clientProperties.getCreateAutoscalingPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createAutoscalingPolicySettings()
        .setRetrySettings(createAutoscalingPolicyRetrySettingBuilder.build());
    RetrySettings.Builder updateAutoscalingPolicyRetrySettingBuilder =
        clientSettingsBuilder.updateAutoscalingPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateAutoscalingPolicyInitialRetryDelay() != null) {
      updateAutoscalingPolicyRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateAutoscalingPolicyInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAutoscalingPolicyInitialRetryDelay set to "
                + this.clientProperties.getUpdateAutoscalingPolicyInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateAutoscalingPolicyRetryDelayMultiplier() != null) {
      updateAutoscalingPolicyRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateAutoscalingPolicyRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAutoscalingPolicyRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateAutoscalingPolicyRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateAutoscalingPolicyMaxRetryDelay() != null) {
      updateAutoscalingPolicyRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateAutoscalingPolicyMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAutoscalingPolicyMaxRetryDelay set to "
                + this.clientProperties.getUpdateAutoscalingPolicyMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateAutoscalingPolicyInitialRpcTimeout() != null) {
      updateAutoscalingPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateAutoscalingPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAutoscalingPolicyInitialRpcTimeout set to "
                + this.clientProperties.getUpdateAutoscalingPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateAutoscalingPolicyRpcTimeoutMultiplier() != null) {
      updateAutoscalingPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateAutoscalingPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAutoscalingPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateAutoscalingPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateAutoscalingPolicyMaxRpcTimeout() != null) {
      updateAutoscalingPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateAutoscalingPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAutoscalingPolicyMaxRpcTimeout set to "
                + this.clientProperties.getUpdateAutoscalingPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateAutoscalingPolicyTotalTimeout() != null) {
      updateAutoscalingPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateAutoscalingPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAutoscalingPolicyTotalTimeout set to "
                + this.clientProperties.getUpdateAutoscalingPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateAutoscalingPolicySettings()
        .setRetrySettings(updateAutoscalingPolicyRetrySettingBuilder.build());
    RetrySettings.Builder getAutoscalingPolicyRetrySettingBuilder =
        clientSettingsBuilder.getAutoscalingPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetAutoscalingPolicyInitialRetryDelay() != null) {
      getAutoscalingPolicyRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetAutoscalingPolicyInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAutoscalingPolicyInitialRetryDelay set to "
                + this.clientProperties.getGetAutoscalingPolicyInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetAutoscalingPolicyRetryDelayMultiplier() != null) {
      getAutoscalingPolicyRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetAutoscalingPolicyRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAutoscalingPolicyRetryDelayMultiplier set to "
                + this.clientProperties.getGetAutoscalingPolicyRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetAutoscalingPolicyMaxRetryDelay() != null) {
      getAutoscalingPolicyRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetAutoscalingPolicyMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAutoscalingPolicyMaxRetryDelay set to "
                + this.clientProperties.getGetAutoscalingPolicyMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetAutoscalingPolicyInitialRpcTimeout() != null) {
      getAutoscalingPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetAutoscalingPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAutoscalingPolicyInitialRpcTimeout set to "
                + this.clientProperties.getGetAutoscalingPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAutoscalingPolicyRpcTimeoutMultiplier() != null) {
      getAutoscalingPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetAutoscalingPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAutoscalingPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetAutoscalingPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetAutoscalingPolicyMaxRpcTimeout() != null) {
      getAutoscalingPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetAutoscalingPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAutoscalingPolicyMaxRpcTimeout set to "
                + this.clientProperties.getGetAutoscalingPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAutoscalingPolicyTotalTimeout() != null) {
      getAutoscalingPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetAutoscalingPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAutoscalingPolicyTotalTimeout set to "
                + this.clientProperties.getGetAutoscalingPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getAutoscalingPolicySettings()
        .setRetrySettings(getAutoscalingPolicyRetrySettingBuilder.build());
    RetrySettings.Builder listAutoscalingPoliciesRetrySettingBuilder =
        clientSettingsBuilder.listAutoscalingPoliciesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListAutoscalingPoliciesInitialRetryDelay() != null) {
      listAutoscalingPoliciesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListAutoscalingPoliciesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAutoscalingPoliciesInitialRetryDelay set to "
                + this.clientProperties.getListAutoscalingPoliciesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListAutoscalingPoliciesRetryDelayMultiplier() != null) {
      listAutoscalingPoliciesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListAutoscalingPoliciesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAutoscalingPoliciesRetryDelayMultiplier set to "
                + this.clientProperties.getListAutoscalingPoliciesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListAutoscalingPoliciesMaxRetryDelay() != null) {
      listAutoscalingPoliciesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListAutoscalingPoliciesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAutoscalingPoliciesMaxRetryDelay set to "
                + this.clientProperties.getListAutoscalingPoliciesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListAutoscalingPoliciesInitialRpcTimeout() != null) {
      listAutoscalingPoliciesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListAutoscalingPoliciesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAutoscalingPoliciesInitialRpcTimeout set to "
                + this.clientProperties.getListAutoscalingPoliciesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListAutoscalingPoliciesRpcTimeoutMultiplier() != null) {
      listAutoscalingPoliciesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListAutoscalingPoliciesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAutoscalingPoliciesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListAutoscalingPoliciesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListAutoscalingPoliciesMaxRpcTimeout() != null) {
      listAutoscalingPoliciesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListAutoscalingPoliciesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAutoscalingPoliciesMaxRpcTimeout set to "
                + this.clientProperties.getListAutoscalingPoliciesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListAutoscalingPoliciesTotalTimeout() != null) {
      listAutoscalingPoliciesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListAutoscalingPoliciesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAutoscalingPoliciesTotalTimeout set to "
                + this.clientProperties.getListAutoscalingPoliciesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listAutoscalingPoliciesSettings()
        .setRetrySettings(listAutoscalingPoliciesRetrySettingBuilder.build());
    RetrySettings.Builder deleteAutoscalingPolicyRetrySettingBuilder =
        clientSettingsBuilder.deleteAutoscalingPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteAutoscalingPolicyInitialRpcTimeout() != null) {
      deleteAutoscalingPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteAutoscalingPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAutoscalingPolicyInitialRpcTimeout set to "
                + this.clientProperties.getDeleteAutoscalingPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAutoscalingPolicyRpcTimeoutMultiplier() != null) {
      deleteAutoscalingPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteAutoscalingPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAutoscalingPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteAutoscalingPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteAutoscalingPolicyMaxRpcTimeout() != null) {
      deleteAutoscalingPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteAutoscalingPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAutoscalingPolicyMaxRpcTimeout set to "
                + this.clientProperties.getDeleteAutoscalingPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAutoscalingPolicyTotalTimeout() != null) {
      deleteAutoscalingPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteAutoscalingPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAutoscalingPolicyTotalTimeout set to "
                + this.clientProperties.getDeleteAutoscalingPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteAutoscalingPolicySettings()
        .setRetrySettings(deleteAutoscalingPolicyRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public AutoscalingPolicyServiceClient autoscalingPolicyServiceClient(
      AutoscalingPolicyServiceSettings autoscalingPolicyServiceSettings) throws IOException {
    return AutoscalingPolicyServiceClient.create(autoscalingPolicyServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-autoscaling-policy-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
