/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dataproc.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dataproc.v1.WorkflowTemplateServiceClient;
import com.google.cloud.dataproc.v1.WorkflowTemplateServiceSettings;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link WorkflowTemplateServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(WorkflowTemplateServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dataproc.v1.spring.auto.workflow-template-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(WorkflowTemplateServiceSpringProperties.class)
public class WorkflowTemplateServiceSpringAutoConfiguration {
  private final WorkflowTemplateServiceSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER =
      LogFactory.getLog(WorkflowTemplateServiceSpringAutoConfiguration.class);

  protected WorkflowTemplateServiceSpringAutoConfiguration(
      WorkflowTemplateServiceSpringProperties clientProperties,
      CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from WorkflowTemplateService-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultWorkflowTemplateServiceTransportChannelProvider() {
    return WorkflowTemplateServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a WorkflowTemplateServiceClient bean configured to use the default credentials
   * provider (obtained with workflowTemplateServiceCredentials()) and its default transport channel
   * provider (defaultWorkflowTemplateServiceTransportChannelProvider()). It also configures the
   * quota project ID if provided. It will configure an executor provider in case there is more than
   * one thread configured in the client
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in WorkflowTemplateServiceSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   */
  @Bean
  @ConditionalOnMissingBean
  public WorkflowTemplateServiceSettings workflowTemplateServiceSettings(
      @Qualifier("defaultWorkflowTemplateServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    WorkflowTemplateServiceSettings.Builder clientSettingsBuilder =
        WorkflowTemplateServiceSettings.newBuilder()
            .setCredentialsProvider(this.credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          WorkflowTemplateServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          WorkflowTemplateServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings createWorkflowTemplateRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createWorkflowTemplateSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createWorkflowTemplateSettings()
          .setRetrySettings(createWorkflowTemplateRetrySettings);

      RetrySettings getWorkflowTemplateRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getWorkflowTemplateSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getWorkflowTemplateSettings()
          .setRetrySettings(getWorkflowTemplateRetrySettings);

      RetrySettings instantiateWorkflowTemplateRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.instantiateWorkflowTemplateSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .instantiateWorkflowTemplateSettings()
          .setRetrySettings(instantiateWorkflowTemplateRetrySettings);

      RetrySettings instantiateInlineWorkflowTemplateRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.instantiateInlineWorkflowTemplateSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .instantiateInlineWorkflowTemplateSettings()
          .setRetrySettings(instantiateInlineWorkflowTemplateRetrySettings);

      RetrySettings updateWorkflowTemplateRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateWorkflowTemplateSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateWorkflowTemplateSettings()
          .setRetrySettings(updateWorkflowTemplateRetrySettings);

      RetrySettings listWorkflowTemplatesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listWorkflowTemplatesSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listWorkflowTemplatesSettings()
          .setRetrySettings(listWorkflowTemplatesRetrySettings);

      RetrySettings deleteWorkflowTemplateRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteWorkflowTemplateSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteWorkflowTemplateSettings()
          .setRetrySettings(deleteWorkflowTemplateRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry createWorkflowTemplateRetry = clientProperties.getCreateWorkflowTemplateRetry();
    if (createWorkflowTemplateRetry != null) {
      RetrySettings createWorkflowTemplateRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createWorkflowTemplateSettings().getRetrySettings(),
              createWorkflowTemplateRetry);
      clientSettingsBuilder
          .createWorkflowTemplateSettings()
          .setRetrySettings(createWorkflowTemplateRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createWorkflowTemplate from properties.");
      }
    }
    Retry getWorkflowTemplateRetry = clientProperties.getGetWorkflowTemplateRetry();
    if (getWorkflowTemplateRetry != null) {
      RetrySettings getWorkflowTemplateRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getWorkflowTemplateSettings().getRetrySettings(),
              getWorkflowTemplateRetry);
      clientSettingsBuilder
          .getWorkflowTemplateSettings()
          .setRetrySettings(getWorkflowTemplateRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getWorkflowTemplate from properties.");
      }
    }
    Retry instantiateWorkflowTemplateRetry = clientProperties.getInstantiateWorkflowTemplateRetry();
    if (instantiateWorkflowTemplateRetry != null) {
      RetrySettings instantiateWorkflowTemplateRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.instantiateWorkflowTemplateSettings().getRetrySettings(),
              instantiateWorkflowTemplateRetry);
      clientSettingsBuilder
          .instantiateWorkflowTemplateSettings()
          .setRetrySettings(instantiateWorkflowTemplateRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for instantiateWorkflowTemplate from properties.");
      }
    }
    Retry instantiateInlineWorkflowTemplateRetry =
        clientProperties.getInstantiateInlineWorkflowTemplateRetry();
    if (instantiateInlineWorkflowTemplateRetry != null) {
      RetrySettings instantiateInlineWorkflowTemplateRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.instantiateInlineWorkflowTemplateSettings().getRetrySettings(),
              instantiateInlineWorkflowTemplateRetry);
      clientSettingsBuilder
          .instantiateInlineWorkflowTemplateSettings()
          .setRetrySettings(instantiateInlineWorkflowTemplateRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for instantiateInlineWorkflowTemplate from properties.");
      }
    }
    Retry updateWorkflowTemplateRetry = clientProperties.getUpdateWorkflowTemplateRetry();
    if (updateWorkflowTemplateRetry != null) {
      RetrySettings updateWorkflowTemplateRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateWorkflowTemplateSettings().getRetrySettings(),
              updateWorkflowTemplateRetry);
      clientSettingsBuilder
          .updateWorkflowTemplateSettings()
          .setRetrySettings(updateWorkflowTemplateRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateWorkflowTemplate from properties.");
      }
    }
    Retry listWorkflowTemplatesRetry = clientProperties.getListWorkflowTemplatesRetry();
    if (listWorkflowTemplatesRetry != null) {
      RetrySettings listWorkflowTemplatesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listWorkflowTemplatesSettings().getRetrySettings(),
              listWorkflowTemplatesRetry);
      clientSettingsBuilder
          .listWorkflowTemplatesSettings()
          .setRetrySettings(listWorkflowTemplatesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listWorkflowTemplates from properties.");
      }
    }
    Retry deleteWorkflowTemplateRetry = clientProperties.getDeleteWorkflowTemplateRetry();
    if (deleteWorkflowTemplateRetry != null) {
      RetrySettings deleteWorkflowTemplateRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteWorkflowTemplateSettings().getRetrySettings(),
              deleteWorkflowTemplateRetry);
      clientSettingsBuilder
          .deleteWorkflowTemplateSettings()
          .setRetrySettings(deleteWorkflowTemplateRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteWorkflowTemplate from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public WorkflowTemplateServiceClient workflowTemplateServiceClient(
      WorkflowTemplateServiceSettings workflowTemplateServiceSettings) throws IOException {
    return WorkflowTemplateServiceClient.create(workflowTemplateServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-workflow-template-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
