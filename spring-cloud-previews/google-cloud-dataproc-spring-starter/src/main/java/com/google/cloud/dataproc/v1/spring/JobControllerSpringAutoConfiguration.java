/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dataproc.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dataproc.v1.JobControllerClient;
import com.google.cloud.dataproc.v1.JobControllerSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link JobControllerClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(JobControllerClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dataproc.v1.spring.auto.job-controller.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({JobControllerSpringProperties.class, GlobalProperties.class})
public class JobControllerSpringAutoConfiguration {
  private final JobControllerSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(JobControllerSpringAutoConfiguration.class);

  protected JobControllerSpringAutoConfiguration(
      JobControllerSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider jobControllerCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from JobController-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultJobControllerTransportChannelProvider() {
    return JobControllerSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a JobControllerClient bean configured to use the default credentials provider
   * (obtained with jobControllerCredentials()) and its default transport channel provider
   * (defaultJobControllerTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in JobControllerSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public JobControllerSettings jobControllerSettings(
      @Qualifier("jobControllerCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultJobControllerTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    JobControllerSettings.Builder clientSettingsBuilder =
        JobControllerSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          JobControllerSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          JobControllerSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder submitJobRetrySettingBuilder =
        clientSettingsBuilder.submitJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSubmitJobInitialRetryDelay() != null) {
      submitJobRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getSubmitJobInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SubmitJobInitialRetryDelay set to "
                + this.clientProperties.getSubmitJobInitialRetryDelay());
      }
    }
    if (this.clientProperties.getSubmitJobRetryDelayMultiplier() != null) {
      submitJobRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getSubmitJobRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SubmitJobRetryDelayMultiplier set to "
                + this.clientProperties.getSubmitJobRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getSubmitJobMaxRetryDelay() != null) {
      submitJobRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getSubmitJobMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SubmitJobMaxRetryDelay set to " + this.clientProperties.getSubmitJobMaxRetryDelay());
      }
    }
    if (this.clientProperties.getSubmitJobInitialRpcTimeout() != null) {
      submitJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSubmitJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SubmitJobInitialRpcTimeout set to "
                + this.clientProperties.getSubmitJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSubmitJobRpcTimeoutMultiplier() != null) {
      submitJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSubmitJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SubmitJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getSubmitJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSubmitJobMaxRpcTimeout() != null) {
      submitJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSubmitJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SubmitJobMaxRpcTimeout set to " + this.clientProperties.getSubmitJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSubmitJobTotalTimeout() != null) {
      submitJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSubmitJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SubmitJobTotalTimeout set to " + this.clientProperties.getSubmitJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .submitJobSettings()
        .setRetrySettings(submitJobRetrySettingBuilder.build());
    RetrySettings.Builder submitJobAsOperationRetrySettingBuilder =
        clientSettingsBuilder.submitJobAsOperationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSubmitJobAsOperationInitialRetryDelay() != null) {
      submitJobAsOperationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getSubmitJobAsOperationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SubmitJobAsOperationInitialRetryDelay set to "
                + this.clientProperties.getSubmitJobAsOperationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getSubmitJobAsOperationRetryDelayMultiplier() != null) {
      submitJobAsOperationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getSubmitJobAsOperationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SubmitJobAsOperationRetryDelayMultiplier set to "
                + this.clientProperties.getSubmitJobAsOperationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getSubmitJobAsOperationMaxRetryDelay() != null) {
      submitJobAsOperationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getSubmitJobAsOperationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SubmitJobAsOperationMaxRetryDelay set to "
                + this.clientProperties.getSubmitJobAsOperationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getSubmitJobAsOperationInitialRpcTimeout() != null) {
      submitJobAsOperationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSubmitJobAsOperationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SubmitJobAsOperationInitialRpcTimeout set to "
                + this.clientProperties.getSubmitJobAsOperationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSubmitJobAsOperationRpcTimeoutMultiplier() != null) {
      submitJobAsOperationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSubmitJobAsOperationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SubmitJobAsOperationRpcTimeoutMultiplier set to "
                + this.clientProperties.getSubmitJobAsOperationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSubmitJobAsOperationMaxRpcTimeout() != null) {
      submitJobAsOperationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSubmitJobAsOperationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SubmitJobAsOperationMaxRpcTimeout set to "
                + this.clientProperties.getSubmitJobAsOperationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSubmitJobAsOperationTotalTimeout() != null) {
      submitJobAsOperationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSubmitJobAsOperationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SubmitJobAsOperationTotalTimeout set to "
                + this.clientProperties.getSubmitJobAsOperationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .submitJobAsOperationSettings()
        .setRetrySettings(submitJobAsOperationRetrySettingBuilder.build());
    RetrySettings.Builder getJobRetrySettingBuilder =
        clientSettingsBuilder.getJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetJobInitialRetryDelay() != null) {
      getJobRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetJobInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobInitialRetryDelay set to " + this.clientProperties.getGetJobInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetJobRetryDelayMultiplier() != null) {
      getJobRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetJobRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobRetryDelayMultiplier set to "
                + this.clientProperties.getGetJobRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetJobMaxRetryDelay() != null) {
      getJobRetrySettingBuilder.setMaxRetryDelay(this.clientProperties.getGetJobMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobMaxRetryDelay set to " + this.clientProperties.getGetJobMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetJobInitialRpcTimeout() != null) {
      getJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobInitialRpcTimeout set to " + this.clientProperties.getGetJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetJobRpcTimeoutMultiplier() != null) {
      getJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetJobMaxRpcTimeout() != null) {
      getJobRetrySettingBuilder.setMaxRpcTimeout(this.clientProperties.getGetJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobMaxRpcTimeout set to " + this.clientProperties.getGetJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetJobTotalTimeout() != null) {
      getJobRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("GetJobTotalTimeout set to " + this.clientProperties.getGetJobTotalTimeout());
      }
    }
    clientSettingsBuilder.getJobSettings().setRetrySettings(getJobRetrySettingBuilder.build());
    RetrySettings.Builder listJobsRetrySettingBuilder =
        clientSettingsBuilder.listJobsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListJobsInitialRetryDelay() != null) {
      listJobsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListJobsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobsInitialRetryDelay set to "
                + this.clientProperties.getListJobsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListJobsRetryDelayMultiplier() != null) {
      listJobsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListJobsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobsRetryDelayMultiplier set to "
                + this.clientProperties.getListJobsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListJobsMaxRetryDelay() != null) {
      listJobsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListJobsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobsMaxRetryDelay set to " + this.clientProperties.getListJobsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListJobsInitialRpcTimeout() != null) {
      listJobsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListJobsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobsInitialRpcTimeout set to "
                + this.clientProperties.getListJobsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListJobsRpcTimeoutMultiplier() != null) {
      listJobsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListJobsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListJobsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListJobsMaxRpcTimeout() != null) {
      listJobsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListJobsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobsMaxRpcTimeout set to " + this.clientProperties.getListJobsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListJobsTotalTimeout() != null) {
      listJobsRetrySettingBuilder.setTotalTimeout(this.clientProperties.getListJobsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobsTotalTimeout set to " + this.clientProperties.getListJobsTotalTimeout());
      }
    }
    clientSettingsBuilder.listJobsSettings().setRetrySettings(listJobsRetrySettingBuilder.build());
    RetrySettings.Builder updateJobRetrySettingBuilder =
        clientSettingsBuilder.updateJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateJobInitialRetryDelay() != null) {
      updateJobRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateJobInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateJobInitialRetryDelay set to "
                + this.clientProperties.getUpdateJobInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateJobRetryDelayMultiplier() != null) {
      updateJobRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateJobRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateJobRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateJobRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateJobMaxRetryDelay() != null) {
      updateJobRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateJobMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateJobMaxRetryDelay set to " + this.clientProperties.getUpdateJobMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateJobInitialRpcTimeout() != null) {
      updateJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateJobInitialRpcTimeout set to "
                + this.clientProperties.getUpdateJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateJobRpcTimeoutMultiplier() != null) {
      updateJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateJobMaxRpcTimeout() != null) {
      updateJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateJobMaxRpcTimeout set to " + this.clientProperties.getUpdateJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateJobTotalTimeout() != null) {
      updateJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateJobTotalTimeout set to " + this.clientProperties.getUpdateJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateJobSettings()
        .setRetrySettings(updateJobRetrySettingBuilder.build());
    RetrySettings.Builder cancelJobRetrySettingBuilder =
        clientSettingsBuilder.cancelJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCancelJobInitialRetryDelay() != null) {
      cancelJobRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCancelJobInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelJobInitialRetryDelay set to "
                + this.clientProperties.getCancelJobInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCancelJobRetryDelayMultiplier() != null) {
      cancelJobRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCancelJobRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelJobRetryDelayMultiplier set to "
                + this.clientProperties.getCancelJobRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCancelJobMaxRetryDelay() != null) {
      cancelJobRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCancelJobMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelJobMaxRetryDelay set to " + this.clientProperties.getCancelJobMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCancelJobInitialRpcTimeout() != null) {
      cancelJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCancelJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelJobInitialRpcTimeout set to "
                + this.clientProperties.getCancelJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCancelJobRpcTimeoutMultiplier() != null) {
      cancelJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCancelJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getCancelJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCancelJobMaxRpcTimeout() != null) {
      cancelJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCancelJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelJobMaxRpcTimeout set to " + this.clientProperties.getCancelJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCancelJobTotalTimeout() != null) {
      cancelJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCancelJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelJobTotalTimeout set to " + this.clientProperties.getCancelJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .cancelJobSettings()
        .setRetrySettings(cancelJobRetrySettingBuilder.build());
    RetrySettings.Builder deleteJobRetrySettingBuilder =
        clientSettingsBuilder.deleteJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteJobInitialRetryDelay() != null) {
      deleteJobRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteJobInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobInitialRetryDelay set to "
                + this.clientProperties.getDeleteJobInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteJobRetryDelayMultiplier() != null) {
      deleteJobRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteJobRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteJobRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteJobMaxRetryDelay() != null) {
      deleteJobRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteJobMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobMaxRetryDelay set to " + this.clientProperties.getDeleteJobMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteJobInitialRpcTimeout() != null) {
      deleteJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobInitialRpcTimeout set to "
                + this.clientProperties.getDeleteJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteJobRpcTimeoutMultiplier() != null) {
      deleteJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteJobMaxRpcTimeout() != null) {
      deleteJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobMaxRpcTimeout set to " + this.clientProperties.getDeleteJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteJobTotalTimeout() != null) {
      deleteJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobTotalTimeout set to " + this.clientProperties.getDeleteJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteJobSettings()
        .setRetrySettings(deleteJobRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public JobControllerClient jobControllerClient(JobControllerSettings jobControllerSettings)
      throws IOException {
    return JobControllerClient.create(jobControllerSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-job-controller";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
