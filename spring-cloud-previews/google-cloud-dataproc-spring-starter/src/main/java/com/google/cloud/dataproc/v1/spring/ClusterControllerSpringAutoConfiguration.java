/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dataproc.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dataproc.v1.ClusterControllerClient;
import com.google.cloud.dataproc.v1.ClusterControllerSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ClusterControllerClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ClusterControllerClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dataproc.v1.spring.auto.cluster-controller.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({ClusterControllerSpringProperties.class, GlobalProperties.class})
public class ClusterControllerSpringAutoConfiguration {
  private final ClusterControllerSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(ClusterControllerSpringAutoConfiguration.class);

  protected ClusterControllerSpringAutoConfiguration(
      ClusterControllerSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider clusterControllerCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from ClusterController-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultClusterControllerTransportChannelProvider() {
    return ClusterControllerSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ClusterControllerClient bean configured to use the default credentials provider
   * (obtained with clusterControllerCredentials()) and its default transport channel provider
   * (defaultClusterControllerTransportChannelProvider()). It also configures the quota project ID
   * if provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in ClusterControllerSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public ClusterControllerSettings clusterControllerSettings(
      @Qualifier("clusterControllerCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultClusterControllerTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ClusterControllerSettings.Builder clientSettingsBuilder =
        ClusterControllerSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ClusterControllerSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          ClusterControllerSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createClusterRetrySettingBuilder =
        clientSettingsBuilder.createClusterSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateClusterInitialRetryDelay() != null) {
      createClusterRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateClusterInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateClusterInitialRetryDelay set to "
                + this.clientProperties.getCreateClusterInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateClusterRetryDelayMultiplier() != null) {
      createClusterRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateClusterRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateClusterRetryDelayMultiplier set to "
                + this.clientProperties.getCreateClusterRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateClusterMaxRetryDelay() != null) {
      createClusterRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateClusterMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateClusterMaxRetryDelay set to "
                + this.clientProperties.getCreateClusterMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateClusterInitialRpcTimeout() != null) {
      createClusterRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateClusterInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateClusterInitialRpcTimeout set to "
                + this.clientProperties.getCreateClusterInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateClusterRpcTimeoutMultiplier() != null) {
      createClusterRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateClusterRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateClusterRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateClusterRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateClusterMaxRpcTimeout() != null) {
      createClusterRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateClusterMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateClusterMaxRpcTimeout set to "
                + this.clientProperties.getCreateClusterMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateClusterTotalTimeout() != null) {
      createClusterRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateClusterTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateClusterTotalTimeout set to "
                + this.clientProperties.getCreateClusterTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createClusterSettings()
        .setRetrySettings(createClusterRetrySettingBuilder.build());
    RetrySettings.Builder updateClusterRetrySettingBuilder =
        clientSettingsBuilder.updateClusterSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateClusterInitialRetryDelay() != null) {
      updateClusterRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateClusterInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateClusterInitialRetryDelay set to "
                + this.clientProperties.getUpdateClusterInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateClusterRetryDelayMultiplier() != null) {
      updateClusterRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateClusterRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateClusterRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateClusterRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateClusterMaxRetryDelay() != null) {
      updateClusterRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateClusterMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateClusterMaxRetryDelay set to "
                + this.clientProperties.getUpdateClusterMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateClusterInitialRpcTimeout() != null) {
      updateClusterRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateClusterInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateClusterInitialRpcTimeout set to "
                + this.clientProperties.getUpdateClusterInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateClusterRpcTimeoutMultiplier() != null) {
      updateClusterRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateClusterRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateClusterRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateClusterRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateClusterMaxRpcTimeout() != null) {
      updateClusterRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateClusterMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateClusterMaxRpcTimeout set to "
                + this.clientProperties.getUpdateClusterMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateClusterTotalTimeout() != null) {
      updateClusterRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateClusterTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateClusterTotalTimeout set to "
                + this.clientProperties.getUpdateClusterTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateClusterSettings()
        .setRetrySettings(updateClusterRetrySettingBuilder.build());
    RetrySettings.Builder stopClusterRetrySettingBuilder =
        clientSettingsBuilder.stopClusterSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getStopClusterRpcTimeoutMultiplier() != null) {
      stopClusterRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getStopClusterRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopClusterRpcTimeoutMultiplier set to "
                + this.clientProperties.getStopClusterRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .stopClusterSettings()
        .setRetrySettings(stopClusterRetrySettingBuilder.build());
    RetrySettings.Builder startClusterRetrySettingBuilder =
        clientSettingsBuilder.startClusterSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getStartClusterRpcTimeoutMultiplier() != null) {
      startClusterRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getStartClusterRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartClusterRpcTimeoutMultiplier set to "
                + this.clientProperties.getStartClusterRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .startClusterSettings()
        .setRetrySettings(startClusterRetrySettingBuilder.build());
    RetrySettings.Builder deleteClusterRetrySettingBuilder =
        clientSettingsBuilder.deleteClusterSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteClusterInitialRetryDelay() != null) {
      deleteClusterRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteClusterInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteClusterInitialRetryDelay set to "
                + this.clientProperties.getDeleteClusterInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteClusterRetryDelayMultiplier() != null) {
      deleteClusterRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteClusterRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteClusterRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteClusterRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteClusterMaxRetryDelay() != null) {
      deleteClusterRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteClusterMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteClusterMaxRetryDelay set to "
                + this.clientProperties.getDeleteClusterMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteClusterInitialRpcTimeout() != null) {
      deleteClusterRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteClusterInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteClusterInitialRpcTimeout set to "
                + this.clientProperties.getDeleteClusterInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteClusterRpcTimeoutMultiplier() != null) {
      deleteClusterRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteClusterRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteClusterRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteClusterRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteClusterMaxRpcTimeout() != null) {
      deleteClusterRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteClusterMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteClusterMaxRpcTimeout set to "
                + this.clientProperties.getDeleteClusterMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteClusterTotalTimeout() != null) {
      deleteClusterRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteClusterTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteClusterTotalTimeout set to "
                + this.clientProperties.getDeleteClusterTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteClusterSettings()
        .setRetrySettings(deleteClusterRetrySettingBuilder.build());
    RetrySettings.Builder getClusterRetrySettingBuilder =
        clientSettingsBuilder.getClusterSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetClusterInitialRetryDelay() != null) {
      getClusterRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetClusterInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetClusterInitialRetryDelay set to "
                + this.clientProperties.getGetClusterInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetClusterRetryDelayMultiplier() != null) {
      getClusterRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetClusterRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetClusterRetryDelayMultiplier set to "
                + this.clientProperties.getGetClusterRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetClusterMaxRetryDelay() != null) {
      getClusterRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetClusterMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetClusterMaxRetryDelay set to " + this.clientProperties.getGetClusterMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetClusterInitialRpcTimeout() != null) {
      getClusterRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetClusterInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetClusterInitialRpcTimeout set to "
                + this.clientProperties.getGetClusterInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetClusterRpcTimeoutMultiplier() != null) {
      getClusterRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetClusterRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetClusterRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetClusterRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetClusterMaxRpcTimeout() != null) {
      getClusterRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetClusterMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetClusterMaxRpcTimeout set to " + this.clientProperties.getGetClusterMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetClusterTotalTimeout() != null) {
      getClusterRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetClusterTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetClusterTotalTimeout set to " + this.clientProperties.getGetClusterTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getClusterSettings()
        .setRetrySettings(getClusterRetrySettingBuilder.build());
    RetrySettings.Builder listClustersRetrySettingBuilder =
        clientSettingsBuilder.listClustersSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListClustersInitialRetryDelay() != null) {
      listClustersRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListClustersInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListClustersInitialRetryDelay set to "
                + this.clientProperties.getListClustersInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListClustersRetryDelayMultiplier() != null) {
      listClustersRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListClustersRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListClustersRetryDelayMultiplier set to "
                + this.clientProperties.getListClustersRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListClustersMaxRetryDelay() != null) {
      listClustersRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListClustersMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListClustersMaxRetryDelay set to "
                + this.clientProperties.getListClustersMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListClustersInitialRpcTimeout() != null) {
      listClustersRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListClustersInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListClustersInitialRpcTimeout set to "
                + this.clientProperties.getListClustersInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListClustersRpcTimeoutMultiplier() != null) {
      listClustersRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListClustersRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListClustersRpcTimeoutMultiplier set to "
                + this.clientProperties.getListClustersRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListClustersMaxRpcTimeout() != null) {
      listClustersRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListClustersMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListClustersMaxRpcTimeout set to "
                + this.clientProperties.getListClustersMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListClustersTotalTimeout() != null) {
      listClustersRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListClustersTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListClustersTotalTimeout set to "
                + this.clientProperties.getListClustersTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listClustersSettings()
        .setRetrySettings(listClustersRetrySettingBuilder.build());
    RetrySettings.Builder diagnoseClusterRetrySettingBuilder =
        clientSettingsBuilder.diagnoseClusterSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDiagnoseClusterInitialRetryDelay() != null) {
      diagnoseClusterRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDiagnoseClusterInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DiagnoseClusterInitialRetryDelay set to "
                + this.clientProperties.getDiagnoseClusterInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDiagnoseClusterRetryDelayMultiplier() != null) {
      diagnoseClusterRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDiagnoseClusterRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DiagnoseClusterRetryDelayMultiplier set to "
                + this.clientProperties.getDiagnoseClusterRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDiagnoseClusterMaxRetryDelay() != null) {
      diagnoseClusterRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDiagnoseClusterMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DiagnoseClusterMaxRetryDelay set to "
                + this.clientProperties.getDiagnoseClusterMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDiagnoseClusterInitialRpcTimeout() != null) {
      diagnoseClusterRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDiagnoseClusterInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DiagnoseClusterInitialRpcTimeout set to "
                + this.clientProperties.getDiagnoseClusterInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDiagnoseClusterRpcTimeoutMultiplier() != null) {
      diagnoseClusterRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDiagnoseClusterRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DiagnoseClusterRpcTimeoutMultiplier set to "
                + this.clientProperties.getDiagnoseClusterRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDiagnoseClusterMaxRpcTimeout() != null) {
      diagnoseClusterRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDiagnoseClusterMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DiagnoseClusterMaxRpcTimeout set to "
                + this.clientProperties.getDiagnoseClusterMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDiagnoseClusterTotalTimeout() != null) {
      diagnoseClusterRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDiagnoseClusterTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DiagnoseClusterTotalTimeout set to "
                + this.clientProperties.getDiagnoseClusterTotalTimeout());
      }
    }
    clientSettingsBuilder
        .diagnoseClusterSettings()
        .setRetrySettings(diagnoseClusterRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public ClusterControllerClient clusterControllerClient(
      ClusterControllerSettings clusterControllerSettings) throws IOException {
    return ClusterControllerClient.create(clusterControllerSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-cluster-controller";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
