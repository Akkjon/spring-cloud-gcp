/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.tpu.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import com.google.cloud.tpu.v1.TpuClient;
import com.google.cloud.tpu.v1.TpuSettings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link TpuClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(TpuClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.tpu.v1.spring.auto.tpu.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({TpuSpringProperties.class, GlobalProperties.class})
public class TpuSpringAutoConfiguration {
  private final TpuSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(TpuSpringAutoConfiguration.class);

  protected TpuSpringAutoConfiguration(
      TpuSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider tpuCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Tpu-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultTpuTransportChannelProvider() {
    return TpuSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a TpuClient bean configured to use the default credentials provider (obtained with
   * tpuCredentials()) and its default transport channel provider
   * (defaultTpuTransportChannelProvider()). It also configures the quota project ID if provided. It
   * will configure an executor provider in case there is more than one thread configured in the
   * client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in TpuSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public TpuSettings tpuSettings(
      @Qualifier("tpuCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultTpuTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    TpuSettings.Builder clientSettingsBuilder =
        TpuSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          TpuSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    RetrySettings.Builder listNodesRetrySettingBuilder =
        clientSettingsBuilder.listNodesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListNodesInitialRpcTimeout() != null) {
      listNodesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListNodesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNodesInitialRpcTimeout set to "
                + this.clientProperties.getListNodesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListNodesRpcTimeoutMultiplier() != null) {
      listNodesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListNodesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNodesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListNodesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListNodesMaxRpcTimeout() != null) {
      listNodesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListNodesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNodesMaxRpcTimeout set to " + this.clientProperties.getListNodesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListNodesTotalTimeout() != null) {
      listNodesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListNodesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNodesTotalTimeout set to " + this.clientProperties.getListNodesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listNodesSettings()
        .setRetrySettings(listNodesRetrySettingBuilder.build());
    RetrySettings.Builder getNodeRetrySettingBuilder =
        clientSettingsBuilder.getNodeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetNodeInitialRpcTimeout() != null) {
      getNodeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetNodeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNodeInitialRpcTimeout set to "
                + this.clientProperties.getGetNodeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetNodeRpcTimeoutMultiplier() != null) {
      getNodeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetNodeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNodeRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetNodeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetNodeMaxRpcTimeout() != null) {
      getNodeRetrySettingBuilder.setMaxRpcTimeout(this.clientProperties.getGetNodeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNodeMaxRpcTimeout set to " + this.clientProperties.getGetNodeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetNodeTotalTimeout() != null) {
      getNodeRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetNodeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNodeTotalTimeout set to " + this.clientProperties.getGetNodeTotalTimeout());
      }
    }
    clientSettingsBuilder.getNodeSettings().setRetrySettings(getNodeRetrySettingBuilder.build());
    RetrySettings.Builder createNodeRetrySettingBuilder =
        clientSettingsBuilder.createNodeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateNodeInitialRpcTimeout() != null) {
      createNodeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateNodeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNodeInitialRpcTimeout set to "
                + this.clientProperties.getCreateNodeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateNodeRpcTimeoutMultiplier() != null) {
      createNodeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateNodeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNodeRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateNodeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateNodeMaxRpcTimeout() != null) {
      createNodeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateNodeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNodeMaxRpcTimeout set to " + this.clientProperties.getCreateNodeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateNodeTotalTimeout() != null) {
      createNodeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateNodeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNodeTotalTimeout set to " + this.clientProperties.getCreateNodeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createNodeSettings()
        .setRetrySettings(createNodeRetrySettingBuilder.build());
    RetrySettings.Builder deleteNodeRetrySettingBuilder =
        clientSettingsBuilder.deleteNodeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteNodeInitialRpcTimeout() != null) {
      deleteNodeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteNodeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNodeInitialRpcTimeout set to "
                + this.clientProperties.getDeleteNodeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteNodeRpcTimeoutMultiplier() != null) {
      deleteNodeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteNodeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNodeRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteNodeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteNodeMaxRpcTimeout() != null) {
      deleteNodeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteNodeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNodeMaxRpcTimeout set to " + this.clientProperties.getDeleteNodeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteNodeTotalTimeout() != null) {
      deleteNodeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteNodeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNodeTotalTimeout set to " + this.clientProperties.getDeleteNodeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteNodeSettings()
        .setRetrySettings(deleteNodeRetrySettingBuilder.build());
    RetrySettings.Builder reimageNodeRetrySettingBuilder =
        clientSettingsBuilder.reimageNodeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getReimageNodeInitialRpcTimeout() != null) {
      reimageNodeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getReimageNodeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReimageNodeInitialRpcTimeout set to "
                + this.clientProperties.getReimageNodeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getReimageNodeRpcTimeoutMultiplier() != null) {
      reimageNodeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getReimageNodeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReimageNodeRpcTimeoutMultiplier set to "
                + this.clientProperties.getReimageNodeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getReimageNodeMaxRpcTimeout() != null) {
      reimageNodeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getReimageNodeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReimageNodeMaxRpcTimeout set to "
                + this.clientProperties.getReimageNodeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getReimageNodeTotalTimeout() != null) {
      reimageNodeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getReimageNodeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReimageNodeTotalTimeout set to " + this.clientProperties.getReimageNodeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .reimageNodeSettings()
        .setRetrySettings(reimageNodeRetrySettingBuilder.build());
    RetrySettings.Builder stopNodeRetrySettingBuilder =
        clientSettingsBuilder.stopNodeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getStopNodeInitialRpcTimeout() != null) {
      stopNodeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getStopNodeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopNodeInitialRpcTimeout set to "
                + this.clientProperties.getStopNodeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getStopNodeRpcTimeoutMultiplier() != null) {
      stopNodeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getStopNodeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopNodeRpcTimeoutMultiplier set to "
                + this.clientProperties.getStopNodeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getStopNodeMaxRpcTimeout() != null) {
      stopNodeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getStopNodeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopNodeMaxRpcTimeout set to " + this.clientProperties.getStopNodeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getStopNodeTotalTimeout() != null) {
      stopNodeRetrySettingBuilder.setTotalTimeout(this.clientProperties.getStopNodeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopNodeTotalTimeout set to " + this.clientProperties.getStopNodeTotalTimeout());
      }
    }
    clientSettingsBuilder.stopNodeSettings().setRetrySettings(stopNodeRetrySettingBuilder.build());
    RetrySettings.Builder startNodeRetrySettingBuilder =
        clientSettingsBuilder.startNodeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getStartNodeInitialRpcTimeout() != null) {
      startNodeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getStartNodeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartNodeInitialRpcTimeout set to "
                + this.clientProperties.getStartNodeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getStartNodeRpcTimeoutMultiplier() != null) {
      startNodeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getStartNodeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartNodeRpcTimeoutMultiplier set to "
                + this.clientProperties.getStartNodeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getStartNodeMaxRpcTimeout() != null) {
      startNodeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getStartNodeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartNodeMaxRpcTimeout set to " + this.clientProperties.getStartNodeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getStartNodeTotalTimeout() != null) {
      startNodeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getStartNodeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartNodeTotalTimeout set to " + this.clientProperties.getStartNodeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .startNodeSettings()
        .setRetrySettings(startNodeRetrySettingBuilder.build());
    RetrySettings.Builder listTensorFlowVersionsRetrySettingBuilder =
        clientSettingsBuilder.listTensorFlowVersionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListTensorFlowVersionsInitialRpcTimeout() != null) {
      listTensorFlowVersionsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListTensorFlowVersionsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTensorFlowVersionsInitialRpcTimeout set to "
                + this.clientProperties.getListTensorFlowVersionsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListTensorFlowVersionsRpcTimeoutMultiplier() != null) {
      listTensorFlowVersionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListTensorFlowVersionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTensorFlowVersionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListTensorFlowVersionsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListTensorFlowVersionsMaxRpcTimeout() != null) {
      listTensorFlowVersionsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListTensorFlowVersionsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTensorFlowVersionsMaxRpcTimeout set to "
                + this.clientProperties.getListTensorFlowVersionsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListTensorFlowVersionsTotalTimeout() != null) {
      listTensorFlowVersionsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListTensorFlowVersionsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTensorFlowVersionsTotalTimeout set to "
                + this.clientProperties.getListTensorFlowVersionsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listTensorFlowVersionsSettings()
        .setRetrySettings(listTensorFlowVersionsRetrySettingBuilder.build());
    RetrySettings.Builder getTensorFlowVersionRetrySettingBuilder =
        clientSettingsBuilder.getTensorFlowVersionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetTensorFlowVersionInitialRpcTimeout() != null) {
      getTensorFlowVersionRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetTensorFlowVersionInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTensorFlowVersionInitialRpcTimeout set to "
                + this.clientProperties.getGetTensorFlowVersionInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetTensorFlowVersionRpcTimeoutMultiplier() != null) {
      getTensorFlowVersionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetTensorFlowVersionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTensorFlowVersionRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetTensorFlowVersionRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetTensorFlowVersionMaxRpcTimeout() != null) {
      getTensorFlowVersionRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetTensorFlowVersionMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTensorFlowVersionMaxRpcTimeout set to "
                + this.clientProperties.getGetTensorFlowVersionMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetTensorFlowVersionTotalTimeout() != null) {
      getTensorFlowVersionRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetTensorFlowVersionTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTensorFlowVersionTotalTimeout set to "
                + this.clientProperties.getGetTensorFlowVersionTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getTensorFlowVersionSettings()
        .setRetrySettings(getTensorFlowVersionRetrySettingBuilder.build());
    RetrySettings.Builder listAcceleratorTypesRetrySettingBuilder =
        clientSettingsBuilder.listAcceleratorTypesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListAcceleratorTypesInitialRpcTimeout() != null) {
      listAcceleratorTypesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListAcceleratorTypesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAcceleratorTypesInitialRpcTimeout set to "
                + this.clientProperties.getListAcceleratorTypesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListAcceleratorTypesRpcTimeoutMultiplier() != null) {
      listAcceleratorTypesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListAcceleratorTypesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAcceleratorTypesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListAcceleratorTypesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListAcceleratorTypesMaxRpcTimeout() != null) {
      listAcceleratorTypesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListAcceleratorTypesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAcceleratorTypesMaxRpcTimeout set to "
                + this.clientProperties.getListAcceleratorTypesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListAcceleratorTypesTotalTimeout() != null) {
      listAcceleratorTypesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListAcceleratorTypesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAcceleratorTypesTotalTimeout set to "
                + this.clientProperties.getListAcceleratorTypesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listAcceleratorTypesSettings()
        .setRetrySettings(listAcceleratorTypesRetrySettingBuilder.build());
    RetrySettings.Builder getAcceleratorTypeRetrySettingBuilder =
        clientSettingsBuilder.getAcceleratorTypeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetAcceleratorTypeInitialRpcTimeout() != null) {
      getAcceleratorTypeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetAcceleratorTypeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAcceleratorTypeInitialRpcTimeout set to "
                + this.clientProperties.getGetAcceleratorTypeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAcceleratorTypeRpcTimeoutMultiplier() != null) {
      getAcceleratorTypeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetAcceleratorTypeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAcceleratorTypeRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetAcceleratorTypeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetAcceleratorTypeMaxRpcTimeout() != null) {
      getAcceleratorTypeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetAcceleratorTypeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAcceleratorTypeMaxRpcTimeout set to "
                + this.clientProperties.getGetAcceleratorTypeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAcceleratorTypeTotalTimeout() != null) {
      getAcceleratorTypeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetAcceleratorTypeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAcceleratorTypeTotalTimeout set to "
                + this.clientProperties.getGetAcceleratorTypeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getAcceleratorTypeSettings()
        .setRetrySettings(getAcceleratorTypeRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public TpuClient tpuClient(TpuSettings tpuSettings) throws IOException {
    return TpuClient.create(tpuSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-tpu";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
