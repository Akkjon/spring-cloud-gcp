/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.recaptchaenterprise.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseServiceClient;
import com.google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link RecaptchaEnterpriseServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(RecaptchaEnterpriseServiceClient.class)
@ConditionalOnProperty(
    value =
        "com.google.cloud.recaptchaenterprise.v1.spring.auto.recaptcha-enterprise-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({
  RecaptchaEnterpriseServiceSpringProperties.class,
  GlobalProperties.class
})
public class RecaptchaEnterpriseServiceSpringAutoConfiguration {
  private final RecaptchaEnterpriseServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(RecaptchaEnterpriseServiceSpringAutoConfiguration.class);

  protected RecaptchaEnterpriseServiceSpringAutoConfiguration(
      RecaptchaEnterpriseServiceSpringProperties clientProperties,
      GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider recaptchaEnterpriseServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from RecaptchaEnterpriseService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultRecaptchaEnterpriseServiceTransportChannelProvider() {
    return RecaptchaEnterpriseServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a RecaptchaEnterpriseServiceClient bean configured to use the default credentials
   * provider (obtained with recaptchaEnterpriseServiceCredentials()) and its default transport
   * channel provider (defaultRecaptchaEnterpriseServiceTransportChannelProvider()). It also
   * configures the quota project ID if provided. It will configure an executor provider in case
   * there is more than one thread configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in
   * RecaptchaEnterpriseServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public RecaptchaEnterpriseServiceSettings recaptchaEnterpriseServiceSettings(
      @Qualifier("recaptchaEnterpriseServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultRecaptchaEnterpriseServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    RecaptchaEnterpriseServiceSettings.Builder clientSettingsBuilder =
        RecaptchaEnterpriseServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          RecaptchaEnterpriseServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    RetrySettings.Builder createAssessmentRetrySettingBuilder =
        clientSettingsBuilder.createAssessmentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateAssessmentInitialRpcTimeout() != null) {
      createAssessmentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateAssessmentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAssessmentInitialRpcTimeout set to "
                + this.clientProperties.getCreateAssessmentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateAssessmentRpcTimeoutMultiplier() != null) {
      createAssessmentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateAssessmentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAssessmentRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateAssessmentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateAssessmentMaxRpcTimeout() != null) {
      createAssessmentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateAssessmentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAssessmentMaxRpcTimeout set to "
                + this.clientProperties.getCreateAssessmentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateAssessmentTotalTimeout() != null) {
      createAssessmentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateAssessmentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAssessmentTotalTimeout set to "
                + this.clientProperties.getCreateAssessmentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createAssessmentSettings()
        .setRetrySettings(createAssessmentRetrySettingBuilder.build());
    RetrySettings.Builder annotateAssessmentRetrySettingBuilder =
        clientSettingsBuilder.annotateAssessmentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getAnnotateAssessmentInitialRpcTimeout() != null) {
      annotateAssessmentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getAnnotateAssessmentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AnnotateAssessmentInitialRpcTimeout set to "
                + this.clientProperties.getAnnotateAssessmentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getAnnotateAssessmentRpcTimeoutMultiplier() != null) {
      annotateAssessmentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getAnnotateAssessmentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AnnotateAssessmentRpcTimeoutMultiplier set to "
                + this.clientProperties.getAnnotateAssessmentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getAnnotateAssessmentMaxRpcTimeout() != null) {
      annotateAssessmentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getAnnotateAssessmentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AnnotateAssessmentMaxRpcTimeout set to "
                + this.clientProperties.getAnnotateAssessmentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getAnnotateAssessmentTotalTimeout() != null) {
      annotateAssessmentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getAnnotateAssessmentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AnnotateAssessmentTotalTimeout set to "
                + this.clientProperties.getAnnotateAssessmentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .annotateAssessmentSettings()
        .setRetrySettings(annotateAssessmentRetrySettingBuilder.build());
    RetrySettings.Builder createKeyRetrySettingBuilder =
        clientSettingsBuilder.createKeySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateKeyInitialRpcTimeout() != null) {
      createKeyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateKeyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateKeyInitialRpcTimeout set to "
                + this.clientProperties.getCreateKeyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateKeyRpcTimeoutMultiplier() != null) {
      createKeyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateKeyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateKeyRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateKeyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateKeyMaxRpcTimeout() != null) {
      createKeyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateKeyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateKeyMaxRpcTimeout set to " + this.clientProperties.getCreateKeyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateKeyTotalTimeout() != null) {
      createKeyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateKeyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateKeyTotalTimeout set to " + this.clientProperties.getCreateKeyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createKeySettings()
        .setRetrySettings(createKeyRetrySettingBuilder.build());
    RetrySettings.Builder listKeysRetrySettingBuilder =
        clientSettingsBuilder.listKeysSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListKeysInitialRpcTimeout() != null) {
      listKeysRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListKeysInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListKeysInitialRpcTimeout set to "
                + this.clientProperties.getListKeysInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListKeysRpcTimeoutMultiplier() != null) {
      listKeysRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListKeysRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListKeysRpcTimeoutMultiplier set to "
                + this.clientProperties.getListKeysRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListKeysMaxRpcTimeout() != null) {
      listKeysRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListKeysMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListKeysMaxRpcTimeout set to " + this.clientProperties.getListKeysMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListKeysTotalTimeout() != null) {
      listKeysRetrySettingBuilder.setTotalTimeout(this.clientProperties.getListKeysTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListKeysTotalTimeout set to " + this.clientProperties.getListKeysTotalTimeout());
      }
    }
    clientSettingsBuilder.listKeysSettings().setRetrySettings(listKeysRetrySettingBuilder.build());
    RetrySettings.Builder retrieveLegacySecretKeyRetrySettingBuilder =
        clientSettingsBuilder.retrieveLegacySecretKeySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRetrieveLegacySecretKeyRpcTimeoutMultiplier() != null) {
      retrieveLegacySecretKeyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRetrieveLegacySecretKeyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RetrieveLegacySecretKeyRpcTimeoutMultiplier set to "
                + this.clientProperties.getRetrieveLegacySecretKeyRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .retrieveLegacySecretKeySettings()
        .setRetrySettings(retrieveLegacySecretKeyRetrySettingBuilder.build());
    RetrySettings.Builder getKeyRetrySettingBuilder =
        clientSettingsBuilder.getKeySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetKeyInitialRpcTimeout() != null) {
      getKeyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetKeyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetKeyInitialRpcTimeout set to " + this.clientProperties.getGetKeyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetKeyRpcTimeoutMultiplier() != null) {
      getKeyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetKeyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetKeyRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetKeyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetKeyMaxRpcTimeout() != null) {
      getKeyRetrySettingBuilder.setMaxRpcTimeout(this.clientProperties.getGetKeyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetKeyMaxRpcTimeout set to " + this.clientProperties.getGetKeyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetKeyTotalTimeout() != null) {
      getKeyRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetKeyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("GetKeyTotalTimeout set to " + this.clientProperties.getGetKeyTotalTimeout());
      }
    }
    clientSettingsBuilder.getKeySettings().setRetrySettings(getKeyRetrySettingBuilder.build());
    RetrySettings.Builder updateKeyRetrySettingBuilder =
        clientSettingsBuilder.updateKeySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateKeyInitialRpcTimeout() != null) {
      updateKeyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateKeyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateKeyInitialRpcTimeout set to "
                + this.clientProperties.getUpdateKeyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateKeyRpcTimeoutMultiplier() != null) {
      updateKeyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateKeyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateKeyRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateKeyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateKeyMaxRpcTimeout() != null) {
      updateKeyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateKeyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateKeyMaxRpcTimeout set to " + this.clientProperties.getUpdateKeyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateKeyTotalTimeout() != null) {
      updateKeyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateKeyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateKeyTotalTimeout set to " + this.clientProperties.getUpdateKeyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateKeySettings()
        .setRetrySettings(updateKeyRetrySettingBuilder.build());
    RetrySettings.Builder deleteKeyRetrySettingBuilder =
        clientSettingsBuilder.deleteKeySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteKeyInitialRpcTimeout() != null) {
      deleteKeyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteKeyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteKeyInitialRpcTimeout set to "
                + this.clientProperties.getDeleteKeyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteKeyRpcTimeoutMultiplier() != null) {
      deleteKeyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteKeyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteKeyRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteKeyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteKeyMaxRpcTimeout() != null) {
      deleteKeyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteKeyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteKeyMaxRpcTimeout set to " + this.clientProperties.getDeleteKeyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteKeyTotalTimeout() != null) {
      deleteKeyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteKeyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteKeyTotalTimeout set to " + this.clientProperties.getDeleteKeyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteKeySettings()
        .setRetrySettings(deleteKeyRetrySettingBuilder.build());
    RetrySettings.Builder migrateKeyRetrySettingBuilder =
        clientSettingsBuilder.migrateKeySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getMigrateKeyRpcTimeoutMultiplier() != null) {
      migrateKeyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getMigrateKeyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "MigrateKeyRpcTimeoutMultiplier set to "
                + this.clientProperties.getMigrateKeyRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .migrateKeySettings()
        .setRetrySettings(migrateKeyRetrySettingBuilder.build());
    RetrySettings.Builder getMetricsRetrySettingBuilder =
        clientSettingsBuilder.getMetricsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetMetricsRpcTimeoutMultiplier() != null) {
      getMetricsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetMetricsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMetricsRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetMetricsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getMetricsSettings()
        .setRetrySettings(getMetricsRetrySettingBuilder.build());
    RetrySettings.Builder listRelatedAccountGroupsRetrySettingBuilder =
        clientSettingsBuilder.listRelatedAccountGroupsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListRelatedAccountGroupsRpcTimeoutMultiplier() != null) {
      listRelatedAccountGroupsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListRelatedAccountGroupsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRelatedAccountGroupsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListRelatedAccountGroupsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listRelatedAccountGroupsSettings()
        .setRetrySettings(listRelatedAccountGroupsRetrySettingBuilder.build());
    RetrySettings.Builder listRelatedAccountGroupMembershipsRetrySettingBuilder =
        clientSettingsBuilder
            .listRelatedAccountGroupMembershipsSettings()
            .getRetrySettings()
            .toBuilder();
    if (this.clientProperties.getListRelatedAccountGroupMembershipsRpcTimeoutMultiplier() != null) {
      listRelatedAccountGroupMembershipsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListRelatedAccountGroupMembershipsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRelatedAccountGroupMembershipsRpcTimeoutMultiplier set to "
                + this.clientProperties
                    .getListRelatedAccountGroupMembershipsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listRelatedAccountGroupMembershipsSettings()
        .setRetrySettings(listRelatedAccountGroupMembershipsRetrySettingBuilder.build());
    RetrySettings.Builder searchRelatedAccountGroupMembershipsRetrySettingBuilder =
        clientSettingsBuilder
            .searchRelatedAccountGroupMembershipsSettings()
            .getRetrySettings()
            .toBuilder();
    if (this.clientProperties.getSearchRelatedAccountGroupMembershipsRpcTimeoutMultiplier()
        != null) {
      searchRelatedAccountGroupMembershipsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSearchRelatedAccountGroupMembershipsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SearchRelatedAccountGroupMembershipsRpcTimeoutMultiplier set to "
                + this.clientProperties
                    .getSearchRelatedAccountGroupMembershipsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .searchRelatedAccountGroupMembershipsSettings()
        .setRetrySettings(searchRelatedAccountGroupMembershipsRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public RecaptchaEnterpriseServiceClient recaptchaEnterpriseServiceClient(
      RecaptchaEnterpriseServiceSettings recaptchaEnterpriseServiceSettings) throws IOException {
    return RecaptchaEnterpriseServiceClient.create(recaptchaEnterpriseServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-recaptcha-enterprise-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
