/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.gkehub.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.gkehub.v1.GkeHubClient;
import com.google.cloud.gkehub.v1.GkeHubSettings;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link GkeHubClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(GkeHubClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.gkehub.v1.spring.auto.gke-hub.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(GkeHubSpringProperties.class)
public class GkeHubSpringAutoConfiguration {
  private final GkeHubSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER = LogFactory.getLog(GkeHubSpringAutoConfiguration.class);

  protected GkeHubSpringAutoConfiguration(
      GkeHubSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from GkeHub-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultGkeHubTransportChannelProvider() {
    return GkeHubSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a GkeHubClient bean configured to use the default credentials provider (obtained with
   * gkeHubCredentials()) and its default transport channel provider
   * (defaultGkeHubTransportChannelProvider()). It also configures the quota project ID if provided.
   * It will configure an executor provider in case there is more than one thread configured in the
   * client
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in GkeHubSpringProperties. Method-level properties will take precedence over service-level
   * properties if available, and client library defaults will be used if neither are specified.
   */
  @Bean
  @ConditionalOnMissingBean
  public GkeHubSettings gkeHubSettings(
      @Qualifier("defaultGkeHubTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    GkeHubSettings.Builder clientSettingsBuilder =
        GkeHubSettings.newBuilder()
            .setCredentialsProvider(this.credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          GkeHubSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          GkeHubSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings listMembershipsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listMembershipsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listMembershipsSettings()
          .setRetrySettings(listMembershipsRetrySettings);

      RetrySettings listFeaturesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listFeaturesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listFeaturesSettings().setRetrySettings(listFeaturesRetrySettings);

      RetrySettings getMembershipRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getMembershipSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getMembershipSettings().setRetrySettings(getMembershipRetrySettings);

      RetrySettings getFeatureRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getFeatureSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getFeatureSettings().setRetrySettings(getFeatureRetrySettings);

      RetrySettings createMembershipRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createMembershipSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createMembershipSettings()
          .setRetrySettings(createMembershipRetrySettings);

      RetrySettings createFeatureRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createFeatureSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createFeatureSettings().setRetrySettings(createFeatureRetrySettings);

      RetrySettings deleteMembershipRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteMembershipSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteMembershipSettings()
          .setRetrySettings(deleteMembershipRetrySettings);

      RetrySettings deleteFeatureRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteFeatureSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.deleteFeatureSettings().setRetrySettings(deleteFeatureRetrySettings);

      RetrySettings updateMembershipRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateMembershipSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateMembershipSettings()
          .setRetrySettings(updateMembershipRetrySettings);

      RetrySettings updateFeatureRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateFeatureSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updateFeatureSettings().setRetrySettings(updateFeatureRetrySettings);

      RetrySettings generateConnectManifestRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.generateConnectManifestSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .generateConnectManifestSettings()
          .setRetrySettings(generateConnectManifestRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry listMembershipsRetry = clientProperties.getListMembershipsRetry();
    if (listMembershipsRetry != null) {
      RetrySettings listMembershipsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listMembershipsSettings().getRetrySettings(),
              listMembershipsRetry);
      clientSettingsBuilder
          .listMembershipsSettings()
          .setRetrySettings(listMembershipsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listMemberships from properties.");
      }
    }
    Retry listFeaturesRetry = clientProperties.getListFeaturesRetry();
    if (listFeaturesRetry != null) {
      RetrySettings listFeaturesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listFeaturesSettings().getRetrySettings(), listFeaturesRetry);
      clientSettingsBuilder.listFeaturesSettings().setRetrySettings(listFeaturesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listFeatures from properties.");
      }
    }
    Retry getMembershipRetry = clientProperties.getGetMembershipRetry();
    if (getMembershipRetry != null) {
      RetrySettings getMembershipRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getMembershipSettings().getRetrySettings(), getMembershipRetry);
      clientSettingsBuilder.getMembershipSettings().setRetrySettings(getMembershipRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getMembership from properties.");
      }
    }
    Retry getFeatureRetry = clientProperties.getGetFeatureRetry();
    if (getFeatureRetry != null) {
      RetrySettings getFeatureRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getFeatureSettings().getRetrySettings(), getFeatureRetry);
      clientSettingsBuilder.getFeatureSettings().setRetrySettings(getFeatureRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getFeature from properties.");
      }
    }
    Retry createMembershipRetry = clientProperties.getCreateMembershipRetry();
    if (createMembershipRetry != null) {
      RetrySettings createMembershipRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createMembershipSettings().getRetrySettings(),
              createMembershipRetry);
      clientSettingsBuilder
          .createMembershipSettings()
          .setRetrySettings(createMembershipRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createMembership from properties.");
      }
    }
    Retry createFeatureRetry = clientProperties.getCreateFeatureRetry();
    if (createFeatureRetry != null) {
      RetrySettings createFeatureRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createFeatureSettings().getRetrySettings(), createFeatureRetry);
      clientSettingsBuilder.createFeatureSettings().setRetrySettings(createFeatureRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createFeature from properties.");
      }
    }
    Retry deleteMembershipRetry = clientProperties.getDeleteMembershipRetry();
    if (deleteMembershipRetry != null) {
      RetrySettings deleteMembershipRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteMembershipSettings().getRetrySettings(),
              deleteMembershipRetry);
      clientSettingsBuilder
          .deleteMembershipSettings()
          .setRetrySettings(deleteMembershipRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteMembership from properties.");
      }
    }
    Retry deleteFeatureRetry = clientProperties.getDeleteFeatureRetry();
    if (deleteFeatureRetry != null) {
      RetrySettings deleteFeatureRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteFeatureSettings().getRetrySettings(), deleteFeatureRetry);
      clientSettingsBuilder.deleteFeatureSettings().setRetrySettings(deleteFeatureRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteFeature from properties.");
      }
    }
    Retry updateMembershipRetry = clientProperties.getUpdateMembershipRetry();
    if (updateMembershipRetry != null) {
      RetrySettings updateMembershipRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateMembershipSettings().getRetrySettings(),
              updateMembershipRetry);
      clientSettingsBuilder
          .updateMembershipSettings()
          .setRetrySettings(updateMembershipRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateMembership from properties.");
      }
    }
    Retry updateFeatureRetry = clientProperties.getUpdateFeatureRetry();
    if (updateFeatureRetry != null) {
      RetrySettings updateFeatureRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateFeatureSettings().getRetrySettings(), updateFeatureRetry);
      clientSettingsBuilder.updateFeatureSettings().setRetrySettings(updateFeatureRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateFeature from properties.");
      }
    }
    Retry generateConnectManifestRetry = clientProperties.getGenerateConnectManifestRetry();
    if (generateConnectManifestRetry != null) {
      RetrySettings generateConnectManifestRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.generateConnectManifestSettings().getRetrySettings(),
              generateConnectManifestRetry);
      clientSettingsBuilder
          .generateConnectManifestSettings()
          .setRetrySettings(generateConnectManifestRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for generateConnectManifest from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public GkeHubClient gkeHubClient(GkeHubSettings gkeHubSettings) throws IOException {
    return GkeHubClient.create(gkeHubSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-gke-hub";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
