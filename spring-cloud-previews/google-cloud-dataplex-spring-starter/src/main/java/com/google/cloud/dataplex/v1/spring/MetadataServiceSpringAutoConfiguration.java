/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dataplex.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dataplex.v1.MetadataServiceClient;
import com.google.cloud.dataplex.v1.MetadataServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link MetadataServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(MetadataServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dataplex.v1.spring.auto.metadata-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({MetadataServiceSpringProperties.class, GlobalProperties.class})
public class MetadataServiceSpringAutoConfiguration {
  private final MetadataServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(MetadataServiceSpringAutoConfiguration.class);

  protected MetadataServiceSpringAutoConfiguration(
      MetadataServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider metadataServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from MetadataService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultMetadataServiceTransportChannelProvider() {
    return MetadataServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a MetadataServiceClient bean configured to use the default credentials provider
   * (obtained with metadataServiceCredentials()) and its default transport channel provider
   * (defaultMetadataServiceTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in MetadataServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public MetadataServiceSettings metadataServiceSettings(
      @Qualifier("metadataServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultMetadataServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    MetadataServiceSettings.Builder clientSettingsBuilder =
        MetadataServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          MetadataServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          MetadataServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createEntityRetrySettingBuilder =
        clientSettingsBuilder.createEntitySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateEntityInitialRpcTimeout() != null) {
      createEntityRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateEntityInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEntityInitialRpcTimeout set to "
                + this.clientProperties.getCreateEntityInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateEntityRpcTimeoutMultiplier() != null) {
      createEntityRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateEntityRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEntityRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateEntityRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateEntityMaxRpcTimeout() != null) {
      createEntityRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateEntityMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEntityMaxRpcTimeout set to "
                + this.clientProperties.getCreateEntityMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateEntityTotalTimeout() != null) {
      createEntityRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateEntityTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEntityTotalTimeout set to "
                + this.clientProperties.getCreateEntityTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createEntitySettings()
        .setRetrySettings(createEntityRetrySettingBuilder.build());
    RetrySettings.Builder updateEntityRetrySettingBuilder =
        clientSettingsBuilder.updateEntitySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateEntityInitialRpcTimeout() != null) {
      updateEntityRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateEntityInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEntityInitialRpcTimeout set to "
                + this.clientProperties.getUpdateEntityInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateEntityRpcTimeoutMultiplier() != null) {
      updateEntityRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateEntityRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEntityRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateEntityRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateEntityMaxRpcTimeout() != null) {
      updateEntityRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateEntityMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEntityMaxRpcTimeout set to "
                + this.clientProperties.getUpdateEntityMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateEntityTotalTimeout() != null) {
      updateEntityRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateEntityTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEntityTotalTimeout set to "
                + this.clientProperties.getUpdateEntityTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateEntitySettings()
        .setRetrySettings(updateEntityRetrySettingBuilder.build());
    RetrySettings.Builder deleteEntityRetrySettingBuilder =
        clientSettingsBuilder.deleteEntitySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteEntityInitialRpcTimeout() != null) {
      deleteEntityRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteEntityInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEntityInitialRpcTimeout set to "
                + this.clientProperties.getDeleteEntityInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteEntityRpcTimeoutMultiplier() != null) {
      deleteEntityRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteEntityRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEntityRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteEntityRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteEntityMaxRpcTimeout() != null) {
      deleteEntityRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteEntityMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEntityMaxRpcTimeout set to "
                + this.clientProperties.getDeleteEntityMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteEntityTotalTimeout() != null) {
      deleteEntityRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteEntityTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEntityTotalTimeout set to "
                + this.clientProperties.getDeleteEntityTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteEntitySettings()
        .setRetrySettings(deleteEntityRetrySettingBuilder.build());
    RetrySettings.Builder getEntityRetrySettingBuilder =
        clientSettingsBuilder.getEntitySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetEntityInitialRetryDelay() != null) {
      getEntityRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetEntityInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntityInitialRetryDelay set to "
                + this.clientProperties.getGetEntityInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetEntityRetryDelayMultiplier() != null) {
      getEntityRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetEntityRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntityRetryDelayMultiplier set to "
                + this.clientProperties.getGetEntityRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetEntityMaxRetryDelay() != null) {
      getEntityRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetEntityMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntityMaxRetryDelay set to " + this.clientProperties.getGetEntityMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetEntityInitialRpcTimeout() != null) {
      getEntityRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetEntityInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntityInitialRpcTimeout set to "
                + this.clientProperties.getGetEntityInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEntityRpcTimeoutMultiplier() != null) {
      getEntityRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetEntityRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntityRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetEntityRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetEntityMaxRpcTimeout() != null) {
      getEntityRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetEntityMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntityMaxRpcTimeout set to " + this.clientProperties.getGetEntityMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEntityTotalTimeout() != null) {
      getEntityRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetEntityTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntityTotalTimeout set to " + this.clientProperties.getGetEntityTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getEntitySettings()
        .setRetrySettings(getEntityRetrySettingBuilder.build());
    RetrySettings.Builder listEntitiesRetrySettingBuilder =
        clientSettingsBuilder.listEntitiesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListEntitiesInitialRetryDelay() != null) {
      listEntitiesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListEntitiesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntitiesInitialRetryDelay set to "
                + this.clientProperties.getListEntitiesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListEntitiesRetryDelayMultiplier() != null) {
      listEntitiesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListEntitiesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntitiesRetryDelayMultiplier set to "
                + this.clientProperties.getListEntitiesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListEntitiesMaxRetryDelay() != null) {
      listEntitiesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListEntitiesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntitiesMaxRetryDelay set to "
                + this.clientProperties.getListEntitiesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListEntitiesInitialRpcTimeout() != null) {
      listEntitiesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListEntitiesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntitiesInitialRpcTimeout set to "
                + this.clientProperties.getListEntitiesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListEntitiesRpcTimeoutMultiplier() != null) {
      listEntitiesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListEntitiesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntitiesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListEntitiesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListEntitiesMaxRpcTimeout() != null) {
      listEntitiesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListEntitiesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntitiesMaxRpcTimeout set to "
                + this.clientProperties.getListEntitiesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListEntitiesTotalTimeout() != null) {
      listEntitiesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListEntitiesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntitiesTotalTimeout set to "
                + this.clientProperties.getListEntitiesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listEntitiesSettings()
        .setRetrySettings(listEntitiesRetrySettingBuilder.build());
    RetrySettings.Builder createPartitionRetrySettingBuilder =
        clientSettingsBuilder.createPartitionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreatePartitionInitialRpcTimeout() != null) {
      createPartitionRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreatePartitionInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePartitionInitialRpcTimeout set to "
                + this.clientProperties.getCreatePartitionInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreatePartitionRpcTimeoutMultiplier() != null) {
      createPartitionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreatePartitionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePartitionRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreatePartitionRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreatePartitionMaxRpcTimeout() != null) {
      createPartitionRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreatePartitionMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePartitionMaxRpcTimeout set to "
                + this.clientProperties.getCreatePartitionMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreatePartitionTotalTimeout() != null) {
      createPartitionRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreatePartitionTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePartitionTotalTimeout set to "
                + this.clientProperties.getCreatePartitionTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createPartitionSettings()
        .setRetrySettings(createPartitionRetrySettingBuilder.build());
    RetrySettings.Builder deletePartitionRetrySettingBuilder =
        clientSettingsBuilder.deletePartitionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeletePartitionInitialRpcTimeout() != null) {
      deletePartitionRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeletePartitionInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePartitionInitialRpcTimeout set to "
                + this.clientProperties.getDeletePartitionInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeletePartitionRpcTimeoutMultiplier() != null) {
      deletePartitionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeletePartitionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePartitionRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeletePartitionRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeletePartitionMaxRpcTimeout() != null) {
      deletePartitionRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeletePartitionMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePartitionMaxRpcTimeout set to "
                + this.clientProperties.getDeletePartitionMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeletePartitionTotalTimeout() != null) {
      deletePartitionRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeletePartitionTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePartitionTotalTimeout set to "
                + this.clientProperties.getDeletePartitionTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deletePartitionSettings()
        .setRetrySettings(deletePartitionRetrySettingBuilder.build());
    RetrySettings.Builder getPartitionRetrySettingBuilder =
        clientSettingsBuilder.getPartitionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetPartitionInitialRetryDelay() != null) {
      getPartitionRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetPartitionInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPartitionInitialRetryDelay set to "
                + this.clientProperties.getGetPartitionInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetPartitionRetryDelayMultiplier() != null) {
      getPartitionRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetPartitionRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPartitionRetryDelayMultiplier set to "
                + this.clientProperties.getGetPartitionRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetPartitionMaxRetryDelay() != null) {
      getPartitionRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetPartitionMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPartitionMaxRetryDelay set to "
                + this.clientProperties.getGetPartitionMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetPartitionInitialRpcTimeout() != null) {
      getPartitionRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetPartitionInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPartitionInitialRpcTimeout set to "
                + this.clientProperties.getGetPartitionInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetPartitionRpcTimeoutMultiplier() != null) {
      getPartitionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetPartitionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPartitionRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetPartitionRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetPartitionMaxRpcTimeout() != null) {
      getPartitionRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetPartitionMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPartitionMaxRpcTimeout set to "
                + this.clientProperties.getGetPartitionMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetPartitionTotalTimeout() != null) {
      getPartitionRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetPartitionTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPartitionTotalTimeout set to "
                + this.clientProperties.getGetPartitionTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getPartitionSettings()
        .setRetrySettings(getPartitionRetrySettingBuilder.build());
    RetrySettings.Builder listPartitionsRetrySettingBuilder =
        clientSettingsBuilder.listPartitionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListPartitionsInitialRetryDelay() != null) {
      listPartitionsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListPartitionsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPartitionsInitialRetryDelay set to "
                + this.clientProperties.getListPartitionsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListPartitionsRetryDelayMultiplier() != null) {
      listPartitionsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListPartitionsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPartitionsRetryDelayMultiplier set to "
                + this.clientProperties.getListPartitionsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListPartitionsMaxRetryDelay() != null) {
      listPartitionsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListPartitionsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPartitionsMaxRetryDelay set to "
                + this.clientProperties.getListPartitionsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListPartitionsInitialRpcTimeout() != null) {
      listPartitionsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListPartitionsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPartitionsInitialRpcTimeout set to "
                + this.clientProperties.getListPartitionsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListPartitionsRpcTimeoutMultiplier() != null) {
      listPartitionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListPartitionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPartitionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListPartitionsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListPartitionsMaxRpcTimeout() != null) {
      listPartitionsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListPartitionsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPartitionsMaxRpcTimeout set to "
                + this.clientProperties.getListPartitionsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListPartitionsTotalTimeout() != null) {
      listPartitionsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListPartitionsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPartitionsTotalTimeout set to "
                + this.clientProperties.getListPartitionsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listPartitionsSettings()
        .setRetrySettings(listPartitionsRetrySettingBuilder.build());
    RetrySettings.Builder listLocationsRetrySettingBuilder =
        clientSettingsBuilder.listLocationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListLocationsRpcTimeoutMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listLocationsSettings()
        .setRetrySettings(listLocationsRetrySettingBuilder.build());
    RetrySettings.Builder getLocationRetrySettingBuilder =
        clientSettingsBuilder.getLocationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetLocationRpcTimeoutMultiplier() != null) {
      getLocationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getLocationSettings()
        .setRetrySettings(getLocationRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public MetadataServiceClient metadataServiceClient(
      MetadataServiceSettings metadataServiceSettings) throws IOException {
    return MetadataServiceClient.create(metadataServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-metadata-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
