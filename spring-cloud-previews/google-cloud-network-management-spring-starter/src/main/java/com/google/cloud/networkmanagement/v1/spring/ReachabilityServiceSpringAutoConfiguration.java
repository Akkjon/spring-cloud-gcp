/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.networkmanagement.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.networkmanagement.v1.ReachabilityServiceClient;
import com.google.cloud.networkmanagement.v1.ReachabilityServiceSettings;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ReachabilityServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ReachabilityServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.networkmanagement.v1.spring.auto.reachability-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(ReachabilityServiceSpringProperties.class)
public class ReachabilityServiceSpringAutoConfiguration {
  private final ReachabilityServiceSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER =
      LogFactory.getLog(ReachabilityServiceSpringAutoConfiguration.class);

  protected ReachabilityServiceSpringAutoConfiguration(
      ReachabilityServiceSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from ReachabilityService-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultReachabilityServiceTransportChannelProvider() {
    return ReachabilityServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ReachabilityServiceClient bean configured to use the default credentials provider
   * (obtained with reachabilityServiceCredentials()) and its default transport channel provider
   * (defaultReachabilityServiceTransportChannelProvider()). It also configures the quota project ID
   * if provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in ReachabilityServiceSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   */
  @Bean
  @ConditionalOnMissingBean
  public ReachabilityServiceSettings reachabilityServiceSettings(
      @Qualifier("defaultReachabilityServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ReachabilityServiceSettings.Builder clientSettingsBuilder =
        ReachabilityServiceSettings.newBuilder()
            .setCredentialsProvider(this.credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ReachabilityServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          ReachabilityServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings listConnectivityTestsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listConnectivityTestsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listConnectivityTestsSettings()
          .setRetrySettings(listConnectivityTestsRetrySettings);

      RetrySettings getConnectivityTestRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getConnectivityTestSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getConnectivityTestSettings()
          .setRetrySettings(getConnectivityTestRetrySettings);

      RetrySettings createConnectivityTestRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createConnectivityTestSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createConnectivityTestSettings()
          .setRetrySettings(createConnectivityTestRetrySettings);

      RetrySettings updateConnectivityTestRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateConnectivityTestSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateConnectivityTestSettings()
          .setRetrySettings(updateConnectivityTestRetrySettings);

      RetrySettings rerunConnectivityTestRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.rerunConnectivityTestSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .rerunConnectivityTestSettings()
          .setRetrySettings(rerunConnectivityTestRetrySettings);

      RetrySettings deleteConnectivityTestRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteConnectivityTestSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteConnectivityTestSettings()
          .setRetrySettings(deleteConnectivityTestRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry listConnectivityTestsRetry = clientProperties.getListConnectivityTestsRetry();
    if (listConnectivityTestsRetry != null) {
      RetrySettings listConnectivityTestsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listConnectivityTestsSettings().getRetrySettings(),
              listConnectivityTestsRetry);
      clientSettingsBuilder
          .listConnectivityTestsSettings()
          .setRetrySettings(listConnectivityTestsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listConnectivityTests from properties.");
      }
    }
    Retry getConnectivityTestRetry = clientProperties.getGetConnectivityTestRetry();
    if (getConnectivityTestRetry != null) {
      RetrySettings getConnectivityTestRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getConnectivityTestSettings().getRetrySettings(),
              getConnectivityTestRetry);
      clientSettingsBuilder
          .getConnectivityTestSettings()
          .setRetrySettings(getConnectivityTestRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getConnectivityTest from properties.");
      }
    }
    Retry createConnectivityTestRetry = clientProperties.getCreateConnectivityTestRetry();
    if (createConnectivityTestRetry != null) {
      RetrySettings createConnectivityTestRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createConnectivityTestSettings().getRetrySettings(),
              createConnectivityTestRetry);
      clientSettingsBuilder
          .createConnectivityTestSettings()
          .setRetrySettings(createConnectivityTestRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createConnectivityTest from properties.");
      }
    }
    Retry updateConnectivityTestRetry = clientProperties.getUpdateConnectivityTestRetry();
    if (updateConnectivityTestRetry != null) {
      RetrySettings updateConnectivityTestRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateConnectivityTestSettings().getRetrySettings(),
              updateConnectivityTestRetry);
      clientSettingsBuilder
          .updateConnectivityTestSettings()
          .setRetrySettings(updateConnectivityTestRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateConnectivityTest from properties.");
      }
    }
    Retry rerunConnectivityTestRetry = clientProperties.getRerunConnectivityTestRetry();
    if (rerunConnectivityTestRetry != null) {
      RetrySettings rerunConnectivityTestRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.rerunConnectivityTestSettings().getRetrySettings(),
              rerunConnectivityTestRetry);
      clientSettingsBuilder
          .rerunConnectivityTestSettings()
          .setRetrySettings(rerunConnectivityTestRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for rerunConnectivityTest from properties.");
      }
    }
    Retry deleteConnectivityTestRetry = clientProperties.getDeleteConnectivityTestRetry();
    if (deleteConnectivityTestRetry != null) {
      RetrySettings deleteConnectivityTestRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteConnectivityTestSettings().getRetrySettings(),
              deleteConnectivityTestRetry);
      clientSettingsBuilder
          .deleteConnectivityTestSettings()
          .setRetrySettings(deleteConnectivityTestRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteConnectivityTest from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public ReachabilityServiceClient reachabilityServiceClient(
      ReachabilityServiceSettings reachabilityServiceSettings) throws IOException {
    return ReachabilityServiceClient.create(reachabilityServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-reachability-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
