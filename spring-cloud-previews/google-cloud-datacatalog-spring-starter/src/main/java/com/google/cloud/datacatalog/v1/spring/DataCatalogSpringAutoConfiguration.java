/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.datacatalog.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.datacatalog.v1.DataCatalogClient;
import com.google.cloud.datacatalog.v1.DataCatalogSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link DataCatalogClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(DataCatalogClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.datacatalog.v1.spring.auto.data-catalog.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({DataCatalogSpringProperties.class, GlobalProperties.class})
public class DataCatalogSpringAutoConfiguration {
  private final DataCatalogSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(DataCatalogSpringAutoConfiguration.class);

  protected DataCatalogSpringAutoConfiguration(
      DataCatalogSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider dataCatalogCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from DataCatalog-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultDataCatalogTransportChannelProvider() {
    return DataCatalogSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a DataCatalogClient bean configured to use the default credentials provider (obtained
   * with dataCatalogCredentials()) and its default transport channel provider
   * (defaultDataCatalogTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in DataCatalogSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public DataCatalogSettings dataCatalogSettings(
      @Qualifier("dataCatalogCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultDataCatalogTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    DataCatalogSettings.Builder clientSettingsBuilder =
        DataCatalogSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          DataCatalogSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          DataCatalogSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder searchCatalogRetrySettingBuilder =
        clientSettingsBuilder.searchCatalogSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSearchCatalogInitialRetryDelay() != null) {
      searchCatalogRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getSearchCatalogInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SearchCatalogInitialRetryDelay set to "
                + this.clientProperties.getSearchCatalogInitialRetryDelay());
      }
    }
    if (this.clientProperties.getSearchCatalogRetryDelayMultiplier() != null) {
      searchCatalogRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getSearchCatalogRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SearchCatalogRetryDelayMultiplier set to "
                + this.clientProperties.getSearchCatalogRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getSearchCatalogMaxRetryDelay() != null) {
      searchCatalogRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getSearchCatalogMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SearchCatalogMaxRetryDelay set to "
                + this.clientProperties.getSearchCatalogMaxRetryDelay());
      }
    }
    if (this.clientProperties.getSearchCatalogInitialRpcTimeout() != null) {
      searchCatalogRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSearchCatalogInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SearchCatalogInitialRpcTimeout set to "
                + this.clientProperties.getSearchCatalogInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSearchCatalogRpcTimeoutMultiplier() != null) {
      searchCatalogRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSearchCatalogRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SearchCatalogRpcTimeoutMultiplier set to "
                + this.clientProperties.getSearchCatalogRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSearchCatalogMaxRpcTimeout() != null) {
      searchCatalogRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSearchCatalogMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SearchCatalogMaxRpcTimeout set to "
                + this.clientProperties.getSearchCatalogMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSearchCatalogTotalTimeout() != null) {
      searchCatalogRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSearchCatalogTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SearchCatalogTotalTimeout set to "
                + this.clientProperties.getSearchCatalogTotalTimeout());
      }
    }
    clientSettingsBuilder
        .searchCatalogSettings()
        .setRetrySettings(searchCatalogRetrySettingBuilder.build());
    RetrySettings.Builder createEntryGroupRetrySettingBuilder =
        clientSettingsBuilder.createEntryGroupSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateEntryGroupInitialRpcTimeout() != null) {
      createEntryGroupRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateEntryGroupInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEntryGroupInitialRpcTimeout set to "
                + this.clientProperties.getCreateEntryGroupInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateEntryGroupRpcTimeoutMultiplier() != null) {
      createEntryGroupRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateEntryGroupRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEntryGroupRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateEntryGroupRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateEntryGroupMaxRpcTimeout() != null) {
      createEntryGroupRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateEntryGroupMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEntryGroupMaxRpcTimeout set to "
                + this.clientProperties.getCreateEntryGroupMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateEntryGroupTotalTimeout() != null) {
      createEntryGroupRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateEntryGroupTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEntryGroupTotalTimeout set to "
                + this.clientProperties.getCreateEntryGroupTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createEntryGroupSettings()
        .setRetrySettings(createEntryGroupRetrySettingBuilder.build());
    RetrySettings.Builder getEntryGroupRetrySettingBuilder =
        clientSettingsBuilder.getEntryGroupSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetEntryGroupInitialRetryDelay() != null) {
      getEntryGroupRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetEntryGroupInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntryGroupInitialRetryDelay set to "
                + this.clientProperties.getGetEntryGroupInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetEntryGroupRetryDelayMultiplier() != null) {
      getEntryGroupRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetEntryGroupRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntryGroupRetryDelayMultiplier set to "
                + this.clientProperties.getGetEntryGroupRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetEntryGroupMaxRetryDelay() != null) {
      getEntryGroupRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetEntryGroupMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntryGroupMaxRetryDelay set to "
                + this.clientProperties.getGetEntryGroupMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetEntryGroupInitialRpcTimeout() != null) {
      getEntryGroupRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetEntryGroupInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntryGroupInitialRpcTimeout set to "
                + this.clientProperties.getGetEntryGroupInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEntryGroupRpcTimeoutMultiplier() != null) {
      getEntryGroupRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetEntryGroupRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntryGroupRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetEntryGroupRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetEntryGroupMaxRpcTimeout() != null) {
      getEntryGroupRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetEntryGroupMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntryGroupMaxRpcTimeout set to "
                + this.clientProperties.getGetEntryGroupMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEntryGroupTotalTimeout() != null) {
      getEntryGroupRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetEntryGroupTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntryGroupTotalTimeout set to "
                + this.clientProperties.getGetEntryGroupTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getEntryGroupSettings()
        .setRetrySettings(getEntryGroupRetrySettingBuilder.build());
    RetrySettings.Builder updateEntryGroupRetrySettingBuilder =
        clientSettingsBuilder.updateEntryGroupSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateEntryGroupInitialRpcTimeout() != null) {
      updateEntryGroupRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateEntryGroupInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEntryGroupInitialRpcTimeout set to "
                + this.clientProperties.getUpdateEntryGroupInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateEntryGroupRpcTimeoutMultiplier() != null) {
      updateEntryGroupRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateEntryGroupRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEntryGroupRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateEntryGroupRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateEntryGroupMaxRpcTimeout() != null) {
      updateEntryGroupRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateEntryGroupMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEntryGroupMaxRpcTimeout set to "
                + this.clientProperties.getUpdateEntryGroupMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateEntryGroupTotalTimeout() != null) {
      updateEntryGroupRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateEntryGroupTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEntryGroupTotalTimeout set to "
                + this.clientProperties.getUpdateEntryGroupTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateEntryGroupSettings()
        .setRetrySettings(updateEntryGroupRetrySettingBuilder.build());
    RetrySettings.Builder deleteEntryGroupRetrySettingBuilder =
        clientSettingsBuilder.deleteEntryGroupSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteEntryGroupInitialRpcTimeout() != null) {
      deleteEntryGroupRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteEntryGroupInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEntryGroupInitialRpcTimeout set to "
                + this.clientProperties.getDeleteEntryGroupInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteEntryGroupRpcTimeoutMultiplier() != null) {
      deleteEntryGroupRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteEntryGroupRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEntryGroupRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteEntryGroupRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteEntryGroupMaxRpcTimeout() != null) {
      deleteEntryGroupRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteEntryGroupMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEntryGroupMaxRpcTimeout set to "
                + this.clientProperties.getDeleteEntryGroupMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteEntryGroupTotalTimeout() != null) {
      deleteEntryGroupRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteEntryGroupTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEntryGroupTotalTimeout set to "
                + this.clientProperties.getDeleteEntryGroupTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteEntryGroupSettings()
        .setRetrySettings(deleteEntryGroupRetrySettingBuilder.build());
    RetrySettings.Builder listEntryGroupsRetrySettingBuilder =
        clientSettingsBuilder.listEntryGroupsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListEntryGroupsInitialRetryDelay() != null) {
      listEntryGroupsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListEntryGroupsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntryGroupsInitialRetryDelay set to "
                + this.clientProperties.getListEntryGroupsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListEntryGroupsRetryDelayMultiplier() != null) {
      listEntryGroupsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListEntryGroupsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntryGroupsRetryDelayMultiplier set to "
                + this.clientProperties.getListEntryGroupsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListEntryGroupsMaxRetryDelay() != null) {
      listEntryGroupsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListEntryGroupsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntryGroupsMaxRetryDelay set to "
                + this.clientProperties.getListEntryGroupsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListEntryGroupsInitialRpcTimeout() != null) {
      listEntryGroupsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListEntryGroupsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntryGroupsInitialRpcTimeout set to "
                + this.clientProperties.getListEntryGroupsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListEntryGroupsRpcTimeoutMultiplier() != null) {
      listEntryGroupsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListEntryGroupsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntryGroupsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListEntryGroupsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListEntryGroupsMaxRpcTimeout() != null) {
      listEntryGroupsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListEntryGroupsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntryGroupsMaxRpcTimeout set to "
                + this.clientProperties.getListEntryGroupsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListEntryGroupsTotalTimeout() != null) {
      listEntryGroupsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListEntryGroupsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntryGroupsTotalTimeout set to "
                + this.clientProperties.getListEntryGroupsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listEntryGroupsSettings()
        .setRetrySettings(listEntryGroupsRetrySettingBuilder.build());
    RetrySettings.Builder createEntryRetrySettingBuilder =
        clientSettingsBuilder.createEntrySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateEntryInitialRpcTimeout() != null) {
      createEntryRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateEntryInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEntryInitialRpcTimeout set to "
                + this.clientProperties.getCreateEntryInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateEntryRpcTimeoutMultiplier() != null) {
      createEntryRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateEntryRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEntryRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateEntryRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateEntryMaxRpcTimeout() != null) {
      createEntryRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateEntryMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEntryMaxRpcTimeout set to "
                + this.clientProperties.getCreateEntryMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateEntryTotalTimeout() != null) {
      createEntryRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateEntryTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEntryTotalTimeout set to " + this.clientProperties.getCreateEntryTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createEntrySettings()
        .setRetrySettings(createEntryRetrySettingBuilder.build());
    RetrySettings.Builder updateEntryRetrySettingBuilder =
        clientSettingsBuilder.updateEntrySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateEntryInitialRpcTimeout() != null) {
      updateEntryRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateEntryInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEntryInitialRpcTimeout set to "
                + this.clientProperties.getUpdateEntryInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateEntryRpcTimeoutMultiplier() != null) {
      updateEntryRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateEntryRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEntryRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateEntryRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateEntryMaxRpcTimeout() != null) {
      updateEntryRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateEntryMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEntryMaxRpcTimeout set to "
                + this.clientProperties.getUpdateEntryMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateEntryTotalTimeout() != null) {
      updateEntryRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateEntryTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEntryTotalTimeout set to " + this.clientProperties.getUpdateEntryTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateEntrySettings()
        .setRetrySettings(updateEntryRetrySettingBuilder.build());
    RetrySettings.Builder deleteEntryRetrySettingBuilder =
        clientSettingsBuilder.deleteEntrySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteEntryInitialRpcTimeout() != null) {
      deleteEntryRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteEntryInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEntryInitialRpcTimeout set to "
                + this.clientProperties.getDeleteEntryInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteEntryRpcTimeoutMultiplier() != null) {
      deleteEntryRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteEntryRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEntryRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteEntryRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteEntryMaxRpcTimeout() != null) {
      deleteEntryRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteEntryMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEntryMaxRpcTimeout set to "
                + this.clientProperties.getDeleteEntryMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteEntryTotalTimeout() != null) {
      deleteEntryRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteEntryTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEntryTotalTimeout set to " + this.clientProperties.getDeleteEntryTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteEntrySettings()
        .setRetrySettings(deleteEntryRetrySettingBuilder.build());
    RetrySettings.Builder getEntryRetrySettingBuilder =
        clientSettingsBuilder.getEntrySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetEntryInitialRetryDelay() != null) {
      getEntryRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetEntryInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntryInitialRetryDelay set to "
                + this.clientProperties.getGetEntryInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetEntryRetryDelayMultiplier() != null) {
      getEntryRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetEntryRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntryRetryDelayMultiplier set to "
                + this.clientProperties.getGetEntryRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetEntryMaxRetryDelay() != null) {
      getEntryRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetEntryMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntryMaxRetryDelay set to " + this.clientProperties.getGetEntryMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetEntryInitialRpcTimeout() != null) {
      getEntryRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetEntryInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntryInitialRpcTimeout set to "
                + this.clientProperties.getGetEntryInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEntryRpcTimeoutMultiplier() != null) {
      getEntryRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetEntryRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntryRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetEntryRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetEntryMaxRpcTimeout() != null) {
      getEntryRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetEntryMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntryMaxRpcTimeout set to " + this.clientProperties.getGetEntryMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEntryTotalTimeout() != null) {
      getEntryRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetEntryTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntryTotalTimeout set to " + this.clientProperties.getGetEntryTotalTimeout());
      }
    }
    clientSettingsBuilder.getEntrySettings().setRetrySettings(getEntryRetrySettingBuilder.build());
    RetrySettings.Builder lookupEntryRetrySettingBuilder =
        clientSettingsBuilder.lookupEntrySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getLookupEntryInitialRetryDelay() != null) {
      lookupEntryRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getLookupEntryInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "LookupEntryInitialRetryDelay set to "
                + this.clientProperties.getLookupEntryInitialRetryDelay());
      }
    }
    if (this.clientProperties.getLookupEntryRetryDelayMultiplier() != null) {
      lookupEntryRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getLookupEntryRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "LookupEntryRetryDelayMultiplier set to "
                + this.clientProperties.getLookupEntryRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getLookupEntryMaxRetryDelay() != null) {
      lookupEntryRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getLookupEntryMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "LookupEntryMaxRetryDelay set to "
                + this.clientProperties.getLookupEntryMaxRetryDelay());
      }
    }
    if (this.clientProperties.getLookupEntryInitialRpcTimeout() != null) {
      lookupEntryRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getLookupEntryInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "LookupEntryInitialRpcTimeout set to "
                + this.clientProperties.getLookupEntryInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getLookupEntryRpcTimeoutMultiplier() != null) {
      lookupEntryRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getLookupEntryRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "LookupEntryRpcTimeoutMultiplier set to "
                + this.clientProperties.getLookupEntryRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getLookupEntryMaxRpcTimeout() != null) {
      lookupEntryRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getLookupEntryMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "LookupEntryMaxRpcTimeout set to "
                + this.clientProperties.getLookupEntryMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getLookupEntryTotalTimeout() != null) {
      lookupEntryRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getLookupEntryTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "LookupEntryTotalTimeout set to " + this.clientProperties.getLookupEntryTotalTimeout());
      }
    }
    clientSettingsBuilder
        .lookupEntrySettings()
        .setRetrySettings(lookupEntryRetrySettingBuilder.build());
    RetrySettings.Builder listEntriesRetrySettingBuilder =
        clientSettingsBuilder.listEntriesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListEntriesInitialRetryDelay() != null) {
      listEntriesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListEntriesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntriesInitialRetryDelay set to "
                + this.clientProperties.getListEntriesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListEntriesRetryDelayMultiplier() != null) {
      listEntriesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListEntriesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntriesRetryDelayMultiplier set to "
                + this.clientProperties.getListEntriesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListEntriesMaxRetryDelay() != null) {
      listEntriesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListEntriesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntriesMaxRetryDelay set to "
                + this.clientProperties.getListEntriesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListEntriesInitialRpcTimeout() != null) {
      listEntriesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListEntriesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntriesInitialRpcTimeout set to "
                + this.clientProperties.getListEntriesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListEntriesRpcTimeoutMultiplier() != null) {
      listEntriesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListEntriesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntriesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListEntriesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListEntriesMaxRpcTimeout() != null) {
      listEntriesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListEntriesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntriesMaxRpcTimeout set to "
                + this.clientProperties.getListEntriesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListEntriesTotalTimeout() != null) {
      listEntriesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListEntriesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntriesTotalTimeout set to " + this.clientProperties.getListEntriesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listEntriesSettings()
        .setRetrySettings(listEntriesRetrySettingBuilder.build());
    RetrySettings.Builder modifyEntryOverviewRetrySettingBuilder =
        clientSettingsBuilder.modifyEntryOverviewSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getModifyEntryOverviewInitialRpcTimeout() != null) {
      modifyEntryOverviewRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getModifyEntryOverviewInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ModifyEntryOverviewInitialRpcTimeout set to "
                + this.clientProperties.getModifyEntryOverviewInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getModifyEntryOverviewRpcTimeoutMultiplier() != null) {
      modifyEntryOverviewRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getModifyEntryOverviewRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ModifyEntryOverviewRpcTimeoutMultiplier set to "
                + this.clientProperties.getModifyEntryOverviewRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getModifyEntryOverviewMaxRpcTimeout() != null) {
      modifyEntryOverviewRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getModifyEntryOverviewMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ModifyEntryOverviewMaxRpcTimeout set to "
                + this.clientProperties.getModifyEntryOverviewMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getModifyEntryOverviewTotalTimeout() != null) {
      modifyEntryOverviewRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getModifyEntryOverviewTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ModifyEntryOverviewTotalTimeout set to "
                + this.clientProperties.getModifyEntryOverviewTotalTimeout());
      }
    }
    clientSettingsBuilder
        .modifyEntryOverviewSettings()
        .setRetrySettings(modifyEntryOverviewRetrySettingBuilder.build());
    RetrySettings.Builder modifyEntryContactsRetrySettingBuilder =
        clientSettingsBuilder.modifyEntryContactsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getModifyEntryContactsInitialRpcTimeout() != null) {
      modifyEntryContactsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getModifyEntryContactsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ModifyEntryContactsInitialRpcTimeout set to "
                + this.clientProperties.getModifyEntryContactsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getModifyEntryContactsRpcTimeoutMultiplier() != null) {
      modifyEntryContactsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getModifyEntryContactsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ModifyEntryContactsRpcTimeoutMultiplier set to "
                + this.clientProperties.getModifyEntryContactsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getModifyEntryContactsMaxRpcTimeout() != null) {
      modifyEntryContactsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getModifyEntryContactsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ModifyEntryContactsMaxRpcTimeout set to "
                + this.clientProperties.getModifyEntryContactsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getModifyEntryContactsTotalTimeout() != null) {
      modifyEntryContactsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getModifyEntryContactsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ModifyEntryContactsTotalTimeout set to "
                + this.clientProperties.getModifyEntryContactsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .modifyEntryContactsSettings()
        .setRetrySettings(modifyEntryContactsRetrySettingBuilder.build());
    RetrySettings.Builder createTagTemplateRetrySettingBuilder =
        clientSettingsBuilder.createTagTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateTagTemplateInitialRpcTimeout() != null) {
      createTagTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateTagTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTagTemplateInitialRpcTimeout set to "
                + this.clientProperties.getCreateTagTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateTagTemplateRpcTimeoutMultiplier() != null) {
      createTagTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateTagTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTagTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateTagTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateTagTemplateMaxRpcTimeout() != null) {
      createTagTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateTagTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTagTemplateMaxRpcTimeout set to "
                + this.clientProperties.getCreateTagTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateTagTemplateTotalTimeout() != null) {
      createTagTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateTagTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTagTemplateTotalTimeout set to "
                + this.clientProperties.getCreateTagTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createTagTemplateSettings()
        .setRetrySettings(createTagTemplateRetrySettingBuilder.build());
    RetrySettings.Builder getTagTemplateRetrySettingBuilder =
        clientSettingsBuilder.getTagTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetTagTemplateInitialRpcTimeout() != null) {
      getTagTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetTagTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTagTemplateInitialRpcTimeout set to "
                + this.clientProperties.getGetTagTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetTagTemplateRpcTimeoutMultiplier() != null) {
      getTagTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetTagTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTagTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetTagTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetTagTemplateMaxRpcTimeout() != null) {
      getTagTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetTagTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTagTemplateMaxRpcTimeout set to "
                + this.clientProperties.getGetTagTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetTagTemplateTotalTimeout() != null) {
      getTagTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetTagTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTagTemplateTotalTimeout set to "
                + this.clientProperties.getGetTagTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getTagTemplateSettings()
        .setRetrySettings(getTagTemplateRetrySettingBuilder.build());
    RetrySettings.Builder updateTagTemplateRetrySettingBuilder =
        clientSettingsBuilder.updateTagTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateTagTemplateInitialRpcTimeout() != null) {
      updateTagTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateTagTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTagTemplateInitialRpcTimeout set to "
                + this.clientProperties.getUpdateTagTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateTagTemplateRpcTimeoutMultiplier() != null) {
      updateTagTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateTagTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTagTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateTagTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateTagTemplateMaxRpcTimeout() != null) {
      updateTagTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateTagTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTagTemplateMaxRpcTimeout set to "
                + this.clientProperties.getUpdateTagTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateTagTemplateTotalTimeout() != null) {
      updateTagTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateTagTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTagTemplateTotalTimeout set to "
                + this.clientProperties.getUpdateTagTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateTagTemplateSettings()
        .setRetrySettings(updateTagTemplateRetrySettingBuilder.build());
    RetrySettings.Builder deleteTagTemplateRetrySettingBuilder =
        clientSettingsBuilder.deleteTagTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteTagTemplateInitialRpcTimeout() != null) {
      deleteTagTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteTagTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTagTemplateInitialRpcTimeout set to "
                + this.clientProperties.getDeleteTagTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteTagTemplateRpcTimeoutMultiplier() != null) {
      deleteTagTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteTagTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTagTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteTagTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteTagTemplateMaxRpcTimeout() != null) {
      deleteTagTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteTagTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTagTemplateMaxRpcTimeout set to "
                + this.clientProperties.getDeleteTagTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteTagTemplateTotalTimeout() != null) {
      deleteTagTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteTagTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTagTemplateTotalTimeout set to "
                + this.clientProperties.getDeleteTagTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteTagTemplateSettings()
        .setRetrySettings(deleteTagTemplateRetrySettingBuilder.build());
    RetrySettings.Builder createTagTemplateFieldRetrySettingBuilder =
        clientSettingsBuilder.createTagTemplateFieldSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateTagTemplateFieldInitialRpcTimeout() != null) {
      createTagTemplateFieldRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateTagTemplateFieldInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTagTemplateFieldInitialRpcTimeout set to "
                + this.clientProperties.getCreateTagTemplateFieldInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateTagTemplateFieldRpcTimeoutMultiplier() != null) {
      createTagTemplateFieldRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateTagTemplateFieldRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTagTemplateFieldRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateTagTemplateFieldRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateTagTemplateFieldMaxRpcTimeout() != null) {
      createTagTemplateFieldRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateTagTemplateFieldMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTagTemplateFieldMaxRpcTimeout set to "
                + this.clientProperties.getCreateTagTemplateFieldMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateTagTemplateFieldTotalTimeout() != null) {
      createTagTemplateFieldRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateTagTemplateFieldTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTagTemplateFieldTotalTimeout set to "
                + this.clientProperties.getCreateTagTemplateFieldTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createTagTemplateFieldSettings()
        .setRetrySettings(createTagTemplateFieldRetrySettingBuilder.build());
    RetrySettings.Builder updateTagTemplateFieldRetrySettingBuilder =
        clientSettingsBuilder.updateTagTemplateFieldSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateTagTemplateFieldInitialRpcTimeout() != null) {
      updateTagTemplateFieldRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateTagTemplateFieldInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTagTemplateFieldInitialRpcTimeout set to "
                + this.clientProperties.getUpdateTagTemplateFieldInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateTagTemplateFieldRpcTimeoutMultiplier() != null) {
      updateTagTemplateFieldRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateTagTemplateFieldRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTagTemplateFieldRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateTagTemplateFieldRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateTagTemplateFieldMaxRpcTimeout() != null) {
      updateTagTemplateFieldRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateTagTemplateFieldMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTagTemplateFieldMaxRpcTimeout set to "
                + this.clientProperties.getUpdateTagTemplateFieldMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateTagTemplateFieldTotalTimeout() != null) {
      updateTagTemplateFieldRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateTagTemplateFieldTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTagTemplateFieldTotalTimeout set to "
                + this.clientProperties.getUpdateTagTemplateFieldTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateTagTemplateFieldSettings()
        .setRetrySettings(updateTagTemplateFieldRetrySettingBuilder.build());
    RetrySettings.Builder renameTagTemplateFieldRetrySettingBuilder =
        clientSettingsBuilder.renameTagTemplateFieldSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRenameTagTemplateFieldInitialRpcTimeout() != null) {
      renameTagTemplateFieldRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRenameTagTemplateFieldInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RenameTagTemplateFieldInitialRpcTimeout set to "
                + this.clientProperties.getRenameTagTemplateFieldInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRenameTagTemplateFieldRpcTimeoutMultiplier() != null) {
      renameTagTemplateFieldRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRenameTagTemplateFieldRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RenameTagTemplateFieldRpcTimeoutMultiplier set to "
                + this.clientProperties.getRenameTagTemplateFieldRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRenameTagTemplateFieldMaxRpcTimeout() != null) {
      renameTagTemplateFieldRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRenameTagTemplateFieldMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RenameTagTemplateFieldMaxRpcTimeout set to "
                + this.clientProperties.getRenameTagTemplateFieldMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRenameTagTemplateFieldTotalTimeout() != null) {
      renameTagTemplateFieldRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRenameTagTemplateFieldTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RenameTagTemplateFieldTotalTimeout set to "
                + this.clientProperties.getRenameTagTemplateFieldTotalTimeout());
      }
    }
    clientSettingsBuilder
        .renameTagTemplateFieldSettings()
        .setRetrySettings(renameTagTemplateFieldRetrySettingBuilder.build());
    RetrySettings.Builder renameTagTemplateFieldEnumValueRetrySettingBuilder =
        clientSettingsBuilder
            .renameTagTemplateFieldEnumValueSettings()
            .getRetrySettings()
            .toBuilder();
    if (this.clientProperties.getRenameTagTemplateFieldEnumValueInitialRpcTimeout() != null) {
      renameTagTemplateFieldEnumValueRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRenameTagTemplateFieldEnumValueInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RenameTagTemplateFieldEnumValueInitialRpcTimeout set to "
                + this.clientProperties.getRenameTagTemplateFieldEnumValueInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRenameTagTemplateFieldEnumValueRpcTimeoutMultiplier() != null) {
      renameTagTemplateFieldEnumValueRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRenameTagTemplateFieldEnumValueRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RenameTagTemplateFieldEnumValueRpcTimeoutMultiplier set to "
                + this.clientProperties.getRenameTagTemplateFieldEnumValueRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRenameTagTemplateFieldEnumValueMaxRpcTimeout() != null) {
      renameTagTemplateFieldEnumValueRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRenameTagTemplateFieldEnumValueMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RenameTagTemplateFieldEnumValueMaxRpcTimeout set to "
                + this.clientProperties.getRenameTagTemplateFieldEnumValueMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRenameTagTemplateFieldEnumValueTotalTimeout() != null) {
      renameTagTemplateFieldEnumValueRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRenameTagTemplateFieldEnumValueTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RenameTagTemplateFieldEnumValueTotalTimeout set to "
                + this.clientProperties.getRenameTagTemplateFieldEnumValueTotalTimeout());
      }
    }
    clientSettingsBuilder
        .renameTagTemplateFieldEnumValueSettings()
        .setRetrySettings(renameTagTemplateFieldEnumValueRetrySettingBuilder.build());
    RetrySettings.Builder deleteTagTemplateFieldRetrySettingBuilder =
        clientSettingsBuilder.deleteTagTemplateFieldSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteTagTemplateFieldInitialRpcTimeout() != null) {
      deleteTagTemplateFieldRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteTagTemplateFieldInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTagTemplateFieldInitialRpcTimeout set to "
                + this.clientProperties.getDeleteTagTemplateFieldInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteTagTemplateFieldRpcTimeoutMultiplier() != null) {
      deleteTagTemplateFieldRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteTagTemplateFieldRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTagTemplateFieldRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteTagTemplateFieldRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteTagTemplateFieldMaxRpcTimeout() != null) {
      deleteTagTemplateFieldRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteTagTemplateFieldMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTagTemplateFieldMaxRpcTimeout set to "
                + this.clientProperties.getDeleteTagTemplateFieldMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteTagTemplateFieldTotalTimeout() != null) {
      deleteTagTemplateFieldRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteTagTemplateFieldTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTagTemplateFieldTotalTimeout set to "
                + this.clientProperties.getDeleteTagTemplateFieldTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteTagTemplateFieldSettings()
        .setRetrySettings(deleteTagTemplateFieldRetrySettingBuilder.build());
    RetrySettings.Builder createTagRetrySettingBuilder =
        clientSettingsBuilder.createTagSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateTagInitialRpcTimeout() != null) {
      createTagRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateTagInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTagInitialRpcTimeout set to "
                + this.clientProperties.getCreateTagInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateTagRpcTimeoutMultiplier() != null) {
      createTagRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateTagRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTagRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateTagRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateTagMaxRpcTimeout() != null) {
      createTagRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateTagMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTagMaxRpcTimeout set to " + this.clientProperties.getCreateTagMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateTagTotalTimeout() != null) {
      createTagRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateTagTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTagTotalTimeout set to " + this.clientProperties.getCreateTagTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createTagSettings()
        .setRetrySettings(createTagRetrySettingBuilder.build());
    RetrySettings.Builder updateTagRetrySettingBuilder =
        clientSettingsBuilder.updateTagSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateTagInitialRpcTimeout() != null) {
      updateTagRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateTagInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTagInitialRpcTimeout set to "
                + this.clientProperties.getUpdateTagInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateTagRpcTimeoutMultiplier() != null) {
      updateTagRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateTagRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTagRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateTagRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateTagMaxRpcTimeout() != null) {
      updateTagRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateTagMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTagMaxRpcTimeout set to " + this.clientProperties.getUpdateTagMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateTagTotalTimeout() != null) {
      updateTagRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateTagTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTagTotalTimeout set to " + this.clientProperties.getUpdateTagTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateTagSettings()
        .setRetrySettings(updateTagRetrySettingBuilder.build());
    RetrySettings.Builder deleteTagRetrySettingBuilder =
        clientSettingsBuilder.deleteTagSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteTagInitialRpcTimeout() != null) {
      deleteTagRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteTagInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTagInitialRpcTimeout set to "
                + this.clientProperties.getDeleteTagInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteTagRpcTimeoutMultiplier() != null) {
      deleteTagRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteTagRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTagRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteTagRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteTagMaxRpcTimeout() != null) {
      deleteTagRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteTagMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTagMaxRpcTimeout set to " + this.clientProperties.getDeleteTagMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteTagTotalTimeout() != null) {
      deleteTagRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteTagTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTagTotalTimeout set to " + this.clientProperties.getDeleteTagTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteTagSettings()
        .setRetrySettings(deleteTagRetrySettingBuilder.build());
    RetrySettings.Builder listTagsRetrySettingBuilder =
        clientSettingsBuilder.listTagsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListTagsInitialRetryDelay() != null) {
      listTagsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListTagsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTagsInitialRetryDelay set to "
                + this.clientProperties.getListTagsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListTagsRetryDelayMultiplier() != null) {
      listTagsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListTagsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTagsRetryDelayMultiplier set to "
                + this.clientProperties.getListTagsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListTagsMaxRetryDelay() != null) {
      listTagsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListTagsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTagsMaxRetryDelay set to " + this.clientProperties.getListTagsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListTagsInitialRpcTimeout() != null) {
      listTagsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListTagsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTagsInitialRpcTimeout set to "
                + this.clientProperties.getListTagsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListTagsRpcTimeoutMultiplier() != null) {
      listTagsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListTagsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTagsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListTagsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListTagsMaxRpcTimeout() != null) {
      listTagsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListTagsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTagsMaxRpcTimeout set to " + this.clientProperties.getListTagsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListTagsTotalTimeout() != null) {
      listTagsRetrySettingBuilder.setTotalTimeout(this.clientProperties.getListTagsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTagsTotalTimeout set to " + this.clientProperties.getListTagsTotalTimeout());
      }
    }
    clientSettingsBuilder.listTagsSettings().setRetrySettings(listTagsRetrySettingBuilder.build());
    RetrySettings.Builder starEntryRetrySettingBuilder =
        clientSettingsBuilder.starEntrySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getStarEntryInitialRpcTimeout() != null) {
      starEntryRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getStarEntryInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StarEntryInitialRpcTimeout set to "
                + this.clientProperties.getStarEntryInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getStarEntryRpcTimeoutMultiplier() != null) {
      starEntryRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getStarEntryRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StarEntryRpcTimeoutMultiplier set to "
                + this.clientProperties.getStarEntryRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getStarEntryMaxRpcTimeout() != null) {
      starEntryRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getStarEntryMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StarEntryMaxRpcTimeout set to " + this.clientProperties.getStarEntryMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getStarEntryTotalTimeout() != null) {
      starEntryRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getStarEntryTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StarEntryTotalTimeout set to " + this.clientProperties.getStarEntryTotalTimeout());
      }
    }
    clientSettingsBuilder
        .starEntrySettings()
        .setRetrySettings(starEntryRetrySettingBuilder.build());
    RetrySettings.Builder unstarEntryRetrySettingBuilder =
        clientSettingsBuilder.unstarEntrySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUnstarEntryInitialRpcTimeout() != null) {
      unstarEntryRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUnstarEntryInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UnstarEntryInitialRpcTimeout set to "
                + this.clientProperties.getUnstarEntryInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUnstarEntryRpcTimeoutMultiplier() != null) {
      unstarEntryRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUnstarEntryRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UnstarEntryRpcTimeoutMultiplier set to "
                + this.clientProperties.getUnstarEntryRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUnstarEntryMaxRpcTimeout() != null) {
      unstarEntryRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUnstarEntryMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UnstarEntryMaxRpcTimeout set to "
                + this.clientProperties.getUnstarEntryMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUnstarEntryTotalTimeout() != null) {
      unstarEntryRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUnstarEntryTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UnstarEntryTotalTimeout set to " + this.clientProperties.getUnstarEntryTotalTimeout());
      }
    }
    clientSettingsBuilder
        .unstarEntrySettings()
        .setRetrySettings(unstarEntryRetrySettingBuilder.build());
    RetrySettings.Builder setIamPolicyRetrySettingBuilder =
        clientSettingsBuilder.setIamPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetIamPolicyInitialRpcTimeout() != null) {
      setIamPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetIamPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyInitialRpcTimeout set to "
                + this.clientProperties.getSetIamPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetIamPolicyRpcTimeoutMultiplier() != null) {
      setIamPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetIamPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetIamPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetIamPolicyMaxRpcTimeout() != null) {
      setIamPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetIamPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyMaxRpcTimeout set to "
                + this.clientProperties.getSetIamPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetIamPolicyTotalTimeout() != null) {
      setIamPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetIamPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyTotalTimeout set to "
                + this.clientProperties.getSetIamPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setIamPolicySettings()
        .setRetrySettings(setIamPolicyRetrySettingBuilder.build());
    RetrySettings.Builder getIamPolicyRetrySettingBuilder =
        clientSettingsBuilder.getIamPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetIamPolicyInitialRetryDelay() != null) {
      getIamPolicyRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetIamPolicyInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyInitialRetryDelay set to "
                + this.clientProperties.getGetIamPolicyInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetIamPolicyRetryDelayMultiplier() != null) {
      getIamPolicyRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetIamPolicyRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyRetryDelayMultiplier set to "
                + this.clientProperties.getGetIamPolicyRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetIamPolicyMaxRetryDelay() != null) {
      getIamPolicyRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetIamPolicyMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyMaxRetryDelay set to "
                + this.clientProperties.getGetIamPolicyMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetIamPolicyInitialRpcTimeout() != null) {
      getIamPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetIamPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyInitialRpcTimeout set to "
                + this.clientProperties.getGetIamPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetIamPolicyRpcTimeoutMultiplier() != null) {
      getIamPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetIamPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetIamPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetIamPolicyMaxRpcTimeout() != null) {
      getIamPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetIamPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyMaxRpcTimeout set to "
                + this.clientProperties.getGetIamPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetIamPolicyTotalTimeout() != null) {
      getIamPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetIamPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyTotalTimeout set to "
                + this.clientProperties.getGetIamPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getIamPolicySettings()
        .setRetrySettings(getIamPolicyRetrySettingBuilder.build());
    RetrySettings.Builder testIamPermissionsRetrySettingBuilder =
        clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getTestIamPermissionsInitialRpcTimeout() != null) {
      testIamPermissionsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getTestIamPermissionsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsInitialRpcTimeout set to "
                + this.clientProperties.getTestIamPermissionsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getTestIamPermissionsRpcTimeoutMultiplier() != null) {
      testIamPermissionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getTestIamPermissionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getTestIamPermissionsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getTestIamPermissionsMaxRpcTimeout() != null) {
      testIamPermissionsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getTestIamPermissionsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsMaxRpcTimeout set to "
                + this.clientProperties.getTestIamPermissionsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getTestIamPermissionsTotalTimeout() != null) {
      testIamPermissionsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getTestIamPermissionsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsTotalTimeout set to "
                + this.clientProperties.getTestIamPermissionsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .testIamPermissionsSettings()
        .setRetrySettings(testIamPermissionsRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public DataCatalogClient dataCatalogClient(DataCatalogSettings dataCatalogSettings)
      throws IOException {
    return DataCatalogClient.create(dataCatalogSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-data-catalog";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
