/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.automl.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.automl.v1.AutoMlClient;
import com.google.cloud.automl.v1.AutoMlSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link AutoMlClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(AutoMlClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.automl.v1.spring.auto.auto-ml.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({AutoMlSpringProperties.class, GlobalProperties.class})
public class AutoMlSpringAutoConfiguration {
  private final AutoMlSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(AutoMlSpringAutoConfiguration.class);

  protected AutoMlSpringAutoConfiguration(
      AutoMlSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider autoMlCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from AutoMl-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultAutoMlTransportChannelProvider() {
    return AutoMlSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a AutoMlClient bean configured to use the default credentials provider (obtained with
   * autoMlCredentials()) and its default transport channel provider
   * (defaultAutoMlTransportChannelProvider()). It also configures the quota project ID if provided.
   * It will configure an executor provider in case there is more than one thread configured in the
   * client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in AutoMlSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public AutoMlSettings autoMlSettings(
      @Qualifier("autoMlCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultAutoMlTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    AutoMlSettings.Builder clientSettingsBuilder =
        AutoMlSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          AutoMlSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          AutoMlSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createDatasetRetrySettingBuilder =
        clientSettingsBuilder.createDatasetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateDatasetInitialRpcTimeout() != null) {
      createDatasetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateDatasetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDatasetInitialRpcTimeout set to "
                + this.clientProperties.getCreateDatasetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateDatasetRpcTimeoutMultiplier() != null) {
      createDatasetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateDatasetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDatasetRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateDatasetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateDatasetMaxRpcTimeout() != null) {
      createDatasetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateDatasetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDatasetMaxRpcTimeout set to "
                + this.clientProperties.getCreateDatasetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateDatasetTotalTimeout() != null) {
      createDatasetRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateDatasetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDatasetTotalTimeout set to "
                + this.clientProperties.getCreateDatasetTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createDatasetSettings()
        .setRetrySettings(createDatasetRetrySettingBuilder.build());
    RetrySettings.Builder getDatasetRetrySettingBuilder =
        clientSettingsBuilder.getDatasetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetDatasetInitialRetryDelay() != null) {
      getDatasetRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetDatasetInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDatasetInitialRetryDelay set to "
                + this.clientProperties.getGetDatasetInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetDatasetRetryDelayMultiplier() != null) {
      getDatasetRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetDatasetRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDatasetRetryDelayMultiplier set to "
                + this.clientProperties.getGetDatasetRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetDatasetMaxRetryDelay() != null) {
      getDatasetRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetDatasetMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDatasetMaxRetryDelay set to " + this.clientProperties.getGetDatasetMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetDatasetInitialRpcTimeout() != null) {
      getDatasetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetDatasetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDatasetInitialRpcTimeout set to "
                + this.clientProperties.getGetDatasetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDatasetRpcTimeoutMultiplier() != null) {
      getDatasetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetDatasetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDatasetRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetDatasetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetDatasetMaxRpcTimeout() != null) {
      getDatasetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetDatasetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDatasetMaxRpcTimeout set to " + this.clientProperties.getGetDatasetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDatasetTotalTimeout() != null) {
      getDatasetRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetDatasetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDatasetTotalTimeout set to " + this.clientProperties.getGetDatasetTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getDatasetSettings()
        .setRetrySettings(getDatasetRetrySettingBuilder.build());
    RetrySettings.Builder listDatasetsRetrySettingBuilder =
        clientSettingsBuilder.listDatasetsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListDatasetsInitialRetryDelay() != null) {
      listDatasetsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListDatasetsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDatasetsInitialRetryDelay set to "
                + this.clientProperties.getListDatasetsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListDatasetsRetryDelayMultiplier() != null) {
      listDatasetsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListDatasetsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDatasetsRetryDelayMultiplier set to "
                + this.clientProperties.getListDatasetsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListDatasetsMaxRetryDelay() != null) {
      listDatasetsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListDatasetsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDatasetsMaxRetryDelay set to "
                + this.clientProperties.getListDatasetsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListDatasetsInitialRpcTimeout() != null) {
      listDatasetsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListDatasetsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDatasetsInitialRpcTimeout set to "
                + this.clientProperties.getListDatasetsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListDatasetsRpcTimeoutMultiplier() != null) {
      listDatasetsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListDatasetsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDatasetsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListDatasetsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListDatasetsMaxRpcTimeout() != null) {
      listDatasetsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListDatasetsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDatasetsMaxRpcTimeout set to "
                + this.clientProperties.getListDatasetsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListDatasetsTotalTimeout() != null) {
      listDatasetsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListDatasetsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDatasetsTotalTimeout set to "
                + this.clientProperties.getListDatasetsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listDatasetsSettings()
        .setRetrySettings(listDatasetsRetrySettingBuilder.build());
    RetrySettings.Builder updateDatasetRetrySettingBuilder =
        clientSettingsBuilder.updateDatasetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateDatasetInitialRpcTimeout() != null) {
      updateDatasetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateDatasetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDatasetInitialRpcTimeout set to "
                + this.clientProperties.getUpdateDatasetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateDatasetRpcTimeoutMultiplier() != null) {
      updateDatasetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateDatasetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDatasetRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateDatasetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateDatasetMaxRpcTimeout() != null) {
      updateDatasetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateDatasetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDatasetMaxRpcTimeout set to "
                + this.clientProperties.getUpdateDatasetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateDatasetTotalTimeout() != null) {
      updateDatasetRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateDatasetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDatasetTotalTimeout set to "
                + this.clientProperties.getUpdateDatasetTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateDatasetSettings()
        .setRetrySettings(updateDatasetRetrySettingBuilder.build());
    RetrySettings.Builder deleteDatasetRetrySettingBuilder =
        clientSettingsBuilder.deleteDatasetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteDatasetInitialRetryDelay() != null) {
      deleteDatasetRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteDatasetInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDatasetInitialRetryDelay set to "
                + this.clientProperties.getDeleteDatasetInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteDatasetRetryDelayMultiplier() != null) {
      deleteDatasetRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteDatasetRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDatasetRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteDatasetRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteDatasetMaxRetryDelay() != null) {
      deleteDatasetRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteDatasetMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDatasetMaxRetryDelay set to "
                + this.clientProperties.getDeleteDatasetMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteDatasetInitialRpcTimeout() != null) {
      deleteDatasetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteDatasetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDatasetInitialRpcTimeout set to "
                + this.clientProperties.getDeleteDatasetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteDatasetRpcTimeoutMultiplier() != null) {
      deleteDatasetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteDatasetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDatasetRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteDatasetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteDatasetMaxRpcTimeout() != null) {
      deleteDatasetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteDatasetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDatasetMaxRpcTimeout set to "
                + this.clientProperties.getDeleteDatasetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteDatasetTotalTimeout() != null) {
      deleteDatasetRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteDatasetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDatasetTotalTimeout set to "
                + this.clientProperties.getDeleteDatasetTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteDatasetSettings()
        .setRetrySettings(deleteDatasetRetrySettingBuilder.build());
    RetrySettings.Builder importDataRetrySettingBuilder =
        clientSettingsBuilder.importDataSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getImportDataInitialRpcTimeout() != null) {
      importDataRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getImportDataInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportDataInitialRpcTimeout set to "
                + this.clientProperties.getImportDataInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getImportDataRpcTimeoutMultiplier() != null) {
      importDataRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getImportDataRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportDataRpcTimeoutMultiplier set to "
                + this.clientProperties.getImportDataRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getImportDataMaxRpcTimeout() != null) {
      importDataRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getImportDataMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportDataMaxRpcTimeout set to " + this.clientProperties.getImportDataMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getImportDataTotalTimeout() != null) {
      importDataRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getImportDataTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportDataTotalTimeout set to " + this.clientProperties.getImportDataTotalTimeout());
      }
    }
    clientSettingsBuilder
        .importDataSettings()
        .setRetrySettings(importDataRetrySettingBuilder.build());
    RetrySettings.Builder exportDataRetrySettingBuilder =
        clientSettingsBuilder.exportDataSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getExportDataInitialRpcTimeout() != null) {
      exportDataRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getExportDataInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportDataInitialRpcTimeout set to "
                + this.clientProperties.getExportDataInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getExportDataRpcTimeoutMultiplier() != null) {
      exportDataRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getExportDataRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportDataRpcTimeoutMultiplier set to "
                + this.clientProperties.getExportDataRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getExportDataMaxRpcTimeout() != null) {
      exportDataRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getExportDataMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportDataMaxRpcTimeout set to " + this.clientProperties.getExportDataMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getExportDataTotalTimeout() != null) {
      exportDataRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getExportDataTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportDataTotalTimeout set to " + this.clientProperties.getExportDataTotalTimeout());
      }
    }
    clientSettingsBuilder
        .exportDataSettings()
        .setRetrySettings(exportDataRetrySettingBuilder.build());
    RetrySettings.Builder getAnnotationSpecRetrySettingBuilder =
        clientSettingsBuilder.getAnnotationSpecSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetAnnotationSpecInitialRetryDelay() != null) {
      getAnnotationSpecRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetAnnotationSpecInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAnnotationSpecInitialRetryDelay set to "
                + this.clientProperties.getGetAnnotationSpecInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetAnnotationSpecRetryDelayMultiplier() != null) {
      getAnnotationSpecRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetAnnotationSpecRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAnnotationSpecRetryDelayMultiplier set to "
                + this.clientProperties.getGetAnnotationSpecRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetAnnotationSpecMaxRetryDelay() != null) {
      getAnnotationSpecRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetAnnotationSpecMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAnnotationSpecMaxRetryDelay set to "
                + this.clientProperties.getGetAnnotationSpecMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetAnnotationSpecInitialRpcTimeout() != null) {
      getAnnotationSpecRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetAnnotationSpecInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAnnotationSpecInitialRpcTimeout set to "
                + this.clientProperties.getGetAnnotationSpecInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAnnotationSpecRpcTimeoutMultiplier() != null) {
      getAnnotationSpecRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetAnnotationSpecRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAnnotationSpecRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetAnnotationSpecRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetAnnotationSpecMaxRpcTimeout() != null) {
      getAnnotationSpecRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetAnnotationSpecMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAnnotationSpecMaxRpcTimeout set to "
                + this.clientProperties.getGetAnnotationSpecMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAnnotationSpecTotalTimeout() != null) {
      getAnnotationSpecRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetAnnotationSpecTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAnnotationSpecTotalTimeout set to "
                + this.clientProperties.getGetAnnotationSpecTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getAnnotationSpecSettings()
        .setRetrySettings(getAnnotationSpecRetrySettingBuilder.build());
    RetrySettings.Builder createModelRetrySettingBuilder =
        clientSettingsBuilder.createModelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateModelInitialRpcTimeout() != null) {
      createModelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateModelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateModelInitialRpcTimeout set to "
                + this.clientProperties.getCreateModelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateModelRpcTimeoutMultiplier() != null) {
      createModelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateModelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateModelRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateModelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateModelMaxRpcTimeout() != null) {
      createModelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateModelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateModelMaxRpcTimeout set to "
                + this.clientProperties.getCreateModelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateModelTotalTimeout() != null) {
      createModelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateModelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateModelTotalTimeout set to " + this.clientProperties.getCreateModelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createModelSettings()
        .setRetrySettings(createModelRetrySettingBuilder.build());
    RetrySettings.Builder getModelRetrySettingBuilder =
        clientSettingsBuilder.getModelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetModelInitialRetryDelay() != null) {
      getModelRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetModelInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetModelInitialRetryDelay set to "
                + this.clientProperties.getGetModelInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetModelRetryDelayMultiplier() != null) {
      getModelRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetModelRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetModelRetryDelayMultiplier set to "
                + this.clientProperties.getGetModelRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetModelMaxRetryDelay() != null) {
      getModelRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetModelMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetModelMaxRetryDelay set to " + this.clientProperties.getGetModelMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetModelInitialRpcTimeout() != null) {
      getModelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetModelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetModelInitialRpcTimeout set to "
                + this.clientProperties.getGetModelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetModelRpcTimeoutMultiplier() != null) {
      getModelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetModelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetModelRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetModelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetModelMaxRpcTimeout() != null) {
      getModelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetModelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetModelMaxRpcTimeout set to " + this.clientProperties.getGetModelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetModelTotalTimeout() != null) {
      getModelRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetModelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetModelTotalTimeout set to " + this.clientProperties.getGetModelTotalTimeout());
      }
    }
    clientSettingsBuilder.getModelSettings().setRetrySettings(getModelRetrySettingBuilder.build());
    RetrySettings.Builder listModelsRetrySettingBuilder =
        clientSettingsBuilder.listModelsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListModelsInitialRetryDelay() != null) {
      listModelsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListModelsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListModelsInitialRetryDelay set to "
                + this.clientProperties.getListModelsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListModelsRetryDelayMultiplier() != null) {
      listModelsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListModelsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListModelsRetryDelayMultiplier set to "
                + this.clientProperties.getListModelsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListModelsMaxRetryDelay() != null) {
      listModelsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListModelsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListModelsMaxRetryDelay set to " + this.clientProperties.getListModelsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListModelsInitialRpcTimeout() != null) {
      listModelsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListModelsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListModelsInitialRpcTimeout set to "
                + this.clientProperties.getListModelsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListModelsRpcTimeoutMultiplier() != null) {
      listModelsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListModelsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListModelsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListModelsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListModelsMaxRpcTimeout() != null) {
      listModelsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListModelsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListModelsMaxRpcTimeout set to " + this.clientProperties.getListModelsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListModelsTotalTimeout() != null) {
      listModelsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListModelsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListModelsTotalTimeout set to " + this.clientProperties.getListModelsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listModelsSettings()
        .setRetrySettings(listModelsRetrySettingBuilder.build());
    RetrySettings.Builder deleteModelRetrySettingBuilder =
        clientSettingsBuilder.deleteModelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteModelInitialRetryDelay() != null) {
      deleteModelRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteModelInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteModelInitialRetryDelay set to "
                + this.clientProperties.getDeleteModelInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteModelRetryDelayMultiplier() != null) {
      deleteModelRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteModelRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteModelRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteModelRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteModelMaxRetryDelay() != null) {
      deleteModelRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteModelMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteModelMaxRetryDelay set to "
                + this.clientProperties.getDeleteModelMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteModelInitialRpcTimeout() != null) {
      deleteModelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteModelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteModelInitialRpcTimeout set to "
                + this.clientProperties.getDeleteModelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteModelRpcTimeoutMultiplier() != null) {
      deleteModelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteModelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteModelRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteModelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteModelMaxRpcTimeout() != null) {
      deleteModelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteModelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteModelMaxRpcTimeout set to "
                + this.clientProperties.getDeleteModelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteModelTotalTimeout() != null) {
      deleteModelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteModelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteModelTotalTimeout set to " + this.clientProperties.getDeleteModelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteModelSettings()
        .setRetrySettings(deleteModelRetrySettingBuilder.build());
    RetrySettings.Builder updateModelRetrySettingBuilder =
        clientSettingsBuilder.updateModelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateModelInitialRpcTimeout() != null) {
      updateModelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateModelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateModelInitialRpcTimeout set to "
                + this.clientProperties.getUpdateModelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateModelRpcTimeoutMultiplier() != null) {
      updateModelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateModelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateModelRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateModelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateModelMaxRpcTimeout() != null) {
      updateModelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateModelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateModelMaxRpcTimeout set to "
                + this.clientProperties.getUpdateModelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateModelTotalTimeout() != null) {
      updateModelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateModelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateModelTotalTimeout set to " + this.clientProperties.getUpdateModelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateModelSettings()
        .setRetrySettings(updateModelRetrySettingBuilder.build());
    RetrySettings.Builder deployModelRetrySettingBuilder =
        clientSettingsBuilder.deployModelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeployModelInitialRpcTimeout() != null) {
      deployModelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeployModelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeployModelInitialRpcTimeout set to "
                + this.clientProperties.getDeployModelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeployModelRpcTimeoutMultiplier() != null) {
      deployModelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeployModelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeployModelRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeployModelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeployModelMaxRpcTimeout() != null) {
      deployModelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeployModelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeployModelMaxRpcTimeout set to "
                + this.clientProperties.getDeployModelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeployModelTotalTimeout() != null) {
      deployModelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeployModelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeployModelTotalTimeout set to " + this.clientProperties.getDeployModelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deployModelSettings()
        .setRetrySettings(deployModelRetrySettingBuilder.build());
    RetrySettings.Builder undeployModelRetrySettingBuilder =
        clientSettingsBuilder.undeployModelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUndeployModelInitialRpcTimeout() != null) {
      undeployModelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUndeployModelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeployModelInitialRpcTimeout set to "
                + this.clientProperties.getUndeployModelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUndeployModelRpcTimeoutMultiplier() != null) {
      undeployModelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUndeployModelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeployModelRpcTimeoutMultiplier set to "
                + this.clientProperties.getUndeployModelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUndeployModelMaxRpcTimeout() != null) {
      undeployModelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUndeployModelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeployModelMaxRpcTimeout set to "
                + this.clientProperties.getUndeployModelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUndeployModelTotalTimeout() != null) {
      undeployModelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUndeployModelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeployModelTotalTimeout set to "
                + this.clientProperties.getUndeployModelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .undeployModelSettings()
        .setRetrySettings(undeployModelRetrySettingBuilder.build());
    RetrySettings.Builder exportModelRetrySettingBuilder =
        clientSettingsBuilder.exportModelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getExportModelInitialRpcTimeout() != null) {
      exportModelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getExportModelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportModelInitialRpcTimeout set to "
                + this.clientProperties.getExportModelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getExportModelRpcTimeoutMultiplier() != null) {
      exportModelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getExportModelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportModelRpcTimeoutMultiplier set to "
                + this.clientProperties.getExportModelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getExportModelMaxRpcTimeout() != null) {
      exportModelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getExportModelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportModelMaxRpcTimeout set to "
                + this.clientProperties.getExportModelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getExportModelTotalTimeout() != null) {
      exportModelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getExportModelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportModelTotalTimeout set to " + this.clientProperties.getExportModelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .exportModelSettings()
        .setRetrySettings(exportModelRetrySettingBuilder.build());
    RetrySettings.Builder getModelEvaluationRetrySettingBuilder =
        clientSettingsBuilder.getModelEvaluationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetModelEvaluationInitialRetryDelay() != null) {
      getModelEvaluationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetModelEvaluationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetModelEvaluationInitialRetryDelay set to "
                + this.clientProperties.getGetModelEvaluationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetModelEvaluationRetryDelayMultiplier() != null) {
      getModelEvaluationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetModelEvaluationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetModelEvaluationRetryDelayMultiplier set to "
                + this.clientProperties.getGetModelEvaluationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetModelEvaluationMaxRetryDelay() != null) {
      getModelEvaluationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetModelEvaluationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetModelEvaluationMaxRetryDelay set to "
                + this.clientProperties.getGetModelEvaluationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetModelEvaluationInitialRpcTimeout() != null) {
      getModelEvaluationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetModelEvaluationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetModelEvaluationInitialRpcTimeout set to "
                + this.clientProperties.getGetModelEvaluationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetModelEvaluationRpcTimeoutMultiplier() != null) {
      getModelEvaluationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetModelEvaluationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetModelEvaluationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetModelEvaluationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetModelEvaluationMaxRpcTimeout() != null) {
      getModelEvaluationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetModelEvaluationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetModelEvaluationMaxRpcTimeout set to "
                + this.clientProperties.getGetModelEvaluationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetModelEvaluationTotalTimeout() != null) {
      getModelEvaluationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetModelEvaluationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetModelEvaluationTotalTimeout set to "
                + this.clientProperties.getGetModelEvaluationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getModelEvaluationSettings()
        .setRetrySettings(getModelEvaluationRetrySettingBuilder.build());
    RetrySettings.Builder listModelEvaluationsRetrySettingBuilder =
        clientSettingsBuilder.listModelEvaluationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListModelEvaluationsInitialRetryDelay() != null) {
      listModelEvaluationsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListModelEvaluationsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListModelEvaluationsInitialRetryDelay set to "
                + this.clientProperties.getListModelEvaluationsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListModelEvaluationsRetryDelayMultiplier() != null) {
      listModelEvaluationsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListModelEvaluationsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListModelEvaluationsRetryDelayMultiplier set to "
                + this.clientProperties.getListModelEvaluationsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListModelEvaluationsMaxRetryDelay() != null) {
      listModelEvaluationsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListModelEvaluationsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListModelEvaluationsMaxRetryDelay set to "
                + this.clientProperties.getListModelEvaluationsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListModelEvaluationsInitialRpcTimeout() != null) {
      listModelEvaluationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListModelEvaluationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListModelEvaluationsInitialRpcTimeout set to "
                + this.clientProperties.getListModelEvaluationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListModelEvaluationsRpcTimeoutMultiplier() != null) {
      listModelEvaluationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListModelEvaluationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListModelEvaluationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListModelEvaluationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListModelEvaluationsMaxRpcTimeout() != null) {
      listModelEvaluationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListModelEvaluationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListModelEvaluationsMaxRpcTimeout set to "
                + this.clientProperties.getListModelEvaluationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListModelEvaluationsTotalTimeout() != null) {
      listModelEvaluationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListModelEvaluationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListModelEvaluationsTotalTimeout set to "
                + this.clientProperties.getListModelEvaluationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listModelEvaluationsSettings()
        .setRetrySettings(listModelEvaluationsRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public AutoMlClient autoMlClient(AutoMlSettings autoMlSettings) throws IOException {
    return AutoMlClient.create(autoMlSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-auto-ml";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
