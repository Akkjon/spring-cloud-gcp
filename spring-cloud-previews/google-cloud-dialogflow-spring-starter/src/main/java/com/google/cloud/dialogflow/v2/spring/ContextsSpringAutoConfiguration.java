/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dialogflow.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dialogflow.v2.ContextsClient;
import com.google.cloud.dialogflow.v2.ContextsSettings;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ContextsClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ContextsClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dialogflow.v2.spring.auto.contexts.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(ContextsSpringProperties.class)
public class ContextsSpringAutoConfiguration {
  private final ContextsSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER = LogFactory.getLog(ContextsSpringAutoConfiguration.class);

  protected ContextsSpringAutoConfiguration(
      ContextsSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Contexts-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultContextsTransportChannelProvider() {
    return ContextsSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ContextsClient bean configured to use the default credentials provider (obtained
   * with contextsCredentials()) and its default transport channel provider
   * (defaultContextsTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in ContextsSpringProperties. Method-level properties will take precedence over service-level
   * properties if available, and client library defaults will be used if neither are specified.
   */
  @Bean
  @ConditionalOnMissingBean
  public ContextsSettings contextsSettings(
      @Qualifier("defaultContextsTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ContextsSettings.Builder clientSettingsBuilder =
        ContextsSettings.newBuilder()
            .setCredentialsProvider(this.credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ContextsSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          ContextsSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings listContextsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listContextsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listContextsSettings().setRetrySettings(listContextsRetrySettings);

      RetrySettings getContextRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getContextSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getContextSettings().setRetrySettings(getContextRetrySettings);

      RetrySettings createContextRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createContextSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createContextSettings().setRetrySettings(createContextRetrySettings);

      RetrySettings updateContextRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateContextSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updateContextSettings().setRetrySettings(updateContextRetrySettings);

      RetrySettings deleteContextRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteContextSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.deleteContextSettings().setRetrySettings(deleteContextRetrySettings);

      RetrySettings deleteAllContextsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteAllContextsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteAllContextsSettings()
          .setRetrySettings(deleteAllContextsRetrySettings);

      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);

      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry listContextsRetry = clientProperties.getListContextsRetry();
    if (listContextsRetry != null) {
      RetrySettings listContextsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listContextsSettings().getRetrySettings(), listContextsRetry);
      clientSettingsBuilder.listContextsSettings().setRetrySettings(listContextsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listContexts from properties.");
      }
    }
    Retry getContextRetry = clientProperties.getGetContextRetry();
    if (getContextRetry != null) {
      RetrySettings getContextRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getContextSettings().getRetrySettings(), getContextRetry);
      clientSettingsBuilder.getContextSettings().setRetrySettings(getContextRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getContext from properties.");
      }
    }
    Retry createContextRetry = clientProperties.getCreateContextRetry();
    if (createContextRetry != null) {
      RetrySettings createContextRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createContextSettings().getRetrySettings(), createContextRetry);
      clientSettingsBuilder.createContextSettings().setRetrySettings(createContextRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createContext from properties.");
      }
    }
    Retry updateContextRetry = clientProperties.getUpdateContextRetry();
    if (updateContextRetry != null) {
      RetrySettings updateContextRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateContextSettings().getRetrySettings(), updateContextRetry);
      clientSettingsBuilder.updateContextSettings().setRetrySettings(updateContextRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateContext from properties.");
      }
    }
    Retry deleteContextRetry = clientProperties.getDeleteContextRetry();
    if (deleteContextRetry != null) {
      RetrySettings deleteContextRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteContextSettings().getRetrySettings(), deleteContextRetry);
      clientSettingsBuilder.deleteContextSettings().setRetrySettings(deleteContextRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteContext from properties.");
      }
    }
    Retry deleteAllContextsRetry = clientProperties.getDeleteAllContextsRetry();
    if (deleteAllContextsRetry != null) {
      RetrySettings deleteAllContextsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteAllContextsSettings().getRetrySettings(),
              deleteAllContextsRetry);
      clientSettingsBuilder
          .deleteAllContextsSettings()
          .setRetrySettings(deleteAllContextsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteAllContexts from properties.");
      }
    }
    Retry listLocationsRetry = clientProperties.getListLocationsRetry();
    if (listLocationsRetry != null) {
      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), listLocationsRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listLocations from properties.");
      }
    }
    Retry getLocationRetry = clientProperties.getGetLocationRetry();
    if (getLocationRetry != null) {
      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), getLocationRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getLocation from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public ContextsClient contextsClient(ContextsSettings contextsSettings) throws IOException {
    return ContextsClient.create(contextsSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-contexts";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
