/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.networkconnectivity.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.networkconnectivity.v1.HubServiceClient;
import com.google.cloud.networkconnectivity.v1.HubServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link HubServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(HubServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.networkconnectivity.v1.spring.auto.hub-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({HubServiceSpringProperties.class, GlobalProperties.class})
public class HubServiceSpringAutoConfiguration {
  private final HubServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(HubServiceSpringAutoConfiguration.class);

  protected HubServiceSpringAutoConfiguration(
      HubServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider hubServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from HubService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultHubServiceTransportChannelProvider() {
    return HubServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a HubServiceClient bean configured to use the default credentials provider (obtained
   * with hubServiceCredentials()) and its default transport channel provider
   * (defaultHubServiceTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in HubServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public HubServiceSettings hubServiceSettings(
      @Qualifier("hubServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultHubServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    HubServiceSettings.Builder clientSettingsBuilder =
        HubServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          HubServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    RetrySettings.Builder listHubsRetrySettingBuilder =
        clientSettingsBuilder.listHubsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListHubsInitialRetryDelay() != null) {
      listHubsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListHubsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListHubsInitialRetryDelay set to "
                + this.clientProperties.getListHubsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListHubsRetryDelayMultiplier() != null) {
      listHubsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListHubsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListHubsRetryDelayMultiplier set to "
                + this.clientProperties.getListHubsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListHubsMaxRetryDelay() != null) {
      listHubsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListHubsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListHubsMaxRetryDelay set to " + this.clientProperties.getListHubsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListHubsInitialRpcTimeout() != null) {
      listHubsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListHubsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListHubsInitialRpcTimeout set to "
                + this.clientProperties.getListHubsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListHubsRpcTimeoutMultiplier() != null) {
      listHubsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListHubsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListHubsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListHubsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListHubsMaxRpcTimeout() != null) {
      listHubsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListHubsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListHubsMaxRpcTimeout set to " + this.clientProperties.getListHubsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListHubsTotalTimeout() != null) {
      listHubsRetrySettingBuilder.setTotalTimeout(this.clientProperties.getListHubsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListHubsTotalTimeout set to " + this.clientProperties.getListHubsTotalTimeout());
      }
    }
    clientSettingsBuilder.listHubsSettings().setRetrySettings(listHubsRetrySettingBuilder.build());
    RetrySettings.Builder getHubRetrySettingBuilder =
        clientSettingsBuilder.getHubSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetHubInitialRetryDelay() != null) {
      getHubRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetHubInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetHubInitialRetryDelay set to " + this.clientProperties.getGetHubInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetHubRetryDelayMultiplier() != null) {
      getHubRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetHubRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetHubRetryDelayMultiplier set to "
                + this.clientProperties.getGetHubRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetHubMaxRetryDelay() != null) {
      getHubRetrySettingBuilder.setMaxRetryDelay(this.clientProperties.getGetHubMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetHubMaxRetryDelay set to " + this.clientProperties.getGetHubMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetHubInitialRpcTimeout() != null) {
      getHubRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetHubInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetHubInitialRpcTimeout set to " + this.clientProperties.getGetHubInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetHubRpcTimeoutMultiplier() != null) {
      getHubRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetHubRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetHubRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetHubRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetHubMaxRpcTimeout() != null) {
      getHubRetrySettingBuilder.setMaxRpcTimeout(this.clientProperties.getGetHubMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetHubMaxRpcTimeout set to " + this.clientProperties.getGetHubMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetHubTotalTimeout() != null) {
      getHubRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetHubTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("GetHubTotalTimeout set to " + this.clientProperties.getGetHubTotalTimeout());
      }
    }
    clientSettingsBuilder.getHubSettings().setRetrySettings(getHubRetrySettingBuilder.build());
    RetrySettings.Builder createHubRetrySettingBuilder =
        clientSettingsBuilder.createHubSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateHubInitialRpcTimeout() != null) {
      createHubRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateHubInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateHubInitialRpcTimeout set to "
                + this.clientProperties.getCreateHubInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateHubRpcTimeoutMultiplier() != null) {
      createHubRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateHubRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateHubRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateHubRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateHubMaxRpcTimeout() != null) {
      createHubRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateHubMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateHubMaxRpcTimeout set to " + this.clientProperties.getCreateHubMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateHubTotalTimeout() != null) {
      createHubRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateHubTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateHubTotalTimeout set to " + this.clientProperties.getCreateHubTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createHubSettings()
        .setRetrySettings(createHubRetrySettingBuilder.build());
    RetrySettings.Builder updateHubRetrySettingBuilder =
        clientSettingsBuilder.updateHubSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateHubInitialRpcTimeout() != null) {
      updateHubRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateHubInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateHubInitialRpcTimeout set to "
                + this.clientProperties.getUpdateHubInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateHubRpcTimeoutMultiplier() != null) {
      updateHubRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateHubRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateHubRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateHubRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateHubMaxRpcTimeout() != null) {
      updateHubRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateHubMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateHubMaxRpcTimeout set to " + this.clientProperties.getUpdateHubMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateHubTotalTimeout() != null) {
      updateHubRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateHubTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateHubTotalTimeout set to " + this.clientProperties.getUpdateHubTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateHubSettings()
        .setRetrySettings(updateHubRetrySettingBuilder.build());
    RetrySettings.Builder deleteHubRetrySettingBuilder =
        clientSettingsBuilder.deleteHubSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteHubInitialRpcTimeout() != null) {
      deleteHubRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteHubInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteHubInitialRpcTimeout set to "
                + this.clientProperties.getDeleteHubInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteHubRpcTimeoutMultiplier() != null) {
      deleteHubRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteHubRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteHubRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteHubRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteHubMaxRpcTimeout() != null) {
      deleteHubRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteHubMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteHubMaxRpcTimeout set to " + this.clientProperties.getDeleteHubMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteHubTotalTimeout() != null) {
      deleteHubRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteHubTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteHubTotalTimeout set to " + this.clientProperties.getDeleteHubTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteHubSettings()
        .setRetrySettings(deleteHubRetrySettingBuilder.build());
    RetrySettings.Builder listSpokesRetrySettingBuilder =
        clientSettingsBuilder.listSpokesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListSpokesInitialRetryDelay() != null) {
      listSpokesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListSpokesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSpokesInitialRetryDelay set to "
                + this.clientProperties.getListSpokesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListSpokesRetryDelayMultiplier() != null) {
      listSpokesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListSpokesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSpokesRetryDelayMultiplier set to "
                + this.clientProperties.getListSpokesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListSpokesMaxRetryDelay() != null) {
      listSpokesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListSpokesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSpokesMaxRetryDelay set to " + this.clientProperties.getListSpokesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListSpokesInitialRpcTimeout() != null) {
      listSpokesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListSpokesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSpokesInitialRpcTimeout set to "
                + this.clientProperties.getListSpokesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListSpokesRpcTimeoutMultiplier() != null) {
      listSpokesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListSpokesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSpokesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListSpokesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListSpokesMaxRpcTimeout() != null) {
      listSpokesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListSpokesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSpokesMaxRpcTimeout set to " + this.clientProperties.getListSpokesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListSpokesTotalTimeout() != null) {
      listSpokesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListSpokesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSpokesTotalTimeout set to " + this.clientProperties.getListSpokesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listSpokesSettings()
        .setRetrySettings(listSpokesRetrySettingBuilder.build());
    RetrySettings.Builder getSpokeRetrySettingBuilder =
        clientSettingsBuilder.getSpokeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetSpokeInitialRetryDelay() != null) {
      getSpokeRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetSpokeInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSpokeInitialRetryDelay set to "
                + this.clientProperties.getGetSpokeInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetSpokeRetryDelayMultiplier() != null) {
      getSpokeRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetSpokeRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSpokeRetryDelayMultiplier set to "
                + this.clientProperties.getGetSpokeRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetSpokeMaxRetryDelay() != null) {
      getSpokeRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetSpokeMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSpokeMaxRetryDelay set to " + this.clientProperties.getGetSpokeMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetSpokeInitialRpcTimeout() != null) {
      getSpokeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetSpokeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSpokeInitialRpcTimeout set to "
                + this.clientProperties.getGetSpokeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetSpokeRpcTimeoutMultiplier() != null) {
      getSpokeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetSpokeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSpokeRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetSpokeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetSpokeMaxRpcTimeout() != null) {
      getSpokeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetSpokeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSpokeMaxRpcTimeout set to " + this.clientProperties.getGetSpokeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetSpokeTotalTimeout() != null) {
      getSpokeRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetSpokeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSpokeTotalTimeout set to " + this.clientProperties.getGetSpokeTotalTimeout());
      }
    }
    clientSettingsBuilder.getSpokeSettings().setRetrySettings(getSpokeRetrySettingBuilder.build());
    RetrySettings.Builder createSpokeRetrySettingBuilder =
        clientSettingsBuilder.createSpokeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateSpokeInitialRpcTimeout() != null) {
      createSpokeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateSpokeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateSpokeInitialRpcTimeout set to "
                + this.clientProperties.getCreateSpokeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateSpokeRpcTimeoutMultiplier() != null) {
      createSpokeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateSpokeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateSpokeRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateSpokeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateSpokeMaxRpcTimeout() != null) {
      createSpokeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateSpokeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateSpokeMaxRpcTimeout set to "
                + this.clientProperties.getCreateSpokeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateSpokeTotalTimeout() != null) {
      createSpokeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateSpokeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateSpokeTotalTimeout set to " + this.clientProperties.getCreateSpokeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createSpokeSettings()
        .setRetrySettings(createSpokeRetrySettingBuilder.build());
    RetrySettings.Builder updateSpokeRetrySettingBuilder =
        clientSettingsBuilder.updateSpokeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateSpokeInitialRpcTimeout() != null) {
      updateSpokeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateSpokeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSpokeInitialRpcTimeout set to "
                + this.clientProperties.getUpdateSpokeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateSpokeRpcTimeoutMultiplier() != null) {
      updateSpokeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateSpokeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSpokeRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateSpokeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateSpokeMaxRpcTimeout() != null) {
      updateSpokeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateSpokeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSpokeMaxRpcTimeout set to "
                + this.clientProperties.getUpdateSpokeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateSpokeTotalTimeout() != null) {
      updateSpokeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateSpokeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSpokeTotalTimeout set to " + this.clientProperties.getUpdateSpokeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateSpokeSettings()
        .setRetrySettings(updateSpokeRetrySettingBuilder.build());
    RetrySettings.Builder deleteSpokeRetrySettingBuilder =
        clientSettingsBuilder.deleteSpokeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteSpokeInitialRpcTimeout() != null) {
      deleteSpokeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteSpokeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteSpokeInitialRpcTimeout set to "
                + this.clientProperties.getDeleteSpokeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteSpokeRpcTimeoutMultiplier() != null) {
      deleteSpokeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteSpokeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteSpokeRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteSpokeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteSpokeMaxRpcTimeout() != null) {
      deleteSpokeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteSpokeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteSpokeMaxRpcTimeout set to "
                + this.clientProperties.getDeleteSpokeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteSpokeTotalTimeout() != null) {
      deleteSpokeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteSpokeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteSpokeTotalTimeout set to " + this.clientProperties.getDeleteSpokeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteSpokeSettings()
        .setRetrySettings(deleteSpokeRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public HubServiceClient hubServiceClient(HubServiceSettings hubServiceSettings)
      throws IOException {
    return HubServiceClient.create(hubServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-hub-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
