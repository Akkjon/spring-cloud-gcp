/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.datastream.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.datastream.v1.DatastreamClient;
import com.google.cloud.datastream.v1.DatastreamSettings;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link DatastreamClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(DatastreamClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.datastream.v1.spring.auto.datastream.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(DatastreamSpringProperties.class)
public class DatastreamSpringAutoConfiguration {
  private final DatastreamSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER = LogFactory.getLog(DatastreamSpringAutoConfiguration.class);

  protected DatastreamSpringAutoConfiguration(
      DatastreamSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Datastream-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultDatastreamTransportChannelProvider() {
    return DatastreamSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a DatastreamClient bean configured to use the default credentials provider (obtained
   * with datastreamCredentials()) and its default transport channel provider
   * (defaultDatastreamTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in DatastreamSpringProperties. Method-level properties will take precedence over service-level
   * properties if available, and client library defaults will be used if neither are specified.
   */
  @Bean
  @ConditionalOnMissingBean
  public DatastreamSettings datastreamSettings(
      @Qualifier("defaultDatastreamTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    DatastreamSettings.Builder clientSettingsBuilder =
        DatastreamSettings.newBuilder()
            .setCredentialsProvider(this.credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          DatastreamSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          DatastreamSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings listConnectionProfilesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listConnectionProfilesSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listConnectionProfilesSettings()
          .setRetrySettings(listConnectionProfilesRetrySettings);

      RetrySettings getConnectionProfileRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getConnectionProfileSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getConnectionProfileSettings()
          .setRetrySettings(getConnectionProfileRetrySettings);

      RetrySettings createConnectionProfileRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createConnectionProfileSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createConnectionProfileSettings()
          .setRetrySettings(createConnectionProfileRetrySettings);

      RetrySettings updateConnectionProfileRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateConnectionProfileSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateConnectionProfileSettings()
          .setRetrySettings(updateConnectionProfileRetrySettings);

      RetrySettings deleteConnectionProfileRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteConnectionProfileSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteConnectionProfileSettings()
          .setRetrySettings(deleteConnectionProfileRetrySettings);

      RetrySettings discoverConnectionProfileRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.discoverConnectionProfileSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .discoverConnectionProfileSettings()
          .setRetrySettings(discoverConnectionProfileRetrySettings);

      RetrySettings listStreamsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listStreamsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listStreamsSettings().setRetrySettings(listStreamsRetrySettings);

      RetrySettings getStreamRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getStreamSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getStreamSettings().setRetrySettings(getStreamRetrySettings);

      RetrySettings createStreamRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createStreamSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createStreamSettings().setRetrySettings(createStreamRetrySettings);

      RetrySettings updateStreamRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateStreamSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updateStreamSettings().setRetrySettings(updateStreamRetrySettings);

      RetrySettings deleteStreamRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteStreamSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.deleteStreamSettings().setRetrySettings(deleteStreamRetrySettings);

      RetrySettings getStreamObjectRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getStreamObjectSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getStreamObjectSettings()
          .setRetrySettings(getStreamObjectRetrySettings);

      RetrySettings lookupStreamObjectRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.lookupStreamObjectSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .lookupStreamObjectSettings()
          .setRetrySettings(lookupStreamObjectRetrySettings);

      RetrySettings listStreamObjectsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listStreamObjectsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listStreamObjectsSettings()
          .setRetrySettings(listStreamObjectsRetrySettings);

      RetrySettings startBackfillJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.startBackfillJobSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .startBackfillJobSettings()
          .setRetrySettings(startBackfillJobRetrySettings);

      RetrySettings stopBackfillJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.stopBackfillJobSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .stopBackfillJobSettings()
          .setRetrySettings(stopBackfillJobRetrySettings);

      RetrySettings fetchStaticIpsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchStaticIpsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.fetchStaticIpsSettings().setRetrySettings(fetchStaticIpsRetrySettings);

      RetrySettings createPrivateConnectionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createPrivateConnectionSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createPrivateConnectionSettings()
          .setRetrySettings(createPrivateConnectionRetrySettings);

      RetrySettings getPrivateConnectionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getPrivateConnectionSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getPrivateConnectionSettings()
          .setRetrySettings(getPrivateConnectionRetrySettings);

      RetrySettings listPrivateConnectionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listPrivateConnectionsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listPrivateConnectionsSettings()
          .setRetrySettings(listPrivateConnectionsRetrySettings);

      RetrySettings deletePrivateConnectionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deletePrivateConnectionSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deletePrivateConnectionSettings()
          .setRetrySettings(deletePrivateConnectionRetrySettings);

      RetrySettings createRouteRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createRouteSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createRouteSettings().setRetrySettings(createRouteRetrySettings);

      RetrySettings getRouteRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getRouteSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getRouteSettings().setRetrySettings(getRouteRetrySettings);

      RetrySettings listRoutesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listRoutesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listRoutesSettings().setRetrySettings(listRoutesRetrySettings);

      RetrySettings deleteRouteRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteRouteSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.deleteRouteSettings().setRetrySettings(deleteRouteRetrySettings);

      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);

      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry listConnectionProfilesRetry = clientProperties.getListConnectionProfilesRetry();
    if (listConnectionProfilesRetry != null) {
      RetrySettings listConnectionProfilesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listConnectionProfilesSettings().getRetrySettings(),
              listConnectionProfilesRetry);
      clientSettingsBuilder
          .listConnectionProfilesSettings()
          .setRetrySettings(listConnectionProfilesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listConnectionProfiles from properties.");
      }
    }
    Retry getConnectionProfileRetry = clientProperties.getGetConnectionProfileRetry();
    if (getConnectionProfileRetry != null) {
      RetrySettings getConnectionProfileRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getConnectionProfileSettings().getRetrySettings(),
              getConnectionProfileRetry);
      clientSettingsBuilder
          .getConnectionProfileSettings()
          .setRetrySettings(getConnectionProfileRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getConnectionProfile from properties.");
      }
    }
    Retry createConnectionProfileRetry = clientProperties.getCreateConnectionProfileRetry();
    if (createConnectionProfileRetry != null) {
      RetrySettings createConnectionProfileRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createConnectionProfileSettings().getRetrySettings(),
              createConnectionProfileRetry);
      clientSettingsBuilder
          .createConnectionProfileSettings()
          .setRetrySettings(createConnectionProfileRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createConnectionProfile from properties.");
      }
    }
    Retry updateConnectionProfileRetry = clientProperties.getUpdateConnectionProfileRetry();
    if (updateConnectionProfileRetry != null) {
      RetrySettings updateConnectionProfileRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateConnectionProfileSettings().getRetrySettings(),
              updateConnectionProfileRetry);
      clientSettingsBuilder
          .updateConnectionProfileSettings()
          .setRetrySettings(updateConnectionProfileRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateConnectionProfile from properties.");
      }
    }
    Retry deleteConnectionProfileRetry = clientProperties.getDeleteConnectionProfileRetry();
    if (deleteConnectionProfileRetry != null) {
      RetrySettings deleteConnectionProfileRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteConnectionProfileSettings().getRetrySettings(),
              deleteConnectionProfileRetry);
      clientSettingsBuilder
          .deleteConnectionProfileSettings()
          .setRetrySettings(deleteConnectionProfileRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteConnectionProfile from properties.");
      }
    }
    Retry discoverConnectionProfileRetry = clientProperties.getDiscoverConnectionProfileRetry();
    if (discoverConnectionProfileRetry != null) {
      RetrySettings discoverConnectionProfileRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.discoverConnectionProfileSettings().getRetrySettings(),
              discoverConnectionProfileRetry);
      clientSettingsBuilder
          .discoverConnectionProfileSettings()
          .setRetrySettings(discoverConnectionProfileRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for discoverConnectionProfile from properties.");
      }
    }
    Retry listStreamsRetry = clientProperties.getListStreamsRetry();
    if (listStreamsRetry != null) {
      RetrySettings listStreamsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listStreamsSettings().getRetrySettings(), listStreamsRetry);
      clientSettingsBuilder.listStreamsSettings().setRetrySettings(listStreamsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listStreams from properties.");
      }
    }
    Retry getStreamRetry = clientProperties.getGetStreamRetry();
    if (getStreamRetry != null) {
      RetrySettings getStreamRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getStreamSettings().getRetrySettings(), getStreamRetry);
      clientSettingsBuilder.getStreamSettings().setRetrySettings(getStreamRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getStream from properties.");
      }
    }
    Retry createStreamRetry = clientProperties.getCreateStreamRetry();
    if (createStreamRetry != null) {
      RetrySettings createStreamRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createStreamSettings().getRetrySettings(), createStreamRetry);
      clientSettingsBuilder.createStreamSettings().setRetrySettings(createStreamRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createStream from properties.");
      }
    }
    Retry updateStreamRetry = clientProperties.getUpdateStreamRetry();
    if (updateStreamRetry != null) {
      RetrySettings updateStreamRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateStreamSettings().getRetrySettings(), updateStreamRetry);
      clientSettingsBuilder.updateStreamSettings().setRetrySettings(updateStreamRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateStream from properties.");
      }
    }
    Retry deleteStreamRetry = clientProperties.getDeleteStreamRetry();
    if (deleteStreamRetry != null) {
      RetrySettings deleteStreamRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteStreamSettings().getRetrySettings(), deleteStreamRetry);
      clientSettingsBuilder.deleteStreamSettings().setRetrySettings(deleteStreamRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteStream from properties.");
      }
    }
    Retry getStreamObjectRetry = clientProperties.getGetStreamObjectRetry();
    if (getStreamObjectRetry != null) {
      RetrySettings getStreamObjectRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getStreamObjectSettings().getRetrySettings(),
              getStreamObjectRetry);
      clientSettingsBuilder
          .getStreamObjectSettings()
          .setRetrySettings(getStreamObjectRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getStreamObject from properties.");
      }
    }
    Retry lookupStreamObjectRetry = clientProperties.getLookupStreamObjectRetry();
    if (lookupStreamObjectRetry != null) {
      RetrySettings lookupStreamObjectRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.lookupStreamObjectSettings().getRetrySettings(),
              lookupStreamObjectRetry);
      clientSettingsBuilder
          .lookupStreamObjectSettings()
          .setRetrySettings(lookupStreamObjectRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for lookupStreamObject from properties.");
      }
    }
    Retry listStreamObjectsRetry = clientProperties.getListStreamObjectsRetry();
    if (listStreamObjectsRetry != null) {
      RetrySettings listStreamObjectsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listStreamObjectsSettings().getRetrySettings(),
              listStreamObjectsRetry);
      clientSettingsBuilder
          .listStreamObjectsSettings()
          .setRetrySettings(listStreamObjectsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listStreamObjects from properties.");
      }
    }
    Retry startBackfillJobRetry = clientProperties.getStartBackfillJobRetry();
    if (startBackfillJobRetry != null) {
      RetrySettings startBackfillJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.startBackfillJobSettings().getRetrySettings(),
              startBackfillJobRetry);
      clientSettingsBuilder
          .startBackfillJobSettings()
          .setRetrySettings(startBackfillJobRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for startBackfillJob from properties.");
      }
    }
    Retry stopBackfillJobRetry = clientProperties.getStopBackfillJobRetry();
    if (stopBackfillJobRetry != null) {
      RetrySettings stopBackfillJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.stopBackfillJobSettings().getRetrySettings(),
              stopBackfillJobRetry);
      clientSettingsBuilder
          .stopBackfillJobSettings()
          .setRetrySettings(stopBackfillJobRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for stopBackfillJob from properties.");
      }
    }
    Retry fetchStaticIpsRetry = clientProperties.getFetchStaticIpsRetry();
    if (fetchStaticIpsRetry != null) {
      RetrySettings fetchStaticIpsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchStaticIpsSettings().getRetrySettings(),
              fetchStaticIpsRetry);
      clientSettingsBuilder.fetchStaticIpsSettings().setRetrySettings(fetchStaticIpsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for fetchStaticIps from properties.");
      }
    }
    Retry createPrivateConnectionRetry = clientProperties.getCreatePrivateConnectionRetry();
    if (createPrivateConnectionRetry != null) {
      RetrySettings createPrivateConnectionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createPrivateConnectionSettings().getRetrySettings(),
              createPrivateConnectionRetry);
      clientSettingsBuilder
          .createPrivateConnectionSettings()
          .setRetrySettings(createPrivateConnectionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createPrivateConnection from properties.");
      }
    }
    Retry getPrivateConnectionRetry = clientProperties.getGetPrivateConnectionRetry();
    if (getPrivateConnectionRetry != null) {
      RetrySettings getPrivateConnectionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getPrivateConnectionSettings().getRetrySettings(),
              getPrivateConnectionRetry);
      clientSettingsBuilder
          .getPrivateConnectionSettings()
          .setRetrySettings(getPrivateConnectionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getPrivateConnection from properties.");
      }
    }
    Retry listPrivateConnectionsRetry = clientProperties.getListPrivateConnectionsRetry();
    if (listPrivateConnectionsRetry != null) {
      RetrySettings listPrivateConnectionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listPrivateConnectionsSettings().getRetrySettings(),
              listPrivateConnectionsRetry);
      clientSettingsBuilder
          .listPrivateConnectionsSettings()
          .setRetrySettings(listPrivateConnectionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listPrivateConnections from properties.");
      }
    }
    Retry deletePrivateConnectionRetry = clientProperties.getDeletePrivateConnectionRetry();
    if (deletePrivateConnectionRetry != null) {
      RetrySettings deletePrivateConnectionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deletePrivateConnectionSettings().getRetrySettings(),
              deletePrivateConnectionRetry);
      clientSettingsBuilder
          .deletePrivateConnectionSettings()
          .setRetrySettings(deletePrivateConnectionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deletePrivateConnection from properties.");
      }
    }
    Retry createRouteRetry = clientProperties.getCreateRouteRetry();
    if (createRouteRetry != null) {
      RetrySettings createRouteRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createRouteSettings().getRetrySettings(), createRouteRetry);
      clientSettingsBuilder.createRouteSettings().setRetrySettings(createRouteRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createRoute from properties.");
      }
    }
    Retry getRouteRetry = clientProperties.getGetRouteRetry();
    if (getRouteRetry != null) {
      RetrySettings getRouteRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getRouteSettings().getRetrySettings(), getRouteRetry);
      clientSettingsBuilder.getRouteSettings().setRetrySettings(getRouteRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getRoute from properties.");
      }
    }
    Retry listRoutesRetry = clientProperties.getListRoutesRetry();
    if (listRoutesRetry != null) {
      RetrySettings listRoutesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listRoutesSettings().getRetrySettings(), listRoutesRetry);
      clientSettingsBuilder.listRoutesSettings().setRetrySettings(listRoutesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listRoutes from properties.");
      }
    }
    Retry deleteRouteRetry = clientProperties.getDeleteRouteRetry();
    if (deleteRouteRetry != null) {
      RetrySettings deleteRouteRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteRouteSettings().getRetrySettings(), deleteRouteRetry);
      clientSettingsBuilder.deleteRouteSettings().setRetrySettings(deleteRouteRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteRoute from properties.");
      }
    }
    Retry listLocationsRetry = clientProperties.getListLocationsRetry();
    if (listLocationsRetry != null) {
      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), listLocationsRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listLocations from properties.");
      }
    }
    Retry getLocationRetry = clientProperties.getGetLocationRetry();
    if (getLocationRetry != null) {
      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), getLocationRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getLocation from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public DatastreamClient datastreamClient(DatastreamSettings datastreamSettings)
      throws IOException {
    return DatastreamClient.create(datastreamSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-datastream";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
