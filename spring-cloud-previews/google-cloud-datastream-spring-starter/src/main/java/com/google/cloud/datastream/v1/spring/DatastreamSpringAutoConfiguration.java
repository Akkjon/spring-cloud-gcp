/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.datastream.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.datastream.v1.DatastreamClient;
import com.google.cloud.datastream.v1.DatastreamSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link DatastreamClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(DatastreamClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.datastream.v1.spring.auto.datastream.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({DatastreamSpringProperties.class, GlobalProperties.class})
public class DatastreamSpringAutoConfiguration {
  private final DatastreamSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(DatastreamSpringAutoConfiguration.class);

  protected DatastreamSpringAutoConfiguration(
      DatastreamSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider datastreamCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Datastream-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultDatastreamTransportChannelProvider() {
    return DatastreamSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a DatastreamClient bean configured to use the default credentials provider (obtained
   * with datastreamCredentials()) and its default transport channel provider
   * (defaultDatastreamTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in DatastreamSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public DatastreamSettings datastreamSettings(
      @Qualifier("datastreamCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultDatastreamTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    DatastreamSettings.Builder clientSettingsBuilder =
        DatastreamSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          DatastreamSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          DatastreamSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listConnectionProfilesRetrySettingBuilder =
        clientSettingsBuilder.listConnectionProfilesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListConnectionProfilesInitialRetryDelay() != null) {
      listConnectionProfilesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListConnectionProfilesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConnectionProfilesInitialRetryDelay set to "
                + this.clientProperties.getListConnectionProfilesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListConnectionProfilesRetryDelayMultiplier() != null) {
      listConnectionProfilesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListConnectionProfilesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConnectionProfilesRetryDelayMultiplier set to "
                + this.clientProperties.getListConnectionProfilesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListConnectionProfilesMaxRetryDelay() != null) {
      listConnectionProfilesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListConnectionProfilesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConnectionProfilesMaxRetryDelay set to "
                + this.clientProperties.getListConnectionProfilesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListConnectionProfilesInitialRpcTimeout() != null) {
      listConnectionProfilesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListConnectionProfilesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConnectionProfilesInitialRpcTimeout set to "
                + this.clientProperties.getListConnectionProfilesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListConnectionProfilesRpcTimeoutMultiplier() != null) {
      listConnectionProfilesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListConnectionProfilesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConnectionProfilesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListConnectionProfilesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListConnectionProfilesMaxRpcTimeout() != null) {
      listConnectionProfilesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListConnectionProfilesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConnectionProfilesMaxRpcTimeout set to "
                + this.clientProperties.getListConnectionProfilesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListConnectionProfilesTotalTimeout() != null) {
      listConnectionProfilesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListConnectionProfilesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConnectionProfilesTotalTimeout set to "
                + this.clientProperties.getListConnectionProfilesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listConnectionProfilesSettings()
        .setRetrySettings(listConnectionProfilesRetrySettingBuilder.build());
    RetrySettings.Builder getConnectionProfileRetrySettingBuilder =
        clientSettingsBuilder.getConnectionProfileSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetConnectionProfileInitialRetryDelay() != null) {
      getConnectionProfileRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetConnectionProfileInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConnectionProfileInitialRetryDelay set to "
                + this.clientProperties.getGetConnectionProfileInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetConnectionProfileRetryDelayMultiplier() != null) {
      getConnectionProfileRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetConnectionProfileRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConnectionProfileRetryDelayMultiplier set to "
                + this.clientProperties.getGetConnectionProfileRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetConnectionProfileMaxRetryDelay() != null) {
      getConnectionProfileRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetConnectionProfileMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConnectionProfileMaxRetryDelay set to "
                + this.clientProperties.getGetConnectionProfileMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetConnectionProfileInitialRpcTimeout() != null) {
      getConnectionProfileRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetConnectionProfileInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConnectionProfileInitialRpcTimeout set to "
                + this.clientProperties.getGetConnectionProfileInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetConnectionProfileRpcTimeoutMultiplier() != null) {
      getConnectionProfileRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetConnectionProfileRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConnectionProfileRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetConnectionProfileRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetConnectionProfileMaxRpcTimeout() != null) {
      getConnectionProfileRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetConnectionProfileMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConnectionProfileMaxRpcTimeout set to "
                + this.clientProperties.getGetConnectionProfileMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetConnectionProfileTotalTimeout() != null) {
      getConnectionProfileRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetConnectionProfileTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConnectionProfileTotalTimeout set to "
                + this.clientProperties.getGetConnectionProfileTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getConnectionProfileSettings()
        .setRetrySettings(getConnectionProfileRetrySettingBuilder.build());
    RetrySettings.Builder createConnectionProfileRetrySettingBuilder =
        clientSettingsBuilder.createConnectionProfileSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateConnectionProfileInitialRpcTimeout() != null) {
      createConnectionProfileRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateConnectionProfileInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConnectionProfileInitialRpcTimeout set to "
                + this.clientProperties.getCreateConnectionProfileInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateConnectionProfileRpcTimeoutMultiplier() != null) {
      createConnectionProfileRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateConnectionProfileRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConnectionProfileRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateConnectionProfileRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateConnectionProfileMaxRpcTimeout() != null) {
      createConnectionProfileRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateConnectionProfileMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConnectionProfileMaxRpcTimeout set to "
                + this.clientProperties.getCreateConnectionProfileMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateConnectionProfileTotalTimeout() != null) {
      createConnectionProfileRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateConnectionProfileTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConnectionProfileTotalTimeout set to "
                + this.clientProperties.getCreateConnectionProfileTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createConnectionProfileSettings()
        .setRetrySettings(createConnectionProfileRetrySettingBuilder.build());
    RetrySettings.Builder updateConnectionProfileRetrySettingBuilder =
        clientSettingsBuilder.updateConnectionProfileSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateConnectionProfileInitialRpcTimeout() != null) {
      updateConnectionProfileRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateConnectionProfileInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConnectionProfileInitialRpcTimeout set to "
                + this.clientProperties.getUpdateConnectionProfileInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateConnectionProfileRpcTimeoutMultiplier() != null) {
      updateConnectionProfileRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateConnectionProfileRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConnectionProfileRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateConnectionProfileRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateConnectionProfileMaxRpcTimeout() != null) {
      updateConnectionProfileRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateConnectionProfileMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConnectionProfileMaxRpcTimeout set to "
                + this.clientProperties.getUpdateConnectionProfileMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateConnectionProfileTotalTimeout() != null) {
      updateConnectionProfileRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateConnectionProfileTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConnectionProfileTotalTimeout set to "
                + this.clientProperties.getUpdateConnectionProfileTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateConnectionProfileSettings()
        .setRetrySettings(updateConnectionProfileRetrySettingBuilder.build());
    RetrySettings.Builder deleteConnectionProfileRetrySettingBuilder =
        clientSettingsBuilder.deleteConnectionProfileSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteConnectionProfileInitialRpcTimeout() != null) {
      deleteConnectionProfileRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteConnectionProfileInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConnectionProfileInitialRpcTimeout set to "
                + this.clientProperties.getDeleteConnectionProfileInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteConnectionProfileRpcTimeoutMultiplier() != null) {
      deleteConnectionProfileRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteConnectionProfileRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConnectionProfileRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteConnectionProfileRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteConnectionProfileMaxRpcTimeout() != null) {
      deleteConnectionProfileRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteConnectionProfileMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConnectionProfileMaxRpcTimeout set to "
                + this.clientProperties.getDeleteConnectionProfileMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteConnectionProfileTotalTimeout() != null) {
      deleteConnectionProfileRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteConnectionProfileTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConnectionProfileTotalTimeout set to "
                + this.clientProperties.getDeleteConnectionProfileTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteConnectionProfileSettings()
        .setRetrySettings(deleteConnectionProfileRetrySettingBuilder.build());
    RetrySettings.Builder discoverConnectionProfileRetrySettingBuilder =
        clientSettingsBuilder.discoverConnectionProfileSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDiscoverConnectionProfileInitialRetryDelay() != null) {
      discoverConnectionProfileRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDiscoverConnectionProfileInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DiscoverConnectionProfileInitialRetryDelay set to "
                + this.clientProperties.getDiscoverConnectionProfileInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDiscoverConnectionProfileRetryDelayMultiplier() != null) {
      discoverConnectionProfileRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDiscoverConnectionProfileRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DiscoverConnectionProfileRetryDelayMultiplier set to "
                + this.clientProperties.getDiscoverConnectionProfileRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDiscoverConnectionProfileMaxRetryDelay() != null) {
      discoverConnectionProfileRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDiscoverConnectionProfileMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DiscoverConnectionProfileMaxRetryDelay set to "
                + this.clientProperties.getDiscoverConnectionProfileMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDiscoverConnectionProfileInitialRpcTimeout() != null) {
      discoverConnectionProfileRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDiscoverConnectionProfileInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DiscoverConnectionProfileInitialRpcTimeout set to "
                + this.clientProperties.getDiscoverConnectionProfileInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDiscoverConnectionProfileRpcTimeoutMultiplier() != null) {
      discoverConnectionProfileRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDiscoverConnectionProfileRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DiscoverConnectionProfileRpcTimeoutMultiplier set to "
                + this.clientProperties.getDiscoverConnectionProfileRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDiscoverConnectionProfileMaxRpcTimeout() != null) {
      discoverConnectionProfileRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDiscoverConnectionProfileMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DiscoverConnectionProfileMaxRpcTimeout set to "
                + this.clientProperties.getDiscoverConnectionProfileMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDiscoverConnectionProfileTotalTimeout() != null) {
      discoverConnectionProfileRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDiscoverConnectionProfileTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DiscoverConnectionProfileTotalTimeout set to "
                + this.clientProperties.getDiscoverConnectionProfileTotalTimeout());
      }
    }
    clientSettingsBuilder
        .discoverConnectionProfileSettings()
        .setRetrySettings(discoverConnectionProfileRetrySettingBuilder.build());
    RetrySettings.Builder listStreamsRetrySettingBuilder =
        clientSettingsBuilder.listStreamsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListStreamsInitialRetryDelay() != null) {
      listStreamsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListStreamsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStreamsInitialRetryDelay set to "
                + this.clientProperties.getListStreamsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListStreamsRetryDelayMultiplier() != null) {
      listStreamsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListStreamsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStreamsRetryDelayMultiplier set to "
                + this.clientProperties.getListStreamsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListStreamsMaxRetryDelay() != null) {
      listStreamsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListStreamsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStreamsMaxRetryDelay set to "
                + this.clientProperties.getListStreamsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListStreamsInitialRpcTimeout() != null) {
      listStreamsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListStreamsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStreamsInitialRpcTimeout set to "
                + this.clientProperties.getListStreamsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListStreamsRpcTimeoutMultiplier() != null) {
      listStreamsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListStreamsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStreamsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListStreamsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListStreamsMaxRpcTimeout() != null) {
      listStreamsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListStreamsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStreamsMaxRpcTimeout set to "
                + this.clientProperties.getListStreamsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListStreamsTotalTimeout() != null) {
      listStreamsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListStreamsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStreamsTotalTimeout set to " + this.clientProperties.getListStreamsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listStreamsSettings()
        .setRetrySettings(listStreamsRetrySettingBuilder.build());
    RetrySettings.Builder getStreamRetrySettingBuilder =
        clientSettingsBuilder.getStreamSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetStreamInitialRetryDelay() != null) {
      getStreamRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetStreamInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStreamInitialRetryDelay set to "
                + this.clientProperties.getGetStreamInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetStreamRetryDelayMultiplier() != null) {
      getStreamRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetStreamRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStreamRetryDelayMultiplier set to "
                + this.clientProperties.getGetStreamRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetStreamMaxRetryDelay() != null) {
      getStreamRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetStreamMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStreamMaxRetryDelay set to " + this.clientProperties.getGetStreamMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetStreamInitialRpcTimeout() != null) {
      getStreamRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetStreamInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStreamInitialRpcTimeout set to "
                + this.clientProperties.getGetStreamInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetStreamRpcTimeoutMultiplier() != null) {
      getStreamRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetStreamRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStreamRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetStreamRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetStreamMaxRpcTimeout() != null) {
      getStreamRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetStreamMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStreamMaxRpcTimeout set to " + this.clientProperties.getGetStreamMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetStreamTotalTimeout() != null) {
      getStreamRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetStreamTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStreamTotalTimeout set to " + this.clientProperties.getGetStreamTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getStreamSettings()
        .setRetrySettings(getStreamRetrySettingBuilder.build());
    RetrySettings.Builder createStreamRetrySettingBuilder =
        clientSettingsBuilder.createStreamSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateStreamInitialRpcTimeout() != null) {
      createStreamRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateStreamInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateStreamInitialRpcTimeout set to "
                + this.clientProperties.getCreateStreamInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateStreamRpcTimeoutMultiplier() != null) {
      createStreamRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateStreamRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateStreamRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateStreamRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateStreamMaxRpcTimeout() != null) {
      createStreamRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateStreamMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateStreamMaxRpcTimeout set to "
                + this.clientProperties.getCreateStreamMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateStreamTotalTimeout() != null) {
      createStreamRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateStreamTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateStreamTotalTimeout set to "
                + this.clientProperties.getCreateStreamTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createStreamSettings()
        .setRetrySettings(createStreamRetrySettingBuilder.build());
    RetrySettings.Builder updateStreamRetrySettingBuilder =
        clientSettingsBuilder.updateStreamSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateStreamInitialRpcTimeout() != null) {
      updateStreamRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateStreamInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateStreamInitialRpcTimeout set to "
                + this.clientProperties.getUpdateStreamInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateStreamRpcTimeoutMultiplier() != null) {
      updateStreamRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateStreamRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateStreamRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateStreamRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateStreamMaxRpcTimeout() != null) {
      updateStreamRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateStreamMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateStreamMaxRpcTimeout set to "
                + this.clientProperties.getUpdateStreamMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateStreamTotalTimeout() != null) {
      updateStreamRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateStreamTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateStreamTotalTimeout set to "
                + this.clientProperties.getUpdateStreamTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateStreamSettings()
        .setRetrySettings(updateStreamRetrySettingBuilder.build());
    RetrySettings.Builder deleteStreamRetrySettingBuilder =
        clientSettingsBuilder.deleteStreamSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteStreamInitialRpcTimeout() != null) {
      deleteStreamRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteStreamInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteStreamInitialRpcTimeout set to "
                + this.clientProperties.getDeleteStreamInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteStreamRpcTimeoutMultiplier() != null) {
      deleteStreamRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteStreamRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteStreamRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteStreamRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteStreamMaxRpcTimeout() != null) {
      deleteStreamRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteStreamMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteStreamMaxRpcTimeout set to "
                + this.clientProperties.getDeleteStreamMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteStreamTotalTimeout() != null) {
      deleteStreamRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteStreamTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteStreamTotalTimeout set to "
                + this.clientProperties.getDeleteStreamTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteStreamSettings()
        .setRetrySettings(deleteStreamRetrySettingBuilder.build());
    RetrySettings.Builder getStreamObjectRetrySettingBuilder =
        clientSettingsBuilder.getStreamObjectSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetStreamObjectInitialRetryDelay() != null) {
      getStreamObjectRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetStreamObjectInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStreamObjectInitialRetryDelay set to "
                + this.clientProperties.getGetStreamObjectInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetStreamObjectRetryDelayMultiplier() != null) {
      getStreamObjectRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetStreamObjectRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStreamObjectRetryDelayMultiplier set to "
                + this.clientProperties.getGetStreamObjectRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetStreamObjectMaxRetryDelay() != null) {
      getStreamObjectRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetStreamObjectMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStreamObjectMaxRetryDelay set to "
                + this.clientProperties.getGetStreamObjectMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetStreamObjectInitialRpcTimeout() != null) {
      getStreamObjectRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetStreamObjectInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStreamObjectInitialRpcTimeout set to "
                + this.clientProperties.getGetStreamObjectInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetStreamObjectRpcTimeoutMultiplier() != null) {
      getStreamObjectRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetStreamObjectRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStreamObjectRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetStreamObjectRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetStreamObjectMaxRpcTimeout() != null) {
      getStreamObjectRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetStreamObjectMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStreamObjectMaxRpcTimeout set to "
                + this.clientProperties.getGetStreamObjectMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetStreamObjectTotalTimeout() != null) {
      getStreamObjectRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetStreamObjectTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStreamObjectTotalTimeout set to "
                + this.clientProperties.getGetStreamObjectTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getStreamObjectSettings()
        .setRetrySettings(getStreamObjectRetrySettingBuilder.build());
    RetrySettings.Builder lookupStreamObjectRetrySettingBuilder =
        clientSettingsBuilder.lookupStreamObjectSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getLookupStreamObjectInitialRetryDelay() != null) {
      lookupStreamObjectRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getLookupStreamObjectInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "LookupStreamObjectInitialRetryDelay set to "
                + this.clientProperties.getLookupStreamObjectInitialRetryDelay());
      }
    }
    if (this.clientProperties.getLookupStreamObjectRetryDelayMultiplier() != null) {
      lookupStreamObjectRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getLookupStreamObjectRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "LookupStreamObjectRetryDelayMultiplier set to "
                + this.clientProperties.getLookupStreamObjectRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getLookupStreamObjectMaxRetryDelay() != null) {
      lookupStreamObjectRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getLookupStreamObjectMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "LookupStreamObjectMaxRetryDelay set to "
                + this.clientProperties.getLookupStreamObjectMaxRetryDelay());
      }
    }
    if (this.clientProperties.getLookupStreamObjectInitialRpcTimeout() != null) {
      lookupStreamObjectRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getLookupStreamObjectInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "LookupStreamObjectInitialRpcTimeout set to "
                + this.clientProperties.getLookupStreamObjectInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getLookupStreamObjectRpcTimeoutMultiplier() != null) {
      lookupStreamObjectRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getLookupStreamObjectRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "LookupStreamObjectRpcTimeoutMultiplier set to "
                + this.clientProperties.getLookupStreamObjectRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getLookupStreamObjectMaxRpcTimeout() != null) {
      lookupStreamObjectRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getLookupStreamObjectMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "LookupStreamObjectMaxRpcTimeout set to "
                + this.clientProperties.getLookupStreamObjectMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getLookupStreamObjectTotalTimeout() != null) {
      lookupStreamObjectRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getLookupStreamObjectTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "LookupStreamObjectTotalTimeout set to "
                + this.clientProperties.getLookupStreamObjectTotalTimeout());
      }
    }
    clientSettingsBuilder
        .lookupStreamObjectSettings()
        .setRetrySettings(lookupStreamObjectRetrySettingBuilder.build());
    RetrySettings.Builder listStreamObjectsRetrySettingBuilder =
        clientSettingsBuilder.listStreamObjectsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListStreamObjectsInitialRetryDelay() != null) {
      listStreamObjectsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListStreamObjectsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStreamObjectsInitialRetryDelay set to "
                + this.clientProperties.getListStreamObjectsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListStreamObjectsRetryDelayMultiplier() != null) {
      listStreamObjectsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListStreamObjectsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStreamObjectsRetryDelayMultiplier set to "
                + this.clientProperties.getListStreamObjectsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListStreamObjectsMaxRetryDelay() != null) {
      listStreamObjectsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListStreamObjectsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStreamObjectsMaxRetryDelay set to "
                + this.clientProperties.getListStreamObjectsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListStreamObjectsInitialRpcTimeout() != null) {
      listStreamObjectsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListStreamObjectsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStreamObjectsInitialRpcTimeout set to "
                + this.clientProperties.getListStreamObjectsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListStreamObjectsRpcTimeoutMultiplier() != null) {
      listStreamObjectsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListStreamObjectsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStreamObjectsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListStreamObjectsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListStreamObjectsMaxRpcTimeout() != null) {
      listStreamObjectsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListStreamObjectsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStreamObjectsMaxRpcTimeout set to "
                + this.clientProperties.getListStreamObjectsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListStreamObjectsTotalTimeout() != null) {
      listStreamObjectsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListStreamObjectsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStreamObjectsTotalTimeout set to "
                + this.clientProperties.getListStreamObjectsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listStreamObjectsSettings()
        .setRetrySettings(listStreamObjectsRetrySettingBuilder.build());
    RetrySettings.Builder startBackfillJobRetrySettingBuilder =
        clientSettingsBuilder.startBackfillJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getStartBackfillJobInitialRetryDelay() != null) {
      startBackfillJobRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getStartBackfillJobInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartBackfillJobInitialRetryDelay set to "
                + this.clientProperties.getStartBackfillJobInitialRetryDelay());
      }
    }
    if (this.clientProperties.getStartBackfillJobRetryDelayMultiplier() != null) {
      startBackfillJobRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getStartBackfillJobRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartBackfillJobRetryDelayMultiplier set to "
                + this.clientProperties.getStartBackfillJobRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getStartBackfillJobMaxRetryDelay() != null) {
      startBackfillJobRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getStartBackfillJobMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartBackfillJobMaxRetryDelay set to "
                + this.clientProperties.getStartBackfillJobMaxRetryDelay());
      }
    }
    if (this.clientProperties.getStartBackfillJobInitialRpcTimeout() != null) {
      startBackfillJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getStartBackfillJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartBackfillJobInitialRpcTimeout set to "
                + this.clientProperties.getStartBackfillJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getStartBackfillJobRpcTimeoutMultiplier() != null) {
      startBackfillJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getStartBackfillJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartBackfillJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getStartBackfillJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getStartBackfillJobMaxRpcTimeout() != null) {
      startBackfillJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getStartBackfillJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartBackfillJobMaxRpcTimeout set to "
                + this.clientProperties.getStartBackfillJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getStartBackfillJobTotalTimeout() != null) {
      startBackfillJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getStartBackfillJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartBackfillJobTotalTimeout set to "
                + this.clientProperties.getStartBackfillJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .startBackfillJobSettings()
        .setRetrySettings(startBackfillJobRetrySettingBuilder.build());
    RetrySettings.Builder stopBackfillJobRetrySettingBuilder =
        clientSettingsBuilder.stopBackfillJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getStopBackfillJobInitialRetryDelay() != null) {
      stopBackfillJobRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getStopBackfillJobInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopBackfillJobInitialRetryDelay set to "
                + this.clientProperties.getStopBackfillJobInitialRetryDelay());
      }
    }
    if (this.clientProperties.getStopBackfillJobRetryDelayMultiplier() != null) {
      stopBackfillJobRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getStopBackfillJobRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopBackfillJobRetryDelayMultiplier set to "
                + this.clientProperties.getStopBackfillJobRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getStopBackfillJobMaxRetryDelay() != null) {
      stopBackfillJobRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getStopBackfillJobMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopBackfillJobMaxRetryDelay set to "
                + this.clientProperties.getStopBackfillJobMaxRetryDelay());
      }
    }
    if (this.clientProperties.getStopBackfillJobInitialRpcTimeout() != null) {
      stopBackfillJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getStopBackfillJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopBackfillJobInitialRpcTimeout set to "
                + this.clientProperties.getStopBackfillJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getStopBackfillJobRpcTimeoutMultiplier() != null) {
      stopBackfillJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getStopBackfillJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopBackfillJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getStopBackfillJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getStopBackfillJobMaxRpcTimeout() != null) {
      stopBackfillJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getStopBackfillJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopBackfillJobMaxRpcTimeout set to "
                + this.clientProperties.getStopBackfillJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getStopBackfillJobTotalTimeout() != null) {
      stopBackfillJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getStopBackfillJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopBackfillJobTotalTimeout set to "
                + this.clientProperties.getStopBackfillJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .stopBackfillJobSettings()
        .setRetrySettings(stopBackfillJobRetrySettingBuilder.build());
    RetrySettings.Builder fetchStaticIpsRetrySettingBuilder =
        clientSettingsBuilder.fetchStaticIpsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getFetchStaticIpsInitialRetryDelay() != null) {
      fetchStaticIpsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getFetchStaticIpsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchStaticIpsInitialRetryDelay set to "
                + this.clientProperties.getFetchStaticIpsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getFetchStaticIpsRetryDelayMultiplier() != null) {
      fetchStaticIpsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getFetchStaticIpsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchStaticIpsRetryDelayMultiplier set to "
                + this.clientProperties.getFetchStaticIpsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getFetchStaticIpsMaxRetryDelay() != null) {
      fetchStaticIpsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getFetchStaticIpsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchStaticIpsMaxRetryDelay set to "
                + this.clientProperties.getFetchStaticIpsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getFetchStaticIpsInitialRpcTimeout() != null) {
      fetchStaticIpsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getFetchStaticIpsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchStaticIpsInitialRpcTimeout set to "
                + this.clientProperties.getFetchStaticIpsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getFetchStaticIpsRpcTimeoutMultiplier() != null) {
      fetchStaticIpsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getFetchStaticIpsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchStaticIpsRpcTimeoutMultiplier set to "
                + this.clientProperties.getFetchStaticIpsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getFetchStaticIpsMaxRpcTimeout() != null) {
      fetchStaticIpsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getFetchStaticIpsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchStaticIpsMaxRpcTimeout set to "
                + this.clientProperties.getFetchStaticIpsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getFetchStaticIpsTotalTimeout() != null) {
      fetchStaticIpsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getFetchStaticIpsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchStaticIpsTotalTimeout set to "
                + this.clientProperties.getFetchStaticIpsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .fetchStaticIpsSettings()
        .setRetrySettings(fetchStaticIpsRetrySettingBuilder.build());
    RetrySettings.Builder createPrivateConnectionRetrySettingBuilder =
        clientSettingsBuilder.createPrivateConnectionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreatePrivateConnectionInitialRpcTimeout() != null) {
      createPrivateConnectionRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreatePrivateConnectionInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePrivateConnectionInitialRpcTimeout set to "
                + this.clientProperties.getCreatePrivateConnectionInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreatePrivateConnectionRpcTimeoutMultiplier() != null) {
      createPrivateConnectionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreatePrivateConnectionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePrivateConnectionRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreatePrivateConnectionRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreatePrivateConnectionMaxRpcTimeout() != null) {
      createPrivateConnectionRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreatePrivateConnectionMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePrivateConnectionMaxRpcTimeout set to "
                + this.clientProperties.getCreatePrivateConnectionMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreatePrivateConnectionTotalTimeout() != null) {
      createPrivateConnectionRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreatePrivateConnectionTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePrivateConnectionTotalTimeout set to "
                + this.clientProperties.getCreatePrivateConnectionTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createPrivateConnectionSettings()
        .setRetrySettings(createPrivateConnectionRetrySettingBuilder.build());
    RetrySettings.Builder getPrivateConnectionRetrySettingBuilder =
        clientSettingsBuilder.getPrivateConnectionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetPrivateConnectionInitialRetryDelay() != null) {
      getPrivateConnectionRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetPrivateConnectionInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPrivateConnectionInitialRetryDelay set to "
                + this.clientProperties.getGetPrivateConnectionInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetPrivateConnectionRetryDelayMultiplier() != null) {
      getPrivateConnectionRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetPrivateConnectionRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPrivateConnectionRetryDelayMultiplier set to "
                + this.clientProperties.getGetPrivateConnectionRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetPrivateConnectionMaxRetryDelay() != null) {
      getPrivateConnectionRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetPrivateConnectionMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPrivateConnectionMaxRetryDelay set to "
                + this.clientProperties.getGetPrivateConnectionMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetPrivateConnectionInitialRpcTimeout() != null) {
      getPrivateConnectionRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetPrivateConnectionInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPrivateConnectionInitialRpcTimeout set to "
                + this.clientProperties.getGetPrivateConnectionInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetPrivateConnectionRpcTimeoutMultiplier() != null) {
      getPrivateConnectionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetPrivateConnectionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPrivateConnectionRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetPrivateConnectionRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetPrivateConnectionMaxRpcTimeout() != null) {
      getPrivateConnectionRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetPrivateConnectionMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPrivateConnectionMaxRpcTimeout set to "
                + this.clientProperties.getGetPrivateConnectionMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetPrivateConnectionTotalTimeout() != null) {
      getPrivateConnectionRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetPrivateConnectionTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPrivateConnectionTotalTimeout set to "
                + this.clientProperties.getGetPrivateConnectionTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getPrivateConnectionSettings()
        .setRetrySettings(getPrivateConnectionRetrySettingBuilder.build());
    RetrySettings.Builder listPrivateConnectionsRetrySettingBuilder =
        clientSettingsBuilder.listPrivateConnectionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListPrivateConnectionsInitialRetryDelay() != null) {
      listPrivateConnectionsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListPrivateConnectionsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPrivateConnectionsInitialRetryDelay set to "
                + this.clientProperties.getListPrivateConnectionsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListPrivateConnectionsRetryDelayMultiplier() != null) {
      listPrivateConnectionsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListPrivateConnectionsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPrivateConnectionsRetryDelayMultiplier set to "
                + this.clientProperties.getListPrivateConnectionsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListPrivateConnectionsMaxRetryDelay() != null) {
      listPrivateConnectionsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListPrivateConnectionsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPrivateConnectionsMaxRetryDelay set to "
                + this.clientProperties.getListPrivateConnectionsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListPrivateConnectionsInitialRpcTimeout() != null) {
      listPrivateConnectionsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListPrivateConnectionsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPrivateConnectionsInitialRpcTimeout set to "
                + this.clientProperties.getListPrivateConnectionsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListPrivateConnectionsRpcTimeoutMultiplier() != null) {
      listPrivateConnectionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListPrivateConnectionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPrivateConnectionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListPrivateConnectionsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListPrivateConnectionsMaxRpcTimeout() != null) {
      listPrivateConnectionsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListPrivateConnectionsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPrivateConnectionsMaxRpcTimeout set to "
                + this.clientProperties.getListPrivateConnectionsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListPrivateConnectionsTotalTimeout() != null) {
      listPrivateConnectionsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListPrivateConnectionsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPrivateConnectionsTotalTimeout set to "
                + this.clientProperties.getListPrivateConnectionsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listPrivateConnectionsSettings()
        .setRetrySettings(listPrivateConnectionsRetrySettingBuilder.build());
    RetrySettings.Builder deletePrivateConnectionRetrySettingBuilder =
        clientSettingsBuilder.deletePrivateConnectionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeletePrivateConnectionInitialRpcTimeout() != null) {
      deletePrivateConnectionRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeletePrivateConnectionInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePrivateConnectionInitialRpcTimeout set to "
                + this.clientProperties.getDeletePrivateConnectionInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeletePrivateConnectionRpcTimeoutMultiplier() != null) {
      deletePrivateConnectionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeletePrivateConnectionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePrivateConnectionRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeletePrivateConnectionRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeletePrivateConnectionMaxRpcTimeout() != null) {
      deletePrivateConnectionRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeletePrivateConnectionMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePrivateConnectionMaxRpcTimeout set to "
                + this.clientProperties.getDeletePrivateConnectionMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeletePrivateConnectionTotalTimeout() != null) {
      deletePrivateConnectionRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeletePrivateConnectionTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePrivateConnectionTotalTimeout set to "
                + this.clientProperties.getDeletePrivateConnectionTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deletePrivateConnectionSettings()
        .setRetrySettings(deletePrivateConnectionRetrySettingBuilder.build());
    RetrySettings.Builder createRouteRetrySettingBuilder =
        clientSettingsBuilder.createRouteSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateRouteInitialRpcTimeout() != null) {
      createRouteRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateRouteInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateRouteInitialRpcTimeout set to "
                + this.clientProperties.getCreateRouteInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateRouteRpcTimeoutMultiplier() != null) {
      createRouteRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateRouteRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateRouteRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateRouteRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateRouteMaxRpcTimeout() != null) {
      createRouteRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateRouteMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateRouteMaxRpcTimeout set to "
                + this.clientProperties.getCreateRouteMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateRouteTotalTimeout() != null) {
      createRouteRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateRouteTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateRouteTotalTimeout set to " + this.clientProperties.getCreateRouteTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createRouteSettings()
        .setRetrySettings(createRouteRetrySettingBuilder.build());
    RetrySettings.Builder getRouteRetrySettingBuilder =
        clientSettingsBuilder.getRouteSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetRouteInitialRetryDelay() != null) {
      getRouteRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetRouteInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRouteInitialRetryDelay set to "
                + this.clientProperties.getGetRouteInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetRouteRetryDelayMultiplier() != null) {
      getRouteRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetRouteRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRouteRetryDelayMultiplier set to "
                + this.clientProperties.getGetRouteRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetRouteMaxRetryDelay() != null) {
      getRouteRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetRouteMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRouteMaxRetryDelay set to " + this.clientProperties.getGetRouteMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetRouteInitialRpcTimeout() != null) {
      getRouteRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetRouteInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRouteInitialRpcTimeout set to "
                + this.clientProperties.getGetRouteInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetRouteRpcTimeoutMultiplier() != null) {
      getRouteRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetRouteRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRouteRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetRouteRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetRouteMaxRpcTimeout() != null) {
      getRouteRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetRouteMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRouteMaxRpcTimeout set to " + this.clientProperties.getGetRouteMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetRouteTotalTimeout() != null) {
      getRouteRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetRouteTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRouteTotalTimeout set to " + this.clientProperties.getGetRouteTotalTimeout());
      }
    }
    clientSettingsBuilder.getRouteSettings().setRetrySettings(getRouteRetrySettingBuilder.build());
    RetrySettings.Builder listRoutesRetrySettingBuilder =
        clientSettingsBuilder.listRoutesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListRoutesInitialRetryDelay() != null) {
      listRoutesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListRoutesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRoutesInitialRetryDelay set to "
                + this.clientProperties.getListRoutesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListRoutesRetryDelayMultiplier() != null) {
      listRoutesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListRoutesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRoutesRetryDelayMultiplier set to "
                + this.clientProperties.getListRoutesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListRoutesMaxRetryDelay() != null) {
      listRoutesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListRoutesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRoutesMaxRetryDelay set to " + this.clientProperties.getListRoutesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListRoutesInitialRpcTimeout() != null) {
      listRoutesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListRoutesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRoutesInitialRpcTimeout set to "
                + this.clientProperties.getListRoutesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListRoutesRpcTimeoutMultiplier() != null) {
      listRoutesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListRoutesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRoutesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListRoutesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListRoutesMaxRpcTimeout() != null) {
      listRoutesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListRoutesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRoutesMaxRpcTimeout set to " + this.clientProperties.getListRoutesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListRoutesTotalTimeout() != null) {
      listRoutesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListRoutesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRoutesTotalTimeout set to " + this.clientProperties.getListRoutesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listRoutesSettings()
        .setRetrySettings(listRoutesRetrySettingBuilder.build());
    RetrySettings.Builder deleteRouteRetrySettingBuilder =
        clientSettingsBuilder.deleteRouteSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteRouteInitialRpcTimeout() != null) {
      deleteRouteRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteRouteInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRouteInitialRpcTimeout set to "
                + this.clientProperties.getDeleteRouteInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteRouteRpcTimeoutMultiplier() != null) {
      deleteRouteRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteRouteRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRouteRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteRouteRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteRouteMaxRpcTimeout() != null) {
      deleteRouteRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteRouteMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRouteMaxRpcTimeout set to "
                + this.clientProperties.getDeleteRouteMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteRouteTotalTimeout() != null) {
      deleteRouteRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteRouteTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRouteTotalTimeout set to " + this.clientProperties.getDeleteRouteTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteRouteSettings()
        .setRetrySettings(deleteRouteRetrySettingBuilder.build());
    RetrySettings.Builder listLocationsRetrySettingBuilder =
        clientSettingsBuilder.listLocationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListLocationsInitialRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListLocationsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRetryDelay set to "
                + this.clientProperties.getListLocationsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsRetryDelayMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListLocationsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRetryDelayMultiplier set to "
                + this.clientProperties.getListLocationsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListLocationsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRetryDelay set to "
                + this.clientProperties.getListLocationsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsInitialRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListLocationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRpcTimeout set to "
                + this.clientProperties.getListLocationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsRpcTimeoutMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListLocationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRpcTimeout set to "
                + this.clientProperties.getListLocationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsTotalTimeout() != null) {
      listLocationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListLocationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsTotalTimeout set to "
                + this.clientProperties.getListLocationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listLocationsSettings()
        .setRetrySettings(listLocationsRetrySettingBuilder.build());
    RetrySettings.Builder getLocationRetrySettingBuilder =
        clientSettingsBuilder.getLocationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetLocationInitialRetryDelay() != null) {
      getLocationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetLocationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRetryDelay set to "
                + this.clientProperties.getGetLocationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationRetryDelayMultiplier() != null) {
      getLocationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetLocationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRetryDelayMultiplier set to "
                + this.clientProperties.getGetLocationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRetryDelay() != null) {
      getLocationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetLocationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRetryDelay set to "
                + this.clientProperties.getGetLocationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationInitialRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetLocationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRpcTimeout set to "
                + this.clientProperties.getGetLocationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationRpcTimeoutMultiplier() != null) {
      getLocationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetLocationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRpcTimeout set to "
                + this.clientProperties.getGetLocationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationTotalTimeout() != null) {
      getLocationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetLocationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationTotalTimeout set to " + this.clientProperties.getGetLocationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getLocationSettings()
        .setRetrySettings(getLocationRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public DatastreamClient datastreamClient(DatastreamSettings datastreamSettings)
      throws IOException {
    return DatastreamClient.create(datastreamSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-datastream";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
