/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.eventarc.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.eventarc.v1.EventarcClient;
import com.google.cloud.eventarc.v1.EventarcSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link EventarcClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(EventarcClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.eventarc.v1.spring.auto.eventarc.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({EventarcSpringProperties.class, GlobalProperties.class})
public class EventarcSpringAutoConfiguration {
  private final EventarcSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(EventarcSpringAutoConfiguration.class);

  protected EventarcSpringAutoConfiguration(
      EventarcSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider eventarcCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Eventarc-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultEventarcTransportChannelProvider() {
    return EventarcSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a EventarcClient bean configured to use the default credentials provider (obtained
   * with eventarcCredentials()) and its default transport channel provider
   * (defaultEventarcTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in EventarcSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public EventarcSettings eventarcSettings(
      @Qualifier("eventarcCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultEventarcTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    EventarcSettings.Builder clientSettingsBuilder =
        EventarcSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          EventarcSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          EventarcSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder getTriggerRetrySettingBuilder =
        clientSettingsBuilder.getTriggerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetTriggerRpcTimeoutMultiplier() != null) {
      getTriggerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetTriggerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTriggerRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetTriggerRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getTriggerSettings()
        .setRetrySettings(getTriggerRetrySettingBuilder.build());
    RetrySettings.Builder listTriggersRetrySettingBuilder =
        clientSettingsBuilder.listTriggersSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListTriggersRpcTimeoutMultiplier() != null) {
      listTriggersRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListTriggersRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTriggersRpcTimeoutMultiplier set to "
                + this.clientProperties.getListTriggersRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listTriggersSettings()
        .setRetrySettings(listTriggersRetrySettingBuilder.build());
    RetrySettings.Builder createTriggerRetrySettingBuilder =
        clientSettingsBuilder.createTriggerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateTriggerRpcTimeoutMultiplier() != null) {
      createTriggerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateTriggerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTriggerRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateTriggerRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .createTriggerSettings()
        .setRetrySettings(createTriggerRetrySettingBuilder.build());
    RetrySettings.Builder updateTriggerRetrySettingBuilder =
        clientSettingsBuilder.updateTriggerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateTriggerRpcTimeoutMultiplier() != null) {
      updateTriggerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateTriggerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTriggerRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateTriggerRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .updateTriggerSettings()
        .setRetrySettings(updateTriggerRetrySettingBuilder.build());
    RetrySettings.Builder deleteTriggerRetrySettingBuilder =
        clientSettingsBuilder.deleteTriggerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteTriggerRpcTimeoutMultiplier() != null) {
      deleteTriggerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteTriggerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTriggerRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteTriggerRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .deleteTriggerSettings()
        .setRetrySettings(deleteTriggerRetrySettingBuilder.build());
    RetrySettings.Builder getChannelRetrySettingBuilder =
        clientSettingsBuilder.getChannelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetChannelRpcTimeoutMultiplier() != null) {
      getChannelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetChannelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetChannelRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetChannelRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getChannelSettings()
        .setRetrySettings(getChannelRetrySettingBuilder.build());
    RetrySettings.Builder listChannelsRetrySettingBuilder =
        clientSettingsBuilder.listChannelsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListChannelsRpcTimeoutMultiplier() != null) {
      listChannelsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListChannelsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListChannelsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListChannelsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listChannelsSettings()
        .setRetrySettings(listChannelsRetrySettingBuilder.build());
    RetrySettings.Builder createChannelRetrySettingBuilder =
        clientSettingsBuilder.createChannelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateChannelRpcTimeoutMultiplier() != null) {
      createChannelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateChannelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateChannelRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateChannelRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .createChannelSettings()
        .setRetrySettings(createChannelRetrySettingBuilder.build());
    RetrySettings.Builder updateChannelRetrySettingBuilder =
        clientSettingsBuilder.updateChannelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateChannelRpcTimeoutMultiplier() != null) {
      updateChannelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateChannelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateChannelRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateChannelRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .updateChannelSettings()
        .setRetrySettings(updateChannelRetrySettingBuilder.build());
    RetrySettings.Builder deleteChannelRetrySettingBuilder =
        clientSettingsBuilder.deleteChannelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteChannelRpcTimeoutMultiplier() != null) {
      deleteChannelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteChannelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteChannelRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteChannelRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .deleteChannelSettings()
        .setRetrySettings(deleteChannelRetrySettingBuilder.build());
    RetrySettings.Builder getProviderRetrySettingBuilder =
        clientSettingsBuilder.getProviderSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetProviderRpcTimeoutMultiplier() != null) {
      getProviderRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetProviderRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProviderRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetProviderRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getProviderSettings()
        .setRetrySettings(getProviderRetrySettingBuilder.build());
    RetrySettings.Builder listProvidersRetrySettingBuilder =
        clientSettingsBuilder.listProvidersSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListProvidersRpcTimeoutMultiplier() != null) {
      listProvidersRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListProvidersRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProvidersRpcTimeoutMultiplier set to "
                + this.clientProperties.getListProvidersRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listProvidersSettings()
        .setRetrySettings(listProvidersRetrySettingBuilder.build());
    RetrySettings.Builder getChannelConnectionRetrySettingBuilder =
        clientSettingsBuilder.getChannelConnectionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetChannelConnectionRpcTimeoutMultiplier() != null) {
      getChannelConnectionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetChannelConnectionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetChannelConnectionRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetChannelConnectionRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getChannelConnectionSettings()
        .setRetrySettings(getChannelConnectionRetrySettingBuilder.build());
    RetrySettings.Builder listChannelConnectionsRetrySettingBuilder =
        clientSettingsBuilder.listChannelConnectionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListChannelConnectionsRpcTimeoutMultiplier() != null) {
      listChannelConnectionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListChannelConnectionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListChannelConnectionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListChannelConnectionsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listChannelConnectionsSettings()
        .setRetrySettings(listChannelConnectionsRetrySettingBuilder.build());
    RetrySettings.Builder createChannelConnectionRetrySettingBuilder =
        clientSettingsBuilder.createChannelConnectionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateChannelConnectionRpcTimeoutMultiplier() != null) {
      createChannelConnectionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateChannelConnectionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateChannelConnectionRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateChannelConnectionRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .createChannelConnectionSettings()
        .setRetrySettings(createChannelConnectionRetrySettingBuilder.build());
    RetrySettings.Builder deleteChannelConnectionRetrySettingBuilder =
        clientSettingsBuilder.deleteChannelConnectionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteChannelConnectionRpcTimeoutMultiplier() != null) {
      deleteChannelConnectionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteChannelConnectionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteChannelConnectionRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteChannelConnectionRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .deleteChannelConnectionSettings()
        .setRetrySettings(deleteChannelConnectionRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public EventarcClient eventarcClient(EventarcSettings eventarcSettings) throws IOException {
    return EventarcClient.create(eventarcSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-eventarc";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
