/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.websecurityscanner.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import com.google.cloud.websecurityscanner.v1.WebSecurityScannerClient;
import com.google.cloud.websecurityscanner.v1.WebSecurityScannerSettings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link WebSecurityScannerClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(WebSecurityScannerClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.websecurityscanner.v1.spring.auto.web-security-scanner.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({WebSecurityScannerSpringProperties.class, GlobalProperties.class})
public class WebSecurityScannerSpringAutoConfiguration {
  private final WebSecurityScannerSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(WebSecurityScannerSpringAutoConfiguration.class);

  protected WebSecurityScannerSpringAutoConfiguration(
      WebSecurityScannerSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider webSecurityScannerCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from WebSecurityScanner-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultWebSecurityScannerTransportChannelProvider() {
    return WebSecurityScannerSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a WebSecurityScannerClient bean configured to use the default credentials provider
   * (obtained with webSecurityScannerCredentials()) and its default transport channel provider
   * (defaultWebSecurityScannerTransportChannelProvider()). It also configures the quota project ID
   * if provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in WebSecurityScannerSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public WebSecurityScannerSettings webSecurityScannerSettings(
      @Qualifier("webSecurityScannerCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultWebSecurityScannerTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    WebSecurityScannerSettings.Builder clientSettingsBuilder =
        WebSecurityScannerSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          WebSecurityScannerSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          WebSecurityScannerSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createScanConfigRetrySettingBuilder =
        clientSettingsBuilder.createScanConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateScanConfigInitialRpcTimeout() != null) {
      createScanConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateScanConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateScanConfigInitialRpcTimeout set to "
                + this.clientProperties.getCreateScanConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateScanConfigRpcTimeoutMultiplier() != null) {
      createScanConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateScanConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateScanConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateScanConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateScanConfigMaxRpcTimeout() != null) {
      createScanConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateScanConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateScanConfigMaxRpcTimeout set to "
                + this.clientProperties.getCreateScanConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateScanConfigTotalTimeout() != null) {
      createScanConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateScanConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateScanConfigTotalTimeout set to "
                + this.clientProperties.getCreateScanConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createScanConfigSettings()
        .setRetrySettings(createScanConfigRetrySettingBuilder.build());
    RetrySettings.Builder deleteScanConfigRetrySettingBuilder =
        clientSettingsBuilder.deleteScanConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteScanConfigInitialRetryDelay() != null) {
      deleteScanConfigRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteScanConfigInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteScanConfigInitialRetryDelay set to "
                + this.clientProperties.getDeleteScanConfigInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteScanConfigRetryDelayMultiplier() != null) {
      deleteScanConfigRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteScanConfigRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteScanConfigRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteScanConfigRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteScanConfigMaxRetryDelay() != null) {
      deleteScanConfigRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteScanConfigMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteScanConfigMaxRetryDelay set to "
                + this.clientProperties.getDeleteScanConfigMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteScanConfigInitialRpcTimeout() != null) {
      deleteScanConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteScanConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteScanConfigInitialRpcTimeout set to "
                + this.clientProperties.getDeleteScanConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteScanConfigRpcTimeoutMultiplier() != null) {
      deleteScanConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteScanConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteScanConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteScanConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteScanConfigMaxRpcTimeout() != null) {
      deleteScanConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteScanConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteScanConfigMaxRpcTimeout set to "
                + this.clientProperties.getDeleteScanConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteScanConfigTotalTimeout() != null) {
      deleteScanConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteScanConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteScanConfigTotalTimeout set to "
                + this.clientProperties.getDeleteScanConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteScanConfigSettings()
        .setRetrySettings(deleteScanConfigRetrySettingBuilder.build());
    RetrySettings.Builder getScanConfigRetrySettingBuilder =
        clientSettingsBuilder.getScanConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetScanConfigInitialRetryDelay() != null) {
      getScanConfigRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetScanConfigInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetScanConfigInitialRetryDelay set to "
                + this.clientProperties.getGetScanConfigInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetScanConfigRetryDelayMultiplier() != null) {
      getScanConfigRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetScanConfigRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetScanConfigRetryDelayMultiplier set to "
                + this.clientProperties.getGetScanConfigRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetScanConfigMaxRetryDelay() != null) {
      getScanConfigRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetScanConfigMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetScanConfigMaxRetryDelay set to "
                + this.clientProperties.getGetScanConfigMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetScanConfigInitialRpcTimeout() != null) {
      getScanConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetScanConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetScanConfigInitialRpcTimeout set to "
                + this.clientProperties.getGetScanConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetScanConfigRpcTimeoutMultiplier() != null) {
      getScanConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetScanConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetScanConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetScanConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetScanConfigMaxRpcTimeout() != null) {
      getScanConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetScanConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetScanConfigMaxRpcTimeout set to "
                + this.clientProperties.getGetScanConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetScanConfigTotalTimeout() != null) {
      getScanConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetScanConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetScanConfigTotalTimeout set to "
                + this.clientProperties.getGetScanConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getScanConfigSettings()
        .setRetrySettings(getScanConfigRetrySettingBuilder.build());
    RetrySettings.Builder listScanConfigsRetrySettingBuilder =
        clientSettingsBuilder.listScanConfigsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListScanConfigsInitialRetryDelay() != null) {
      listScanConfigsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListScanConfigsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListScanConfigsInitialRetryDelay set to "
                + this.clientProperties.getListScanConfigsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListScanConfigsRetryDelayMultiplier() != null) {
      listScanConfigsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListScanConfigsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListScanConfigsRetryDelayMultiplier set to "
                + this.clientProperties.getListScanConfigsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListScanConfigsMaxRetryDelay() != null) {
      listScanConfigsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListScanConfigsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListScanConfigsMaxRetryDelay set to "
                + this.clientProperties.getListScanConfigsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListScanConfigsInitialRpcTimeout() != null) {
      listScanConfigsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListScanConfigsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListScanConfigsInitialRpcTimeout set to "
                + this.clientProperties.getListScanConfigsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListScanConfigsRpcTimeoutMultiplier() != null) {
      listScanConfigsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListScanConfigsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListScanConfigsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListScanConfigsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListScanConfigsMaxRpcTimeout() != null) {
      listScanConfigsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListScanConfigsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListScanConfigsMaxRpcTimeout set to "
                + this.clientProperties.getListScanConfigsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListScanConfigsTotalTimeout() != null) {
      listScanConfigsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListScanConfigsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListScanConfigsTotalTimeout set to "
                + this.clientProperties.getListScanConfigsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listScanConfigsSettings()
        .setRetrySettings(listScanConfigsRetrySettingBuilder.build());
    RetrySettings.Builder updateScanConfigRetrySettingBuilder =
        clientSettingsBuilder.updateScanConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateScanConfigInitialRpcTimeout() != null) {
      updateScanConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateScanConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateScanConfigInitialRpcTimeout set to "
                + this.clientProperties.getUpdateScanConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateScanConfigRpcTimeoutMultiplier() != null) {
      updateScanConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateScanConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateScanConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateScanConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateScanConfigMaxRpcTimeout() != null) {
      updateScanConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateScanConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateScanConfigMaxRpcTimeout set to "
                + this.clientProperties.getUpdateScanConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateScanConfigTotalTimeout() != null) {
      updateScanConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateScanConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateScanConfigTotalTimeout set to "
                + this.clientProperties.getUpdateScanConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateScanConfigSettings()
        .setRetrySettings(updateScanConfigRetrySettingBuilder.build());
    RetrySettings.Builder startScanRunRetrySettingBuilder =
        clientSettingsBuilder.startScanRunSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getStartScanRunInitialRpcTimeout() != null) {
      startScanRunRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getStartScanRunInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartScanRunInitialRpcTimeout set to "
                + this.clientProperties.getStartScanRunInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getStartScanRunRpcTimeoutMultiplier() != null) {
      startScanRunRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getStartScanRunRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartScanRunRpcTimeoutMultiplier set to "
                + this.clientProperties.getStartScanRunRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getStartScanRunMaxRpcTimeout() != null) {
      startScanRunRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getStartScanRunMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartScanRunMaxRpcTimeout set to "
                + this.clientProperties.getStartScanRunMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getStartScanRunTotalTimeout() != null) {
      startScanRunRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getStartScanRunTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartScanRunTotalTimeout set to "
                + this.clientProperties.getStartScanRunTotalTimeout());
      }
    }
    clientSettingsBuilder
        .startScanRunSettings()
        .setRetrySettings(startScanRunRetrySettingBuilder.build());
    RetrySettings.Builder getScanRunRetrySettingBuilder =
        clientSettingsBuilder.getScanRunSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetScanRunInitialRetryDelay() != null) {
      getScanRunRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetScanRunInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetScanRunInitialRetryDelay set to "
                + this.clientProperties.getGetScanRunInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetScanRunRetryDelayMultiplier() != null) {
      getScanRunRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetScanRunRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetScanRunRetryDelayMultiplier set to "
                + this.clientProperties.getGetScanRunRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetScanRunMaxRetryDelay() != null) {
      getScanRunRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetScanRunMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetScanRunMaxRetryDelay set to " + this.clientProperties.getGetScanRunMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetScanRunInitialRpcTimeout() != null) {
      getScanRunRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetScanRunInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetScanRunInitialRpcTimeout set to "
                + this.clientProperties.getGetScanRunInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetScanRunRpcTimeoutMultiplier() != null) {
      getScanRunRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetScanRunRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetScanRunRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetScanRunRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetScanRunMaxRpcTimeout() != null) {
      getScanRunRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetScanRunMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetScanRunMaxRpcTimeout set to " + this.clientProperties.getGetScanRunMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetScanRunTotalTimeout() != null) {
      getScanRunRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetScanRunTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetScanRunTotalTimeout set to " + this.clientProperties.getGetScanRunTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getScanRunSettings()
        .setRetrySettings(getScanRunRetrySettingBuilder.build());
    RetrySettings.Builder listScanRunsRetrySettingBuilder =
        clientSettingsBuilder.listScanRunsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListScanRunsInitialRetryDelay() != null) {
      listScanRunsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListScanRunsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListScanRunsInitialRetryDelay set to "
                + this.clientProperties.getListScanRunsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListScanRunsRetryDelayMultiplier() != null) {
      listScanRunsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListScanRunsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListScanRunsRetryDelayMultiplier set to "
                + this.clientProperties.getListScanRunsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListScanRunsMaxRetryDelay() != null) {
      listScanRunsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListScanRunsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListScanRunsMaxRetryDelay set to "
                + this.clientProperties.getListScanRunsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListScanRunsInitialRpcTimeout() != null) {
      listScanRunsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListScanRunsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListScanRunsInitialRpcTimeout set to "
                + this.clientProperties.getListScanRunsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListScanRunsRpcTimeoutMultiplier() != null) {
      listScanRunsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListScanRunsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListScanRunsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListScanRunsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListScanRunsMaxRpcTimeout() != null) {
      listScanRunsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListScanRunsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListScanRunsMaxRpcTimeout set to "
                + this.clientProperties.getListScanRunsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListScanRunsTotalTimeout() != null) {
      listScanRunsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListScanRunsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListScanRunsTotalTimeout set to "
                + this.clientProperties.getListScanRunsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listScanRunsSettings()
        .setRetrySettings(listScanRunsRetrySettingBuilder.build());
    RetrySettings.Builder stopScanRunRetrySettingBuilder =
        clientSettingsBuilder.stopScanRunSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getStopScanRunInitialRpcTimeout() != null) {
      stopScanRunRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getStopScanRunInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopScanRunInitialRpcTimeout set to "
                + this.clientProperties.getStopScanRunInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getStopScanRunRpcTimeoutMultiplier() != null) {
      stopScanRunRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getStopScanRunRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopScanRunRpcTimeoutMultiplier set to "
                + this.clientProperties.getStopScanRunRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getStopScanRunMaxRpcTimeout() != null) {
      stopScanRunRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getStopScanRunMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopScanRunMaxRpcTimeout set to "
                + this.clientProperties.getStopScanRunMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getStopScanRunTotalTimeout() != null) {
      stopScanRunRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getStopScanRunTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopScanRunTotalTimeout set to " + this.clientProperties.getStopScanRunTotalTimeout());
      }
    }
    clientSettingsBuilder
        .stopScanRunSettings()
        .setRetrySettings(stopScanRunRetrySettingBuilder.build());
    RetrySettings.Builder listCrawledUrlsRetrySettingBuilder =
        clientSettingsBuilder.listCrawledUrlsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListCrawledUrlsInitialRetryDelay() != null) {
      listCrawledUrlsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListCrawledUrlsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCrawledUrlsInitialRetryDelay set to "
                + this.clientProperties.getListCrawledUrlsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListCrawledUrlsRetryDelayMultiplier() != null) {
      listCrawledUrlsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListCrawledUrlsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCrawledUrlsRetryDelayMultiplier set to "
                + this.clientProperties.getListCrawledUrlsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListCrawledUrlsMaxRetryDelay() != null) {
      listCrawledUrlsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListCrawledUrlsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCrawledUrlsMaxRetryDelay set to "
                + this.clientProperties.getListCrawledUrlsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListCrawledUrlsInitialRpcTimeout() != null) {
      listCrawledUrlsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListCrawledUrlsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCrawledUrlsInitialRpcTimeout set to "
                + this.clientProperties.getListCrawledUrlsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListCrawledUrlsRpcTimeoutMultiplier() != null) {
      listCrawledUrlsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListCrawledUrlsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCrawledUrlsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListCrawledUrlsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListCrawledUrlsMaxRpcTimeout() != null) {
      listCrawledUrlsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListCrawledUrlsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCrawledUrlsMaxRpcTimeout set to "
                + this.clientProperties.getListCrawledUrlsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListCrawledUrlsTotalTimeout() != null) {
      listCrawledUrlsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListCrawledUrlsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCrawledUrlsTotalTimeout set to "
                + this.clientProperties.getListCrawledUrlsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listCrawledUrlsSettings()
        .setRetrySettings(listCrawledUrlsRetrySettingBuilder.build());
    RetrySettings.Builder getFindingRetrySettingBuilder =
        clientSettingsBuilder.getFindingSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetFindingInitialRetryDelay() != null) {
      getFindingRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetFindingInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetFindingInitialRetryDelay set to "
                + this.clientProperties.getGetFindingInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetFindingRetryDelayMultiplier() != null) {
      getFindingRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetFindingRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetFindingRetryDelayMultiplier set to "
                + this.clientProperties.getGetFindingRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetFindingMaxRetryDelay() != null) {
      getFindingRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetFindingMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetFindingMaxRetryDelay set to " + this.clientProperties.getGetFindingMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetFindingInitialRpcTimeout() != null) {
      getFindingRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetFindingInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetFindingInitialRpcTimeout set to "
                + this.clientProperties.getGetFindingInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetFindingRpcTimeoutMultiplier() != null) {
      getFindingRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetFindingRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetFindingRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetFindingRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetFindingMaxRpcTimeout() != null) {
      getFindingRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetFindingMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetFindingMaxRpcTimeout set to " + this.clientProperties.getGetFindingMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetFindingTotalTimeout() != null) {
      getFindingRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetFindingTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetFindingTotalTimeout set to " + this.clientProperties.getGetFindingTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getFindingSettings()
        .setRetrySettings(getFindingRetrySettingBuilder.build());
    RetrySettings.Builder listFindingsRetrySettingBuilder =
        clientSettingsBuilder.listFindingsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListFindingsInitialRetryDelay() != null) {
      listFindingsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListFindingsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingsInitialRetryDelay set to "
                + this.clientProperties.getListFindingsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListFindingsRetryDelayMultiplier() != null) {
      listFindingsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListFindingsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingsRetryDelayMultiplier set to "
                + this.clientProperties.getListFindingsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListFindingsMaxRetryDelay() != null) {
      listFindingsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListFindingsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingsMaxRetryDelay set to "
                + this.clientProperties.getListFindingsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListFindingsInitialRpcTimeout() != null) {
      listFindingsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListFindingsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingsInitialRpcTimeout set to "
                + this.clientProperties.getListFindingsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListFindingsRpcTimeoutMultiplier() != null) {
      listFindingsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListFindingsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListFindingsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListFindingsMaxRpcTimeout() != null) {
      listFindingsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListFindingsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingsMaxRpcTimeout set to "
                + this.clientProperties.getListFindingsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListFindingsTotalTimeout() != null) {
      listFindingsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListFindingsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingsTotalTimeout set to "
                + this.clientProperties.getListFindingsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listFindingsSettings()
        .setRetrySettings(listFindingsRetrySettingBuilder.build());
    RetrySettings.Builder listFindingTypeStatsRetrySettingBuilder =
        clientSettingsBuilder.listFindingTypeStatsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListFindingTypeStatsInitialRetryDelay() != null) {
      listFindingTypeStatsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListFindingTypeStatsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingTypeStatsInitialRetryDelay set to "
                + this.clientProperties.getListFindingTypeStatsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListFindingTypeStatsRetryDelayMultiplier() != null) {
      listFindingTypeStatsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListFindingTypeStatsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingTypeStatsRetryDelayMultiplier set to "
                + this.clientProperties.getListFindingTypeStatsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListFindingTypeStatsMaxRetryDelay() != null) {
      listFindingTypeStatsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListFindingTypeStatsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingTypeStatsMaxRetryDelay set to "
                + this.clientProperties.getListFindingTypeStatsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListFindingTypeStatsInitialRpcTimeout() != null) {
      listFindingTypeStatsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListFindingTypeStatsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingTypeStatsInitialRpcTimeout set to "
                + this.clientProperties.getListFindingTypeStatsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListFindingTypeStatsRpcTimeoutMultiplier() != null) {
      listFindingTypeStatsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListFindingTypeStatsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingTypeStatsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListFindingTypeStatsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListFindingTypeStatsMaxRpcTimeout() != null) {
      listFindingTypeStatsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListFindingTypeStatsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingTypeStatsMaxRpcTimeout set to "
                + this.clientProperties.getListFindingTypeStatsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListFindingTypeStatsTotalTimeout() != null) {
      listFindingTypeStatsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListFindingTypeStatsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingTypeStatsTotalTimeout set to "
                + this.clientProperties.getListFindingTypeStatsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listFindingTypeStatsSettings()
        .setRetrySettings(listFindingTypeStatsRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public WebSecurityScannerClient webSecurityScannerClient(
      WebSecurityScannerSettings webSecurityScannerSettings) throws IOException {
    return WebSecurityScannerClient.create(webSecurityScannerSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-web-security-scanner";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
