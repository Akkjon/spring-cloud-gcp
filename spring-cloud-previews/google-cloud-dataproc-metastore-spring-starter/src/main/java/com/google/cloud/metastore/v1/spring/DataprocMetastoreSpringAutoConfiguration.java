/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.metastore.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.metastore.v1.DataprocMetastoreClient;
import com.google.cloud.metastore.v1.DataprocMetastoreSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link DataprocMetastoreClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(DataprocMetastoreClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.metastore.v1.spring.auto.dataproc-metastore.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({DataprocMetastoreSpringProperties.class, GlobalProperties.class})
public class DataprocMetastoreSpringAutoConfiguration {
  private final DataprocMetastoreSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(DataprocMetastoreSpringAutoConfiguration.class);

  protected DataprocMetastoreSpringAutoConfiguration(
      DataprocMetastoreSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider dataprocMetastoreCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from DataprocMetastore-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultDataprocMetastoreTransportChannelProvider() {
    return DataprocMetastoreSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a DataprocMetastoreClient bean configured to use the default credentials provider
   * (obtained with dataprocMetastoreCredentials()) and its default transport channel provider
   * (defaultDataprocMetastoreTransportChannelProvider()). It also configures the quota project ID
   * if provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in DataprocMetastoreSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public DataprocMetastoreSettings dataprocMetastoreSettings(
      @Qualifier("dataprocMetastoreCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultDataprocMetastoreTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    DataprocMetastoreSettings.Builder clientSettingsBuilder =
        DataprocMetastoreSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          DataprocMetastoreSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          DataprocMetastoreSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listServicesRetrySettingBuilder =
        clientSettingsBuilder.listServicesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListServicesInitialRetryDelay() != null) {
      listServicesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListServicesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesInitialRetryDelay set to "
                + this.clientProperties.getListServicesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListServicesRetryDelayMultiplier() != null) {
      listServicesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListServicesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesRetryDelayMultiplier set to "
                + this.clientProperties.getListServicesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListServicesMaxRetryDelay() != null) {
      listServicesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListServicesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesMaxRetryDelay set to "
                + this.clientProperties.getListServicesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListServicesInitialRpcTimeout() != null) {
      listServicesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListServicesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesInitialRpcTimeout set to "
                + this.clientProperties.getListServicesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListServicesRpcTimeoutMultiplier() != null) {
      listServicesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListServicesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListServicesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListServicesMaxRpcTimeout() != null) {
      listServicesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListServicesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesMaxRpcTimeout set to "
                + this.clientProperties.getListServicesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListServicesTotalTimeout() != null) {
      listServicesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListServicesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesTotalTimeout set to "
                + this.clientProperties.getListServicesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listServicesSettings()
        .setRetrySettings(listServicesRetrySettingBuilder.build());
    RetrySettings.Builder getServiceRetrySettingBuilder =
        clientSettingsBuilder.getServiceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetServiceInitialRetryDelay() != null) {
      getServiceRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetServiceInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceInitialRetryDelay set to "
                + this.clientProperties.getGetServiceInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetServiceRetryDelayMultiplier() != null) {
      getServiceRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetServiceRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceRetryDelayMultiplier set to "
                + this.clientProperties.getGetServiceRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetServiceMaxRetryDelay() != null) {
      getServiceRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetServiceMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceMaxRetryDelay set to " + this.clientProperties.getGetServiceMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetServiceInitialRpcTimeout() != null) {
      getServiceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetServiceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceInitialRpcTimeout set to "
                + this.clientProperties.getGetServiceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetServiceRpcTimeoutMultiplier() != null) {
      getServiceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetServiceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetServiceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetServiceMaxRpcTimeout() != null) {
      getServiceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetServiceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceMaxRpcTimeout set to " + this.clientProperties.getGetServiceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetServiceTotalTimeout() != null) {
      getServiceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetServiceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceTotalTimeout set to " + this.clientProperties.getGetServiceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getServiceSettings()
        .setRetrySettings(getServiceRetrySettingBuilder.build());
    RetrySettings.Builder createServiceRetrySettingBuilder =
        clientSettingsBuilder.createServiceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateServiceInitialRpcTimeout() != null) {
      createServiceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateServiceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceInitialRpcTimeout set to "
                + this.clientProperties.getCreateServiceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateServiceRpcTimeoutMultiplier() != null) {
      createServiceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateServiceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateServiceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateServiceMaxRpcTimeout() != null) {
      createServiceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateServiceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceMaxRpcTimeout set to "
                + this.clientProperties.getCreateServiceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateServiceTotalTimeout() != null) {
      createServiceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateServiceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceTotalTimeout set to "
                + this.clientProperties.getCreateServiceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createServiceSettings()
        .setRetrySettings(createServiceRetrySettingBuilder.build());
    RetrySettings.Builder updateServiceRetrySettingBuilder =
        clientSettingsBuilder.updateServiceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateServiceInitialRpcTimeout() != null) {
      updateServiceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateServiceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServiceInitialRpcTimeout set to "
                + this.clientProperties.getUpdateServiceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateServiceRpcTimeoutMultiplier() != null) {
      updateServiceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateServiceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServiceRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateServiceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateServiceMaxRpcTimeout() != null) {
      updateServiceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateServiceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServiceMaxRpcTimeout set to "
                + this.clientProperties.getUpdateServiceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateServiceTotalTimeout() != null) {
      updateServiceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateServiceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServiceTotalTimeout set to "
                + this.clientProperties.getUpdateServiceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateServiceSettings()
        .setRetrySettings(updateServiceRetrySettingBuilder.build());
    RetrySettings.Builder deleteServiceRetrySettingBuilder =
        clientSettingsBuilder.deleteServiceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteServiceInitialRpcTimeout() != null) {
      deleteServiceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteServiceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceInitialRpcTimeout set to "
                + this.clientProperties.getDeleteServiceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteServiceRpcTimeoutMultiplier() != null) {
      deleteServiceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteServiceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteServiceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteServiceMaxRpcTimeout() != null) {
      deleteServiceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteServiceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceMaxRpcTimeout set to "
                + this.clientProperties.getDeleteServiceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteServiceTotalTimeout() != null) {
      deleteServiceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteServiceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceTotalTimeout set to "
                + this.clientProperties.getDeleteServiceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteServiceSettings()
        .setRetrySettings(deleteServiceRetrySettingBuilder.build());
    RetrySettings.Builder listMetadataImportsRetrySettingBuilder =
        clientSettingsBuilder.listMetadataImportsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListMetadataImportsInitialRetryDelay() != null) {
      listMetadataImportsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListMetadataImportsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMetadataImportsInitialRetryDelay set to "
                + this.clientProperties.getListMetadataImportsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListMetadataImportsRetryDelayMultiplier() != null) {
      listMetadataImportsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListMetadataImportsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMetadataImportsRetryDelayMultiplier set to "
                + this.clientProperties.getListMetadataImportsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListMetadataImportsMaxRetryDelay() != null) {
      listMetadataImportsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListMetadataImportsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMetadataImportsMaxRetryDelay set to "
                + this.clientProperties.getListMetadataImportsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListMetadataImportsInitialRpcTimeout() != null) {
      listMetadataImportsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListMetadataImportsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMetadataImportsInitialRpcTimeout set to "
                + this.clientProperties.getListMetadataImportsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListMetadataImportsRpcTimeoutMultiplier() != null) {
      listMetadataImportsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListMetadataImportsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMetadataImportsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListMetadataImportsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListMetadataImportsMaxRpcTimeout() != null) {
      listMetadataImportsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListMetadataImportsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMetadataImportsMaxRpcTimeout set to "
                + this.clientProperties.getListMetadataImportsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListMetadataImportsTotalTimeout() != null) {
      listMetadataImportsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListMetadataImportsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMetadataImportsTotalTimeout set to "
                + this.clientProperties.getListMetadataImportsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listMetadataImportsSettings()
        .setRetrySettings(listMetadataImportsRetrySettingBuilder.build());
    RetrySettings.Builder getMetadataImportRetrySettingBuilder =
        clientSettingsBuilder.getMetadataImportSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetMetadataImportInitialRetryDelay() != null) {
      getMetadataImportRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetMetadataImportInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMetadataImportInitialRetryDelay set to "
                + this.clientProperties.getGetMetadataImportInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetMetadataImportRetryDelayMultiplier() != null) {
      getMetadataImportRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetMetadataImportRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMetadataImportRetryDelayMultiplier set to "
                + this.clientProperties.getGetMetadataImportRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetMetadataImportMaxRetryDelay() != null) {
      getMetadataImportRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetMetadataImportMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMetadataImportMaxRetryDelay set to "
                + this.clientProperties.getGetMetadataImportMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetMetadataImportInitialRpcTimeout() != null) {
      getMetadataImportRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetMetadataImportInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMetadataImportInitialRpcTimeout set to "
                + this.clientProperties.getGetMetadataImportInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetMetadataImportRpcTimeoutMultiplier() != null) {
      getMetadataImportRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetMetadataImportRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMetadataImportRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetMetadataImportRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetMetadataImportMaxRpcTimeout() != null) {
      getMetadataImportRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetMetadataImportMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMetadataImportMaxRpcTimeout set to "
                + this.clientProperties.getGetMetadataImportMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetMetadataImportTotalTimeout() != null) {
      getMetadataImportRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetMetadataImportTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMetadataImportTotalTimeout set to "
                + this.clientProperties.getGetMetadataImportTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getMetadataImportSettings()
        .setRetrySettings(getMetadataImportRetrySettingBuilder.build());
    RetrySettings.Builder createMetadataImportRetrySettingBuilder =
        clientSettingsBuilder.createMetadataImportSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateMetadataImportInitialRpcTimeout() != null) {
      createMetadataImportRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateMetadataImportInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateMetadataImportInitialRpcTimeout set to "
                + this.clientProperties.getCreateMetadataImportInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateMetadataImportRpcTimeoutMultiplier() != null) {
      createMetadataImportRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateMetadataImportRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateMetadataImportRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateMetadataImportRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateMetadataImportMaxRpcTimeout() != null) {
      createMetadataImportRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateMetadataImportMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateMetadataImportMaxRpcTimeout set to "
                + this.clientProperties.getCreateMetadataImportMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateMetadataImportTotalTimeout() != null) {
      createMetadataImportRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateMetadataImportTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateMetadataImportTotalTimeout set to "
                + this.clientProperties.getCreateMetadataImportTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createMetadataImportSettings()
        .setRetrySettings(createMetadataImportRetrySettingBuilder.build());
    RetrySettings.Builder updateMetadataImportRetrySettingBuilder =
        clientSettingsBuilder.updateMetadataImportSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateMetadataImportInitialRpcTimeout() != null) {
      updateMetadataImportRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateMetadataImportInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateMetadataImportInitialRpcTimeout set to "
                + this.clientProperties.getUpdateMetadataImportInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateMetadataImportRpcTimeoutMultiplier() != null) {
      updateMetadataImportRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateMetadataImportRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateMetadataImportRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateMetadataImportRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateMetadataImportMaxRpcTimeout() != null) {
      updateMetadataImportRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateMetadataImportMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateMetadataImportMaxRpcTimeout set to "
                + this.clientProperties.getUpdateMetadataImportMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateMetadataImportTotalTimeout() != null) {
      updateMetadataImportRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateMetadataImportTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateMetadataImportTotalTimeout set to "
                + this.clientProperties.getUpdateMetadataImportTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateMetadataImportSettings()
        .setRetrySettings(updateMetadataImportRetrySettingBuilder.build());
    RetrySettings.Builder exportMetadataRetrySettingBuilder =
        clientSettingsBuilder.exportMetadataSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getExportMetadataInitialRpcTimeout() != null) {
      exportMetadataRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getExportMetadataInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportMetadataInitialRpcTimeout set to "
                + this.clientProperties.getExportMetadataInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getExportMetadataRpcTimeoutMultiplier() != null) {
      exportMetadataRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getExportMetadataRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportMetadataRpcTimeoutMultiplier set to "
                + this.clientProperties.getExportMetadataRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getExportMetadataMaxRpcTimeout() != null) {
      exportMetadataRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getExportMetadataMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportMetadataMaxRpcTimeout set to "
                + this.clientProperties.getExportMetadataMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getExportMetadataTotalTimeout() != null) {
      exportMetadataRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getExportMetadataTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportMetadataTotalTimeout set to "
                + this.clientProperties.getExportMetadataTotalTimeout());
      }
    }
    clientSettingsBuilder
        .exportMetadataSettings()
        .setRetrySettings(exportMetadataRetrySettingBuilder.build());
    RetrySettings.Builder restoreServiceRetrySettingBuilder =
        clientSettingsBuilder.restoreServiceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRestoreServiceInitialRpcTimeout() != null) {
      restoreServiceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRestoreServiceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RestoreServiceInitialRpcTimeout set to "
                + this.clientProperties.getRestoreServiceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRestoreServiceRpcTimeoutMultiplier() != null) {
      restoreServiceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRestoreServiceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RestoreServiceRpcTimeoutMultiplier set to "
                + this.clientProperties.getRestoreServiceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRestoreServiceMaxRpcTimeout() != null) {
      restoreServiceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRestoreServiceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RestoreServiceMaxRpcTimeout set to "
                + this.clientProperties.getRestoreServiceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRestoreServiceTotalTimeout() != null) {
      restoreServiceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRestoreServiceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RestoreServiceTotalTimeout set to "
                + this.clientProperties.getRestoreServiceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .restoreServiceSettings()
        .setRetrySettings(restoreServiceRetrySettingBuilder.build());
    RetrySettings.Builder listBackupsRetrySettingBuilder =
        clientSettingsBuilder.listBackupsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListBackupsInitialRetryDelay() != null) {
      listBackupsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListBackupsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBackupsInitialRetryDelay set to "
                + this.clientProperties.getListBackupsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListBackupsRetryDelayMultiplier() != null) {
      listBackupsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListBackupsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBackupsRetryDelayMultiplier set to "
                + this.clientProperties.getListBackupsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListBackupsMaxRetryDelay() != null) {
      listBackupsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListBackupsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBackupsMaxRetryDelay set to "
                + this.clientProperties.getListBackupsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListBackupsInitialRpcTimeout() != null) {
      listBackupsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListBackupsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBackupsInitialRpcTimeout set to "
                + this.clientProperties.getListBackupsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListBackupsRpcTimeoutMultiplier() != null) {
      listBackupsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListBackupsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBackupsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListBackupsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListBackupsMaxRpcTimeout() != null) {
      listBackupsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListBackupsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBackupsMaxRpcTimeout set to "
                + this.clientProperties.getListBackupsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListBackupsTotalTimeout() != null) {
      listBackupsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListBackupsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBackupsTotalTimeout set to " + this.clientProperties.getListBackupsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listBackupsSettings()
        .setRetrySettings(listBackupsRetrySettingBuilder.build());
    RetrySettings.Builder getBackupRetrySettingBuilder =
        clientSettingsBuilder.getBackupSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetBackupInitialRetryDelay() != null) {
      getBackupRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetBackupInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBackupInitialRetryDelay set to "
                + this.clientProperties.getGetBackupInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetBackupRetryDelayMultiplier() != null) {
      getBackupRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetBackupRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBackupRetryDelayMultiplier set to "
                + this.clientProperties.getGetBackupRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetBackupMaxRetryDelay() != null) {
      getBackupRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetBackupMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBackupMaxRetryDelay set to " + this.clientProperties.getGetBackupMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetBackupInitialRpcTimeout() != null) {
      getBackupRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetBackupInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBackupInitialRpcTimeout set to "
                + this.clientProperties.getGetBackupInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetBackupRpcTimeoutMultiplier() != null) {
      getBackupRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetBackupRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBackupRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetBackupRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetBackupMaxRpcTimeout() != null) {
      getBackupRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetBackupMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBackupMaxRpcTimeout set to " + this.clientProperties.getGetBackupMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetBackupTotalTimeout() != null) {
      getBackupRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetBackupTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBackupTotalTimeout set to " + this.clientProperties.getGetBackupTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getBackupSettings()
        .setRetrySettings(getBackupRetrySettingBuilder.build());
    RetrySettings.Builder createBackupRetrySettingBuilder =
        clientSettingsBuilder.createBackupSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateBackupInitialRpcTimeout() != null) {
      createBackupRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateBackupInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateBackupInitialRpcTimeout set to "
                + this.clientProperties.getCreateBackupInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateBackupRpcTimeoutMultiplier() != null) {
      createBackupRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateBackupRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateBackupRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateBackupRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateBackupMaxRpcTimeout() != null) {
      createBackupRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateBackupMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateBackupMaxRpcTimeout set to "
                + this.clientProperties.getCreateBackupMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateBackupTotalTimeout() != null) {
      createBackupRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateBackupTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateBackupTotalTimeout set to "
                + this.clientProperties.getCreateBackupTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createBackupSettings()
        .setRetrySettings(createBackupRetrySettingBuilder.build());
    RetrySettings.Builder deleteBackupRetrySettingBuilder =
        clientSettingsBuilder.deleteBackupSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteBackupInitialRpcTimeout() != null) {
      deleteBackupRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteBackupInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteBackupInitialRpcTimeout set to "
                + this.clientProperties.getDeleteBackupInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteBackupRpcTimeoutMultiplier() != null) {
      deleteBackupRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteBackupRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteBackupRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteBackupRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteBackupMaxRpcTimeout() != null) {
      deleteBackupRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteBackupMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteBackupMaxRpcTimeout set to "
                + this.clientProperties.getDeleteBackupMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteBackupTotalTimeout() != null) {
      deleteBackupRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteBackupTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteBackupTotalTimeout set to "
                + this.clientProperties.getDeleteBackupTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteBackupSettings()
        .setRetrySettings(deleteBackupRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public DataprocMetastoreClient dataprocMetastoreClient(
      DataprocMetastoreSettings dataprocMetastoreSettings) throws IOException {
    return DataprocMetastoreClient.create(dataprocMetastoreSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-dataproc-metastore";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
