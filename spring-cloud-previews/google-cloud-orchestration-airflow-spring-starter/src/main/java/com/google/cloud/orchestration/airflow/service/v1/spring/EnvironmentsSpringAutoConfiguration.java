/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.orchestration.airflow.service.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.orchestration.airflow.service.v1.EnvironmentsClient;
import com.google.cloud.orchestration.airflow.service.v1.EnvironmentsSettings;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link EnvironmentsClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(EnvironmentsClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.orchestration.airflow.service.v1.spring.auto.environments.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(EnvironmentsSpringProperties.class)
public class EnvironmentsSpringAutoConfiguration {
  private final EnvironmentsSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER = LogFactory.getLog(EnvironmentsSpringAutoConfiguration.class);

  protected EnvironmentsSpringAutoConfiguration(
      EnvironmentsSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Environments-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultEnvironmentsTransportChannelProvider() {
    return EnvironmentsSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a EnvironmentsClient bean configured to use the default credentials provider (obtained
   * with environmentsCredentials()) and its default transport channel provider
   * (defaultEnvironmentsTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in EnvironmentsSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   */
  @Bean
  @ConditionalOnMissingBean
  public EnvironmentsSettings environmentsSettings(
      @Qualifier("defaultEnvironmentsTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    EnvironmentsSettings.Builder clientSettingsBuilder =
        EnvironmentsSettings.newBuilder()
            .setCredentialsProvider(this.credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          EnvironmentsSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          EnvironmentsSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings createEnvironmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createEnvironmentSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createEnvironmentSettings()
          .setRetrySettings(createEnvironmentRetrySettings);

      RetrySettings getEnvironmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getEnvironmentSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getEnvironmentSettings().setRetrySettings(getEnvironmentRetrySettings);

      RetrySettings listEnvironmentsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listEnvironmentsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listEnvironmentsSettings()
          .setRetrySettings(listEnvironmentsRetrySettings);

      RetrySettings updateEnvironmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateEnvironmentSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateEnvironmentSettings()
          .setRetrySettings(updateEnvironmentRetrySettings);

      RetrySettings deleteEnvironmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteEnvironmentSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteEnvironmentSettings()
          .setRetrySettings(deleteEnvironmentRetrySettings);

      RetrySettings saveSnapshotRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.saveSnapshotSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.saveSnapshotSettings().setRetrySettings(saveSnapshotRetrySettings);

      RetrySettings loadSnapshotRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.loadSnapshotSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.loadSnapshotSettings().setRetrySettings(loadSnapshotRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry createEnvironmentRetry = clientProperties.getCreateEnvironmentRetry();
    if (createEnvironmentRetry != null) {
      RetrySettings createEnvironmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createEnvironmentSettings().getRetrySettings(),
              createEnvironmentRetry);
      clientSettingsBuilder
          .createEnvironmentSettings()
          .setRetrySettings(createEnvironmentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createEnvironment from properties.");
      }
    }
    Retry getEnvironmentRetry = clientProperties.getGetEnvironmentRetry();
    if (getEnvironmentRetry != null) {
      RetrySettings getEnvironmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getEnvironmentSettings().getRetrySettings(),
              getEnvironmentRetry);
      clientSettingsBuilder.getEnvironmentSettings().setRetrySettings(getEnvironmentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getEnvironment from properties.");
      }
    }
    Retry listEnvironmentsRetry = clientProperties.getListEnvironmentsRetry();
    if (listEnvironmentsRetry != null) {
      RetrySettings listEnvironmentsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listEnvironmentsSettings().getRetrySettings(),
              listEnvironmentsRetry);
      clientSettingsBuilder
          .listEnvironmentsSettings()
          .setRetrySettings(listEnvironmentsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listEnvironments from properties.");
      }
    }
    Retry updateEnvironmentRetry = clientProperties.getUpdateEnvironmentRetry();
    if (updateEnvironmentRetry != null) {
      RetrySettings updateEnvironmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateEnvironmentSettings().getRetrySettings(),
              updateEnvironmentRetry);
      clientSettingsBuilder
          .updateEnvironmentSettings()
          .setRetrySettings(updateEnvironmentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateEnvironment from properties.");
      }
    }
    Retry deleteEnvironmentRetry = clientProperties.getDeleteEnvironmentRetry();
    if (deleteEnvironmentRetry != null) {
      RetrySettings deleteEnvironmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteEnvironmentSettings().getRetrySettings(),
              deleteEnvironmentRetry);
      clientSettingsBuilder
          .deleteEnvironmentSettings()
          .setRetrySettings(deleteEnvironmentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteEnvironment from properties.");
      }
    }
    Retry saveSnapshotRetry = clientProperties.getSaveSnapshotRetry();
    if (saveSnapshotRetry != null) {
      RetrySettings saveSnapshotRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.saveSnapshotSettings().getRetrySettings(), saveSnapshotRetry);
      clientSettingsBuilder.saveSnapshotSettings().setRetrySettings(saveSnapshotRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for saveSnapshot from properties.");
      }
    }
    Retry loadSnapshotRetry = clientProperties.getLoadSnapshotRetry();
    if (loadSnapshotRetry != null) {
      RetrySettings loadSnapshotRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.loadSnapshotSettings().getRetrySettings(), loadSnapshotRetry);
      clientSettingsBuilder.loadSnapshotSettings().setRetrySettings(loadSnapshotRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for loadSnapshot from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public EnvironmentsClient environmentsClient(EnvironmentsSettings environmentsSettings)
      throws IOException {
    return EnvironmentsClient.create(environmentsSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-environments";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
