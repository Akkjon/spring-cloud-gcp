/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.documentai.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.documentai.v1.DocumentProcessorServiceClient;
import com.google.cloud.documentai.v1.DocumentProcessorServiceSettings;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link DocumentProcessorServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(DocumentProcessorServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.documentai.v1.spring.auto.document-processor-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(DocumentProcessorServiceSpringProperties.class)
public class DocumentProcessorServiceSpringAutoConfiguration {
  private final DocumentProcessorServiceSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER =
      LogFactory.getLog(DocumentProcessorServiceSpringAutoConfiguration.class);

  protected DocumentProcessorServiceSpringAutoConfiguration(
      DocumentProcessorServiceSpringProperties clientProperties,
      CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from DocumentProcessorService-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultDocumentProcessorServiceTransportChannelProvider() {
    return DocumentProcessorServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a DocumentProcessorServiceClient bean configured to use the default credentials
   * provider (obtained with documentProcessorServiceCredentials()) and its default transport
   * channel provider (defaultDocumentProcessorServiceTransportChannelProvider()). It also
   * configures the quota project ID if provided. It will configure an executor provider in case
   * there is more than one thread configured in the client
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in DocumentProcessorServiceSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   */
  @Bean
  @ConditionalOnMissingBean
  public DocumentProcessorServiceSettings documentProcessorServiceSettings(
      @Qualifier("defaultDocumentProcessorServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    DocumentProcessorServiceSettings.Builder clientSettingsBuilder =
        DocumentProcessorServiceSettings.newBuilder()
            .setCredentialsProvider(this.credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          DocumentProcessorServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          DocumentProcessorServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings processDocumentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.processDocumentSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .processDocumentSettings()
          .setRetrySettings(processDocumentRetrySettings);

      RetrySettings batchProcessDocumentsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.batchProcessDocumentsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .batchProcessDocumentsSettings()
          .setRetrySettings(batchProcessDocumentsRetrySettings);

      RetrySettings fetchProcessorTypesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchProcessorTypesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .fetchProcessorTypesSettings()
          .setRetrySettings(fetchProcessorTypesRetrySettings);

      RetrySettings listProcessorTypesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listProcessorTypesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listProcessorTypesSettings()
          .setRetrySettings(listProcessorTypesRetrySettings);

      RetrySettings listProcessorsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listProcessorsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listProcessorsSettings().setRetrySettings(listProcessorsRetrySettings);

      RetrySettings getProcessorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getProcessorSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getProcessorSettings().setRetrySettings(getProcessorRetrySettings);

      RetrySettings getProcessorVersionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getProcessorVersionSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getProcessorVersionSettings()
          .setRetrySettings(getProcessorVersionRetrySettings);

      RetrySettings listProcessorVersionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listProcessorVersionsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listProcessorVersionsSettings()
          .setRetrySettings(listProcessorVersionsRetrySettings);

      RetrySettings deleteProcessorVersionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteProcessorVersionSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteProcessorVersionSettings()
          .setRetrySettings(deleteProcessorVersionRetrySettings);

      RetrySettings deployProcessorVersionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deployProcessorVersionSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deployProcessorVersionSettings()
          .setRetrySettings(deployProcessorVersionRetrySettings);

      RetrySettings undeployProcessorVersionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.undeployProcessorVersionSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .undeployProcessorVersionSettings()
          .setRetrySettings(undeployProcessorVersionRetrySettings);

      RetrySettings createProcessorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createProcessorSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createProcessorSettings()
          .setRetrySettings(createProcessorRetrySettings);

      RetrySettings deleteProcessorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteProcessorSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteProcessorSettings()
          .setRetrySettings(deleteProcessorRetrySettings);

      RetrySettings enableProcessorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.enableProcessorSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .enableProcessorSettings()
          .setRetrySettings(enableProcessorRetrySettings);

      RetrySettings disableProcessorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.disableProcessorSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .disableProcessorSettings()
          .setRetrySettings(disableProcessorRetrySettings);

      RetrySettings setDefaultProcessorVersionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setDefaultProcessorVersionSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .setDefaultProcessorVersionSettings()
          .setRetrySettings(setDefaultProcessorVersionRetrySettings);

      RetrySettings reviewDocumentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.reviewDocumentSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.reviewDocumentSettings().setRetrySettings(reviewDocumentRetrySettings);

      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);

      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry processDocumentRetry = clientProperties.getProcessDocumentRetry();
    if (processDocumentRetry != null) {
      RetrySettings processDocumentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.processDocumentSettings().getRetrySettings(),
              processDocumentRetry);
      clientSettingsBuilder
          .processDocumentSettings()
          .setRetrySettings(processDocumentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for processDocument from properties.");
      }
    }
    Retry batchProcessDocumentsRetry = clientProperties.getBatchProcessDocumentsRetry();
    if (batchProcessDocumentsRetry != null) {
      RetrySettings batchProcessDocumentsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.batchProcessDocumentsSettings().getRetrySettings(),
              batchProcessDocumentsRetry);
      clientSettingsBuilder
          .batchProcessDocumentsSettings()
          .setRetrySettings(batchProcessDocumentsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for batchProcessDocuments from properties.");
      }
    }
    Retry fetchProcessorTypesRetry = clientProperties.getFetchProcessorTypesRetry();
    if (fetchProcessorTypesRetry != null) {
      RetrySettings fetchProcessorTypesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchProcessorTypesSettings().getRetrySettings(),
              fetchProcessorTypesRetry);
      clientSettingsBuilder
          .fetchProcessorTypesSettings()
          .setRetrySettings(fetchProcessorTypesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for fetchProcessorTypes from properties.");
      }
    }
    Retry listProcessorTypesRetry = clientProperties.getListProcessorTypesRetry();
    if (listProcessorTypesRetry != null) {
      RetrySettings listProcessorTypesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listProcessorTypesSettings().getRetrySettings(),
              listProcessorTypesRetry);
      clientSettingsBuilder
          .listProcessorTypesSettings()
          .setRetrySettings(listProcessorTypesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listProcessorTypes from properties.");
      }
    }
    Retry listProcessorsRetry = clientProperties.getListProcessorsRetry();
    if (listProcessorsRetry != null) {
      RetrySettings listProcessorsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listProcessorsSettings().getRetrySettings(),
              listProcessorsRetry);
      clientSettingsBuilder.listProcessorsSettings().setRetrySettings(listProcessorsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listProcessors from properties.");
      }
    }
    Retry getProcessorRetry = clientProperties.getGetProcessorRetry();
    if (getProcessorRetry != null) {
      RetrySettings getProcessorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getProcessorSettings().getRetrySettings(), getProcessorRetry);
      clientSettingsBuilder.getProcessorSettings().setRetrySettings(getProcessorRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getProcessor from properties.");
      }
    }
    Retry getProcessorVersionRetry = clientProperties.getGetProcessorVersionRetry();
    if (getProcessorVersionRetry != null) {
      RetrySettings getProcessorVersionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getProcessorVersionSettings().getRetrySettings(),
              getProcessorVersionRetry);
      clientSettingsBuilder
          .getProcessorVersionSettings()
          .setRetrySettings(getProcessorVersionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getProcessorVersion from properties.");
      }
    }
    Retry listProcessorVersionsRetry = clientProperties.getListProcessorVersionsRetry();
    if (listProcessorVersionsRetry != null) {
      RetrySettings listProcessorVersionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listProcessorVersionsSettings().getRetrySettings(),
              listProcessorVersionsRetry);
      clientSettingsBuilder
          .listProcessorVersionsSettings()
          .setRetrySettings(listProcessorVersionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listProcessorVersions from properties.");
      }
    }
    Retry deleteProcessorVersionRetry = clientProperties.getDeleteProcessorVersionRetry();
    if (deleteProcessorVersionRetry != null) {
      RetrySettings deleteProcessorVersionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteProcessorVersionSettings().getRetrySettings(),
              deleteProcessorVersionRetry);
      clientSettingsBuilder
          .deleteProcessorVersionSettings()
          .setRetrySettings(deleteProcessorVersionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteProcessorVersion from properties.");
      }
    }
    Retry deployProcessorVersionRetry = clientProperties.getDeployProcessorVersionRetry();
    if (deployProcessorVersionRetry != null) {
      RetrySettings deployProcessorVersionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deployProcessorVersionSettings().getRetrySettings(),
              deployProcessorVersionRetry);
      clientSettingsBuilder
          .deployProcessorVersionSettings()
          .setRetrySettings(deployProcessorVersionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deployProcessorVersion from properties.");
      }
    }
    Retry undeployProcessorVersionRetry = clientProperties.getUndeployProcessorVersionRetry();
    if (undeployProcessorVersionRetry != null) {
      RetrySettings undeployProcessorVersionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.undeployProcessorVersionSettings().getRetrySettings(),
              undeployProcessorVersionRetry);
      clientSettingsBuilder
          .undeployProcessorVersionSettings()
          .setRetrySettings(undeployProcessorVersionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for undeployProcessorVersion from properties.");
      }
    }
    Retry createProcessorRetry = clientProperties.getCreateProcessorRetry();
    if (createProcessorRetry != null) {
      RetrySettings createProcessorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createProcessorSettings().getRetrySettings(),
              createProcessorRetry);
      clientSettingsBuilder
          .createProcessorSettings()
          .setRetrySettings(createProcessorRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createProcessor from properties.");
      }
    }
    Retry deleteProcessorRetry = clientProperties.getDeleteProcessorRetry();
    if (deleteProcessorRetry != null) {
      RetrySettings deleteProcessorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteProcessorSettings().getRetrySettings(),
              deleteProcessorRetry);
      clientSettingsBuilder
          .deleteProcessorSettings()
          .setRetrySettings(deleteProcessorRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteProcessor from properties.");
      }
    }
    Retry enableProcessorRetry = clientProperties.getEnableProcessorRetry();
    if (enableProcessorRetry != null) {
      RetrySettings enableProcessorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.enableProcessorSettings().getRetrySettings(),
              enableProcessorRetry);
      clientSettingsBuilder
          .enableProcessorSettings()
          .setRetrySettings(enableProcessorRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for enableProcessor from properties.");
      }
    }
    Retry disableProcessorRetry = clientProperties.getDisableProcessorRetry();
    if (disableProcessorRetry != null) {
      RetrySettings disableProcessorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.disableProcessorSettings().getRetrySettings(),
              disableProcessorRetry);
      clientSettingsBuilder
          .disableProcessorSettings()
          .setRetrySettings(disableProcessorRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for disableProcessor from properties.");
      }
    }
    Retry setDefaultProcessorVersionRetry = clientProperties.getSetDefaultProcessorVersionRetry();
    if (setDefaultProcessorVersionRetry != null) {
      RetrySettings setDefaultProcessorVersionRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setDefaultProcessorVersionSettings().getRetrySettings(),
              setDefaultProcessorVersionRetry);
      clientSettingsBuilder
          .setDefaultProcessorVersionSettings()
          .setRetrySettings(setDefaultProcessorVersionRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for setDefaultProcessorVersion from properties.");
      }
    }
    Retry reviewDocumentRetry = clientProperties.getReviewDocumentRetry();
    if (reviewDocumentRetry != null) {
      RetrySettings reviewDocumentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.reviewDocumentSettings().getRetrySettings(),
              reviewDocumentRetry);
      clientSettingsBuilder.reviewDocumentSettings().setRetrySettings(reviewDocumentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for reviewDocument from properties.");
      }
    }
    Retry listLocationsRetry = clientProperties.getListLocationsRetry();
    if (listLocationsRetry != null) {
      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), listLocationsRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listLocations from properties.");
      }
    }
    Retry getLocationRetry = clientProperties.getGetLocationRetry();
    if (getLocationRetry != null) {
      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), getLocationRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getLocation from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public DocumentProcessorServiceClient documentProcessorServiceClient(
      DocumentProcessorServiceSettings documentProcessorServiceSettings) throws IOException {
    return DocumentProcessorServiceClient.create(documentProcessorServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-document-processor-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
