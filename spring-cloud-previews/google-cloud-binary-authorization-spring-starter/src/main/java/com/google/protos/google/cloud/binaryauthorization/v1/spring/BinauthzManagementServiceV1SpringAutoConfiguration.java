/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.protos.google.cloud.binaryauthorization.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import com.google.protos.google.cloud.binaryauthorization.v1.BinauthzManagementServiceV1Client;
import com.google.protos.google.cloud.binaryauthorization.v1.BinauthzManagementServiceV1Settings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link BinauthzManagementServiceV1Client}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(BinauthzManagementServiceV1Client.class)
@ConditionalOnProperty(
    value =
        "com.google.protos.google.cloud.binaryauthorization.v1.spring.auto.binauthz-management-service-v1.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({
  BinauthzManagementServiceV1SpringProperties.class,
  GlobalProperties.class
})
public class BinauthzManagementServiceV1SpringAutoConfiguration {
  private final BinauthzManagementServiceV1SpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(BinauthzManagementServiceV1SpringAutoConfiguration.class);

  protected BinauthzManagementServiceV1SpringAutoConfiguration(
      BinauthzManagementServiceV1SpringProperties clientProperties,
      GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider binauthzManagementServiceV1Credentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from BinauthzManagementServiceV1-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultBinauthzManagementServiceV1TransportChannelProvider() {
    return BinauthzManagementServiceV1Settings.defaultTransportChannelProvider();
  }

  /**
   * Provides a BinauthzManagementServiceV1Client bean configured to use the default credentials
   * provider (obtained with binauthzManagementServiceV1Credentials()) and its default transport
   * channel provider (defaultBinauthzManagementServiceV1TransportChannelProvider()). It also
   * configures the quota project ID if provided. It will configure an executor provider in case
   * there is more than one thread configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in
   * BinauthzManagementServiceV1SpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public BinauthzManagementServiceV1Settings binauthzManagementServiceV1Settings(
      @Qualifier("binauthzManagementServiceV1Credentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultBinauthzManagementServiceV1TransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    BinauthzManagementServiceV1Settings.Builder clientSettingsBuilder =
        BinauthzManagementServiceV1Settings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          BinauthzManagementServiceV1Settings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          BinauthzManagementServiceV1Settings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder getPolicyRetrySettingBuilder =
        clientSettingsBuilder.getPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetPolicyInitialRetryDelay() != null) {
      getPolicyRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetPolicyInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPolicyInitialRetryDelay set to "
                + this.clientProperties.getGetPolicyInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetPolicyRetryDelayMultiplier() != null) {
      getPolicyRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetPolicyRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPolicyRetryDelayMultiplier set to "
                + this.clientProperties.getGetPolicyRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetPolicyMaxRetryDelay() != null) {
      getPolicyRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetPolicyMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPolicyMaxRetryDelay set to " + this.clientProperties.getGetPolicyMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetPolicyInitialRpcTimeout() != null) {
      getPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPolicyInitialRpcTimeout set to "
                + this.clientProperties.getGetPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetPolicyRpcTimeoutMultiplier() != null) {
      getPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetPolicyMaxRpcTimeout() != null) {
      getPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPolicyMaxRpcTimeout set to " + this.clientProperties.getGetPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetPolicyTotalTimeout() != null) {
      getPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPolicyTotalTimeout set to " + this.clientProperties.getGetPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getPolicySettings()
        .setRetrySettings(getPolicyRetrySettingBuilder.build());
    RetrySettings.Builder updatePolicyRetrySettingBuilder =
        clientSettingsBuilder.updatePolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdatePolicyInitialRetryDelay() != null) {
      updatePolicyRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdatePolicyInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePolicyInitialRetryDelay set to "
                + this.clientProperties.getUpdatePolicyInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdatePolicyRetryDelayMultiplier() != null) {
      updatePolicyRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdatePolicyRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePolicyRetryDelayMultiplier set to "
                + this.clientProperties.getUpdatePolicyRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdatePolicyMaxRetryDelay() != null) {
      updatePolicyRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdatePolicyMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePolicyMaxRetryDelay set to "
                + this.clientProperties.getUpdatePolicyMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdatePolicyInitialRpcTimeout() != null) {
      updatePolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdatePolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePolicyInitialRpcTimeout set to "
                + this.clientProperties.getUpdatePolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdatePolicyRpcTimeoutMultiplier() != null) {
      updatePolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdatePolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdatePolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdatePolicyMaxRpcTimeout() != null) {
      updatePolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdatePolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePolicyMaxRpcTimeout set to "
                + this.clientProperties.getUpdatePolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdatePolicyTotalTimeout() != null) {
      updatePolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdatePolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePolicyTotalTimeout set to "
                + this.clientProperties.getUpdatePolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updatePolicySettings()
        .setRetrySettings(updatePolicyRetrySettingBuilder.build());
    RetrySettings.Builder createAttestorRetrySettingBuilder =
        clientSettingsBuilder.createAttestorSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateAttestorInitialRpcTimeout() != null) {
      createAttestorRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateAttestorInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAttestorInitialRpcTimeout set to "
                + this.clientProperties.getCreateAttestorInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateAttestorRpcTimeoutMultiplier() != null) {
      createAttestorRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateAttestorRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAttestorRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateAttestorRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateAttestorMaxRpcTimeout() != null) {
      createAttestorRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateAttestorMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAttestorMaxRpcTimeout set to "
                + this.clientProperties.getCreateAttestorMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateAttestorTotalTimeout() != null) {
      createAttestorRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateAttestorTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAttestorTotalTimeout set to "
                + this.clientProperties.getCreateAttestorTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createAttestorSettings()
        .setRetrySettings(createAttestorRetrySettingBuilder.build());
    RetrySettings.Builder getAttestorRetrySettingBuilder =
        clientSettingsBuilder.getAttestorSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetAttestorInitialRetryDelay() != null) {
      getAttestorRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetAttestorInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAttestorInitialRetryDelay set to "
                + this.clientProperties.getGetAttestorInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetAttestorRetryDelayMultiplier() != null) {
      getAttestorRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetAttestorRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAttestorRetryDelayMultiplier set to "
                + this.clientProperties.getGetAttestorRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetAttestorMaxRetryDelay() != null) {
      getAttestorRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetAttestorMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAttestorMaxRetryDelay set to "
                + this.clientProperties.getGetAttestorMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetAttestorInitialRpcTimeout() != null) {
      getAttestorRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetAttestorInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAttestorInitialRpcTimeout set to "
                + this.clientProperties.getGetAttestorInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAttestorRpcTimeoutMultiplier() != null) {
      getAttestorRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetAttestorRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAttestorRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetAttestorRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetAttestorMaxRpcTimeout() != null) {
      getAttestorRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetAttestorMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAttestorMaxRpcTimeout set to "
                + this.clientProperties.getGetAttestorMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAttestorTotalTimeout() != null) {
      getAttestorRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetAttestorTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAttestorTotalTimeout set to " + this.clientProperties.getGetAttestorTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getAttestorSettings()
        .setRetrySettings(getAttestorRetrySettingBuilder.build());
    RetrySettings.Builder updateAttestorRetrySettingBuilder =
        clientSettingsBuilder.updateAttestorSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateAttestorInitialRetryDelay() != null) {
      updateAttestorRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateAttestorInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAttestorInitialRetryDelay set to "
                + this.clientProperties.getUpdateAttestorInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateAttestorRetryDelayMultiplier() != null) {
      updateAttestorRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateAttestorRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAttestorRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateAttestorRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateAttestorMaxRetryDelay() != null) {
      updateAttestorRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateAttestorMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAttestorMaxRetryDelay set to "
                + this.clientProperties.getUpdateAttestorMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateAttestorInitialRpcTimeout() != null) {
      updateAttestorRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateAttestorInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAttestorInitialRpcTimeout set to "
                + this.clientProperties.getUpdateAttestorInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateAttestorRpcTimeoutMultiplier() != null) {
      updateAttestorRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateAttestorRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAttestorRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateAttestorRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateAttestorMaxRpcTimeout() != null) {
      updateAttestorRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateAttestorMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAttestorMaxRpcTimeout set to "
                + this.clientProperties.getUpdateAttestorMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateAttestorTotalTimeout() != null) {
      updateAttestorRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateAttestorTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAttestorTotalTimeout set to "
                + this.clientProperties.getUpdateAttestorTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateAttestorSettings()
        .setRetrySettings(updateAttestorRetrySettingBuilder.build());
    RetrySettings.Builder listAttestorsRetrySettingBuilder =
        clientSettingsBuilder.listAttestorsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListAttestorsInitialRetryDelay() != null) {
      listAttestorsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListAttestorsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAttestorsInitialRetryDelay set to "
                + this.clientProperties.getListAttestorsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListAttestorsRetryDelayMultiplier() != null) {
      listAttestorsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListAttestorsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAttestorsRetryDelayMultiplier set to "
                + this.clientProperties.getListAttestorsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListAttestorsMaxRetryDelay() != null) {
      listAttestorsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListAttestorsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAttestorsMaxRetryDelay set to "
                + this.clientProperties.getListAttestorsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListAttestorsInitialRpcTimeout() != null) {
      listAttestorsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListAttestorsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAttestorsInitialRpcTimeout set to "
                + this.clientProperties.getListAttestorsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListAttestorsRpcTimeoutMultiplier() != null) {
      listAttestorsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListAttestorsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAttestorsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListAttestorsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListAttestorsMaxRpcTimeout() != null) {
      listAttestorsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListAttestorsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAttestorsMaxRpcTimeout set to "
                + this.clientProperties.getListAttestorsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListAttestorsTotalTimeout() != null) {
      listAttestorsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListAttestorsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAttestorsTotalTimeout set to "
                + this.clientProperties.getListAttestorsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listAttestorsSettings()
        .setRetrySettings(listAttestorsRetrySettingBuilder.build());
    RetrySettings.Builder deleteAttestorRetrySettingBuilder =
        clientSettingsBuilder.deleteAttestorSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteAttestorInitialRetryDelay() != null) {
      deleteAttestorRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteAttestorInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAttestorInitialRetryDelay set to "
                + this.clientProperties.getDeleteAttestorInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteAttestorRetryDelayMultiplier() != null) {
      deleteAttestorRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteAttestorRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAttestorRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteAttestorRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteAttestorMaxRetryDelay() != null) {
      deleteAttestorRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteAttestorMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAttestorMaxRetryDelay set to "
                + this.clientProperties.getDeleteAttestorMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteAttestorInitialRpcTimeout() != null) {
      deleteAttestorRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteAttestorInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAttestorInitialRpcTimeout set to "
                + this.clientProperties.getDeleteAttestorInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAttestorRpcTimeoutMultiplier() != null) {
      deleteAttestorRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteAttestorRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAttestorRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteAttestorRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteAttestorMaxRpcTimeout() != null) {
      deleteAttestorRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteAttestorMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAttestorMaxRpcTimeout set to "
                + this.clientProperties.getDeleteAttestorMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAttestorTotalTimeout() != null) {
      deleteAttestorRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteAttestorTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAttestorTotalTimeout set to "
                + this.clientProperties.getDeleteAttestorTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteAttestorSettings()
        .setRetrySettings(deleteAttestorRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public BinauthzManagementServiceV1Client binauthzManagementServiceV1Client(
      BinauthzManagementServiceV1Settings binauthzManagementServiceV1Settings) throws IOException {
    return BinauthzManagementServiceV1Client.create(binauthzManagementServiceV1Settings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-binauthz-management-service-v1";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
