/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.datafusion.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.datafusion.v1.DataFusionClient;
import com.google.cloud.datafusion.v1.DataFusionSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link DataFusionClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(DataFusionClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.datafusion.v1.spring.auto.data-fusion.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({DataFusionSpringProperties.class, GlobalProperties.class})
public class DataFusionSpringAutoConfiguration {
  private final DataFusionSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(DataFusionSpringAutoConfiguration.class);

  protected DataFusionSpringAutoConfiguration(
      DataFusionSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider dataFusionCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from DataFusion-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultDataFusionTransportChannelProvider() {
    return DataFusionSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a DataFusionClient bean configured to use the default credentials provider (obtained
   * with dataFusionCredentials()) and its default transport channel provider
   * (defaultDataFusionTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in DataFusionSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public DataFusionSettings dataFusionSettings(
      @Qualifier("dataFusionCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultDataFusionTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    DataFusionSettings.Builder clientSettingsBuilder =
        DataFusionSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          DataFusionSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          DataFusionSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listAvailableVersionsRetrySettingBuilder =
        clientSettingsBuilder.listAvailableVersionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListAvailableVersionsInitialRpcTimeout() != null) {
      listAvailableVersionsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListAvailableVersionsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAvailableVersionsInitialRpcTimeout set to "
                + this.clientProperties.getListAvailableVersionsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListAvailableVersionsRpcTimeoutMultiplier() != null) {
      listAvailableVersionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListAvailableVersionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAvailableVersionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListAvailableVersionsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListAvailableVersionsMaxRpcTimeout() != null) {
      listAvailableVersionsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListAvailableVersionsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAvailableVersionsMaxRpcTimeout set to "
                + this.clientProperties.getListAvailableVersionsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListAvailableVersionsTotalTimeout() != null) {
      listAvailableVersionsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListAvailableVersionsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAvailableVersionsTotalTimeout set to "
                + this.clientProperties.getListAvailableVersionsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listAvailableVersionsSettings()
        .setRetrySettings(listAvailableVersionsRetrySettingBuilder.build());
    RetrySettings.Builder listInstancesRetrySettingBuilder =
        clientSettingsBuilder.listInstancesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListInstancesInitialRpcTimeout() != null) {
      listInstancesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListInstancesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInstancesInitialRpcTimeout set to "
                + this.clientProperties.getListInstancesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListInstancesRpcTimeoutMultiplier() != null) {
      listInstancesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListInstancesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInstancesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListInstancesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListInstancesMaxRpcTimeout() != null) {
      listInstancesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListInstancesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInstancesMaxRpcTimeout set to "
                + this.clientProperties.getListInstancesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListInstancesTotalTimeout() != null) {
      listInstancesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListInstancesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInstancesTotalTimeout set to "
                + this.clientProperties.getListInstancesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listInstancesSettings()
        .setRetrySettings(listInstancesRetrySettingBuilder.build());
    RetrySettings.Builder getInstanceRetrySettingBuilder =
        clientSettingsBuilder.getInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetInstanceInitialRpcTimeout() != null) {
      getInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceInitialRpcTimeout set to "
                + this.clientProperties.getGetInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetInstanceRpcTimeoutMultiplier() != null) {
      getInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetInstanceMaxRpcTimeout() != null) {
      getInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceMaxRpcTimeout set to "
                + this.clientProperties.getGetInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetInstanceTotalTimeout() != null) {
      getInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceTotalTimeout set to " + this.clientProperties.getGetInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getInstanceSettings()
        .setRetrySettings(getInstanceRetrySettingBuilder.build());
    RetrySettings.Builder createInstanceRetrySettingBuilder =
        clientSettingsBuilder.createInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateInstanceInitialRpcTimeout() != null) {
      createInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateInstanceInitialRpcTimeout set to "
                + this.clientProperties.getCreateInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateInstanceRpcTimeoutMultiplier() != null) {
      createInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateInstanceMaxRpcTimeout() != null) {
      createInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateInstanceMaxRpcTimeout set to "
                + this.clientProperties.getCreateInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateInstanceTotalTimeout() != null) {
      createInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateInstanceTotalTimeout set to "
                + this.clientProperties.getCreateInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createInstanceSettings()
        .setRetrySettings(createInstanceRetrySettingBuilder.build());
    RetrySettings.Builder deleteInstanceRetrySettingBuilder =
        clientSettingsBuilder.deleteInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteInstanceInitialRpcTimeout() != null) {
      deleteInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteInstanceInitialRpcTimeout set to "
                + this.clientProperties.getDeleteInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteInstanceRpcTimeoutMultiplier() != null) {
      deleteInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteInstanceMaxRpcTimeout() != null) {
      deleteInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteInstanceMaxRpcTimeout set to "
                + this.clientProperties.getDeleteInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteInstanceTotalTimeout() != null) {
      deleteInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteInstanceTotalTimeout set to "
                + this.clientProperties.getDeleteInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteInstanceSettings()
        .setRetrySettings(deleteInstanceRetrySettingBuilder.build());
    RetrySettings.Builder updateInstanceRetrySettingBuilder =
        clientSettingsBuilder.updateInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateInstanceInitialRpcTimeout() != null) {
      updateInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInstanceInitialRpcTimeout set to "
                + this.clientProperties.getUpdateInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateInstanceRpcTimeoutMultiplier() != null) {
      updateInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateInstanceMaxRpcTimeout() != null) {
      updateInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInstanceMaxRpcTimeout set to "
                + this.clientProperties.getUpdateInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateInstanceTotalTimeout() != null) {
      updateInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInstanceTotalTimeout set to "
                + this.clientProperties.getUpdateInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateInstanceSettings()
        .setRetrySettings(updateInstanceRetrySettingBuilder.build());
    RetrySettings.Builder restartInstanceRetrySettingBuilder =
        clientSettingsBuilder.restartInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRestartInstanceInitialRpcTimeout() != null) {
      restartInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRestartInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RestartInstanceInitialRpcTimeout set to "
                + this.clientProperties.getRestartInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRestartInstanceRpcTimeoutMultiplier() != null) {
      restartInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRestartInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RestartInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getRestartInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRestartInstanceMaxRpcTimeout() != null) {
      restartInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRestartInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RestartInstanceMaxRpcTimeout set to "
                + this.clientProperties.getRestartInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRestartInstanceTotalTimeout() != null) {
      restartInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRestartInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RestartInstanceTotalTimeout set to "
                + this.clientProperties.getRestartInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .restartInstanceSettings()
        .setRetrySettings(restartInstanceRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public DataFusionClient dataFusionClient(DataFusionSettings dataFusionSettings)
      throws IOException {
    return DataFusionClient.create(dataFusionSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-data-fusion";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
