/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.redis.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.redis.v1.CloudRedisClient;
import com.google.cloud.redis.v1.CloudRedisSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link CloudRedisClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(CloudRedisClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.redis.v1.spring.auto.cloud-redis.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({CloudRedisSpringProperties.class, GlobalProperties.class})
public class CloudRedisSpringAutoConfiguration {
  private final CloudRedisSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(CloudRedisSpringAutoConfiguration.class);

  protected CloudRedisSpringAutoConfiguration(
      CloudRedisSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider cloudRedisCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from CloudRedis-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultCloudRedisTransportChannelProvider() {
    return CloudRedisSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a CloudRedisClient bean configured to use the default credentials provider (obtained
   * with cloudRedisCredentials()) and its default transport channel provider
   * (defaultCloudRedisTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in CloudRedisSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public CloudRedisSettings cloudRedisSettings(
      @Qualifier("cloudRedisCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultCloudRedisTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    CloudRedisSettings.Builder clientSettingsBuilder =
        CloudRedisSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          CloudRedisSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          CloudRedisSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listInstancesRetrySettingBuilder =
        clientSettingsBuilder.listInstancesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListInstancesInitialRpcTimeout() != null) {
      listInstancesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListInstancesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInstancesInitialRpcTimeout set to "
                + this.clientProperties.getListInstancesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListInstancesRpcTimeoutMultiplier() != null) {
      listInstancesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListInstancesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInstancesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListInstancesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListInstancesMaxRpcTimeout() != null) {
      listInstancesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListInstancesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInstancesMaxRpcTimeout set to "
                + this.clientProperties.getListInstancesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListInstancesTotalTimeout() != null) {
      listInstancesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListInstancesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInstancesTotalTimeout set to "
                + this.clientProperties.getListInstancesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listInstancesSettings()
        .setRetrySettings(listInstancesRetrySettingBuilder.build());
    RetrySettings.Builder getInstanceRetrySettingBuilder =
        clientSettingsBuilder.getInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetInstanceInitialRpcTimeout() != null) {
      getInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceInitialRpcTimeout set to "
                + this.clientProperties.getGetInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetInstanceRpcTimeoutMultiplier() != null) {
      getInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetInstanceMaxRpcTimeout() != null) {
      getInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceMaxRpcTimeout set to "
                + this.clientProperties.getGetInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetInstanceTotalTimeout() != null) {
      getInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceTotalTimeout set to " + this.clientProperties.getGetInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getInstanceSettings()
        .setRetrySettings(getInstanceRetrySettingBuilder.build());
    RetrySettings.Builder getInstanceAuthStringRetrySettingBuilder =
        clientSettingsBuilder.getInstanceAuthStringSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetInstanceAuthStringInitialRpcTimeout() != null) {
      getInstanceAuthStringRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetInstanceAuthStringInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceAuthStringInitialRpcTimeout set to "
                + this.clientProperties.getGetInstanceAuthStringInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetInstanceAuthStringRpcTimeoutMultiplier() != null) {
      getInstanceAuthStringRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetInstanceAuthStringRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceAuthStringRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetInstanceAuthStringRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetInstanceAuthStringMaxRpcTimeout() != null) {
      getInstanceAuthStringRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetInstanceAuthStringMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceAuthStringMaxRpcTimeout set to "
                + this.clientProperties.getGetInstanceAuthStringMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetInstanceAuthStringTotalTimeout() != null) {
      getInstanceAuthStringRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetInstanceAuthStringTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceAuthStringTotalTimeout set to "
                + this.clientProperties.getGetInstanceAuthStringTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getInstanceAuthStringSettings()
        .setRetrySettings(getInstanceAuthStringRetrySettingBuilder.build());
    RetrySettings.Builder createInstanceRetrySettingBuilder =
        clientSettingsBuilder.createInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateInstanceInitialRpcTimeout() != null) {
      createInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateInstanceInitialRpcTimeout set to "
                + this.clientProperties.getCreateInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateInstanceRpcTimeoutMultiplier() != null) {
      createInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateInstanceMaxRpcTimeout() != null) {
      createInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateInstanceMaxRpcTimeout set to "
                + this.clientProperties.getCreateInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateInstanceTotalTimeout() != null) {
      createInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateInstanceTotalTimeout set to "
                + this.clientProperties.getCreateInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createInstanceSettings()
        .setRetrySettings(createInstanceRetrySettingBuilder.build());
    RetrySettings.Builder updateInstanceRetrySettingBuilder =
        clientSettingsBuilder.updateInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateInstanceInitialRpcTimeout() != null) {
      updateInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInstanceInitialRpcTimeout set to "
                + this.clientProperties.getUpdateInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateInstanceRpcTimeoutMultiplier() != null) {
      updateInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateInstanceMaxRpcTimeout() != null) {
      updateInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInstanceMaxRpcTimeout set to "
                + this.clientProperties.getUpdateInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateInstanceTotalTimeout() != null) {
      updateInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInstanceTotalTimeout set to "
                + this.clientProperties.getUpdateInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateInstanceSettings()
        .setRetrySettings(updateInstanceRetrySettingBuilder.build());
    RetrySettings.Builder upgradeInstanceRetrySettingBuilder =
        clientSettingsBuilder.upgradeInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpgradeInstanceInitialRpcTimeout() != null) {
      upgradeInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpgradeInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpgradeInstanceInitialRpcTimeout set to "
                + this.clientProperties.getUpgradeInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpgradeInstanceRpcTimeoutMultiplier() != null) {
      upgradeInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpgradeInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpgradeInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpgradeInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpgradeInstanceMaxRpcTimeout() != null) {
      upgradeInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpgradeInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpgradeInstanceMaxRpcTimeout set to "
                + this.clientProperties.getUpgradeInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpgradeInstanceTotalTimeout() != null) {
      upgradeInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpgradeInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpgradeInstanceTotalTimeout set to "
                + this.clientProperties.getUpgradeInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .upgradeInstanceSettings()
        .setRetrySettings(upgradeInstanceRetrySettingBuilder.build());
    RetrySettings.Builder importInstanceRetrySettingBuilder =
        clientSettingsBuilder.importInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getImportInstanceInitialRpcTimeout() != null) {
      importInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getImportInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportInstanceInitialRpcTimeout set to "
                + this.clientProperties.getImportInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getImportInstanceRpcTimeoutMultiplier() != null) {
      importInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getImportInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getImportInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getImportInstanceMaxRpcTimeout() != null) {
      importInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getImportInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportInstanceMaxRpcTimeout set to "
                + this.clientProperties.getImportInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getImportInstanceTotalTimeout() != null) {
      importInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getImportInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportInstanceTotalTimeout set to "
                + this.clientProperties.getImportInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .importInstanceSettings()
        .setRetrySettings(importInstanceRetrySettingBuilder.build());
    RetrySettings.Builder exportInstanceRetrySettingBuilder =
        clientSettingsBuilder.exportInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getExportInstanceInitialRpcTimeout() != null) {
      exportInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getExportInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportInstanceInitialRpcTimeout set to "
                + this.clientProperties.getExportInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getExportInstanceRpcTimeoutMultiplier() != null) {
      exportInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getExportInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getExportInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getExportInstanceMaxRpcTimeout() != null) {
      exportInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getExportInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportInstanceMaxRpcTimeout set to "
                + this.clientProperties.getExportInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getExportInstanceTotalTimeout() != null) {
      exportInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getExportInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportInstanceTotalTimeout set to "
                + this.clientProperties.getExportInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .exportInstanceSettings()
        .setRetrySettings(exportInstanceRetrySettingBuilder.build());
    RetrySettings.Builder failoverInstanceRetrySettingBuilder =
        clientSettingsBuilder.failoverInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getFailoverInstanceInitialRpcTimeout() != null) {
      failoverInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getFailoverInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FailoverInstanceInitialRpcTimeout set to "
                + this.clientProperties.getFailoverInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getFailoverInstanceRpcTimeoutMultiplier() != null) {
      failoverInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getFailoverInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FailoverInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getFailoverInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getFailoverInstanceMaxRpcTimeout() != null) {
      failoverInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getFailoverInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FailoverInstanceMaxRpcTimeout set to "
                + this.clientProperties.getFailoverInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getFailoverInstanceTotalTimeout() != null) {
      failoverInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getFailoverInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FailoverInstanceTotalTimeout set to "
                + this.clientProperties.getFailoverInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .failoverInstanceSettings()
        .setRetrySettings(failoverInstanceRetrySettingBuilder.build());
    RetrySettings.Builder deleteInstanceRetrySettingBuilder =
        clientSettingsBuilder.deleteInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteInstanceInitialRpcTimeout() != null) {
      deleteInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteInstanceInitialRpcTimeout set to "
                + this.clientProperties.getDeleteInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteInstanceRpcTimeoutMultiplier() != null) {
      deleteInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteInstanceMaxRpcTimeout() != null) {
      deleteInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteInstanceMaxRpcTimeout set to "
                + this.clientProperties.getDeleteInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteInstanceTotalTimeout() != null) {
      deleteInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteInstanceTotalTimeout set to "
                + this.clientProperties.getDeleteInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteInstanceSettings()
        .setRetrySettings(deleteInstanceRetrySettingBuilder.build());
    RetrySettings.Builder rescheduleMaintenanceRetrySettingBuilder =
        clientSettingsBuilder.rescheduleMaintenanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRescheduleMaintenanceInitialRpcTimeout() != null) {
      rescheduleMaintenanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRescheduleMaintenanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RescheduleMaintenanceInitialRpcTimeout set to "
                + this.clientProperties.getRescheduleMaintenanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRescheduleMaintenanceRpcTimeoutMultiplier() != null) {
      rescheduleMaintenanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRescheduleMaintenanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RescheduleMaintenanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getRescheduleMaintenanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRescheduleMaintenanceMaxRpcTimeout() != null) {
      rescheduleMaintenanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRescheduleMaintenanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RescheduleMaintenanceMaxRpcTimeout set to "
                + this.clientProperties.getRescheduleMaintenanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRescheduleMaintenanceTotalTimeout() != null) {
      rescheduleMaintenanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRescheduleMaintenanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RescheduleMaintenanceTotalTimeout set to "
                + this.clientProperties.getRescheduleMaintenanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .rescheduleMaintenanceSettings()
        .setRetrySettings(rescheduleMaintenanceRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public CloudRedisClient cloudRedisClient(CloudRedisSettings cloudRedisSettings)
      throws IOException {
    return CloudRedisClient.create(cloudRedisSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-cloud-redis";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
