/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.redis.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.redis.v1.CloudRedisClient;
import com.google.cloud.redis.v1.CloudRedisSettings;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link CloudRedisClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(CloudRedisClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.redis.v1.spring.auto.cloud-redis.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(CloudRedisSpringProperties.class)
public class CloudRedisSpringAutoConfiguration {
  private final CloudRedisSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER = LogFactory.getLog(CloudRedisSpringAutoConfiguration.class);

  protected CloudRedisSpringAutoConfiguration(
      CloudRedisSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from CloudRedis-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultCloudRedisTransportChannelProvider() {
    return CloudRedisSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a CloudRedisClient bean configured to use the default credentials provider (obtained
   * with cloudRedisCredentials()) and its default transport channel provider
   * (defaultCloudRedisTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in CloudRedisSpringProperties. Method-level properties will take precedence over service-level
   * properties if available, and client library defaults will be used if neither are specified.
   */
  @Bean
  @ConditionalOnMissingBean
  public CloudRedisSettings cloudRedisSettings(
      @Qualifier("defaultCloudRedisTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    CloudRedisSettings.Builder clientSettingsBuilder =
        CloudRedisSettings.newBuilder()
            .setCredentialsProvider(this.credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          CloudRedisSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          CloudRedisSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings listInstancesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listInstancesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listInstancesSettings().setRetrySettings(listInstancesRetrySettings);

      RetrySettings getInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getInstanceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getInstanceSettings().setRetrySettings(getInstanceRetrySettings);

      RetrySettings getInstanceAuthStringRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getInstanceAuthStringSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getInstanceAuthStringSettings()
          .setRetrySettings(getInstanceAuthStringRetrySettings);

      RetrySettings createInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createInstanceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createInstanceSettings().setRetrySettings(createInstanceRetrySettings);

      RetrySettings updateInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateInstanceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updateInstanceSettings().setRetrySettings(updateInstanceRetrySettings);

      RetrySettings upgradeInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.upgradeInstanceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .upgradeInstanceSettings()
          .setRetrySettings(upgradeInstanceRetrySettings);

      RetrySettings importInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.importInstanceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.importInstanceSettings().setRetrySettings(importInstanceRetrySettings);

      RetrySettings exportInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.exportInstanceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.exportInstanceSettings().setRetrySettings(exportInstanceRetrySettings);

      RetrySettings failoverInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.failoverInstanceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .failoverInstanceSettings()
          .setRetrySettings(failoverInstanceRetrySettings);

      RetrySettings deleteInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteInstanceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.deleteInstanceSettings().setRetrySettings(deleteInstanceRetrySettings);

      RetrySettings rescheduleMaintenanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.rescheduleMaintenanceSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .rescheduleMaintenanceSettings()
          .setRetrySettings(rescheduleMaintenanceRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry listInstancesRetry = clientProperties.getListInstancesRetry();
    if (listInstancesRetry != null) {
      RetrySettings listInstancesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listInstancesSettings().getRetrySettings(), listInstancesRetry);
      clientSettingsBuilder.listInstancesSettings().setRetrySettings(listInstancesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listInstances from properties.");
      }
    }
    Retry getInstanceRetry = clientProperties.getGetInstanceRetry();
    if (getInstanceRetry != null) {
      RetrySettings getInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getInstanceSettings().getRetrySettings(), getInstanceRetry);
      clientSettingsBuilder.getInstanceSettings().setRetrySettings(getInstanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getInstance from properties.");
      }
    }
    Retry getInstanceAuthStringRetry = clientProperties.getGetInstanceAuthStringRetry();
    if (getInstanceAuthStringRetry != null) {
      RetrySettings getInstanceAuthStringRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getInstanceAuthStringSettings().getRetrySettings(),
              getInstanceAuthStringRetry);
      clientSettingsBuilder
          .getInstanceAuthStringSettings()
          .setRetrySettings(getInstanceAuthStringRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getInstanceAuthString from properties.");
      }
    }
    Retry createInstanceRetry = clientProperties.getCreateInstanceRetry();
    if (createInstanceRetry != null) {
      RetrySettings createInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createInstanceSettings().getRetrySettings(),
              createInstanceRetry);
      clientSettingsBuilder.createInstanceSettings().setRetrySettings(createInstanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createInstance from properties.");
      }
    }
    Retry updateInstanceRetry = clientProperties.getUpdateInstanceRetry();
    if (updateInstanceRetry != null) {
      RetrySettings updateInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateInstanceSettings().getRetrySettings(),
              updateInstanceRetry);
      clientSettingsBuilder.updateInstanceSettings().setRetrySettings(updateInstanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateInstance from properties.");
      }
    }
    Retry upgradeInstanceRetry = clientProperties.getUpgradeInstanceRetry();
    if (upgradeInstanceRetry != null) {
      RetrySettings upgradeInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.upgradeInstanceSettings().getRetrySettings(),
              upgradeInstanceRetry);
      clientSettingsBuilder
          .upgradeInstanceSettings()
          .setRetrySettings(upgradeInstanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for upgradeInstance from properties.");
      }
    }
    Retry importInstanceRetry = clientProperties.getImportInstanceRetry();
    if (importInstanceRetry != null) {
      RetrySettings importInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.importInstanceSettings().getRetrySettings(),
              importInstanceRetry);
      clientSettingsBuilder.importInstanceSettings().setRetrySettings(importInstanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for importInstance from properties.");
      }
    }
    Retry exportInstanceRetry = clientProperties.getExportInstanceRetry();
    if (exportInstanceRetry != null) {
      RetrySettings exportInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.exportInstanceSettings().getRetrySettings(),
              exportInstanceRetry);
      clientSettingsBuilder.exportInstanceSettings().setRetrySettings(exportInstanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for exportInstance from properties.");
      }
    }
    Retry failoverInstanceRetry = clientProperties.getFailoverInstanceRetry();
    if (failoverInstanceRetry != null) {
      RetrySettings failoverInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.failoverInstanceSettings().getRetrySettings(),
              failoverInstanceRetry);
      clientSettingsBuilder
          .failoverInstanceSettings()
          .setRetrySettings(failoverInstanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for failoverInstance from properties.");
      }
    }
    Retry deleteInstanceRetry = clientProperties.getDeleteInstanceRetry();
    if (deleteInstanceRetry != null) {
      RetrySettings deleteInstanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteInstanceSettings().getRetrySettings(),
              deleteInstanceRetry);
      clientSettingsBuilder.deleteInstanceSettings().setRetrySettings(deleteInstanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteInstance from properties.");
      }
    }
    Retry rescheduleMaintenanceRetry = clientProperties.getRescheduleMaintenanceRetry();
    if (rescheduleMaintenanceRetry != null) {
      RetrySettings rescheduleMaintenanceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.rescheduleMaintenanceSettings().getRetrySettings(),
              rescheduleMaintenanceRetry);
      clientSettingsBuilder
          .rescheduleMaintenanceSettings()
          .setRetrySettings(rescheduleMaintenanceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for rescheduleMaintenance from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public CloudRedisClient cloudRedisClient(CloudRedisSettings cloudRedisSettings)
      throws IOException {
    return CloudRedisClient.create(cloudRedisSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-cloud-redis";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
