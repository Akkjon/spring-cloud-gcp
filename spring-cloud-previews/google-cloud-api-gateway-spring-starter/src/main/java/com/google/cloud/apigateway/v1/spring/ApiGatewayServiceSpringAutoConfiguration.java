/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.apigateway.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.apigateway.v1.ApiGatewayServiceClient;
import com.google.cloud.apigateway.v1.ApiGatewayServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ApiGatewayServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ApiGatewayServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.apigateway.v1.spring.auto.api-gateway-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({ApiGatewayServiceSpringProperties.class, GlobalProperties.class})
public class ApiGatewayServiceSpringAutoConfiguration {
  private final ApiGatewayServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(ApiGatewayServiceSpringAutoConfiguration.class);

  protected ApiGatewayServiceSpringAutoConfiguration(
      ApiGatewayServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider apiGatewayServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from ApiGatewayService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultApiGatewayServiceTransportChannelProvider() {
    return ApiGatewayServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ApiGatewayServiceClient bean configured to use the default credentials provider
   * (obtained with apiGatewayServiceCredentials()) and its default transport channel provider
   * (defaultApiGatewayServiceTransportChannelProvider()). It also configures the quota project ID
   * if provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in ApiGatewayServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public ApiGatewayServiceSettings apiGatewayServiceSettings(
      @Qualifier("apiGatewayServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultApiGatewayServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ApiGatewayServiceSettings.Builder clientSettingsBuilder =
        ApiGatewayServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ApiGatewayServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          ApiGatewayServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listGatewaysRetrySettingBuilder =
        clientSettingsBuilder.listGatewaysSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListGatewaysRpcTimeoutMultiplier() != null) {
      listGatewaysRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListGatewaysRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGatewaysRpcTimeoutMultiplier set to "
                + this.clientProperties.getListGatewaysRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listGatewaysSettings()
        .setRetrySettings(listGatewaysRetrySettingBuilder.build());
    RetrySettings.Builder getGatewayRetrySettingBuilder =
        clientSettingsBuilder.getGatewaySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetGatewayRpcTimeoutMultiplier() != null) {
      getGatewayRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetGatewayRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGatewayRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetGatewayRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getGatewaySettings()
        .setRetrySettings(getGatewayRetrySettingBuilder.build());
    RetrySettings.Builder createGatewayRetrySettingBuilder =
        clientSettingsBuilder.createGatewaySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateGatewayInitialRetryDelay() != null) {
      createGatewayRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateGatewayInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateGatewayInitialRetryDelay set to "
                + this.clientProperties.getCreateGatewayInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateGatewayRetryDelayMultiplier() != null) {
      createGatewayRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateGatewayRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateGatewayRetryDelayMultiplier set to "
                + this.clientProperties.getCreateGatewayRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateGatewayMaxRetryDelay() != null) {
      createGatewayRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateGatewayMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateGatewayMaxRetryDelay set to "
                + this.clientProperties.getCreateGatewayMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateGatewayInitialRpcTimeout() != null) {
      createGatewayRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateGatewayInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateGatewayInitialRpcTimeout set to "
                + this.clientProperties.getCreateGatewayInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateGatewayRpcTimeoutMultiplier() != null) {
      createGatewayRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateGatewayRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateGatewayRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateGatewayRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateGatewayMaxRpcTimeout() != null) {
      createGatewayRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateGatewayMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateGatewayMaxRpcTimeout set to "
                + this.clientProperties.getCreateGatewayMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateGatewayTotalTimeout() != null) {
      createGatewayRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateGatewayTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateGatewayTotalTimeout set to "
                + this.clientProperties.getCreateGatewayTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createGatewaySettings()
        .setRetrySettings(createGatewayRetrySettingBuilder.build());
    RetrySettings.Builder updateGatewayRetrySettingBuilder =
        clientSettingsBuilder.updateGatewaySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateGatewayInitialRetryDelay() != null) {
      updateGatewayRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateGatewayInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGatewayInitialRetryDelay set to "
                + this.clientProperties.getUpdateGatewayInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateGatewayRetryDelayMultiplier() != null) {
      updateGatewayRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateGatewayRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGatewayRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateGatewayRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateGatewayMaxRetryDelay() != null) {
      updateGatewayRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateGatewayMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGatewayMaxRetryDelay set to "
                + this.clientProperties.getUpdateGatewayMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateGatewayInitialRpcTimeout() != null) {
      updateGatewayRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateGatewayInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGatewayInitialRpcTimeout set to "
                + this.clientProperties.getUpdateGatewayInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateGatewayRpcTimeoutMultiplier() != null) {
      updateGatewayRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateGatewayRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGatewayRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateGatewayRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateGatewayMaxRpcTimeout() != null) {
      updateGatewayRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateGatewayMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGatewayMaxRpcTimeout set to "
                + this.clientProperties.getUpdateGatewayMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateGatewayTotalTimeout() != null) {
      updateGatewayRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateGatewayTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGatewayTotalTimeout set to "
                + this.clientProperties.getUpdateGatewayTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateGatewaySettings()
        .setRetrySettings(updateGatewayRetrySettingBuilder.build());
    RetrySettings.Builder deleteGatewayRetrySettingBuilder =
        clientSettingsBuilder.deleteGatewaySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteGatewayInitialRetryDelay() != null) {
      deleteGatewayRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteGatewayInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGatewayInitialRetryDelay set to "
                + this.clientProperties.getDeleteGatewayInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteGatewayRetryDelayMultiplier() != null) {
      deleteGatewayRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteGatewayRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGatewayRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteGatewayRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteGatewayMaxRetryDelay() != null) {
      deleteGatewayRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteGatewayMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGatewayMaxRetryDelay set to "
                + this.clientProperties.getDeleteGatewayMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteGatewayInitialRpcTimeout() != null) {
      deleteGatewayRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteGatewayInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGatewayInitialRpcTimeout set to "
                + this.clientProperties.getDeleteGatewayInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteGatewayRpcTimeoutMultiplier() != null) {
      deleteGatewayRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteGatewayRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGatewayRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteGatewayRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteGatewayMaxRpcTimeout() != null) {
      deleteGatewayRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteGatewayMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGatewayMaxRpcTimeout set to "
                + this.clientProperties.getDeleteGatewayMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteGatewayTotalTimeout() != null) {
      deleteGatewayRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteGatewayTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGatewayTotalTimeout set to "
                + this.clientProperties.getDeleteGatewayTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteGatewaySettings()
        .setRetrySettings(deleteGatewayRetrySettingBuilder.build());
    RetrySettings.Builder listApisRetrySettingBuilder =
        clientSettingsBuilder.listApisSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListApisRpcTimeoutMultiplier() != null) {
      listApisRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListApisRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListApisRpcTimeoutMultiplier set to "
                + this.clientProperties.getListApisRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder.listApisSettings().setRetrySettings(listApisRetrySettingBuilder.build());
    RetrySettings.Builder getApiRetrySettingBuilder =
        clientSettingsBuilder.getApiSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetApiRpcTimeoutMultiplier() != null) {
      getApiRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetApiRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetApiRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetApiRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder.getApiSettings().setRetrySettings(getApiRetrySettingBuilder.build());
    RetrySettings.Builder createApiRetrySettingBuilder =
        clientSettingsBuilder.createApiSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateApiInitialRetryDelay() != null) {
      createApiRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateApiInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateApiInitialRetryDelay set to "
                + this.clientProperties.getCreateApiInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateApiRetryDelayMultiplier() != null) {
      createApiRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateApiRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateApiRetryDelayMultiplier set to "
                + this.clientProperties.getCreateApiRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateApiMaxRetryDelay() != null) {
      createApiRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateApiMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateApiMaxRetryDelay set to " + this.clientProperties.getCreateApiMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateApiInitialRpcTimeout() != null) {
      createApiRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateApiInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateApiInitialRpcTimeout set to "
                + this.clientProperties.getCreateApiInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateApiRpcTimeoutMultiplier() != null) {
      createApiRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateApiRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateApiRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateApiRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateApiMaxRpcTimeout() != null) {
      createApiRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateApiMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateApiMaxRpcTimeout set to " + this.clientProperties.getCreateApiMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateApiTotalTimeout() != null) {
      createApiRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateApiTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateApiTotalTimeout set to " + this.clientProperties.getCreateApiTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createApiSettings()
        .setRetrySettings(createApiRetrySettingBuilder.build());
    RetrySettings.Builder updateApiRetrySettingBuilder =
        clientSettingsBuilder.updateApiSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateApiInitialRetryDelay() != null) {
      updateApiRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateApiInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateApiInitialRetryDelay set to "
                + this.clientProperties.getUpdateApiInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateApiRetryDelayMultiplier() != null) {
      updateApiRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateApiRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateApiRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateApiRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateApiMaxRetryDelay() != null) {
      updateApiRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateApiMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateApiMaxRetryDelay set to " + this.clientProperties.getUpdateApiMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateApiInitialRpcTimeout() != null) {
      updateApiRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateApiInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateApiInitialRpcTimeout set to "
                + this.clientProperties.getUpdateApiInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateApiRpcTimeoutMultiplier() != null) {
      updateApiRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateApiRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateApiRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateApiRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateApiMaxRpcTimeout() != null) {
      updateApiRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateApiMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateApiMaxRpcTimeout set to " + this.clientProperties.getUpdateApiMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateApiTotalTimeout() != null) {
      updateApiRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateApiTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateApiTotalTimeout set to " + this.clientProperties.getUpdateApiTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateApiSettings()
        .setRetrySettings(updateApiRetrySettingBuilder.build());
    RetrySettings.Builder deleteApiRetrySettingBuilder =
        clientSettingsBuilder.deleteApiSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteApiInitialRetryDelay() != null) {
      deleteApiRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteApiInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteApiInitialRetryDelay set to "
                + this.clientProperties.getDeleteApiInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteApiRetryDelayMultiplier() != null) {
      deleteApiRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteApiRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteApiRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteApiRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteApiMaxRetryDelay() != null) {
      deleteApiRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteApiMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteApiMaxRetryDelay set to " + this.clientProperties.getDeleteApiMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteApiInitialRpcTimeout() != null) {
      deleteApiRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteApiInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteApiInitialRpcTimeout set to "
                + this.clientProperties.getDeleteApiInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteApiRpcTimeoutMultiplier() != null) {
      deleteApiRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteApiRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteApiRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteApiRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteApiMaxRpcTimeout() != null) {
      deleteApiRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteApiMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteApiMaxRpcTimeout set to " + this.clientProperties.getDeleteApiMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteApiTotalTimeout() != null) {
      deleteApiRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteApiTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteApiTotalTimeout set to " + this.clientProperties.getDeleteApiTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteApiSettings()
        .setRetrySettings(deleteApiRetrySettingBuilder.build());
    RetrySettings.Builder listApiConfigsRetrySettingBuilder =
        clientSettingsBuilder.listApiConfigsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListApiConfigsRpcTimeoutMultiplier() != null) {
      listApiConfigsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListApiConfigsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListApiConfigsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListApiConfigsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listApiConfigsSettings()
        .setRetrySettings(listApiConfigsRetrySettingBuilder.build());
    RetrySettings.Builder getApiConfigRetrySettingBuilder =
        clientSettingsBuilder.getApiConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetApiConfigRpcTimeoutMultiplier() != null) {
      getApiConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetApiConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetApiConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetApiConfigRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getApiConfigSettings()
        .setRetrySettings(getApiConfigRetrySettingBuilder.build());
    RetrySettings.Builder createApiConfigRetrySettingBuilder =
        clientSettingsBuilder.createApiConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateApiConfigInitialRetryDelay() != null) {
      createApiConfigRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateApiConfigInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateApiConfigInitialRetryDelay set to "
                + this.clientProperties.getCreateApiConfigInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateApiConfigRetryDelayMultiplier() != null) {
      createApiConfigRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateApiConfigRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateApiConfigRetryDelayMultiplier set to "
                + this.clientProperties.getCreateApiConfigRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateApiConfigMaxRetryDelay() != null) {
      createApiConfigRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateApiConfigMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateApiConfigMaxRetryDelay set to "
                + this.clientProperties.getCreateApiConfigMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateApiConfigInitialRpcTimeout() != null) {
      createApiConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateApiConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateApiConfigInitialRpcTimeout set to "
                + this.clientProperties.getCreateApiConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateApiConfigRpcTimeoutMultiplier() != null) {
      createApiConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateApiConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateApiConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateApiConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateApiConfigMaxRpcTimeout() != null) {
      createApiConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateApiConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateApiConfigMaxRpcTimeout set to "
                + this.clientProperties.getCreateApiConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateApiConfigTotalTimeout() != null) {
      createApiConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateApiConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateApiConfigTotalTimeout set to "
                + this.clientProperties.getCreateApiConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createApiConfigSettings()
        .setRetrySettings(createApiConfigRetrySettingBuilder.build());
    RetrySettings.Builder updateApiConfigRetrySettingBuilder =
        clientSettingsBuilder.updateApiConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateApiConfigInitialRetryDelay() != null) {
      updateApiConfigRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateApiConfigInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateApiConfigInitialRetryDelay set to "
                + this.clientProperties.getUpdateApiConfigInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateApiConfigRetryDelayMultiplier() != null) {
      updateApiConfigRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateApiConfigRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateApiConfigRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateApiConfigRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateApiConfigMaxRetryDelay() != null) {
      updateApiConfigRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateApiConfigMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateApiConfigMaxRetryDelay set to "
                + this.clientProperties.getUpdateApiConfigMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateApiConfigInitialRpcTimeout() != null) {
      updateApiConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateApiConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateApiConfigInitialRpcTimeout set to "
                + this.clientProperties.getUpdateApiConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateApiConfigRpcTimeoutMultiplier() != null) {
      updateApiConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateApiConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateApiConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateApiConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateApiConfigMaxRpcTimeout() != null) {
      updateApiConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateApiConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateApiConfigMaxRpcTimeout set to "
                + this.clientProperties.getUpdateApiConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateApiConfigTotalTimeout() != null) {
      updateApiConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateApiConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateApiConfigTotalTimeout set to "
                + this.clientProperties.getUpdateApiConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateApiConfigSettings()
        .setRetrySettings(updateApiConfigRetrySettingBuilder.build());
    RetrySettings.Builder deleteApiConfigRetrySettingBuilder =
        clientSettingsBuilder.deleteApiConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteApiConfigInitialRetryDelay() != null) {
      deleteApiConfigRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteApiConfigInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteApiConfigInitialRetryDelay set to "
                + this.clientProperties.getDeleteApiConfigInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteApiConfigRetryDelayMultiplier() != null) {
      deleteApiConfigRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteApiConfigRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteApiConfigRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteApiConfigRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteApiConfigMaxRetryDelay() != null) {
      deleteApiConfigRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteApiConfigMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteApiConfigMaxRetryDelay set to "
                + this.clientProperties.getDeleteApiConfigMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteApiConfigInitialRpcTimeout() != null) {
      deleteApiConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteApiConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteApiConfigInitialRpcTimeout set to "
                + this.clientProperties.getDeleteApiConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteApiConfigRpcTimeoutMultiplier() != null) {
      deleteApiConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteApiConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteApiConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteApiConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteApiConfigMaxRpcTimeout() != null) {
      deleteApiConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteApiConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteApiConfigMaxRpcTimeout set to "
                + this.clientProperties.getDeleteApiConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteApiConfigTotalTimeout() != null) {
      deleteApiConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteApiConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteApiConfigTotalTimeout set to "
                + this.clientProperties.getDeleteApiConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteApiConfigSettings()
        .setRetrySettings(deleteApiConfigRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public ApiGatewayServiceClient apiGatewayServiceClient(
      ApiGatewayServiceSettings apiGatewayServiceSettings) throws IOException {
    return ApiGatewayServiceClient.create(apiGatewayServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-api-gateway-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
