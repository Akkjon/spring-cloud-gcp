/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.ids.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.ids.v1.IDSClient;
import com.google.cloud.ids.v1.IDSSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link IDSClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(IDSClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.ids.v1.spring.auto.i-d-s.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({IDSSpringProperties.class, GlobalProperties.class})
public class IDSSpringAutoConfiguration {
  private final IDSSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(IDSSpringAutoConfiguration.class);

  protected IDSSpringAutoConfiguration(
      IDSSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider iDSCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from IDS-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultIDSTransportChannelProvider() {
    return IDSSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a IDSClient bean configured to use the default credentials provider (obtained with
   * iDSCredentials()) and its default transport channel provider
   * (defaultIDSTransportChannelProvider()). It also configures the quota project ID if provided. It
   * will configure an executor provider in case there is more than one thread configured in the
   * client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in IDSSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public IDSSettings iDSSettings(
      @Qualifier("iDSCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultIDSTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    IDSSettings.Builder clientSettingsBuilder =
        IDSSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          IDSSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          IDSSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listEndpointsRetrySettingBuilder =
        clientSettingsBuilder.listEndpointsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListEndpointsInitialRetryDelay() != null) {
      listEndpointsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListEndpointsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEndpointsInitialRetryDelay set to "
                + this.clientProperties.getListEndpointsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListEndpointsRetryDelayMultiplier() != null) {
      listEndpointsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListEndpointsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEndpointsRetryDelayMultiplier set to "
                + this.clientProperties.getListEndpointsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListEndpointsMaxRetryDelay() != null) {
      listEndpointsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListEndpointsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEndpointsMaxRetryDelay set to "
                + this.clientProperties.getListEndpointsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListEndpointsInitialRpcTimeout() != null) {
      listEndpointsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListEndpointsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEndpointsInitialRpcTimeout set to "
                + this.clientProperties.getListEndpointsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListEndpointsRpcTimeoutMultiplier() != null) {
      listEndpointsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListEndpointsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEndpointsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListEndpointsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListEndpointsMaxRpcTimeout() != null) {
      listEndpointsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListEndpointsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEndpointsMaxRpcTimeout set to "
                + this.clientProperties.getListEndpointsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListEndpointsTotalTimeout() != null) {
      listEndpointsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListEndpointsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEndpointsTotalTimeout set to "
                + this.clientProperties.getListEndpointsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listEndpointsSettings()
        .setRetrySettings(listEndpointsRetrySettingBuilder.build());
    RetrySettings.Builder getEndpointRetrySettingBuilder =
        clientSettingsBuilder.getEndpointSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetEndpointInitialRetryDelay() != null) {
      getEndpointRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetEndpointInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEndpointInitialRetryDelay set to "
                + this.clientProperties.getGetEndpointInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetEndpointRetryDelayMultiplier() != null) {
      getEndpointRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetEndpointRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEndpointRetryDelayMultiplier set to "
                + this.clientProperties.getGetEndpointRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetEndpointMaxRetryDelay() != null) {
      getEndpointRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetEndpointMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEndpointMaxRetryDelay set to "
                + this.clientProperties.getGetEndpointMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetEndpointInitialRpcTimeout() != null) {
      getEndpointRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetEndpointInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEndpointInitialRpcTimeout set to "
                + this.clientProperties.getGetEndpointInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEndpointRpcTimeoutMultiplier() != null) {
      getEndpointRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetEndpointRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEndpointRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetEndpointRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetEndpointMaxRpcTimeout() != null) {
      getEndpointRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetEndpointMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEndpointMaxRpcTimeout set to "
                + this.clientProperties.getGetEndpointMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEndpointTotalTimeout() != null) {
      getEndpointRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetEndpointTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEndpointTotalTimeout set to " + this.clientProperties.getGetEndpointTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getEndpointSettings()
        .setRetrySettings(getEndpointRetrySettingBuilder.build());
    RetrySettings.Builder createEndpointRetrySettingBuilder =
        clientSettingsBuilder.createEndpointSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateEndpointInitialRpcTimeout() != null) {
      createEndpointRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateEndpointInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEndpointInitialRpcTimeout set to "
                + this.clientProperties.getCreateEndpointInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateEndpointRpcTimeoutMultiplier() != null) {
      createEndpointRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateEndpointRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEndpointRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateEndpointRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateEndpointMaxRpcTimeout() != null) {
      createEndpointRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateEndpointMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEndpointMaxRpcTimeout set to "
                + this.clientProperties.getCreateEndpointMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateEndpointTotalTimeout() != null) {
      createEndpointRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateEndpointTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEndpointTotalTimeout set to "
                + this.clientProperties.getCreateEndpointTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createEndpointSettings()
        .setRetrySettings(createEndpointRetrySettingBuilder.build());
    RetrySettings.Builder deleteEndpointRetrySettingBuilder =
        clientSettingsBuilder.deleteEndpointSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteEndpointInitialRpcTimeout() != null) {
      deleteEndpointRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteEndpointInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEndpointInitialRpcTimeout set to "
                + this.clientProperties.getDeleteEndpointInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteEndpointRpcTimeoutMultiplier() != null) {
      deleteEndpointRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteEndpointRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEndpointRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteEndpointRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteEndpointMaxRpcTimeout() != null) {
      deleteEndpointRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteEndpointMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEndpointMaxRpcTimeout set to "
                + this.clientProperties.getDeleteEndpointMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteEndpointTotalTimeout() != null) {
      deleteEndpointRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteEndpointTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEndpointTotalTimeout set to "
                + this.clientProperties.getDeleteEndpointTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteEndpointSettings()
        .setRetrySettings(deleteEndpointRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public IDSClient iDSClient(IDSSettings iDSSettings) throws IOException {
    return IDSClient.create(iDSSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-i-d-s";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
