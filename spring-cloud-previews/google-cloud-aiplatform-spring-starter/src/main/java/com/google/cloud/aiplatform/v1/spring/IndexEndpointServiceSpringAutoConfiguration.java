/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.aiplatform.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.aiplatform.v1.IndexEndpointServiceClient;
import com.google.cloud.aiplatform.v1.IndexEndpointServiceSettings;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link IndexEndpointServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(IndexEndpointServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.aiplatform.v1.spring.auto.index-endpoint-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(IndexEndpointServiceSpringProperties.class)
public class IndexEndpointServiceSpringAutoConfiguration {
  private final IndexEndpointServiceSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER =
      LogFactory.getLog(IndexEndpointServiceSpringAutoConfiguration.class);

  protected IndexEndpointServiceSpringAutoConfiguration(
      IndexEndpointServiceSpringProperties clientProperties,
      CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from IndexEndpointService-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultIndexEndpointServiceTransportChannelProvider() {
    return IndexEndpointServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a IndexEndpointServiceClient bean configured to use the default credentials provider
   * (obtained with indexEndpointServiceCredentials()) and its default transport channel provider
   * (defaultIndexEndpointServiceTransportChannelProvider()). It also configures the quota project
   * ID if provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in IndexEndpointServiceSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   */
  @Bean
  @ConditionalOnMissingBean
  public IndexEndpointServiceSettings indexEndpointServiceSettings(
      @Qualifier("defaultIndexEndpointServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    IndexEndpointServiceSettings.Builder clientSettingsBuilder =
        IndexEndpointServiceSettings.newBuilder()
            .setCredentialsProvider(this.credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          IndexEndpointServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings createIndexEndpointRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createIndexEndpointSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createIndexEndpointSettings()
          .setRetrySettings(createIndexEndpointRetrySettings);

      RetrySettings getIndexEndpointRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIndexEndpointSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getIndexEndpointSettings()
          .setRetrySettings(getIndexEndpointRetrySettings);

      RetrySettings listIndexEndpointsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listIndexEndpointsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listIndexEndpointsSettings()
          .setRetrySettings(listIndexEndpointsRetrySettings);

      RetrySettings updateIndexEndpointRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateIndexEndpointSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateIndexEndpointSettings()
          .setRetrySettings(updateIndexEndpointRetrySettings);

      RetrySettings deleteIndexEndpointRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteIndexEndpointSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteIndexEndpointSettings()
          .setRetrySettings(deleteIndexEndpointRetrySettings);

      RetrySettings deployIndexRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deployIndexSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.deployIndexSettings().setRetrySettings(deployIndexRetrySettings);

      RetrySettings undeployIndexRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.undeployIndexSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.undeployIndexSettings().setRetrySettings(undeployIndexRetrySettings);

      RetrySettings mutateDeployedIndexRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.mutateDeployedIndexSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .mutateDeployedIndexSettings()
          .setRetrySettings(mutateDeployedIndexRetrySettings);

      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);

      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);

      RetrySettings setIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.setIamPolicySettings().setRetrySettings(setIamPolicyRetrySettings);

      RetrySettings getIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getIamPolicySettings().setRetrySettings(getIamPolicyRetrySettings);

      RetrySettings testIamPermissionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .testIamPermissionsSettings()
          .setRetrySettings(testIamPermissionsRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry createIndexEndpointRetry = clientProperties.getCreateIndexEndpointRetry();
    if (createIndexEndpointRetry != null) {
      RetrySettings createIndexEndpointRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createIndexEndpointSettings().getRetrySettings(),
              createIndexEndpointRetry);
      clientSettingsBuilder
          .createIndexEndpointSettings()
          .setRetrySettings(createIndexEndpointRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createIndexEndpoint from properties.");
      }
    }
    Retry getIndexEndpointRetry = clientProperties.getGetIndexEndpointRetry();
    if (getIndexEndpointRetry != null) {
      RetrySettings getIndexEndpointRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIndexEndpointSettings().getRetrySettings(),
              getIndexEndpointRetry);
      clientSettingsBuilder
          .getIndexEndpointSettings()
          .setRetrySettings(getIndexEndpointRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getIndexEndpoint from properties.");
      }
    }
    Retry listIndexEndpointsRetry = clientProperties.getListIndexEndpointsRetry();
    if (listIndexEndpointsRetry != null) {
      RetrySettings listIndexEndpointsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listIndexEndpointsSettings().getRetrySettings(),
              listIndexEndpointsRetry);
      clientSettingsBuilder
          .listIndexEndpointsSettings()
          .setRetrySettings(listIndexEndpointsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listIndexEndpoints from properties.");
      }
    }
    Retry updateIndexEndpointRetry = clientProperties.getUpdateIndexEndpointRetry();
    if (updateIndexEndpointRetry != null) {
      RetrySettings updateIndexEndpointRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateIndexEndpointSettings().getRetrySettings(),
              updateIndexEndpointRetry);
      clientSettingsBuilder
          .updateIndexEndpointSettings()
          .setRetrySettings(updateIndexEndpointRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateIndexEndpoint from properties.");
      }
    }
    Retry deleteIndexEndpointRetry = clientProperties.getDeleteIndexEndpointRetry();
    if (deleteIndexEndpointRetry != null) {
      RetrySettings deleteIndexEndpointRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteIndexEndpointSettings().getRetrySettings(),
              deleteIndexEndpointRetry);
      clientSettingsBuilder
          .deleteIndexEndpointSettings()
          .setRetrySettings(deleteIndexEndpointRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteIndexEndpoint from properties.");
      }
    }
    Retry deployIndexRetry = clientProperties.getDeployIndexRetry();
    if (deployIndexRetry != null) {
      RetrySettings deployIndexRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deployIndexSettings().getRetrySettings(), deployIndexRetry);
      clientSettingsBuilder.deployIndexSettings().setRetrySettings(deployIndexRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deployIndex from properties.");
      }
    }
    Retry undeployIndexRetry = clientProperties.getUndeployIndexRetry();
    if (undeployIndexRetry != null) {
      RetrySettings undeployIndexRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.undeployIndexSettings().getRetrySettings(), undeployIndexRetry);
      clientSettingsBuilder.undeployIndexSettings().setRetrySettings(undeployIndexRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for undeployIndex from properties.");
      }
    }
    Retry mutateDeployedIndexRetry = clientProperties.getMutateDeployedIndexRetry();
    if (mutateDeployedIndexRetry != null) {
      RetrySettings mutateDeployedIndexRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.mutateDeployedIndexSettings().getRetrySettings(),
              mutateDeployedIndexRetry);
      clientSettingsBuilder
          .mutateDeployedIndexSettings()
          .setRetrySettings(mutateDeployedIndexRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for mutateDeployedIndex from properties.");
      }
    }
    Retry listLocationsRetry = clientProperties.getListLocationsRetry();
    if (listLocationsRetry != null) {
      RetrySettings listLocationsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listLocationsSettings().getRetrySettings(), listLocationsRetry);
      clientSettingsBuilder.listLocationsSettings().setRetrySettings(listLocationsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listLocations from properties.");
      }
    }
    Retry getLocationRetry = clientProperties.getGetLocationRetry();
    if (getLocationRetry != null) {
      RetrySettings getLocationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getLocationSettings().getRetrySettings(), getLocationRetry);
      clientSettingsBuilder.getLocationSettings().setRetrySettings(getLocationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getLocation from properties.");
      }
    }
    Retry setIamPolicyRetry = clientProperties.getSetIamPolicyRetry();
    if (setIamPolicyRetry != null) {
      RetrySettings setIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicySettings().getRetrySettings(), setIamPolicyRetry);
      clientSettingsBuilder.setIamPolicySettings().setRetrySettings(setIamPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for setIamPolicy from properties.");
      }
    }
    Retry getIamPolicyRetry = clientProperties.getGetIamPolicyRetry();
    if (getIamPolicyRetry != null) {
      RetrySettings getIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicySettings().getRetrySettings(), getIamPolicyRetry);
      clientSettingsBuilder.getIamPolicySettings().setRetrySettings(getIamPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getIamPolicy from properties.");
      }
    }
    Retry testIamPermissionsRetry = clientProperties.getTestIamPermissionsRetry();
    if (testIamPermissionsRetry != null) {
      RetrySettings testIamPermissionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings(),
              testIamPermissionsRetry);
      clientSettingsBuilder
          .testIamPermissionsSettings()
          .setRetrySettings(testIamPermissionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for testIamPermissions from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public IndexEndpointServiceClient indexEndpointServiceClient(
      IndexEndpointServiceSettings indexEndpointServiceSettings) throws IOException {
    return IndexEndpointServiceClient.create(indexEndpointServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-index-endpoint-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
