/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.speech.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.speech.v2.SpeechClient;
import com.google.cloud.speech.v2.SpeechSettings;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link SpeechClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(SpeechClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.speech.v2.spring.auto.speech.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(SpeechSpringProperties.class)
public class SpeechSpringAutoConfiguration {
  private final SpeechSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER = LogFactory.getLog(SpeechSpringAutoConfiguration.class);

  protected SpeechSpringAutoConfiguration(
      SpeechSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Speech-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultSpeechTransportChannelProvider() {
    return SpeechSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a SpeechClient bean configured to use the default credentials provider (obtained with
   * speechCredentials()) and its default transport channel provider
   * (defaultSpeechTransportChannelProvider()). It also configures the quota project ID if provided.
   * It will configure an executor provider in case there is more than one thread configured in the
   * client
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in SpeechSpringProperties. Method-level properties will take precedence over service-level
   * properties if available, and client library defaults will be used if neither are specified.
   */
  @Bean
  @ConditionalOnMissingBean
  public SpeechSettings speechSettings(
      @Qualifier("defaultSpeechTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    SpeechSettings.Builder clientSettingsBuilder =
        SpeechSettings.newBuilder()
            .setCredentialsProvider(this.credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          SpeechSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          SpeechSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings createRecognizerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createRecognizerSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createRecognizerSettings()
          .setRetrySettings(createRecognizerRetrySettings);

      RetrySettings listRecognizersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listRecognizersSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listRecognizersSettings()
          .setRetrySettings(listRecognizersRetrySettings);

      RetrySettings getRecognizerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getRecognizerSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getRecognizerSettings().setRetrySettings(getRecognizerRetrySettings);

      RetrySettings updateRecognizerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateRecognizerSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateRecognizerSettings()
          .setRetrySettings(updateRecognizerRetrySettings);

      RetrySettings deleteRecognizerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteRecognizerSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteRecognizerSettings()
          .setRetrySettings(deleteRecognizerRetrySettings);

      RetrySettings undeleteRecognizerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.undeleteRecognizerSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .undeleteRecognizerSettings()
          .setRetrySettings(undeleteRecognizerRetrySettings);

      RetrySettings recognizeRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.recognizeSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.recognizeSettings().setRetrySettings(recognizeRetrySettings);

      RetrySettings streamingRecognizeRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.streamingRecognizeSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .streamingRecognizeSettings()
          .setRetrySettings(streamingRecognizeRetrySettings);

      RetrySettings batchRecognizeRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.batchRecognizeSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.batchRecognizeSettings().setRetrySettings(batchRecognizeRetrySettings);

      RetrySettings getConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getConfigSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getConfigSettings().setRetrySettings(getConfigRetrySettings);

      RetrySettings updateConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateConfigSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updateConfigSettings().setRetrySettings(updateConfigRetrySettings);

      RetrySettings createCustomClassRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createCustomClassSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createCustomClassSettings()
          .setRetrySettings(createCustomClassRetrySettings);

      RetrySettings listCustomClassesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listCustomClassesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listCustomClassesSettings()
          .setRetrySettings(listCustomClassesRetrySettings);

      RetrySettings getCustomClassRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getCustomClassSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getCustomClassSettings().setRetrySettings(getCustomClassRetrySettings);

      RetrySettings updateCustomClassRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateCustomClassSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateCustomClassSettings()
          .setRetrySettings(updateCustomClassRetrySettings);

      RetrySettings deleteCustomClassRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteCustomClassSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteCustomClassSettings()
          .setRetrySettings(deleteCustomClassRetrySettings);

      RetrySettings undeleteCustomClassRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.undeleteCustomClassSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .undeleteCustomClassSettings()
          .setRetrySettings(undeleteCustomClassRetrySettings);

      RetrySettings createPhraseSetRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createPhraseSetSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createPhraseSetSettings()
          .setRetrySettings(createPhraseSetRetrySettings);

      RetrySettings listPhraseSetsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listPhraseSetsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listPhraseSetsSettings().setRetrySettings(listPhraseSetsRetrySettings);

      RetrySettings getPhraseSetRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getPhraseSetSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getPhraseSetSettings().setRetrySettings(getPhraseSetRetrySettings);

      RetrySettings updatePhraseSetRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updatePhraseSetSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updatePhraseSetSettings()
          .setRetrySettings(updatePhraseSetRetrySettings);

      RetrySettings deletePhraseSetRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deletePhraseSetSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deletePhraseSetSettings()
          .setRetrySettings(deletePhraseSetRetrySettings);

      RetrySettings undeletePhraseSetRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.undeletePhraseSetSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .undeletePhraseSetSettings()
          .setRetrySettings(undeletePhraseSetRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry createRecognizerRetry = clientProperties.getCreateRecognizerRetry();
    if (createRecognizerRetry != null) {
      RetrySettings createRecognizerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createRecognizerSettings().getRetrySettings(),
              createRecognizerRetry);
      clientSettingsBuilder
          .createRecognizerSettings()
          .setRetrySettings(createRecognizerRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createRecognizer from properties.");
      }
    }
    Retry listRecognizersRetry = clientProperties.getListRecognizersRetry();
    if (listRecognizersRetry != null) {
      RetrySettings listRecognizersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listRecognizersSettings().getRetrySettings(),
              listRecognizersRetry);
      clientSettingsBuilder
          .listRecognizersSettings()
          .setRetrySettings(listRecognizersRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listRecognizers from properties.");
      }
    }
    Retry getRecognizerRetry = clientProperties.getGetRecognizerRetry();
    if (getRecognizerRetry != null) {
      RetrySettings getRecognizerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getRecognizerSettings().getRetrySettings(), getRecognizerRetry);
      clientSettingsBuilder.getRecognizerSettings().setRetrySettings(getRecognizerRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getRecognizer from properties.");
      }
    }
    Retry updateRecognizerRetry = clientProperties.getUpdateRecognizerRetry();
    if (updateRecognizerRetry != null) {
      RetrySettings updateRecognizerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateRecognizerSettings().getRetrySettings(),
              updateRecognizerRetry);
      clientSettingsBuilder
          .updateRecognizerSettings()
          .setRetrySettings(updateRecognizerRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateRecognizer from properties.");
      }
    }
    Retry deleteRecognizerRetry = clientProperties.getDeleteRecognizerRetry();
    if (deleteRecognizerRetry != null) {
      RetrySettings deleteRecognizerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteRecognizerSettings().getRetrySettings(),
              deleteRecognizerRetry);
      clientSettingsBuilder
          .deleteRecognizerSettings()
          .setRetrySettings(deleteRecognizerRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteRecognizer from properties.");
      }
    }
    Retry undeleteRecognizerRetry = clientProperties.getUndeleteRecognizerRetry();
    if (undeleteRecognizerRetry != null) {
      RetrySettings undeleteRecognizerRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.undeleteRecognizerSettings().getRetrySettings(),
              undeleteRecognizerRetry);
      clientSettingsBuilder
          .undeleteRecognizerSettings()
          .setRetrySettings(undeleteRecognizerRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for undeleteRecognizer from properties.");
      }
    }
    Retry recognizeRetry = clientProperties.getRecognizeRetry();
    if (recognizeRetry != null) {
      RetrySettings recognizeRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.recognizeSettings().getRetrySettings(), recognizeRetry);
      clientSettingsBuilder.recognizeSettings().setRetrySettings(recognizeRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for recognize from properties.");
      }
    }
    Retry streamingRecognizeRetry = clientProperties.getStreamingRecognizeRetry();
    if (streamingRecognizeRetry != null) {
      RetrySettings streamingRecognizeRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.streamingRecognizeSettings().getRetrySettings(),
              streamingRecognizeRetry);
      clientSettingsBuilder
          .streamingRecognizeSettings()
          .setRetrySettings(streamingRecognizeRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for streamingRecognize from properties.");
      }
    }
    Retry batchRecognizeRetry = clientProperties.getBatchRecognizeRetry();
    if (batchRecognizeRetry != null) {
      RetrySettings batchRecognizeRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.batchRecognizeSettings().getRetrySettings(),
              batchRecognizeRetry);
      clientSettingsBuilder.batchRecognizeSettings().setRetrySettings(batchRecognizeRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for batchRecognize from properties.");
      }
    }
    Retry getConfigRetry = clientProperties.getGetConfigRetry();
    if (getConfigRetry != null) {
      RetrySettings getConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getConfigSettings().getRetrySettings(), getConfigRetry);
      clientSettingsBuilder.getConfigSettings().setRetrySettings(getConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getConfig from properties.");
      }
    }
    Retry updateConfigRetry = clientProperties.getUpdateConfigRetry();
    if (updateConfigRetry != null) {
      RetrySettings updateConfigRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateConfigSettings().getRetrySettings(), updateConfigRetry);
      clientSettingsBuilder.updateConfigSettings().setRetrySettings(updateConfigRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateConfig from properties.");
      }
    }
    Retry createCustomClassRetry = clientProperties.getCreateCustomClassRetry();
    if (createCustomClassRetry != null) {
      RetrySettings createCustomClassRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createCustomClassSettings().getRetrySettings(),
              createCustomClassRetry);
      clientSettingsBuilder
          .createCustomClassSettings()
          .setRetrySettings(createCustomClassRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createCustomClass from properties.");
      }
    }
    Retry listCustomClassesRetry = clientProperties.getListCustomClassesRetry();
    if (listCustomClassesRetry != null) {
      RetrySettings listCustomClassesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listCustomClassesSettings().getRetrySettings(),
              listCustomClassesRetry);
      clientSettingsBuilder
          .listCustomClassesSettings()
          .setRetrySettings(listCustomClassesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listCustomClasses from properties.");
      }
    }
    Retry getCustomClassRetry = clientProperties.getGetCustomClassRetry();
    if (getCustomClassRetry != null) {
      RetrySettings getCustomClassRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getCustomClassSettings().getRetrySettings(),
              getCustomClassRetry);
      clientSettingsBuilder.getCustomClassSettings().setRetrySettings(getCustomClassRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getCustomClass from properties.");
      }
    }
    Retry updateCustomClassRetry = clientProperties.getUpdateCustomClassRetry();
    if (updateCustomClassRetry != null) {
      RetrySettings updateCustomClassRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateCustomClassSettings().getRetrySettings(),
              updateCustomClassRetry);
      clientSettingsBuilder
          .updateCustomClassSettings()
          .setRetrySettings(updateCustomClassRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateCustomClass from properties.");
      }
    }
    Retry deleteCustomClassRetry = clientProperties.getDeleteCustomClassRetry();
    if (deleteCustomClassRetry != null) {
      RetrySettings deleteCustomClassRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteCustomClassSettings().getRetrySettings(),
              deleteCustomClassRetry);
      clientSettingsBuilder
          .deleteCustomClassSettings()
          .setRetrySettings(deleteCustomClassRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteCustomClass from properties.");
      }
    }
    Retry undeleteCustomClassRetry = clientProperties.getUndeleteCustomClassRetry();
    if (undeleteCustomClassRetry != null) {
      RetrySettings undeleteCustomClassRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.undeleteCustomClassSettings().getRetrySettings(),
              undeleteCustomClassRetry);
      clientSettingsBuilder
          .undeleteCustomClassSettings()
          .setRetrySettings(undeleteCustomClassRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for undeleteCustomClass from properties.");
      }
    }
    Retry createPhraseSetRetry = clientProperties.getCreatePhraseSetRetry();
    if (createPhraseSetRetry != null) {
      RetrySettings createPhraseSetRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createPhraseSetSettings().getRetrySettings(),
              createPhraseSetRetry);
      clientSettingsBuilder
          .createPhraseSetSettings()
          .setRetrySettings(createPhraseSetRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createPhraseSet from properties.");
      }
    }
    Retry listPhraseSetsRetry = clientProperties.getListPhraseSetsRetry();
    if (listPhraseSetsRetry != null) {
      RetrySettings listPhraseSetsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listPhraseSetsSettings().getRetrySettings(),
              listPhraseSetsRetry);
      clientSettingsBuilder.listPhraseSetsSettings().setRetrySettings(listPhraseSetsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listPhraseSets from properties.");
      }
    }
    Retry getPhraseSetRetry = clientProperties.getGetPhraseSetRetry();
    if (getPhraseSetRetry != null) {
      RetrySettings getPhraseSetRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getPhraseSetSettings().getRetrySettings(), getPhraseSetRetry);
      clientSettingsBuilder.getPhraseSetSettings().setRetrySettings(getPhraseSetRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getPhraseSet from properties.");
      }
    }
    Retry updatePhraseSetRetry = clientProperties.getUpdatePhraseSetRetry();
    if (updatePhraseSetRetry != null) {
      RetrySettings updatePhraseSetRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updatePhraseSetSettings().getRetrySettings(),
              updatePhraseSetRetry);
      clientSettingsBuilder
          .updatePhraseSetSettings()
          .setRetrySettings(updatePhraseSetRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updatePhraseSet from properties.");
      }
    }
    Retry deletePhraseSetRetry = clientProperties.getDeletePhraseSetRetry();
    if (deletePhraseSetRetry != null) {
      RetrySettings deletePhraseSetRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deletePhraseSetSettings().getRetrySettings(),
              deletePhraseSetRetry);
      clientSettingsBuilder
          .deletePhraseSetSettings()
          .setRetrySettings(deletePhraseSetRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deletePhraseSet from properties.");
      }
    }
    Retry undeletePhraseSetRetry = clientProperties.getUndeletePhraseSetRetry();
    if (undeletePhraseSetRetry != null) {
      RetrySettings undeletePhraseSetRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.undeletePhraseSetSettings().getRetrySettings(),
              undeletePhraseSetRetry);
      clientSettingsBuilder
          .undeletePhraseSetSettings()
          .setRetrySettings(undeletePhraseSetRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for undeletePhraseSet from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public SpeechClient speechClient(SpeechSettings speechSettings) throws IOException {
    return SpeechClient.create(speechSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-speech";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
