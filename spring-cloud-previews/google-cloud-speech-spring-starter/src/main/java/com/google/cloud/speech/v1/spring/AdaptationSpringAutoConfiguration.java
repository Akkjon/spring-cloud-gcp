/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.speech.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.speech.v1.AdaptationClient;
import com.google.cloud.speech.v1.AdaptationSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link AdaptationClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(AdaptationClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.speech.v1.spring.auto.adaptation.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({AdaptationSpringProperties.class, GlobalProperties.class})
public class AdaptationSpringAutoConfiguration {
  private final AdaptationSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(AdaptationSpringAutoConfiguration.class);

  protected AdaptationSpringAutoConfiguration(
      AdaptationSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider adaptationCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Adaptation-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultAdaptationTransportChannelProvider() {
    return AdaptationSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a AdaptationClient bean configured to use the default credentials provider (obtained
   * with adaptationCredentials()) and its default transport channel provider
   * (defaultAdaptationTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in AdaptationSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public AdaptationSettings adaptationSettings(
      @Qualifier("adaptationCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultAdaptationTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    AdaptationSettings.Builder clientSettingsBuilder =
        AdaptationSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          AdaptationSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          AdaptationSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createPhraseSetRetrySettingBuilder =
        clientSettingsBuilder.createPhraseSetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreatePhraseSetRpcTimeoutMultiplier() != null) {
      createPhraseSetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreatePhraseSetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePhraseSetRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreatePhraseSetRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .createPhraseSetSettings()
        .setRetrySettings(createPhraseSetRetrySettingBuilder.build());
    RetrySettings.Builder getPhraseSetRetrySettingBuilder =
        clientSettingsBuilder.getPhraseSetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetPhraseSetRpcTimeoutMultiplier() != null) {
      getPhraseSetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetPhraseSetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPhraseSetRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetPhraseSetRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getPhraseSetSettings()
        .setRetrySettings(getPhraseSetRetrySettingBuilder.build());
    RetrySettings.Builder listPhraseSetRetrySettingBuilder =
        clientSettingsBuilder.listPhraseSetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListPhraseSetRpcTimeoutMultiplier() != null) {
      listPhraseSetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListPhraseSetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPhraseSetRpcTimeoutMultiplier set to "
                + this.clientProperties.getListPhraseSetRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listPhraseSetSettings()
        .setRetrySettings(listPhraseSetRetrySettingBuilder.build());
    RetrySettings.Builder updatePhraseSetRetrySettingBuilder =
        clientSettingsBuilder.updatePhraseSetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdatePhraseSetRpcTimeoutMultiplier() != null) {
      updatePhraseSetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdatePhraseSetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePhraseSetRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdatePhraseSetRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .updatePhraseSetSettings()
        .setRetrySettings(updatePhraseSetRetrySettingBuilder.build());
    RetrySettings.Builder deletePhraseSetRetrySettingBuilder =
        clientSettingsBuilder.deletePhraseSetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeletePhraseSetRpcTimeoutMultiplier() != null) {
      deletePhraseSetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeletePhraseSetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePhraseSetRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeletePhraseSetRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .deletePhraseSetSettings()
        .setRetrySettings(deletePhraseSetRetrySettingBuilder.build());
    RetrySettings.Builder createCustomClassRetrySettingBuilder =
        clientSettingsBuilder.createCustomClassSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateCustomClassRpcTimeoutMultiplier() != null) {
      createCustomClassRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateCustomClassRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCustomClassRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateCustomClassRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .createCustomClassSettings()
        .setRetrySettings(createCustomClassRetrySettingBuilder.build());
    RetrySettings.Builder getCustomClassRetrySettingBuilder =
        clientSettingsBuilder.getCustomClassSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetCustomClassRpcTimeoutMultiplier() != null) {
      getCustomClassRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetCustomClassRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCustomClassRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetCustomClassRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getCustomClassSettings()
        .setRetrySettings(getCustomClassRetrySettingBuilder.build());
    RetrySettings.Builder listCustomClassesRetrySettingBuilder =
        clientSettingsBuilder.listCustomClassesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListCustomClassesRpcTimeoutMultiplier() != null) {
      listCustomClassesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListCustomClassesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCustomClassesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListCustomClassesRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listCustomClassesSettings()
        .setRetrySettings(listCustomClassesRetrySettingBuilder.build());
    RetrySettings.Builder updateCustomClassRetrySettingBuilder =
        clientSettingsBuilder.updateCustomClassSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateCustomClassRpcTimeoutMultiplier() != null) {
      updateCustomClassRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateCustomClassRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCustomClassRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateCustomClassRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .updateCustomClassSettings()
        .setRetrySettings(updateCustomClassRetrySettingBuilder.build());
    RetrySettings.Builder deleteCustomClassRetrySettingBuilder =
        clientSettingsBuilder.deleteCustomClassSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteCustomClassRpcTimeoutMultiplier() != null) {
      deleteCustomClassRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteCustomClassRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCustomClassRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteCustomClassRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .deleteCustomClassSettings()
        .setRetrySettings(deleteCustomClassRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public AdaptationClient adaptationClient(AdaptationSettings adaptationSettings)
      throws IOException {
    return AdaptationClient.create(adaptationSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-adaptation";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
