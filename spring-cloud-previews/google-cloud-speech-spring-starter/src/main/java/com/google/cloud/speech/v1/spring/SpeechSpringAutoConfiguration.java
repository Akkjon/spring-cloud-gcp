/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.speech.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.speech.v1.SpeechClient;
import com.google.cloud.speech.v1.SpeechSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link SpeechClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(SpeechClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.speech.v1.spring.auto.speech.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({SpeechSpringProperties.class, GlobalProperties.class})
public class SpeechSpringAutoConfiguration {
  private final SpeechSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(SpeechSpringAutoConfiguration.class);

  protected SpeechSpringAutoConfiguration(
      SpeechSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider speechCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Speech-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultSpeechTransportChannelProvider() {
    return SpeechSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a SpeechClient bean configured to use the default credentials provider (obtained with
   * speechCredentials()) and its default transport channel provider
   * (defaultSpeechTransportChannelProvider()). It also configures the quota project ID if provided.
   * It will configure an executor provider in case there is more than one thread configured in the
   * client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in SpeechSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public SpeechSettings speechSettings(
      @Qualifier("speechCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultSpeechTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    SpeechSettings.Builder clientSettingsBuilder =
        SpeechSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          SpeechSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          SpeechSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder recognizeRetrySettingBuilder =
        clientSettingsBuilder.recognizeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRecognizeInitialRetryDelay() != null) {
      recognizeRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getRecognizeInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RecognizeInitialRetryDelay set to "
                + this.clientProperties.getRecognizeInitialRetryDelay());
      }
    }
    if (this.clientProperties.getRecognizeRetryDelayMultiplier() != null) {
      recognizeRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getRecognizeRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RecognizeRetryDelayMultiplier set to "
                + this.clientProperties.getRecognizeRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getRecognizeMaxRetryDelay() != null) {
      recognizeRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getRecognizeMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RecognizeMaxRetryDelay set to " + this.clientProperties.getRecognizeMaxRetryDelay());
      }
    }
    if (this.clientProperties.getRecognizeInitialRpcTimeout() != null) {
      recognizeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRecognizeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RecognizeInitialRpcTimeout set to "
                + this.clientProperties.getRecognizeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRecognizeRpcTimeoutMultiplier() != null) {
      recognizeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRecognizeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RecognizeRpcTimeoutMultiplier set to "
                + this.clientProperties.getRecognizeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRecognizeMaxRpcTimeout() != null) {
      recognizeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRecognizeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RecognizeMaxRpcTimeout set to " + this.clientProperties.getRecognizeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRecognizeTotalTimeout() != null) {
      recognizeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRecognizeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RecognizeTotalTimeout set to " + this.clientProperties.getRecognizeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .recognizeSettings()
        .setRetrySettings(recognizeRetrySettingBuilder.build());
    RetrySettings.Builder longRunningRecognizeRetrySettingBuilder =
        clientSettingsBuilder.longRunningRecognizeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getLongRunningRecognizeInitialRpcTimeout() != null) {
      longRunningRecognizeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getLongRunningRecognizeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "LongRunningRecognizeInitialRpcTimeout set to "
                + this.clientProperties.getLongRunningRecognizeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getLongRunningRecognizeRpcTimeoutMultiplier() != null) {
      longRunningRecognizeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getLongRunningRecognizeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "LongRunningRecognizeRpcTimeoutMultiplier set to "
                + this.clientProperties.getLongRunningRecognizeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getLongRunningRecognizeMaxRpcTimeout() != null) {
      longRunningRecognizeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getLongRunningRecognizeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "LongRunningRecognizeMaxRpcTimeout set to "
                + this.clientProperties.getLongRunningRecognizeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getLongRunningRecognizeTotalTimeout() != null) {
      longRunningRecognizeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getLongRunningRecognizeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "LongRunningRecognizeTotalTimeout set to "
                + this.clientProperties.getLongRunningRecognizeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .longRunningRecognizeSettings()
        .setRetrySettings(longRunningRecognizeRetrySettingBuilder.build());
    RetrySettings.Builder streamingRecognizeRetrySettingBuilder =
        clientSettingsBuilder.streamingRecognizeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getStreamingRecognizeInitialRetryDelay() != null) {
      streamingRecognizeRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getStreamingRecognizeInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StreamingRecognizeInitialRetryDelay set to "
                + this.clientProperties.getStreamingRecognizeInitialRetryDelay());
      }
    }
    if (this.clientProperties.getStreamingRecognizeRetryDelayMultiplier() != null) {
      streamingRecognizeRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getStreamingRecognizeRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StreamingRecognizeRetryDelayMultiplier set to "
                + this.clientProperties.getStreamingRecognizeRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getStreamingRecognizeMaxRetryDelay() != null) {
      streamingRecognizeRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getStreamingRecognizeMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StreamingRecognizeMaxRetryDelay set to "
                + this.clientProperties.getStreamingRecognizeMaxRetryDelay());
      }
    }
    if (this.clientProperties.getStreamingRecognizeInitialRpcTimeout() != null) {
      streamingRecognizeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getStreamingRecognizeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StreamingRecognizeInitialRpcTimeout set to "
                + this.clientProperties.getStreamingRecognizeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getStreamingRecognizeRpcTimeoutMultiplier() != null) {
      streamingRecognizeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getStreamingRecognizeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StreamingRecognizeRpcTimeoutMultiplier set to "
                + this.clientProperties.getStreamingRecognizeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getStreamingRecognizeMaxRpcTimeout() != null) {
      streamingRecognizeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getStreamingRecognizeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StreamingRecognizeMaxRpcTimeout set to "
                + this.clientProperties.getStreamingRecognizeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getStreamingRecognizeTotalTimeout() != null) {
      streamingRecognizeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getStreamingRecognizeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StreamingRecognizeTotalTimeout set to "
                + this.clientProperties.getStreamingRecognizeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .streamingRecognizeSettings()
        .setRetrySettings(streamingRecognizeRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public SpeechClient speechClient(SpeechSettings speechSettings) throws IOException {
    return SpeechClient.create(speechSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-speech";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
