/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.osconfig.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.osconfig.v1.OsConfigZonalServiceClient;
import com.google.cloud.osconfig.v1.OsConfigZonalServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link OsConfigZonalServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(OsConfigZonalServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.osconfig.v1.spring.auto.os-config-zonal-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({OsConfigZonalServiceSpringProperties.class, GlobalProperties.class})
public class OsConfigZonalServiceSpringAutoConfiguration {
  private final OsConfigZonalServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(OsConfigZonalServiceSpringAutoConfiguration.class);

  protected OsConfigZonalServiceSpringAutoConfiguration(
      OsConfigZonalServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider osConfigZonalServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from OsConfigZonalService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultOsConfigZonalServiceTransportChannelProvider() {
    return OsConfigZonalServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a OsConfigZonalServiceClient bean configured to use the default credentials provider
   * (obtained with osConfigZonalServiceCredentials()) and its default transport channel provider
   * (defaultOsConfigZonalServiceTransportChannelProvider()). It also configures the quota project
   * ID if provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in OsConfigZonalServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public OsConfigZonalServiceSettings osConfigZonalServiceSettings(
      @Qualifier("osConfigZonalServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultOsConfigZonalServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    OsConfigZonalServiceSettings.Builder clientSettingsBuilder =
        OsConfigZonalServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          OsConfigZonalServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          OsConfigZonalServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createOSPolicyAssignmentRetrySettingBuilder =
        clientSettingsBuilder.createOSPolicyAssignmentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateOSPolicyAssignmentInitialRetryDelay() != null) {
      createOSPolicyAssignmentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateOSPolicyAssignmentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateOSPolicyAssignmentInitialRetryDelay set to "
                + this.clientProperties.getCreateOSPolicyAssignmentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateOSPolicyAssignmentRetryDelayMultiplier() != null) {
      createOSPolicyAssignmentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateOSPolicyAssignmentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateOSPolicyAssignmentRetryDelayMultiplier set to "
                + this.clientProperties.getCreateOSPolicyAssignmentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateOSPolicyAssignmentMaxRetryDelay() != null) {
      createOSPolicyAssignmentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateOSPolicyAssignmentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateOSPolicyAssignmentMaxRetryDelay set to "
                + this.clientProperties.getCreateOSPolicyAssignmentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateOSPolicyAssignmentInitialRpcTimeout() != null) {
      createOSPolicyAssignmentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateOSPolicyAssignmentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateOSPolicyAssignmentInitialRpcTimeout set to "
                + this.clientProperties.getCreateOSPolicyAssignmentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateOSPolicyAssignmentRpcTimeoutMultiplier() != null) {
      createOSPolicyAssignmentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateOSPolicyAssignmentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateOSPolicyAssignmentRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateOSPolicyAssignmentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateOSPolicyAssignmentMaxRpcTimeout() != null) {
      createOSPolicyAssignmentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateOSPolicyAssignmentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateOSPolicyAssignmentMaxRpcTimeout set to "
                + this.clientProperties.getCreateOSPolicyAssignmentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateOSPolicyAssignmentTotalTimeout() != null) {
      createOSPolicyAssignmentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateOSPolicyAssignmentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateOSPolicyAssignmentTotalTimeout set to "
                + this.clientProperties.getCreateOSPolicyAssignmentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createOSPolicyAssignmentSettings()
        .setRetrySettings(createOSPolicyAssignmentRetrySettingBuilder.build());
    RetrySettings.Builder updateOSPolicyAssignmentRetrySettingBuilder =
        clientSettingsBuilder.updateOSPolicyAssignmentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateOSPolicyAssignmentInitialRetryDelay() != null) {
      updateOSPolicyAssignmentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateOSPolicyAssignmentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateOSPolicyAssignmentInitialRetryDelay set to "
                + this.clientProperties.getUpdateOSPolicyAssignmentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateOSPolicyAssignmentRetryDelayMultiplier() != null) {
      updateOSPolicyAssignmentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateOSPolicyAssignmentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateOSPolicyAssignmentRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateOSPolicyAssignmentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateOSPolicyAssignmentMaxRetryDelay() != null) {
      updateOSPolicyAssignmentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateOSPolicyAssignmentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateOSPolicyAssignmentMaxRetryDelay set to "
                + this.clientProperties.getUpdateOSPolicyAssignmentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateOSPolicyAssignmentInitialRpcTimeout() != null) {
      updateOSPolicyAssignmentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateOSPolicyAssignmentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateOSPolicyAssignmentInitialRpcTimeout set to "
                + this.clientProperties.getUpdateOSPolicyAssignmentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateOSPolicyAssignmentRpcTimeoutMultiplier() != null) {
      updateOSPolicyAssignmentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateOSPolicyAssignmentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateOSPolicyAssignmentRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateOSPolicyAssignmentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateOSPolicyAssignmentMaxRpcTimeout() != null) {
      updateOSPolicyAssignmentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateOSPolicyAssignmentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateOSPolicyAssignmentMaxRpcTimeout set to "
                + this.clientProperties.getUpdateOSPolicyAssignmentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateOSPolicyAssignmentTotalTimeout() != null) {
      updateOSPolicyAssignmentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateOSPolicyAssignmentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateOSPolicyAssignmentTotalTimeout set to "
                + this.clientProperties.getUpdateOSPolicyAssignmentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateOSPolicyAssignmentSettings()
        .setRetrySettings(updateOSPolicyAssignmentRetrySettingBuilder.build());
    RetrySettings.Builder getOSPolicyAssignmentRetrySettingBuilder =
        clientSettingsBuilder.getOSPolicyAssignmentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetOSPolicyAssignmentInitialRetryDelay() != null) {
      getOSPolicyAssignmentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetOSPolicyAssignmentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOSPolicyAssignmentInitialRetryDelay set to "
                + this.clientProperties.getGetOSPolicyAssignmentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetOSPolicyAssignmentRetryDelayMultiplier() != null) {
      getOSPolicyAssignmentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetOSPolicyAssignmentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOSPolicyAssignmentRetryDelayMultiplier set to "
                + this.clientProperties.getGetOSPolicyAssignmentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetOSPolicyAssignmentMaxRetryDelay() != null) {
      getOSPolicyAssignmentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetOSPolicyAssignmentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOSPolicyAssignmentMaxRetryDelay set to "
                + this.clientProperties.getGetOSPolicyAssignmentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetOSPolicyAssignmentInitialRpcTimeout() != null) {
      getOSPolicyAssignmentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetOSPolicyAssignmentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOSPolicyAssignmentInitialRpcTimeout set to "
                + this.clientProperties.getGetOSPolicyAssignmentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetOSPolicyAssignmentRpcTimeoutMultiplier() != null) {
      getOSPolicyAssignmentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetOSPolicyAssignmentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOSPolicyAssignmentRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetOSPolicyAssignmentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetOSPolicyAssignmentMaxRpcTimeout() != null) {
      getOSPolicyAssignmentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetOSPolicyAssignmentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOSPolicyAssignmentMaxRpcTimeout set to "
                + this.clientProperties.getGetOSPolicyAssignmentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetOSPolicyAssignmentTotalTimeout() != null) {
      getOSPolicyAssignmentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetOSPolicyAssignmentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOSPolicyAssignmentTotalTimeout set to "
                + this.clientProperties.getGetOSPolicyAssignmentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getOSPolicyAssignmentSettings()
        .setRetrySettings(getOSPolicyAssignmentRetrySettingBuilder.build());
    RetrySettings.Builder listOSPolicyAssignmentsRetrySettingBuilder =
        clientSettingsBuilder.listOSPolicyAssignmentsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListOSPolicyAssignmentsInitialRetryDelay() != null) {
      listOSPolicyAssignmentsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListOSPolicyAssignmentsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentsInitialRetryDelay set to "
                + this.clientProperties.getListOSPolicyAssignmentsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListOSPolicyAssignmentsRetryDelayMultiplier() != null) {
      listOSPolicyAssignmentsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListOSPolicyAssignmentsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentsRetryDelayMultiplier set to "
                + this.clientProperties.getListOSPolicyAssignmentsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListOSPolicyAssignmentsMaxRetryDelay() != null) {
      listOSPolicyAssignmentsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListOSPolicyAssignmentsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentsMaxRetryDelay set to "
                + this.clientProperties.getListOSPolicyAssignmentsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListOSPolicyAssignmentsInitialRpcTimeout() != null) {
      listOSPolicyAssignmentsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListOSPolicyAssignmentsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentsInitialRpcTimeout set to "
                + this.clientProperties.getListOSPolicyAssignmentsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListOSPolicyAssignmentsRpcTimeoutMultiplier() != null) {
      listOSPolicyAssignmentsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListOSPolicyAssignmentsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListOSPolicyAssignmentsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListOSPolicyAssignmentsMaxRpcTimeout() != null) {
      listOSPolicyAssignmentsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListOSPolicyAssignmentsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentsMaxRpcTimeout set to "
                + this.clientProperties.getListOSPolicyAssignmentsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListOSPolicyAssignmentsTotalTimeout() != null) {
      listOSPolicyAssignmentsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListOSPolicyAssignmentsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentsTotalTimeout set to "
                + this.clientProperties.getListOSPolicyAssignmentsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listOSPolicyAssignmentsSettings()
        .setRetrySettings(listOSPolicyAssignmentsRetrySettingBuilder.build());
    RetrySettings.Builder listOSPolicyAssignmentRevisionsRetrySettingBuilder =
        clientSettingsBuilder
            .listOSPolicyAssignmentRevisionsSettings()
            .getRetrySettings()
            .toBuilder();
    if (this.clientProperties.getListOSPolicyAssignmentRevisionsInitialRetryDelay() != null) {
      listOSPolicyAssignmentRevisionsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListOSPolicyAssignmentRevisionsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentRevisionsInitialRetryDelay set to "
                + this.clientProperties.getListOSPolicyAssignmentRevisionsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListOSPolicyAssignmentRevisionsRetryDelayMultiplier() != null) {
      listOSPolicyAssignmentRevisionsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListOSPolicyAssignmentRevisionsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentRevisionsRetryDelayMultiplier set to "
                + this.clientProperties.getListOSPolicyAssignmentRevisionsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListOSPolicyAssignmentRevisionsMaxRetryDelay() != null) {
      listOSPolicyAssignmentRevisionsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListOSPolicyAssignmentRevisionsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentRevisionsMaxRetryDelay set to "
                + this.clientProperties.getListOSPolicyAssignmentRevisionsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListOSPolicyAssignmentRevisionsInitialRpcTimeout() != null) {
      listOSPolicyAssignmentRevisionsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListOSPolicyAssignmentRevisionsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentRevisionsInitialRpcTimeout set to "
                + this.clientProperties.getListOSPolicyAssignmentRevisionsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListOSPolicyAssignmentRevisionsRpcTimeoutMultiplier() != null) {
      listOSPolicyAssignmentRevisionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListOSPolicyAssignmentRevisionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentRevisionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListOSPolicyAssignmentRevisionsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListOSPolicyAssignmentRevisionsMaxRpcTimeout() != null) {
      listOSPolicyAssignmentRevisionsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListOSPolicyAssignmentRevisionsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentRevisionsMaxRpcTimeout set to "
                + this.clientProperties.getListOSPolicyAssignmentRevisionsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListOSPolicyAssignmentRevisionsTotalTimeout() != null) {
      listOSPolicyAssignmentRevisionsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListOSPolicyAssignmentRevisionsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentRevisionsTotalTimeout set to "
                + this.clientProperties.getListOSPolicyAssignmentRevisionsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listOSPolicyAssignmentRevisionsSettings()
        .setRetrySettings(listOSPolicyAssignmentRevisionsRetrySettingBuilder.build());
    RetrySettings.Builder deleteOSPolicyAssignmentRetrySettingBuilder =
        clientSettingsBuilder.deleteOSPolicyAssignmentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteOSPolicyAssignmentInitialRetryDelay() != null) {
      deleteOSPolicyAssignmentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteOSPolicyAssignmentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteOSPolicyAssignmentInitialRetryDelay set to "
                + this.clientProperties.getDeleteOSPolicyAssignmentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteOSPolicyAssignmentRetryDelayMultiplier() != null) {
      deleteOSPolicyAssignmentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteOSPolicyAssignmentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteOSPolicyAssignmentRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteOSPolicyAssignmentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteOSPolicyAssignmentMaxRetryDelay() != null) {
      deleteOSPolicyAssignmentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteOSPolicyAssignmentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteOSPolicyAssignmentMaxRetryDelay set to "
                + this.clientProperties.getDeleteOSPolicyAssignmentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteOSPolicyAssignmentInitialRpcTimeout() != null) {
      deleteOSPolicyAssignmentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteOSPolicyAssignmentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteOSPolicyAssignmentInitialRpcTimeout set to "
                + this.clientProperties.getDeleteOSPolicyAssignmentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteOSPolicyAssignmentRpcTimeoutMultiplier() != null) {
      deleteOSPolicyAssignmentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteOSPolicyAssignmentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteOSPolicyAssignmentRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteOSPolicyAssignmentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteOSPolicyAssignmentMaxRpcTimeout() != null) {
      deleteOSPolicyAssignmentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteOSPolicyAssignmentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteOSPolicyAssignmentMaxRpcTimeout set to "
                + this.clientProperties.getDeleteOSPolicyAssignmentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteOSPolicyAssignmentTotalTimeout() != null) {
      deleteOSPolicyAssignmentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteOSPolicyAssignmentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteOSPolicyAssignmentTotalTimeout set to "
                + this.clientProperties.getDeleteOSPolicyAssignmentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteOSPolicyAssignmentSettings()
        .setRetrySettings(deleteOSPolicyAssignmentRetrySettingBuilder.build());
    RetrySettings.Builder getOSPolicyAssignmentReportRetrySettingBuilder =
        clientSettingsBuilder.getOSPolicyAssignmentReportSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetOSPolicyAssignmentReportInitialRetryDelay() != null) {
      getOSPolicyAssignmentReportRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetOSPolicyAssignmentReportInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOSPolicyAssignmentReportInitialRetryDelay set to "
                + this.clientProperties.getGetOSPolicyAssignmentReportInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetOSPolicyAssignmentReportRetryDelayMultiplier() != null) {
      getOSPolicyAssignmentReportRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetOSPolicyAssignmentReportRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOSPolicyAssignmentReportRetryDelayMultiplier set to "
                + this.clientProperties.getGetOSPolicyAssignmentReportRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetOSPolicyAssignmentReportMaxRetryDelay() != null) {
      getOSPolicyAssignmentReportRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetOSPolicyAssignmentReportMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOSPolicyAssignmentReportMaxRetryDelay set to "
                + this.clientProperties.getGetOSPolicyAssignmentReportMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetOSPolicyAssignmentReportInitialRpcTimeout() != null) {
      getOSPolicyAssignmentReportRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetOSPolicyAssignmentReportInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOSPolicyAssignmentReportInitialRpcTimeout set to "
                + this.clientProperties.getGetOSPolicyAssignmentReportInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetOSPolicyAssignmentReportRpcTimeoutMultiplier() != null) {
      getOSPolicyAssignmentReportRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetOSPolicyAssignmentReportRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOSPolicyAssignmentReportRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetOSPolicyAssignmentReportRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetOSPolicyAssignmentReportMaxRpcTimeout() != null) {
      getOSPolicyAssignmentReportRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetOSPolicyAssignmentReportMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOSPolicyAssignmentReportMaxRpcTimeout set to "
                + this.clientProperties.getGetOSPolicyAssignmentReportMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetOSPolicyAssignmentReportTotalTimeout() != null) {
      getOSPolicyAssignmentReportRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetOSPolicyAssignmentReportTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOSPolicyAssignmentReportTotalTimeout set to "
                + this.clientProperties.getGetOSPolicyAssignmentReportTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getOSPolicyAssignmentReportSettings()
        .setRetrySettings(getOSPolicyAssignmentReportRetrySettingBuilder.build());
    RetrySettings.Builder listOSPolicyAssignmentReportsRetrySettingBuilder =
        clientSettingsBuilder
            .listOSPolicyAssignmentReportsSettings()
            .getRetrySettings()
            .toBuilder();
    if (this.clientProperties.getListOSPolicyAssignmentReportsInitialRetryDelay() != null) {
      listOSPolicyAssignmentReportsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListOSPolicyAssignmentReportsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentReportsInitialRetryDelay set to "
                + this.clientProperties.getListOSPolicyAssignmentReportsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListOSPolicyAssignmentReportsRetryDelayMultiplier() != null) {
      listOSPolicyAssignmentReportsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListOSPolicyAssignmentReportsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentReportsRetryDelayMultiplier set to "
                + this.clientProperties.getListOSPolicyAssignmentReportsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListOSPolicyAssignmentReportsMaxRetryDelay() != null) {
      listOSPolicyAssignmentReportsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListOSPolicyAssignmentReportsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentReportsMaxRetryDelay set to "
                + this.clientProperties.getListOSPolicyAssignmentReportsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListOSPolicyAssignmentReportsInitialRpcTimeout() != null) {
      listOSPolicyAssignmentReportsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListOSPolicyAssignmentReportsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentReportsInitialRpcTimeout set to "
                + this.clientProperties.getListOSPolicyAssignmentReportsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListOSPolicyAssignmentReportsRpcTimeoutMultiplier() != null) {
      listOSPolicyAssignmentReportsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListOSPolicyAssignmentReportsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentReportsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListOSPolicyAssignmentReportsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListOSPolicyAssignmentReportsMaxRpcTimeout() != null) {
      listOSPolicyAssignmentReportsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListOSPolicyAssignmentReportsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentReportsMaxRpcTimeout set to "
                + this.clientProperties.getListOSPolicyAssignmentReportsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListOSPolicyAssignmentReportsTotalTimeout() != null) {
      listOSPolicyAssignmentReportsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListOSPolicyAssignmentReportsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOSPolicyAssignmentReportsTotalTimeout set to "
                + this.clientProperties.getListOSPolicyAssignmentReportsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listOSPolicyAssignmentReportsSettings()
        .setRetrySettings(listOSPolicyAssignmentReportsRetrySettingBuilder.build());
    RetrySettings.Builder getInventoryRetrySettingBuilder =
        clientSettingsBuilder.getInventorySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetInventoryInitialRetryDelay() != null) {
      getInventoryRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetInventoryInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInventoryInitialRetryDelay set to "
                + this.clientProperties.getGetInventoryInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetInventoryRetryDelayMultiplier() != null) {
      getInventoryRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetInventoryRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInventoryRetryDelayMultiplier set to "
                + this.clientProperties.getGetInventoryRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetInventoryMaxRetryDelay() != null) {
      getInventoryRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetInventoryMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInventoryMaxRetryDelay set to "
                + this.clientProperties.getGetInventoryMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetInventoryInitialRpcTimeout() != null) {
      getInventoryRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetInventoryInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInventoryInitialRpcTimeout set to "
                + this.clientProperties.getGetInventoryInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetInventoryRpcTimeoutMultiplier() != null) {
      getInventoryRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetInventoryRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInventoryRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetInventoryRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetInventoryMaxRpcTimeout() != null) {
      getInventoryRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetInventoryMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInventoryMaxRpcTimeout set to "
                + this.clientProperties.getGetInventoryMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetInventoryTotalTimeout() != null) {
      getInventoryRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetInventoryTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInventoryTotalTimeout set to "
                + this.clientProperties.getGetInventoryTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getInventorySettings()
        .setRetrySettings(getInventoryRetrySettingBuilder.build());
    RetrySettings.Builder listInventoriesRetrySettingBuilder =
        clientSettingsBuilder.listInventoriesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListInventoriesInitialRetryDelay() != null) {
      listInventoriesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListInventoriesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInventoriesInitialRetryDelay set to "
                + this.clientProperties.getListInventoriesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListInventoriesRetryDelayMultiplier() != null) {
      listInventoriesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListInventoriesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInventoriesRetryDelayMultiplier set to "
                + this.clientProperties.getListInventoriesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListInventoriesMaxRetryDelay() != null) {
      listInventoriesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListInventoriesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInventoriesMaxRetryDelay set to "
                + this.clientProperties.getListInventoriesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListInventoriesInitialRpcTimeout() != null) {
      listInventoriesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListInventoriesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInventoriesInitialRpcTimeout set to "
                + this.clientProperties.getListInventoriesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListInventoriesRpcTimeoutMultiplier() != null) {
      listInventoriesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListInventoriesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInventoriesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListInventoriesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListInventoriesMaxRpcTimeout() != null) {
      listInventoriesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListInventoriesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInventoriesMaxRpcTimeout set to "
                + this.clientProperties.getListInventoriesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListInventoriesTotalTimeout() != null) {
      listInventoriesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListInventoriesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInventoriesTotalTimeout set to "
                + this.clientProperties.getListInventoriesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listInventoriesSettings()
        .setRetrySettings(listInventoriesRetrySettingBuilder.build());
    RetrySettings.Builder getVulnerabilityReportRetrySettingBuilder =
        clientSettingsBuilder.getVulnerabilityReportSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetVulnerabilityReportInitialRetryDelay() != null) {
      getVulnerabilityReportRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetVulnerabilityReportInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetVulnerabilityReportInitialRetryDelay set to "
                + this.clientProperties.getGetVulnerabilityReportInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetVulnerabilityReportRetryDelayMultiplier() != null) {
      getVulnerabilityReportRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetVulnerabilityReportRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetVulnerabilityReportRetryDelayMultiplier set to "
                + this.clientProperties.getGetVulnerabilityReportRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetVulnerabilityReportMaxRetryDelay() != null) {
      getVulnerabilityReportRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetVulnerabilityReportMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetVulnerabilityReportMaxRetryDelay set to "
                + this.clientProperties.getGetVulnerabilityReportMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetVulnerabilityReportInitialRpcTimeout() != null) {
      getVulnerabilityReportRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetVulnerabilityReportInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetVulnerabilityReportInitialRpcTimeout set to "
                + this.clientProperties.getGetVulnerabilityReportInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetVulnerabilityReportRpcTimeoutMultiplier() != null) {
      getVulnerabilityReportRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetVulnerabilityReportRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetVulnerabilityReportRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetVulnerabilityReportRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetVulnerabilityReportMaxRpcTimeout() != null) {
      getVulnerabilityReportRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetVulnerabilityReportMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetVulnerabilityReportMaxRpcTimeout set to "
                + this.clientProperties.getGetVulnerabilityReportMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetVulnerabilityReportTotalTimeout() != null) {
      getVulnerabilityReportRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetVulnerabilityReportTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetVulnerabilityReportTotalTimeout set to "
                + this.clientProperties.getGetVulnerabilityReportTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getVulnerabilityReportSettings()
        .setRetrySettings(getVulnerabilityReportRetrySettingBuilder.build());
    RetrySettings.Builder listVulnerabilityReportsRetrySettingBuilder =
        clientSettingsBuilder.listVulnerabilityReportsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListVulnerabilityReportsInitialRetryDelay() != null) {
      listVulnerabilityReportsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListVulnerabilityReportsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListVulnerabilityReportsInitialRetryDelay set to "
                + this.clientProperties.getListVulnerabilityReportsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListVulnerabilityReportsRetryDelayMultiplier() != null) {
      listVulnerabilityReportsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListVulnerabilityReportsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListVulnerabilityReportsRetryDelayMultiplier set to "
                + this.clientProperties.getListVulnerabilityReportsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListVulnerabilityReportsMaxRetryDelay() != null) {
      listVulnerabilityReportsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListVulnerabilityReportsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListVulnerabilityReportsMaxRetryDelay set to "
                + this.clientProperties.getListVulnerabilityReportsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListVulnerabilityReportsInitialRpcTimeout() != null) {
      listVulnerabilityReportsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListVulnerabilityReportsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListVulnerabilityReportsInitialRpcTimeout set to "
                + this.clientProperties.getListVulnerabilityReportsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListVulnerabilityReportsRpcTimeoutMultiplier() != null) {
      listVulnerabilityReportsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListVulnerabilityReportsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListVulnerabilityReportsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListVulnerabilityReportsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListVulnerabilityReportsMaxRpcTimeout() != null) {
      listVulnerabilityReportsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListVulnerabilityReportsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListVulnerabilityReportsMaxRpcTimeout set to "
                + this.clientProperties.getListVulnerabilityReportsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListVulnerabilityReportsTotalTimeout() != null) {
      listVulnerabilityReportsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListVulnerabilityReportsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListVulnerabilityReportsTotalTimeout set to "
                + this.clientProperties.getListVulnerabilityReportsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listVulnerabilityReportsSettings()
        .setRetrySettings(listVulnerabilityReportsRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public OsConfigZonalServiceClient osConfigZonalServiceClient(
      OsConfigZonalServiceSettings osConfigZonalServiceSettings) throws IOException {
    return OsConfigZonalServiceClient.create(osConfigZonalServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-os-config-zonal-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
