/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.osconfig.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.osconfig.v1.OsConfigZonalServiceClient;
import com.google.cloud.osconfig.v1.OsConfigZonalServiceSettings;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link OsConfigZonalServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(OsConfigZonalServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.osconfig.v1.spring.auto.os-config-zonal-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(OsConfigZonalServiceSpringProperties.class)
public class OsConfigZonalServiceSpringAutoConfiguration {
  private final OsConfigZonalServiceSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER =
      LogFactory.getLog(OsConfigZonalServiceSpringAutoConfiguration.class);

  protected OsConfigZonalServiceSpringAutoConfiguration(
      OsConfigZonalServiceSpringProperties clientProperties,
      CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from OsConfigZonalService-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultOsConfigZonalServiceTransportChannelProvider() {
    return OsConfigZonalServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a OsConfigZonalServiceClient bean configured to use the default credentials provider
   * (obtained with osConfigZonalServiceCredentials()) and its default transport channel provider
   * (defaultOsConfigZonalServiceTransportChannelProvider()). It also configures the quota project
   * ID if provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in OsConfigZonalServiceSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   */
  @Bean
  @ConditionalOnMissingBean
  public OsConfigZonalServiceSettings osConfigZonalServiceSettings(
      @Qualifier("defaultOsConfigZonalServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    OsConfigZonalServiceSettings.Builder clientSettingsBuilder =
        OsConfigZonalServiceSettings.newBuilder()
            .setCredentialsProvider(this.credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          OsConfigZonalServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          OsConfigZonalServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings createOSPolicyAssignmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createOSPolicyAssignmentSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createOSPolicyAssignmentSettings()
          .setRetrySettings(createOSPolicyAssignmentRetrySettings);

      RetrySettings updateOSPolicyAssignmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateOSPolicyAssignmentSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateOSPolicyAssignmentSettings()
          .setRetrySettings(updateOSPolicyAssignmentRetrySettings);

      RetrySettings getOSPolicyAssignmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getOSPolicyAssignmentSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getOSPolicyAssignmentSettings()
          .setRetrySettings(getOSPolicyAssignmentRetrySettings);

      RetrySettings listOSPolicyAssignmentsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listOSPolicyAssignmentsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listOSPolicyAssignmentsSettings()
          .setRetrySettings(listOSPolicyAssignmentsRetrySettings);

      RetrySettings listOSPolicyAssignmentRevisionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listOSPolicyAssignmentRevisionsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listOSPolicyAssignmentRevisionsSettings()
          .setRetrySettings(listOSPolicyAssignmentRevisionsRetrySettings);

      RetrySettings deleteOSPolicyAssignmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteOSPolicyAssignmentSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteOSPolicyAssignmentSettings()
          .setRetrySettings(deleteOSPolicyAssignmentRetrySettings);

      RetrySettings getOSPolicyAssignmentReportRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getOSPolicyAssignmentReportSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getOSPolicyAssignmentReportSettings()
          .setRetrySettings(getOSPolicyAssignmentReportRetrySettings);

      RetrySettings listOSPolicyAssignmentReportsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listOSPolicyAssignmentReportsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listOSPolicyAssignmentReportsSettings()
          .setRetrySettings(listOSPolicyAssignmentReportsRetrySettings);

      RetrySettings getInventoryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getInventorySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getInventorySettings().setRetrySettings(getInventoryRetrySettings);

      RetrySettings listInventoriesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listInventoriesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listInventoriesSettings()
          .setRetrySettings(listInventoriesRetrySettings);

      RetrySettings getVulnerabilityReportRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getVulnerabilityReportSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getVulnerabilityReportSettings()
          .setRetrySettings(getVulnerabilityReportRetrySettings);

      RetrySettings listVulnerabilityReportsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listVulnerabilityReportsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listVulnerabilityReportsSettings()
          .setRetrySettings(listVulnerabilityReportsRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry createOSPolicyAssignmentRetry = clientProperties.getCreateOSPolicyAssignmentRetry();
    if (createOSPolicyAssignmentRetry != null) {
      RetrySettings createOSPolicyAssignmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createOSPolicyAssignmentSettings().getRetrySettings(),
              createOSPolicyAssignmentRetry);
      clientSettingsBuilder
          .createOSPolicyAssignmentSettings()
          .setRetrySettings(createOSPolicyAssignmentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createOSPolicyAssignment from properties.");
      }
    }
    Retry updateOSPolicyAssignmentRetry = clientProperties.getUpdateOSPolicyAssignmentRetry();
    if (updateOSPolicyAssignmentRetry != null) {
      RetrySettings updateOSPolicyAssignmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateOSPolicyAssignmentSettings().getRetrySettings(),
              updateOSPolicyAssignmentRetry);
      clientSettingsBuilder
          .updateOSPolicyAssignmentSettings()
          .setRetrySettings(updateOSPolicyAssignmentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateOSPolicyAssignment from properties.");
      }
    }
    Retry getOSPolicyAssignmentRetry = clientProperties.getGetOSPolicyAssignmentRetry();
    if (getOSPolicyAssignmentRetry != null) {
      RetrySettings getOSPolicyAssignmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getOSPolicyAssignmentSettings().getRetrySettings(),
              getOSPolicyAssignmentRetry);
      clientSettingsBuilder
          .getOSPolicyAssignmentSettings()
          .setRetrySettings(getOSPolicyAssignmentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getOSPolicyAssignment from properties.");
      }
    }
    Retry listOSPolicyAssignmentsRetry = clientProperties.getListOSPolicyAssignmentsRetry();
    if (listOSPolicyAssignmentsRetry != null) {
      RetrySettings listOSPolicyAssignmentsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listOSPolicyAssignmentsSettings().getRetrySettings(),
              listOSPolicyAssignmentsRetry);
      clientSettingsBuilder
          .listOSPolicyAssignmentsSettings()
          .setRetrySettings(listOSPolicyAssignmentsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listOSPolicyAssignments from properties.");
      }
    }
    Retry listOSPolicyAssignmentRevisionsRetry =
        clientProperties.getListOSPolicyAssignmentRevisionsRetry();
    if (listOSPolicyAssignmentRevisionsRetry != null) {
      RetrySettings listOSPolicyAssignmentRevisionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listOSPolicyAssignmentRevisionsSettings().getRetrySettings(),
              listOSPolicyAssignmentRevisionsRetry);
      clientSettingsBuilder
          .listOSPolicyAssignmentRevisionsSettings()
          .setRetrySettings(listOSPolicyAssignmentRevisionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listOSPolicyAssignmentRevisions from properties.");
      }
    }
    Retry deleteOSPolicyAssignmentRetry = clientProperties.getDeleteOSPolicyAssignmentRetry();
    if (deleteOSPolicyAssignmentRetry != null) {
      RetrySettings deleteOSPolicyAssignmentRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteOSPolicyAssignmentSettings().getRetrySettings(),
              deleteOSPolicyAssignmentRetry);
      clientSettingsBuilder
          .deleteOSPolicyAssignmentSettings()
          .setRetrySettings(deleteOSPolicyAssignmentRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteOSPolicyAssignment from properties.");
      }
    }
    Retry getOSPolicyAssignmentReportRetry = clientProperties.getGetOSPolicyAssignmentReportRetry();
    if (getOSPolicyAssignmentReportRetry != null) {
      RetrySettings getOSPolicyAssignmentReportRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getOSPolicyAssignmentReportSettings().getRetrySettings(),
              getOSPolicyAssignmentReportRetry);
      clientSettingsBuilder
          .getOSPolicyAssignmentReportSettings()
          .setRetrySettings(getOSPolicyAssignmentReportRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getOSPolicyAssignmentReport from properties.");
      }
    }
    Retry listOSPolicyAssignmentReportsRetry =
        clientProperties.getListOSPolicyAssignmentReportsRetry();
    if (listOSPolicyAssignmentReportsRetry != null) {
      RetrySettings listOSPolicyAssignmentReportsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listOSPolicyAssignmentReportsSettings().getRetrySettings(),
              listOSPolicyAssignmentReportsRetry);
      clientSettingsBuilder
          .listOSPolicyAssignmentReportsSettings()
          .setRetrySettings(listOSPolicyAssignmentReportsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listOSPolicyAssignmentReports from properties.");
      }
    }
    Retry getInventoryRetry = clientProperties.getGetInventoryRetry();
    if (getInventoryRetry != null) {
      RetrySettings getInventoryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getInventorySettings().getRetrySettings(), getInventoryRetry);
      clientSettingsBuilder.getInventorySettings().setRetrySettings(getInventoryRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getInventory from properties.");
      }
    }
    Retry listInventoriesRetry = clientProperties.getListInventoriesRetry();
    if (listInventoriesRetry != null) {
      RetrySettings listInventoriesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listInventoriesSettings().getRetrySettings(),
              listInventoriesRetry);
      clientSettingsBuilder
          .listInventoriesSettings()
          .setRetrySettings(listInventoriesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listInventories from properties.");
      }
    }
    Retry getVulnerabilityReportRetry = clientProperties.getGetVulnerabilityReportRetry();
    if (getVulnerabilityReportRetry != null) {
      RetrySettings getVulnerabilityReportRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getVulnerabilityReportSettings().getRetrySettings(),
              getVulnerabilityReportRetry);
      clientSettingsBuilder
          .getVulnerabilityReportSettings()
          .setRetrySettings(getVulnerabilityReportRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getVulnerabilityReport from properties.");
      }
    }
    Retry listVulnerabilityReportsRetry = clientProperties.getListVulnerabilityReportsRetry();
    if (listVulnerabilityReportsRetry != null) {
      RetrySettings listVulnerabilityReportsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listVulnerabilityReportsSettings().getRetrySettings(),
              listVulnerabilityReportsRetry);
      clientSettingsBuilder
          .listVulnerabilityReportsSettings()
          .setRetrySettings(listVulnerabilityReportsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listVulnerabilityReports from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public OsConfigZonalServiceClient osConfigZonalServiceClient(
      OsConfigZonalServiceSettings osConfigZonalServiceSettings) throws IOException {
    return OsConfigZonalServiceClient.create(osConfigZonalServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-os-config-zonal-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
