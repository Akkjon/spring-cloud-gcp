/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.monitoring.v3.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.monitoring.v3.ServiceMonitoringServiceClient;
import com.google.cloud.monitoring.v3.ServiceMonitoringServiceSettings;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ServiceMonitoringServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(ServiceMonitoringServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.monitoring.v3.service-monitoring-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(ServiceMonitoringServiceSpringProperties.class)
public class ServiceMonitoringServiceSpringAutoConfiguration {
  private final ServiceMonitoringServiceSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER =
      LogFactory.getLog(ServiceMonitoringServiceSpringAutoConfiguration.class);

  protected ServiceMonitoringServiceSpringAutoConfiguration(
      ServiceMonitoringServiceSpringProperties clientProperties,
      CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from ServiceMonitoringService-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean. The default is gRPC and will default to it
   * unless the useRest option is provided to use HTTP transport instead
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultServiceMonitoringServiceTransportChannelProvider")
  public TransportChannelProvider defaultServiceMonitoringServiceTransportChannelProvider() {
    return ServiceMonitoringServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ServiceMonitoringServiceSettings bean configured to use the default credentials
   * provider (obtained with serviceMonitoringServiceCredentials()) and its default transport
   * channel provider (defaultServiceMonitoringServiceTransportChannelProvider()). It also
   * configures the quota project ID if provided. It will configure an executor provider in case
   * there is more than one thread configured in the client
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in ServiceMonitoringServiceSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link ServiceMonitoringServiceSettings} bean configured with {@link
   *     TransportChannelProvider} bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public ServiceMonitoringServiceSettings serviceMonitoringServiceSettings(
      @Qualifier("defaultServiceMonitoringServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ServiceMonitoringServiceSettings.Builder clientSettingsBuilder =
        ServiceMonitoringServiceSettings.newBuilder();
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ServiceMonitoringServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings createServiceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createServiceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createServiceSettings().setRetrySettings(createServiceRetrySettings);

      RetrySettings getServiceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getServiceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getServiceSettings().setRetrySettings(getServiceRetrySettings);

      RetrySettings listServicesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listServicesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listServicesSettings().setRetrySettings(listServicesRetrySettings);

      RetrySettings updateServiceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateServiceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updateServiceSettings().setRetrySettings(updateServiceRetrySettings);

      RetrySettings deleteServiceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteServiceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.deleteServiceSettings().setRetrySettings(deleteServiceRetrySettings);

      RetrySettings createServiceLevelObjectiveRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createServiceLevelObjectiveSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createServiceLevelObjectiveSettings()
          .setRetrySettings(createServiceLevelObjectiveRetrySettings);

      RetrySettings getServiceLevelObjectiveRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getServiceLevelObjectiveSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getServiceLevelObjectiveSettings()
          .setRetrySettings(getServiceLevelObjectiveRetrySettings);

      RetrySettings listServiceLevelObjectivesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listServiceLevelObjectivesSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listServiceLevelObjectivesSettings()
          .setRetrySettings(listServiceLevelObjectivesRetrySettings);

      RetrySettings updateServiceLevelObjectiveRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateServiceLevelObjectiveSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateServiceLevelObjectiveSettings()
          .setRetrySettings(updateServiceLevelObjectiveRetrySettings);

      RetrySettings deleteServiceLevelObjectiveRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteServiceLevelObjectiveSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteServiceLevelObjectiveSettings()
          .setRetrySettings(deleteServiceLevelObjectiveRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry createServiceRetry = clientProperties.getCreateServiceRetry();
    if (createServiceRetry != null) {
      RetrySettings createServiceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createServiceSettings().getRetrySettings(), createServiceRetry);
      clientSettingsBuilder.createServiceSettings().setRetrySettings(createServiceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createService from properties.");
      }
    }
    Retry getServiceRetry = clientProperties.getGetServiceRetry();
    if (getServiceRetry != null) {
      RetrySettings getServiceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getServiceSettings().getRetrySettings(), getServiceRetry);
      clientSettingsBuilder.getServiceSettings().setRetrySettings(getServiceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getService from properties.");
      }
    }
    Retry listServicesRetry = clientProperties.getListServicesRetry();
    if (listServicesRetry != null) {
      RetrySettings listServicesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listServicesSettings().getRetrySettings(), listServicesRetry);
      clientSettingsBuilder.listServicesSettings().setRetrySettings(listServicesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listServices from properties.");
      }
    }
    Retry updateServiceRetry = clientProperties.getUpdateServiceRetry();
    if (updateServiceRetry != null) {
      RetrySettings updateServiceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateServiceSettings().getRetrySettings(), updateServiceRetry);
      clientSettingsBuilder.updateServiceSettings().setRetrySettings(updateServiceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateService from properties.");
      }
    }
    Retry deleteServiceRetry = clientProperties.getDeleteServiceRetry();
    if (deleteServiceRetry != null) {
      RetrySettings deleteServiceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteServiceSettings().getRetrySettings(), deleteServiceRetry);
      clientSettingsBuilder.deleteServiceSettings().setRetrySettings(deleteServiceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteService from properties.");
      }
    }
    Retry createServiceLevelObjectiveRetry = clientProperties.getCreateServiceLevelObjectiveRetry();
    if (createServiceLevelObjectiveRetry != null) {
      RetrySettings createServiceLevelObjectiveRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createServiceLevelObjectiveSettings().getRetrySettings(),
              createServiceLevelObjectiveRetry);
      clientSettingsBuilder
          .createServiceLevelObjectiveSettings()
          .setRetrySettings(createServiceLevelObjectiveRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createServiceLevelObjective from properties.");
      }
    }
    Retry getServiceLevelObjectiveRetry = clientProperties.getGetServiceLevelObjectiveRetry();
    if (getServiceLevelObjectiveRetry != null) {
      RetrySettings getServiceLevelObjectiveRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getServiceLevelObjectiveSettings().getRetrySettings(),
              getServiceLevelObjectiveRetry);
      clientSettingsBuilder
          .getServiceLevelObjectiveSettings()
          .setRetrySettings(getServiceLevelObjectiveRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getServiceLevelObjective from properties.");
      }
    }
    Retry listServiceLevelObjectivesRetry = clientProperties.getListServiceLevelObjectivesRetry();
    if (listServiceLevelObjectivesRetry != null) {
      RetrySettings listServiceLevelObjectivesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listServiceLevelObjectivesSettings().getRetrySettings(),
              listServiceLevelObjectivesRetry);
      clientSettingsBuilder
          .listServiceLevelObjectivesSettings()
          .setRetrySettings(listServiceLevelObjectivesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listServiceLevelObjectives from properties.");
      }
    }
    Retry updateServiceLevelObjectiveRetry = clientProperties.getUpdateServiceLevelObjectiveRetry();
    if (updateServiceLevelObjectiveRetry != null) {
      RetrySettings updateServiceLevelObjectiveRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateServiceLevelObjectiveSettings().getRetrySettings(),
              updateServiceLevelObjectiveRetry);
      clientSettingsBuilder
          .updateServiceLevelObjectiveSettings()
          .setRetrySettings(updateServiceLevelObjectiveRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateServiceLevelObjective from properties.");
      }
    }
    Retry deleteServiceLevelObjectiveRetry = clientProperties.getDeleteServiceLevelObjectiveRetry();
    if (deleteServiceLevelObjectiveRetry != null) {
      RetrySettings deleteServiceLevelObjectiveRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteServiceLevelObjectiveSettings().getRetrySettings(),
              deleteServiceLevelObjectiveRetry);
      clientSettingsBuilder
          .deleteServiceLevelObjectiveSettings()
          .setRetrySettings(deleteServiceLevelObjectiveRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteServiceLevelObjective from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a ServiceMonitoringServiceClient bean configured with
   * ServiceMonitoringServiceSettings.
   *
   * @param serviceMonitoringServiceSettings settings to configure an instance of client bean.
   * @return a {@link ServiceMonitoringServiceClient} bean configured with {@link
   *     ServiceMonitoringServiceSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public ServiceMonitoringServiceClient serviceMonitoringServiceClient(
      ServiceMonitoringServiceSettings serviceMonitoringServiceSettings) throws IOException {
    return ServiceMonitoringServiceClient.create(serviceMonitoringServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-service-monitoring-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
