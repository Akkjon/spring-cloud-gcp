/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.monitoring.v3.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.monitoring.v3.GroupServiceClient;
import com.google.cloud.monitoring.v3.GroupServiceSettings;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link GroupServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(GroupServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.monitoring.v3.group-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(GroupServiceSpringProperties.class)
public class GroupServiceSpringAutoConfiguration {
  private final GroupServiceSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER = LogFactory.getLog(GroupServiceSpringAutoConfiguration.class);

  protected GroupServiceSpringAutoConfiguration(
      GroupServiceSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from GroupService-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Provides a default transport channel provider bean. The default is gRPC and will default to it
   * unless the useRest option is provided to use HTTP transport instead
   *
   * @return a default transport channel provider.
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultGroupServiceTransportChannelProvider")
  public TransportChannelProvider defaultGroupServiceTransportChannelProvider() {
    return GroupServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a GroupServiceSettings bean configured to use the default credentials provider
   * (obtained with groupServiceCredentials()) and its default transport channel provider
   * (defaultGroupServiceTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in GroupServiceSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   *
   * @param defaultTransportChannelProvider TransportChannelProvider to use in the settings.
   * @return a {@link GroupServiceSettings} bean configured with {@link TransportChannelProvider}
   *     bean.
   */
  @Bean
  @ConditionalOnMissingBean
  public GroupServiceSettings groupServiceSettings(
      @Qualifier("defaultGroupServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    GroupServiceSettings.Builder clientSettingsBuilder = GroupServiceSettings.newBuilder();
    clientSettingsBuilder
        .setCredentialsProvider(this.credentialsProvider)
        .setTransportChannelProvider(defaultTransportChannelProvider)
        .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          GroupServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings listGroupsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listGroupsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listGroupsSettings().setRetrySettings(listGroupsRetrySettings);

      RetrySettings getGroupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getGroupSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getGroupSettings().setRetrySettings(getGroupRetrySettings);

      RetrySettings createGroupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createGroupSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createGroupSettings().setRetrySettings(createGroupRetrySettings);

      RetrySettings updateGroupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateGroupSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updateGroupSettings().setRetrySettings(updateGroupRetrySettings);

      RetrySettings deleteGroupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteGroupSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.deleteGroupSettings().setRetrySettings(deleteGroupRetrySettings);

      RetrySettings listGroupMembersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listGroupMembersSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listGroupMembersSettings()
          .setRetrySettings(listGroupMembersRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry listGroupsRetry = clientProperties.getListGroupsRetry();
    if (listGroupsRetry != null) {
      RetrySettings listGroupsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listGroupsSettings().getRetrySettings(), listGroupsRetry);
      clientSettingsBuilder.listGroupsSettings().setRetrySettings(listGroupsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listGroups from properties.");
      }
    }
    Retry getGroupRetry = clientProperties.getGetGroupRetry();
    if (getGroupRetry != null) {
      RetrySettings getGroupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getGroupSettings().getRetrySettings(), getGroupRetry);
      clientSettingsBuilder.getGroupSettings().setRetrySettings(getGroupRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getGroup from properties.");
      }
    }
    Retry createGroupRetry = clientProperties.getCreateGroupRetry();
    if (createGroupRetry != null) {
      RetrySettings createGroupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createGroupSettings().getRetrySettings(), createGroupRetry);
      clientSettingsBuilder.createGroupSettings().setRetrySettings(createGroupRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createGroup from properties.");
      }
    }
    Retry updateGroupRetry = clientProperties.getUpdateGroupRetry();
    if (updateGroupRetry != null) {
      RetrySettings updateGroupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateGroupSettings().getRetrySettings(), updateGroupRetry);
      clientSettingsBuilder.updateGroupSettings().setRetrySettings(updateGroupRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateGroup from properties.");
      }
    }
    Retry deleteGroupRetry = clientProperties.getDeleteGroupRetry();
    if (deleteGroupRetry != null) {
      RetrySettings deleteGroupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteGroupSettings().getRetrySettings(), deleteGroupRetry);
      clientSettingsBuilder.deleteGroupSettings().setRetrySettings(deleteGroupRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteGroup from properties.");
      }
    }
    Retry listGroupMembersRetry = clientProperties.getListGroupMembersRetry();
    if (listGroupMembersRetry != null) {
      RetrySettings listGroupMembersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listGroupMembersSettings().getRetrySettings(),
              listGroupMembersRetry);
      clientSettingsBuilder
          .listGroupMembersSettings()
          .setRetrySettings(listGroupMembersRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listGroupMembers from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /**
   * Provides a GroupServiceClient bean configured with GroupServiceSettings.
   *
   * @param groupServiceSettings settings to configure an instance of client bean.
   * @return a {@link GroupServiceClient} bean configured with {@link GroupServiceSettings}
   */
  @Bean
  @ConditionalOnMissingBean
  public GroupServiceClient groupServiceClient(GroupServiceSettings groupServiceSettings)
      throws IOException {
    return GroupServiceClient.create(groupServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-group-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
