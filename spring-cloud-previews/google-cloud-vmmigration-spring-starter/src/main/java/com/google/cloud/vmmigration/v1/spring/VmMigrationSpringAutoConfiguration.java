/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.vmmigration.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import com.google.cloud.vmmigration.v1.VmMigrationClient;
import com.google.cloud.vmmigration.v1.VmMigrationSettings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link VmMigrationClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(VmMigrationClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.vmmigration.v1.spring.auto.vm-migration.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(VmMigrationSpringProperties.class)
public class VmMigrationSpringAutoConfiguration {
  private final VmMigrationSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER = LogFactory.getLog(VmMigrationSpringAutoConfiguration.class);

  protected VmMigrationSpringAutoConfiguration(
      VmMigrationSpringProperties clientProperties, CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from VmMigration-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultVmMigrationTransportChannelProvider() {
    return VmMigrationSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a VmMigrationClient bean configured to use the default credentials provider (obtained
   * with vmMigrationCredentials()) and its default transport channel provider
   * (defaultVmMigrationTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in VmMigrationSpringProperties. Method-level properties will take precedence over service-level
   * properties if available, and client library defaults will be used if neither are specified.
   */
  @Bean
  @ConditionalOnMissingBean
  public VmMigrationSettings vmMigrationSettings(
      @Qualifier("defaultVmMigrationTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    VmMigrationSettings.Builder clientSettingsBuilder =
        VmMigrationSettings.newBuilder()
            .setCredentialsProvider(this.credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          VmMigrationSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          VmMigrationSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings listSourcesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listSourcesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listSourcesSettings().setRetrySettings(listSourcesRetrySettings);

      RetrySettings getSourceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getSourceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getSourceSettings().setRetrySettings(getSourceRetrySettings);

      RetrySettings createSourceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createSourceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createSourceSettings().setRetrySettings(createSourceRetrySettings);

      RetrySettings updateSourceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateSourceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updateSourceSettings().setRetrySettings(updateSourceRetrySettings);

      RetrySettings deleteSourceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteSourceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.deleteSourceSettings().setRetrySettings(deleteSourceRetrySettings);

      RetrySettings fetchInventoryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchInventorySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.fetchInventorySettings().setRetrySettings(fetchInventoryRetrySettings);

      RetrySettings listUtilizationReportsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listUtilizationReportsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listUtilizationReportsSettings()
          .setRetrySettings(listUtilizationReportsRetrySettings);

      RetrySettings getUtilizationReportRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getUtilizationReportSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getUtilizationReportSettings()
          .setRetrySettings(getUtilizationReportRetrySettings);

      RetrySettings createUtilizationReportRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createUtilizationReportSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createUtilizationReportSettings()
          .setRetrySettings(createUtilizationReportRetrySettings);

      RetrySettings deleteUtilizationReportRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteUtilizationReportSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteUtilizationReportSettings()
          .setRetrySettings(deleteUtilizationReportRetrySettings);

      RetrySettings listDatacenterConnectorsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listDatacenterConnectorsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listDatacenterConnectorsSettings()
          .setRetrySettings(listDatacenterConnectorsRetrySettings);

      RetrySettings getDatacenterConnectorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getDatacenterConnectorSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getDatacenterConnectorSettings()
          .setRetrySettings(getDatacenterConnectorRetrySettings);

      RetrySettings createDatacenterConnectorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createDatacenterConnectorSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createDatacenterConnectorSettings()
          .setRetrySettings(createDatacenterConnectorRetrySettings);

      RetrySettings deleteDatacenterConnectorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteDatacenterConnectorSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteDatacenterConnectorSettings()
          .setRetrySettings(deleteDatacenterConnectorRetrySettings);

      RetrySettings upgradeApplianceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.upgradeApplianceSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .upgradeApplianceSettings()
          .setRetrySettings(upgradeApplianceRetrySettings);

      RetrySettings createMigratingVmRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createMigratingVmSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createMigratingVmSettings()
          .setRetrySettings(createMigratingVmRetrySettings);

      RetrySettings listMigratingVmsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listMigratingVmsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listMigratingVmsSettings()
          .setRetrySettings(listMigratingVmsRetrySettings);

      RetrySettings getMigratingVmRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getMigratingVmSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getMigratingVmSettings().setRetrySettings(getMigratingVmRetrySettings);

      RetrySettings updateMigratingVmRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateMigratingVmSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateMigratingVmSettings()
          .setRetrySettings(updateMigratingVmRetrySettings);

      RetrySettings deleteMigratingVmRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteMigratingVmSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteMigratingVmSettings()
          .setRetrySettings(deleteMigratingVmRetrySettings);

      RetrySettings startMigrationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.startMigrationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.startMigrationSettings().setRetrySettings(startMigrationRetrySettings);

      RetrySettings resumeMigrationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.resumeMigrationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .resumeMigrationSettings()
          .setRetrySettings(resumeMigrationRetrySettings);

      RetrySettings pauseMigrationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.pauseMigrationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.pauseMigrationSettings().setRetrySettings(pauseMigrationRetrySettings);

      RetrySettings finalizeMigrationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.finalizeMigrationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .finalizeMigrationSettings()
          .setRetrySettings(finalizeMigrationRetrySettings);

      RetrySettings createCloneJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createCloneJobSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createCloneJobSettings().setRetrySettings(createCloneJobRetrySettings);

      RetrySettings cancelCloneJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.cancelCloneJobSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.cancelCloneJobSettings().setRetrySettings(cancelCloneJobRetrySettings);

      RetrySettings listCloneJobsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listCloneJobsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listCloneJobsSettings().setRetrySettings(listCloneJobsRetrySettings);

      RetrySettings getCloneJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getCloneJobSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getCloneJobSettings().setRetrySettings(getCloneJobRetrySettings);

      RetrySettings createCutoverJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createCutoverJobSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createCutoverJobSettings()
          .setRetrySettings(createCutoverJobRetrySettings);

      RetrySettings cancelCutoverJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.cancelCutoverJobSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .cancelCutoverJobSettings()
          .setRetrySettings(cancelCutoverJobRetrySettings);

      RetrySettings listCutoverJobsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listCutoverJobsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listCutoverJobsSettings()
          .setRetrySettings(listCutoverJobsRetrySettings);

      RetrySettings getCutoverJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getCutoverJobSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getCutoverJobSettings().setRetrySettings(getCutoverJobRetrySettings);

      RetrySettings listGroupsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listGroupsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.listGroupsSettings().setRetrySettings(listGroupsRetrySettings);

      RetrySettings getGroupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getGroupSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getGroupSettings().setRetrySettings(getGroupRetrySettings);

      RetrySettings createGroupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createGroupSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.createGroupSettings().setRetrySettings(createGroupRetrySettings);

      RetrySettings updateGroupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateGroupSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.updateGroupSettings().setRetrySettings(updateGroupRetrySettings);

      RetrySettings deleteGroupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteGroupSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.deleteGroupSettings().setRetrySettings(deleteGroupRetrySettings);

      RetrySettings addGroupMigrationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.addGroupMigrationSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .addGroupMigrationSettings()
          .setRetrySettings(addGroupMigrationRetrySettings);

      RetrySettings removeGroupMigrationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.removeGroupMigrationSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .removeGroupMigrationSettings()
          .setRetrySettings(removeGroupMigrationRetrySettings);

      RetrySettings listTargetProjectsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listTargetProjectsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listTargetProjectsSettings()
          .setRetrySettings(listTargetProjectsRetrySettings);

      RetrySettings getTargetProjectRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getTargetProjectSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getTargetProjectSettings()
          .setRetrySettings(getTargetProjectRetrySettings);

      RetrySettings createTargetProjectRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createTargetProjectSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createTargetProjectSettings()
          .setRetrySettings(createTargetProjectRetrySettings);

      RetrySettings updateTargetProjectRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateTargetProjectSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateTargetProjectSettings()
          .setRetrySettings(updateTargetProjectRetrySettings);

      RetrySettings deleteTargetProjectRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteTargetProjectSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteTargetProjectSettings()
          .setRetrySettings(deleteTargetProjectRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry listSourcesRetry = clientProperties.getListSourcesRetry();
    if (listSourcesRetry != null) {
      RetrySettings listSourcesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listSourcesSettings().getRetrySettings(), listSourcesRetry);
      clientSettingsBuilder.listSourcesSettings().setRetrySettings(listSourcesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listSources from properties.");
      }
    }
    Retry getSourceRetry = clientProperties.getGetSourceRetry();
    if (getSourceRetry != null) {
      RetrySettings getSourceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getSourceSettings().getRetrySettings(), getSourceRetry);
      clientSettingsBuilder.getSourceSettings().setRetrySettings(getSourceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getSource from properties.");
      }
    }
    Retry createSourceRetry = clientProperties.getCreateSourceRetry();
    if (createSourceRetry != null) {
      RetrySettings createSourceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createSourceSettings().getRetrySettings(), createSourceRetry);
      clientSettingsBuilder.createSourceSettings().setRetrySettings(createSourceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createSource from properties.");
      }
    }
    Retry updateSourceRetry = clientProperties.getUpdateSourceRetry();
    if (updateSourceRetry != null) {
      RetrySettings updateSourceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateSourceSettings().getRetrySettings(), updateSourceRetry);
      clientSettingsBuilder.updateSourceSettings().setRetrySettings(updateSourceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateSource from properties.");
      }
    }
    Retry deleteSourceRetry = clientProperties.getDeleteSourceRetry();
    if (deleteSourceRetry != null) {
      RetrySettings deleteSourceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteSourceSettings().getRetrySettings(), deleteSourceRetry);
      clientSettingsBuilder.deleteSourceSettings().setRetrySettings(deleteSourceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteSource from properties.");
      }
    }
    Retry fetchInventoryRetry = clientProperties.getFetchInventoryRetry();
    if (fetchInventoryRetry != null) {
      RetrySettings fetchInventoryRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.fetchInventorySettings().getRetrySettings(),
              fetchInventoryRetry);
      clientSettingsBuilder.fetchInventorySettings().setRetrySettings(fetchInventoryRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for fetchInventory from properties.");
      }
    }
    Retry listUtilizationReportsRetry = clientProperties.getListUtilizationReportsRetry();
    if (listUtilizationReportsRetry != null) {
      RetrySettings listUtilizationReportsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listUtilizationReportsSettings().getRetrySettings(),
              listUtilizationReportsRetry);
      clientSettingsBuilder
          .listUtilizationReportsSettings()
          .setRetrySettings(listUtilizationReportsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listUtilizationReports from properties.");
      }
    }
    Retry getUtilizationReportRetry = clientProperties.getGetUtilizationReportRetry();
    if (getUtilizationReportRetry != null) {
      RetrySettings getUtilizationReportRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getUtilizationReportSettings().getRetrySettings(),
              getUtilizationReportRetry);
      clientSettingsBuilder
          .getUtilizationReportSettings()
          .setRetrySettings(getUtilizationReportRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getUtilizationReport from properties.");
      }
    }
    Retry createUtilizationReportRetry = clientProperties.getCreateUtilizationReportRetry();
    if (createUtilizationReportRetry != null) {
      RetrySettings createUtilizationReportRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createUtilizationReportSettings().getRetrySettings(),
              createUtilizationReportRetry);
      clientSettingsBuilder
          .createUtilizationReportSettings()
          .setRetrySettings(createUtilizationReportRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createUtilizationReport from properties.");
      }
    }
    Retry deleteUtilizationReportRetry = clientProperties.getDeleteUtilizationReportRetry();
    if (deleteUtilizationReportRetry != null) {
      RetrySettings deleteUtilizationReportRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteUtilizationReportSettings().getRetrySettings(),
              deleteUtilizationReportRetry);
      clientSettingsBuilder
          .deleteUtilizationReportSettings()
          .setRetrySettings(deleteUtilizationReportRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteUtilizationReport from properties.");
      }
    }
    Retry listDatacenterConnectorsRetry = clientProperties.getListDatacenterConnectorsRetry();
    if (listDatacenterConnectorsRetry != null) {
      RetrySettings listDatacenterConnectorsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listDatacenterConnectorsSettings().getRetrySettings(),
              listDatacenterConnectorsRetry);
      clientSettingsBuilder
          .listDatacenterConnectorsSettings()
          .setRetrySettings(listDatacenterConnectorsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listDatacenterConnectors from properties.");
      }
    }
    Retry getDatacenterConnectorRetry = clientProperties.getGetDatacenterConnectorRetry();
    if (getDatacenterConnectorRetry != null) {
      RetrySettings getDatacenterConnectorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getDatacenterConnectorSettings().getRetrySettings(),
              getDatacenterConnectorRetry);
      clientSettingsBuilder
          .getDatacenterConnectorSettings()
          .setRetrySettings(getDatacenterConnectorRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getDatacenterConnector from properties.");
      }
    }
    Retry createDatacenterConnectorRetry = clientProperties.getCreateDatacenterConnectorRetry();
    if (createDatacenterConnectorRetry != null) {
      RetrySettings createDatacenterConnectorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createDatacenterConnectorSettings().getRetrySettings(),
              createDatacenterConnectorRetry);
      clientSettingsBuilder
          .createDatacenterConnectorSettings()
          .setRetrySettings(createDatacenterConnectorRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createDatacenterConnector from properties.");
      }
    }
    Retry deleteDatacenterConnectorRetry = clientProperties.getDeleteDatacenterConnectorRetry();
    if (deleteDatacenterConnectorRetry != null) {
      RetrySettings deleteDatacenterConnectorRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteDatacenterConnectorSettings().getRetrySettings(),
              deleteDatacenterConnectorRetry);
      clientSettingsBuilder
          .deleteDatacenterConnectorSettings()
          .setRetrySettings(deleteDatacenterConnectorRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteDatacenterConnector from properties.");
      }
    }
    Retry upgradeApplianceRetry = clientProperties.getUpgradeApplianceRetry();
    if (upgradeApplianceRetry != null) {
      RetrySettings upgradeApplianceRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.upgradeApplianceSettings().getRetrySettings(),
              upgradeApplianceRetry);
      clientSettingsBuilder
          .upgradeApplianceSettings()
          .setRetrySettings(upgradeApplianceRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for upgradeAppliance from properties.");
      }
    }
    Retry createMigratingVmRetry = clientProperties.getCreateMigratingVmRetry();
    if (createMigratingVmRetry != null) {
      RetrySettings createMigratingVmRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createMigratingVmSettings().getRetrySettings(),
              createMigratingVmRetry);
      clientSettingsBuilder
          .createMigratingVmSettings()
          .setRetrySettings(createMigratingVmRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createMigratingVm from properties.");
      }
    }
    Retry listMigratingVmsRetry = clientProperties.getListMigratingVmsRetry();
    if (listMigratingVmsRetry != null) {
      RetrySettings listMigratingVmsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listMigratingVmsSettings().getRetrySettings(),
              listMigratingVmsRetry);
      clientSettingsBuilder
          .listMigratingVmsSettings()
          .setRetrySettings(listMigratingVmsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listMigratingVms from properties.");
      }
    }
    Retry getMigratingVmRetry = clientProperties.getGetMigratingVmRetry();
    if (getMigratingVmRetry != null) {
      RetrySettings getMigratingVmRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getMigratingVmSettings().getRetrySettings(),
              getMigratingVmRetry);
      clientSettingsBuilder.getMigratingVmSettings().setRetrySettings(getMigratingVmRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getMigratingVm from properties.");
      }
    }
    Retry updateMigratingVmRetry = clientProperties.getUpdateMigratingVmRetry();
    if (updateMigratingVmRetry != null) {
      RetrySettings updateMigratingVmRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateMigratingVmSettings().getRetrySettings(),
              updateMigratingVmRetry);
      clientSettingsBuilder
          .updateMigratingVmSettings()
          .setRetrySettings(updateMigratingVmRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateMigratingVm from properties.");
      }
    }
    Retry deleteMigratingVmRetry = clientProperties.getDeleteMigratingVmRetry();
    if (deleteMigratingVmRetry != null) {
      RetrySettings deleteMigratingVmRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteMigratingVmSettings().getRetrySettings(),
              deleteMigratingVmRetry);
      clientSettingsBuilder
          .deleteMigratingVmSettings()
          .setRetrySettings(deleteMigratingVmRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteMigratingVm from properties.");
      }
    }
    Retry startMigrationRetry = clientProperties.getStartMigrationRetry();
    if (startMigrationRetry != null) {
      RetrySettings startMigrationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.startMigrationSettings().getRetrySettings(),
              startMigrationRetry);
      clientSettingsBuilder.startMigrationSettings().setRetrySettings(startMigrationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for startMigration from properties.");
      }
    }
    Retry resumeMigrationRetry = clientProperties.getResumeMigrationRetry();
    if (resumeMigrationRetry != null) {
      RetrySettings resumeMigrationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.resumeMigrationSettings().getRetrySettings(),
              resumeMigrationRetry);
      clientSettingsBuilder
          .resumeMigrationSettings()
          .setRetrySettings(resumeMigrationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for resumeMigration from properties.");
      }
    }
    Retry pauseMigrationRetry = clientProperties.getPauseMigrationRetry();
    if (pauseMigrationRetry != null) {
      RetrySettings pauseMigrationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.pauseMigrationSettings().getRetrySettings(),
              pauseMigrationRetry);
      clientSettingsBuilder.pauseMigrationSettings().setRetrySettings(pauseMigrationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for pauseMigration from properties.");
      }
    }
    Retry finalizeMigrationRetry = clientProperties.getFinalizeMigrationRetry();
    if (finalizeMigrationRetry != null) {
      RetrySettings finalizeMigrationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.finalizeMigrationSettings().getRetrySettings(),
              finalizeMigrationRetry);
      clientSettingsBuilder
          .finalizeMigrationSettings()
          .setRetrySettings(finalizeMigrationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for finalizeMigration from properties.");
      }
    }
    Retry createCloneJobRetry = clientProperties.getCreateCloneJobRetry();
    if (createCloneJobRetry != null) {
      RetrySettings createCloneJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createCloneJobSettings().getRetrySettings(),
              createCloneJobRetry);
      clientSettingsBuilder.createCloneJobSettings().setRetrySettings(createCloneJobRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createCloneJob from properties.");
      }
    }
    Retry cancelCloneJobRetry = clientProperties.getCancelCloneJobRetry();
    if (cancelCloneJobRetry != null) {
      RetrySettings cancelCloneJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.cancelCloneJobSettings().getRetrySettings(),
              cancelCloneJobRetry);
      clientSettingsBuilder.cancelCloneJobSettings().setRetrySettings(cancelCloneJobRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for cancelCloneJob from properties.");
      }
    }
    Retry listCloneJobsRetry = clientProperties.getListCloneJobsRetry();
    if (listCloneJobsRetry != null) {
      RetrySettings listCloneJobsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listCloneJobsSettings().getRetrySettings(), listCloneJobsRetry);
      clientSettingsBuilder.listCloneJobsSettings().setRetrySettings(listCloneJobsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listCloneJobs from properties.");
      }
    }
    Retry getCloneJobRetry = clientProperties.getGetCloneJobRetry();
    if (getCloneJobRetry != null) {
      RetrySettings getCloneJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getCloneJobSettings().getRetrySettings(), getCloneJobRetry);
      clientSettingsBuilder.getCloneJobSettings().setRetrySettings(getCloneJobRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getCloneJob from properties.");
      }
    }
    Retry createCutoverJobRetry = clientProperties.getCreateCutoverJobRetry();
    if (createCutoverJobRetry != null) {
      RetrySettings createCutoverJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createCutoverJobSettings().getRetrySettings(),
              createCutoverJobRetry);
      clientSettingsBuilder
          .createCutoverJobSettings()
          .setRetrySettings(createCutoverJobRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createCutoverJob from properties.");
      }
    }
    Retry cancelCutoverJobRetry = clientProperties.getCancelCutoverJobRetry();
    if (cancelCutoverJobRetry != null) {
      RetrySettings cancelCutoverJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.cancelCutoverJobSettings().getRetrySettings(),
              cancelCutoverJobRetry);
      clientSettingsBuilder
          .cancelCutoverJobSettings()
          .setRetrySettings(cancelCutoverJobRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for cancelCutoverJob from properties.");
      }
    }
    Retry listCutoverJobsRetry = clientProperties.getListCutoverJobsRetry();
    if (listCutoverJobsRetry != null) {
      RetrySettings listCutoverJobsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listCutoverJobsSettings().getRetrySettings(),
              listCutoverJobsRetry);
      clientSettingsBuilder
          .listCutoverJobsSettings()
          .setRetrySettings(listCutoverJobsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listCutoverJobs from properties.");
      }
    }
    Retry getCutoverJobRetry = clientProperties.getGetCutoverJobRetry();
    if (getCutoverJobRetry != null) {
      RetrySettings getCutoverJobRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getCutoverJobSettings().getRetrySettings(), getCutoverJobRetry);
      clientSettingsBuilder.getCutoverJobSettings().setRetrySettings(getCutoverJobRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getCutoverJob from properties.");
      }
    }
    Retry listGroupsRetry = clientProperties.getListGroupsRetry();
    if (listGroupsRetry != null) {
      RetrySettings listGroupsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listGroupsSettings().getRetrySettings(), listGroupsRetry);
      clientSettingsBuilder.listGroupsSettings().setRetrySettings(listGroupsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for listGroups from properties.");
      }
    }
    Retry getGroupRetry = clientProperties.getGetGroupRetry();
    if (getGroupRetry != null) {
      RetrySettings getGroupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getGroupSettings().getRetrySettings(), getGroupRetry);
      clientSettingsBuilder.getGroupSettings().setRetrySettings(getGroupRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getGroup from properties.");
      }
    }
    Retry createGroupRetry = clientProperties.getCreateGroupRetry();
    if (createGroupRetry != null) {
      RetrySettings createGroupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createGroupSettings().getRetrySettings(), createGroupRetry);
      clientSettingsBuilder.createGroupSettings().setRetrySettings(createGroupRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for createGroup from properties.");
      }
    }
    Retry updateGroupRetry = clientProperties.getUpdateGroupRetry();
    if (updateGroupRetry != null) {
      RetrySettings updateGroupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateGroupSettings().getRetrySettings(), updateGroupRetry);
      clientSettingsBuilder.updateGroupSettings().setRetrySettings(updateGroupRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for updateGroup from properties.");
      }
    }
    Retry deleteGroupRetry = clientProperties.getDeleteGroupRetry();
    if (deleteGroupRetry != null) {
      RetrySettings deleteGroupRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteGroupSettings().getRetrySettings(), deleteGroupRetry);
      clientSettingsBuilder.deleteGroupSettings().setRetrySettings(deleteGroupRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for deleteGroup from properties.");
      }
    }
    Retry addGroupMigrationRetry = clientProperties.getAddGroupMigrationRetry();
    if (addGroupMigrationRetry != null) {
      RetrySettings addGroupMigrationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.addGroupMigrationSettings().getRetrySettings(),
              addGroupMigrationRetry);
      clientSettingsBuilder
          .addGroupMigrationSettings()
          .setRetrySettings(addGroupMigrationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for addGroupMigration from properties.");
      }
    }
    Retry removeGroupMigrationRetry = clientProperties.getRemoveGroupMigrationRetry();
    if (removeGroupMigrationRetry != null) {
      RetrySettings removeGroupMigrationRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.removeGroupMigrationSettings().getRetrySettings(),
              removeGroupMigrationRetry);
      clientSettingsBuilder
          .removeGroupMigrationSettings()
          .setRetrySettings(removeGroupMigrationRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for removeGroupMigration from properties.");
      }
    }
    Retry listTargetProjectsRetry = clientProperties.getListTargetProjectsRetry();
    if (listTargetProjectsRetry != null) {
      RetrySettings listTargetProjectsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listTargetProjectsSettings().getRetrySettings(),
              listTargetProjectsRetry);
      clientSettingsBuilder
          .listTargetProjectsSettings()
          .setRetrySettings(listTargetProjectsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listTargetProjects from properties.");
      }
    }
    Retry getTargetProjectRetry = clientProperties.getGetTargetProjectRetry();
    if (getTargetProjectRetry != null) {
      RetrySettings getTargetProjectRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getTargetProjectSettings().getRetrySettings(),
              getTargetProjectRetry);
      clientSettingsBuilder
          .getTargetProjectSettings()
          .setRetrySettings(getTargetProjectRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getTargetProject from properties.");
      }
    }
    Retry createTargetProjectRetry = clientProperties.getCreateTargetProjectRetry();
    if (createTargetProjectRetry != null) {
      RetrySettings createTargetProjectRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createTargetProjectSettings().getRetrySettings(),
              createTargetProjectRetry);
      clientSettingsBuilder
          .createTargetProjectSettings()
          .setRetrySettings(createTargetProjectRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createTargetProject from properties.");
      }
    }
    Retry updateTargetProjectRetry = clientProperties.getUpdateTargetProjectRetry();
    if (updateTargetProjectRetry != null) {
      RetrySettings updateTargetProjectRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateTargetProjectSettings().getRetrySettings(),
              updateTargetProjectRetry);
      clientSettingsBuilder
          .updateTargetProjectSettings()
          .setRetrySettings(updateTargetProjectRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateTargetProject from properties.");
      }
    }
    Retry deleteTargetProjectRetry = clientProperties.getDeleteTargetProjectRetry();
    if (deleteTargetProjectRetry != null) {
      RetrySettings deleteTargetProjectRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteTargetProjectSettings().getRetrySettings(),
              deleteTargetProjectRetry);
      clientSettingsBuilder
          .deleteTargetProjectSettings()
          .setRetrySettings(deleteTargetProjectRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteTargetProject from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public VmMigrationClient vmMigrationClient(VmMigrationSettings vmMigrationSettings)
      throws IOException {
    return VmMigrationClient.create(vmMigrationSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-vm-migration";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
