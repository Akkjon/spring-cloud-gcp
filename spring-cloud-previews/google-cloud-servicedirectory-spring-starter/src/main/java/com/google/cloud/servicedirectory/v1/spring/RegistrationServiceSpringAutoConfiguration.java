/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.servicedirectory.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.servicedirectory.v1.RegistrationServiceClient;
import com.google.cloud.servicedirectory.v1.RegistrationServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link RegistrationServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(RegistrationServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.servicedirectory.v1.spring.auto.registration-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({RegistrationServiceSpringProperties.class, GlobalProperties.class})
public class RegistrationServiceSpringAutoConfiguration {
  private final RegistrationServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(RegistrationServiceSpringAutoConfiguration.class);

  protected RegistrationServiceSpringAutoConfiguration(
      RegistrationServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider registrationServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from RegistrationService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultRegistrationServiceTransportChannelProvider() {
    return RegistrationServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a RegistrationServiceClient bean configured to use the default credentials provider
   * (obtained with registrationServiceCredentials()) and its default transport channel provider
   * (defaultRegistrationServiceTransportChannelProvider()). It also configures the quota project ID
   * if provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in RegistrationServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public RegistrationServiceSettings registrationServiceSettings(
      @Qualifier("registrationServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultRegistrationServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    RegistrationServiceSettings.Builder clientSettingsBuilder =
        RegistrationServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          RegistrationServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          RegistrationServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createNamespaceRetrySettingBuilder =
        clientSettingsBuilder.createNamespaceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateNamespaceInitialRetryDelay() != null) {
      createNamespaceRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateNamespaceInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNamespaceInitialRetryDelay set to "
                + this.clientProperties.getCreateNamespaceInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateNamespaceRetryDelayMultiplier() != null) {
      createNamespaceRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateNamespaceRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNamespaceRetryDelayMultiplier set to "
                + this.clientProperties.getCreateNamespaceRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateNamespaceMaxRetryDelay() != null) {
      createNamespaceRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateNamespaceMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNamespaceMaxRetryDelay set to "
                + this.clientProperties.getCreateNamespaceMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateNamespaceInitialRpcTimeout() != null) {
      createNamespaceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateNamespaceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNamespaceInitialRpcTimeout set to "
                + this.clientProperties.getCreateNamespaceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateNamespaceRpcTimeoutMultiplier() != null) {
      createNamespaceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateNamespaceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNamespaceRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateNamespaceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateNamespaceMaxRpcTimeout() != null) {
      createNamespaceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateNamespaceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNamespaceMaxRpcTimeout set to "
                + this.clientProperties.getCreateNamespaceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateNamespaceTotalTimeout() != null) {
      createNamespaceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateNamespaceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNamespaceTotalTimeout set to "
                + this.clientProperties.getCreateNamespaceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createNamespaceSettings()
        .setRetrySettings(createNamespaceRetrySettingBuilder.build());
    RetrySettings.Builder listNamespacesRetrySettingBuilder =
        clientSettingsBuilder.listNamespacesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListNamespacesInitialRetryDelay() != null) {
      listNamespacesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListNamespacesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNamespacesInitialRetryDelay set to "
                + this.clientProperties.getListNamespacesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListNamespacesRetryDelayMultiplier() != null) {
      listNamespacesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListNamespacesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNamespacesRetryDelayMultiplier set to "
                + this.clientProperties.getListNamespacesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListNamespacesMaxRetryDelay() != null) {
      listNamespacesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListNamespacesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNamespacesMaxRetryDelay set to "
                + this.clientProperties.getListNamespacesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListNamespacesInitialRpcTimeout() != null) {
      listNamespacesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListNamespacesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNamespacesInitialRpcTimeout set to "
                + this.clientProperties.getListNamespacesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListNamespacesRpcTimeoutMultiplier() != null) {
      listNamespacesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListNamespacesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNamespacesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListNamespacesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListNamespacesMaxRpcTimeout() != null) {
      listNamespacesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListNamespacesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNamespacesMaxRpcTimeout set to "
                + this.clientProperties.getListNamespacesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListNamespacesTotalTimeout() != null) {
      listNamespacesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListNamespacesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNamespacesTotalTimeout set to "
                + this.clientProperties.getListNamespacesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listNamespacesSettings()
        .setRetrySettings(listNamespacesRetrySettingBuilder.build());
    RetrySettings.Builder getNamespaceRetrySettingBuilder =
        clientSettingsBuilder.getNamespaceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetNamespaceInitialRetryDelay() != null) {
      getNamespaceRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetNamespaceInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNamespaceInitialRetryDelay set to "
                + this.clientProperties.getGetNamespaceInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetNamespaceRetryDelayMultiplier() != null) {
      getNamespaceRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetNamespaceRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNamespaceRetryDelayMultiplier set to "
                + this.clientProperties.getGetNamespaceRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetNamespaceMaxRetryDelay() != null) {
      getNamespaceRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetNamespaceMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNamespaceMaxRetryDelay set to "
                + this.clientProperties.getGetNamespaceMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetNamespaceInitialRpcTimeout() != null) {
      getNamespaceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetNamespaceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNamespaceInitialRpcTimeout set to "
                + this.clientProperties.getGetNamespaceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetNamespaceRpcTimeoutMultiplier() != null) {
      getNamespaceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetNamespaceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNamespaceRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetNamespaceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetNamespaceMaxRpcTimeout() != null) {
      getNamespaceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetNamespaceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNamespaceMaxRpcTimeout set to "
                + this.clientProperties.getGetNamespaceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetNamespaceTotalTimeout() != null) {
      getNamespaceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetNamespaceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNamespaceTotalTimeout set to "
                + this.clientProperties.getGetNamespaceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getNamespaceSettings()
        .setRetrySettings(getNamespaceRetrySettingBuilder.build());
    RetrySettings.Builder updateNamespaceRetrySettingBuilder =
        clientSettingsBuilder.updateNamespaceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateNamespaceInitialRetryDelay() != null) {
      updateNamespaceRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateNamespaceInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateNamespaceInitialRetryDelay set to "
                + this.clientProperties.getUpdateNamespaceInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateNamespaceRetryDelayMultiplier() != null) {
      updateNamespaceRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateNamespaceRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateNamespaceRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateNamespaceRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateNamespaceMaxRetryDelay() != null) {
      updateNamespaceRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateNamespaceMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateNamespaceMaxRetryDelay set to "
                + this.clientProperties.getUpdateNamespaceMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateNamespaceInitialRpcTimeout() != null) {
      updateNamespaceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateNamespaceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateNamespaceInitialRpcTimeout set to "
                + this.clientProperties.getUpdateNamespaceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateNamespaceRpcTimeoutMultiplier() != null) {
      updateNamespaceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateNamespaceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateNamespaceRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateNamespaceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateNamespaceMaxRpcTimeout() != null) {
      updateNamespaceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateNamespaceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateNamespaceMaxRpcTimeout set to "
                + this.clientProperties.getUpdateNamespaceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateNamespaceTotalTimeout() != null) {
      updateNamespaceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateNamespaceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateNamespaceTotalTimeout set to "
                + this.clientProperties.getUpdateNamespaceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateNamespaceSettings()
        .setRetrySettings(updateNamespaceRetrySettingBuilder.build());
    RetrySettings.Builder deleteNamespaceRetrySettingBuilder =
        clientSettingsBuilder.deleteNamespaceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteNamespaceInitialRetryDelay() != null) {
      deleteNamespaceRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteNamespaceInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNamespaceInitialRetryDelay set to "
                + this.clientProperties.getDeleteNamespaceInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteNamespaceRetryDelayMultiplier() != null) {
      deleteNamespaceRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteNamespaceRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNamespaceRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteNamespaceRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteNamespaceMaxRetryDelay() != null) {
      deleteNamespaceRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteNamespaceMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNamespaceMaxRetryDelay set to "
                + this.clientProperties.getDeleteNamespaceMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteNamespaceInitialRpcTimeout() != null) {
      deleteNamespaceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteNamespaceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNamespaceInitialRpcTimeout set to "
                + this.clientProperties.getDeleteNamespaceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteNamespaceRpcTimeoutMultiplier() != null) {
      deleteNamespaceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteNamespaceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNamespaceRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteNamespaceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteNamespaceMaxRpcTimeout() != null) {
      deleteNamespaceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteNamespaceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNamespaceMaxRpcTimeout set to "
                + this.clientProperties.getDeleteNamespaceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteNamespaceTotalTimeout() != null) {
      deleteNamespaceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteNamespaceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNamespaceTotalTimeout set to "
                + this.clientProperties.getDeleteNamespaceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteNamespaceSettings()
        .setRetrySettings(deleteNamespaceRetrySettingBuilder.build());
    RetrySettings.Builder createServiceRetrySettingBuilder =
        clientSettingsBuilder.createServiceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateServiceInitialRetryDelay() != null) {
      createServiceRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateServiceInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceInitialRetryDelay set to "
                + this.clientProperties.getCreateServiceInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateServiceRetryDelayMultiplier() != null) {
      createServiceRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateServiceRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceRetryDelayMultiplier set to "
                + this.clientProperties.getCreateServiceRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateServiceMaxRetryDelay() != null) {
      createServiceRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateServiceMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceMaxRetryDelay set to "
                + this.clientProperties.getCreateServiceMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateServiceInitialRpcTimeout() != null) {
      createServiceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateServiceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceInitialRpcTimeout set to "
                + this.clientProperties.getCreateServiceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateServiceRpcTimeoutMultiplier() != null) {
      createServiceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateServiceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateServiceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateServiceMaxRpcTimeout() != null) {
      createServiceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateServiceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceMaxRpcTimeout set to "
                + this.clientProperties.getCreateServiceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateServiceTotalTimeout() != null) {
      createServiceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateServiceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceTotalTimeout set to "
                + this.clientProperties.getCreateServiceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createServiceSettings()
        .setRetrySettings(createServiceRetrySettingBuilder.build());
    RetrySettings.Builder listServicesRetrySettingBuilder =
        clientSettingsBuilder.listServicesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListServicesInitialRetryDelay() != null) {
      listServicesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListServicesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesInitialRetryDelay set to "
                + this.clientProperties.getListServicesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListServicesRetryDelayMultiplier() != null) {
      listServicesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListServicesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesRetryDelayMultiplier set to "
                + this.clientProperties.getListServicesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListServicesMaxRetryDelay() != null) {
      listServicesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListServicesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesMaxRetryDelay set to "
                + this.clientProperties.getListServicesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListServicesInitialRpcTimeout() != null) {
      listServicesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListServicesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesInitialRpcTimeout set to "
                + this.clientProperties.getListServicesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListServicesRpcTimeoutMultiplier() != null) {
      listServicesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListServicesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListServicesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListServicesMaxRpcTimeout() != null) {
      listServicesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListServicesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesMaxRpcTimeout set to "
                + this.clientProperties.getListServicesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListServicesTotalTimeout() != null) {
      listServicesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListServicesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesTotalTimeout set to "
                + this.clientProperties.getListServicesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listServicesSettings()
        .setRetrySettings(listServicesRetrySettingBuilder.build());
    RetrySettings.Builder getServiceRetrySettingBuilder =
        clientSettingsBuilder.getServiceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetServiceInitialRetryDelay() != null) {
      getServiceRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetServiceInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceInitialRetryDelay set to "
                + this.clientProperties.getGetServiceInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetServiceRetryDelayMultiplier() != null) {
      getServiceRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetServiceRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceRetryDelayMultiplier set to "
                + this.clientProperties.getGetServiceRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetServiceMaxRetryDelay() != null) {
      getServiceRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetServiceMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceMaxRetryDelay set to " + this.clientProperties.getGetServiceMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetServiceInitialRpcTimeout() != null) {
      getServiceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetServiceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceInitialRpcTimeout set to "
                + this.clientProperties.getGetServiceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetServiceRpcTimeoutMultiplier() != null) {
      getServiceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetServiceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetServiceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetServiceMaxRpcTimeout() != null) {
      getServiceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetServiceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceMaxRpcTimeout set to " + this.clientProperties.getGetServiceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetServiceTotalTimeout() != null) {
      getServiceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetServiceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceTotalTimeout set to " + this.clientProperties.getGetServiceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getServiceSettings()
        .setRetrySettings(getServiceRetrySettingBuilder.build());
    RetrySettings.Builder updateServiceRetrySettingBuilder =
        clientSettingsBuilder.updateServiceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateServiceInitialRetryDelay() != null) {
      updateServiceRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateServiceInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServiceInitialRetryDelay set to "
                + this.clientProperties.getUpdateServiceInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateServiceRetryDelayMultiplier() != null) {
      updateServiceRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateServiceRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServiceRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateServiceRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateServiceMaxRetryDelay() != null) {
      updateServiceRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateServiceMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServiceMaxRetryDelay set to "
                + this.clientProperties.getUpdateServiceMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateServiceInitialRpcTimeout() != null) {
      updateServiceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateServiceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServiceInitialRpcTimeout set to "
                + this.clientProperties.getUpdateServiceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateServiceRpcTimeoutMultiplier() != null) {
      updateServiceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateServiceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServiceRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateServiceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateServiceMaxRpcTimeout() != null) {
      updateServiceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateServiceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServiceMaxRpcTimeout set to "
                + this.clientProperties.getUpdateServiceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateServiceTotalTimeout() != null) {
      updateServiceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateServiceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServiceTotalTimeout set to "
                + this.clientProperties.getUpdateServiceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateServiceSettings()
        .setRetrySettings(updateServiceRetrySettingBuilder.build());
    RetrySettings.Builder deleteServiceRetrySettingBuilder =
        clientSettingsBuilder.deleteServiceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteServiceInitialRetryDelay() != null) {
      deleteServiceRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteServiceInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceInitialRetryDelay set to "
                + this.clientProperties.getDeleteServiceInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteServiceRetryDelayMultiplier() != null) {
      deleteServiceRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteServiceRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteServiceRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteServiceMaxRetryDelay() != null) {
      deleteServiceRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteServiceMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceMaxRetryDelay set to "
                + this.clientProperties.getDeleteServiceMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteServiceInitialRpcTimeout() != null) {
      deleteServiceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteServiceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceInitialRpcTimeout set to "
                + this.clientProperties.getDeleteServiceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteServiceRpcTimeoutMultiplier() != null) {
      deleteServiceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteServiceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteServiceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteServiceMaxRpcTimeout() != null) {
      deleteServiceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteServiceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceMaxRpcTimeout set to "
                + this.clientProperties.getDeleteServiceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteServiceTotalTimeout() != null) {
      deleteServiceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteServiceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceTotalTimeout set to "
                + this.clientProperties.getDeleteServiceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteServiceSettings()
        .setRetrySettings(deleteServiceRetrySettingBuilder.build());
    RetrySettings.Builder createEndpointRetrySettingBuilder =
        clientSettingsBuilder.createEndpointSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateEndpointInitialRetryDelay() != null) {
      createEndpointRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateEndpointInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEndpointInitialRetryDelay set to "
                + this.clientProperties.getCreateEndpointInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateEndpointRetryDelayMultiplier() != null) {
      createEndpointRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateEndpointRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEndpointRetryDelayMultiplier set to "
                + this.clientProperties.getCreateEndpointRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateEndpointMaxRetryDelay() != null) {
      createEndpointRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateEndpointMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEndpointMaxRetryDelay set to "
                + this.clientProperties.getCreateEndpointMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateEndpointInitialRpcTimeout() != null) {
      createEndpointRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateEndpointInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEndpointInitialRpcTimeout set to "
                + this.clientProperties.getCreateEndpointInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateEndpointRpcTimeoutMultiplier() != null) {
      createEndpointRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateEndpointRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEndpointRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateEndpointRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateEndpointMaxRpcTimeout() != null) {
      createEndpointRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateEndpointMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEndpointMaxRpcTimeout set to "
                + this.clientProperties.getCreateEndpointMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateEndpointTotalTimeout() != null) {
      createEndpointRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateEndpointTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEndpointTotalTimeout set to "
                + this.clientProperties.getCreateEndpointTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createEndpointSettings()
        .setRetrySettings(createEndpointRetrySettingBuilder.build());
    RetrySettings.Builder listEndpointsRetrySettingBuilder =
        clientSettingsBuilder.listEndpointsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListEndpointsInitialRetryDelay() != null) {
      listEndpointsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListEndpointsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEndpointsInitialRetryDelay set to "
                + this.clientProperties.getListEndpointsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListEndpointsRetryDelayMultiplier() != null) {
      listEndpointsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListEndpointsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEndpointsRetryDelayMultiplier set to "
                + this.clientProperties.getListEndpointsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListEndpointsMaxRetryDelay() != null) {
      listEndpointsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListEndpointsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEndpointsMaxRetryDelay set to "
                + this.clientProperties.getListEndpointsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListEndpointsInitialRpcTimeout() != null) {
      listEndpointsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListEndpointsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEndpointsInitialRpcTimeout set to "
                + this.clientProperties.getListEndpointsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListEndpointsRpcTimeoutMultiplier() != null) {
      listEndpointsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListEndpointsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEndpointsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListEndpointsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListEndpointsMaxRpcTimeout() != null) {
      listEndpointsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListEndpointsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEndpointsMaxRpcTimeout set to "
                + this.clientProperties.getListEndpointsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListEndpointsTotalTimeout() != null) {
      listEndpointsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListEndpointsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEndpointsTotalTimeout set to "
                + this.clientProperties.getListEndpointsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listEndpointsSettings()
        .setRetrySettings(listEndpointsRetrySettingBuilder.build());
    RetrySettings.Builder getEndpointRetrySettingBuilder =
        clientSettingsBuilder.getEndpointSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetEndpointInitialRetryDelay() != null) {
      getEndpointRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetEndpointInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEndpointInitialRetryDelay set to "
                + this.clientProperties.getGetEndpointInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetEndpointRetryDelayMultiplier() != null) {
      getEndpointRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetEndpointRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEndpointRetryDelayMultiplier set to "
                + this.clientProperties.getGetEndpointRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetEndpointMaxRetryDelay() != null) {
      getEndpointRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetEndpointMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEndpointMaxRetryDelay set to "
                + this.clientProperties.getGetEndpointMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetEndpointInitialRpcTimeout() != null) {
      getEndpointRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetEndpointInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEndpointInitialRpcTimeout set to "
                + this.clientProperties.getGetEndpointInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEndpointRpcTimeoutMultiplier() != null) {
      getEndpointRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetEndpointRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEndpointRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetEndpointRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetEndpointMaxRpcTimeout() != null) {
      getEndpointRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetEndpointMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEndpointMaxRpcTimeout set to "
                + this.clientProperties.getGetEndpointMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEndpointTotalTimeout() != null) {
      getEndpointRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetEndpointTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEndpointTotalTimeout set to " + this.clientProperties.getGetEndpointTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getEndpointSettings()
        .setRetrySettings(getEndpointRetrySettingBuilder.build());
    RetrySettings.Builder updateEndpointRetrySettingBuilder =
        clientSettingsBuilder.updateEndpointSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateEndpointInitialRetryDelay() != null) {
      updateEndpointRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateEndpointInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEndpointInitialRetryDelay set to "
                + this.clientProperties.getUpdateEndpointInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateEndpointRetryDelayMultiplier() != null) {
      updateEndpointRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateEndpointRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEndpointRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateEndpointRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateEndpointMaxRetryDelay() != null) {
      updateEndpointRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateEndpointMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEndpointMaxRetryDelay set to "
                + this.clientProperties.getUpdateEndpointMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateEndpointInitialRpcTimeout() != null) {
      updateEndpointRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateEndpointInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEndpointInitialRpcTimeout set to "
                + this.clientProperties.getUpdateEndpointInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateEndpointRpcTimeoutMultiplier() != null) {
      updateEndpointRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateEndpointRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEndpointRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateEndpointRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateEndpointMaxRpcTimeout() != null) {
      updateEndpointRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateEndpointMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEndpointMaxRpcTimeout set to "
                + this.clientProperties.getUpdateEndpointMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateEndpointTotalTimeout() != null) {
      updateEndpointRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateEndpointTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEndpointTotalTimeout set to "
                + this.clientProperties.getUpdateEndpointTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateEndpointSettings()
        .setRetrySettings(updateEndpointRetrySettingBuilder.build());
    RetrySettings.Builder deleteEndpointRetrySettingBuilder =
        clientSettingsBuilder.deleteEndpointSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteEndpointInitialRetryDelay() != null) {
      deleteEndpointRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteEndpointInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEndpointInitialRetryDelay set to "
                + this.clientProperties.getDeleteEndpointInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteEndpointRetryDelayMultiplier() != null) {
      deleteEndpointRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteEndpointRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEndpointRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteEndpointRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteEndpointMaxRetryDelay() != null) {
      deleteEndpointRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteEndpointMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEndpointMaxRetryDelay set to "
                + this.clientProperties.getDeleteEndpointMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteEndpointInitialRpcTimeout() != null) {
      deleteEndpointRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteEndpointInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEndpointInitialRpcTimeout set to "
                + this.clientProperties.getDeleteEndpointInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteEndpointRpcTimeoutMultiplier() != null) {
      deleteEndpointRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteEndpointRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEndpointRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteEndpointRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteEndpointMaxRpcTimeout() != null) {
      deleteEndpointRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteEndpointMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEndpointMaxRpcTimeout set to "
                + this.clientProperties.getDeleteEndpointMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteEndpointTotalTimeout() != null) {
      deleteEndpointRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteEndpointTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEndpointTotalTimeout set to "
                + this.clientProperties.getDeleteEndpointTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteEndpointSettings()
        .setRetrySettings(deleteEndpointRetrySettingBuilder.build());
    RetrySettings.Builder getIamPolicyRetrySettingBuilder =
        clientSettingsBuilder.getIamPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetIamPolicyInitialRetryDelay() != null) {
      getIamPolicyRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetIamPolicyInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyInitialRetryDelay set to "
                + this.clientProperties.getGetIamPolicyInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetIamPolicyRetryDelayMultiplier() != null) {
      getIamPolicyRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetIamPolicyRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyRetryDelayMultiplier set to "
                + this.clientProperties.getGetIamPolicyRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetIamPolicyMaxRetryDelay() != null) {
      getIamPolicyRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetIamPolicyMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyMaxRetryDelay set to "
                + this.clientProperties.getGetIamPolicyMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetIamPolicyInitialRpcTimeout() != null) {
      getIamPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetIamPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyInitialRpcTimeout set to "
                + this.clientProperties.getGetIamPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetIamPolicyRpcTimeoutMultiplier() != null) {
      getIamPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetIamPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetIamPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetIamPolicyMaxRpcTimeout() != null) {
      getIamPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetIamPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyMaxRpcTimeout set to "
                + this.clientProperties.getGetIamPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetIamPolicyTotalTimeout() != null) {
      getIamPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetIamPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyTotalTimeout set to "
                + this.clientProperties.getGetIamPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getIamPolicySettings()
        .setRetrySettings(getIamPolicyRetrySettingBuilder.build());
    RetrySettings.Builder setIamPolicyRetrySettingBuilder =
        clientSettingsBuilder.setIamPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetIamPolicyInitialRetryDelay() != null) {
      setIamPolicyRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getSetIamPolicyInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyInitialRetryDelay set to "
                + this.clientProperties.getSetIamPolicyInitialRetryDelay());
      }
    }
    if (this.clientProperties.getSetIamPolicyRetryDelayMultiplier() != null) {
      setIamPolicyRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getSetIamPolicyRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyRetryDelayMultiplier set to "
                + this.clientProperties.getSetIamPolicyRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getSetIamPolicyMaxRetryDelay() != null) {
      setIamPolicyRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getSetIamPolicyMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyMaxRetryDelay set to "
                + this.clientProperties.getSetIamPolicyMaxRetryDelay());
      }
    }
    if (this.clientProperties.getSetIamPolicyInitialRpcTimeout() != null) {
      setIamPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetIamPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyInitialRpcTimeout set to "
                + this.clientProperties.getSetIamPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetIamPolicyRpcTimeoutMultiplier() != null) {
      setIamPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetIamPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetIamPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetIamPolicyMaxRpcTimeout() != null) {
      setIamPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetIamPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyMaxRpcTimeout set to "
                + this.clientProperties.getSetIamPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetIamPolicyTotalTimeout() != null) {
      setIamPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetIamPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyTotalTimeout set to "
                + this.clientProperties.getSetIamPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setIamPolicySettings()
        .setRetrySettings(setIamPolicyRetrySettingBuilder.build());
    RetrySettings.Builder testIamPermissionsRetrySettingBuilder =
        clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getTestIamPermissionsInitialRetryDelay() != null) {
      testIamPermissionsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getTestIamPermissionsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsInitialRetryDelay set to "
                + this.clientProperties.getTestIamPermissionsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getTestIamPermissionsRetryDelayMultiplier() != null) {
      testIamPermissionsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getTestIamPermissionsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsRetryDelayMultiplier set to "
                + this.clientProperties.getTestIamPermissionsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getTestIamPermissionsMaxRetryDelay() != null) {
      testIamPermissionsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getTestIamPermissionsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsMaxRetryDelay set to "
                + this.clientProperties.getTestIamPermissionsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getTestIamPermissionsInitialRpcTimeout() != null) {
      testIamPermissionsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getTestIamPermissionsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsInitialRpcTimeout set to "
                + this.clientProperties.getTestIamPermissionsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getTestIamPermissionsRpcTimeoutMultiplier() != null) {
      testIamPermissionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getTestIamPermissionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getTestIamPermissionsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getTestIamPermissionsMaxRpcTimeout() != null) {
      testIamPermissionsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getTestIamPermissionsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsMaxRpcTimeout set to "
                + this.clientProperties.getTestIamPermissionsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getTestIamPermissionsTotalTimeout() != null) {
      testIamPermissionsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getTestIamPermissionsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsTotalTimeout set to "
                + this.clientProperties.getTestIamPermissionsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .testIamPermissionsSettings()
        .setRetrySettings(testIamPermissionsRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public RegistrationServiceClient registrationServiceClient(
      RegistrationServiceSettings registrationServiceSettings) throws IOException {
    return RegistrationServiceClient.create(registrationServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-registration-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
