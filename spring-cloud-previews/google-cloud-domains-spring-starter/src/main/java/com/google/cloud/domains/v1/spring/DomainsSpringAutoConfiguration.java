/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.domains.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.domains.v1.DomainsClient;
import com.google.cloud.domains.v1.DomainsSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link DomainsClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(DomainsClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.domains.v1.spring.auto.domains.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({DomainsSpringProperties.class, GlobalProperties.class})
public class DomainsSpringAutoConfiguration {
  private final DomainsSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(DomainsSpringAutoConfiguration.class);

  protected DomainsSpringAutoConfiguration(
      DomainsSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider domainsCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Domains-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultDomainsTransportChannelProvider() {
    return DomainsSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a DomainsClient bean configured to use the default credentials provider (obtained with
   * domainsCredentials()) and its default transport channel provider
   * (defaultDomainsTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in DomainsSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public DomainsSettings domainsSettings(
      @Qualifier("domainsCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultDomainsTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    DomainsSettings.Builder clientSettingsBuilder =
        DomainsSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          DomainsSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          DomainsSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder searchDomainsRetrySettingBuilder =
        clientSettingsBuilder.searchDomainsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSearchDomainsRpcTimeoutMultiplier() != null) {
      searchDomainsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSearchDomainsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SearchDomainsRpcTimeoutMultiplier set to "
                + this.clientProperties.getSearchDomainsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .searchDomainsSettings()
        .setRetrySettings(searchDomainsRetrySettingBuilder.build());
    RetrySettings.Builder retrieveRegisterParametersRetrySettingBuilder =
        clientSettingsBuilder.retrieveRegisterParametersSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRetrieveRegisterParametersRpcTimeoutMultiplier() != null) {
      retrieveRegisterParametersRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRetrieveRegisterParametersRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RetrieveRegisterParametersRpcTimeoutMultiplier set to "
                + this.clientProperties.getRetrieveRegisterParametersRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .retrieveRegisterParametersSettings()
        .setRetrySettings(retrieveRegisterParametersRetrySettingBuilder.build());
    RetrySettings.Builder registerDomainRetrySettingBuilder =
        clientSettingsBuilder.registerDomainSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRegisterDomainRpcTimeoutMultiplier() != null) {
      registerDomainRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRegisterDomainRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RegisterDomainRpcTimeoutMultiplier set to "
                + this.clientProperties.getRegisterDomainRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .registerDomainSettings()
        .setRetrySettings(registerDomainRetrySettingBuilder.build());
    RetrySettings.Builder retrieveTransferParametersRetrySettingBuilder =
        clientSettingsBuilder.retrieveTransferParametersSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRetrieveTransferParametersRpcTimeoutMultiplier() != null) {
      retrieveTransferParametersRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRetrieveTransferParametersRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RetrieveTransferParametersRpcTimeoutMultiplier set to "
                + this.clientProperties.getRetrieveTransferParametersRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .retrieveTransferParametersSettings()
        .setRetrySettings(retrieveTransferParametersRetrySettingBuilder.build());
    RetrySettings.Builder transferDomainRetrySettingBuilder =
        clientSettingsBuilder.transferDomainSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getTransferDomainRpcTimeoutMultiplier() != null) {
      transferDomainRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getTransferDomainRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TransferDomainRpcTimeoutMultiplier set to "
                + this.clientProperties.getTransferDomainRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .transferDomainSettings()
        .setRetrySettings(transferDomainRetrySettingBuilder.build());
    RetrySettings.Builder listRegistrationsRetrySettingBuilder =
        clientSettingsBuilder.listRegistrationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListRegistrationsRpcTimeoutMultiplier() != null) {
      listRegistrationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListRegistrationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRegistrationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListRegistrationsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listRegistrationsSettings()
        .setRetrySettings(listRegistrationsRetrySettingBuilder.build());
    RetrySettings.Builder getRegistrationRetrySettingBuilder =
        clientSettingsBuilder.getRegistrationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetRegistrationRpcTimeoutMultiplier() != null) {
      getRegistrationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetRegistrationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRegistrationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetRegistrationRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getRegistrationSettings()
        .setRetrySettings(getRegistrationRetrySettingBuilder.build());
    RetrySettings.Builder updateRegistrationRetrySettingBuilder =
        clientSettingsBuilder.updateRegistrationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateRegistrationRpcTimeoutMultiplier() != null) {
      updateRegistrationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateRegistrationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateRegistrationRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateRegistrationRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .updateRegistrationSettings()
        .setRetrySettings(updateRegistrationRetrySettingBuilder.build());
    RetrySettings.Builder configureManagementSettingsRetrySettingBuilder =
        clientSettingsBuilder.configureManagementSettingsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getConfigureManagementSettingsRpcTimeoutMultiplier() != null) {
      configureManagementSettingsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getConfigureManagementSettingsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ConfigureManagementSettingsRpcTimeoutMultiplier set to "
                + this.clientProperties.getConfigureManagementSettingsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .configureManagementSettingsSettings()
        .setRetrySettings(configureManagementSettingsRetrySettingBuilder.build());
    RetrySettings.Builder configureDnsSettingsRetrySettingBuilder =
        clientSettingsBuilder.configureDnsSettingsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getConfigureDnsSettingsRpcTimeoutMultiplier() != null) {
      configureDnsSettingsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getConfigureDnsSettingsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ConfigureDnsSettingsRpcTimeoutMultiplier set to "
                + this.clientProperties.getConfigureDnsSettingsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .configureDnsSettingsSettings()
        .setRetrySettings(configureDnsSettingsRetrySettingBuilder.build());
    RetrySettings.Builder configureContactSettingsRetrySettingBuilder =
        clientSettingsBuilder.configureContactSettingsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getConfigureContactSettingsRpcTimeoutMultiplier() != null) {
      configureContactSettingsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getConfigureContactSettingsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ConfigureContactSettingsRpcTimeoutMultiplier set to "
                + this.clientProperties.getConfigureContactSettingsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .configureContactSettingsSettings()
        .setRetrySettings(configureContactSettingsRetrySettingBuilder.build());
    RetrySettings.Builder exportRegistrationRetrySettingBuilder =
        clientSettingsBuilder.exportRegistrationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getExportRegistrationRpcTimeoutMultiplier() != null) {
      exportRegistrationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getExportRegistrationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportRegistrationRpcTimeoutMultiplier set to "
                + this.clientProperties.getExportRegistrationRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .exportRegistrationSettings()
        .setRetrySettings(exportRegistrationRetrySettingBuilder.build());
    RetrySettings.Builder deleteRegistrationRetrySettingBuilder =
        clientSettingsBuilder.deleteRegistrationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteRegistrationRpcTimeoutMultiplier() != null) {
      deleteRegistrationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteRegistrationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRegistrationRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteRegistrationRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .deleteRegistrationSettings()
        .setRetrySettings(deleteRegistrationRetrySettingBuilder.build());
    RetrySettings.Builder retrieveAuthorizationCodeRetrySettingBuilder =
        clientSettingsBuilder.retrieveAuthorizationCodeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRetrieveAuthorizationCodeRpcTimeoutMultiplier() != null) {
      retrieveAuthorizationCodeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRetrieveAuthorizationCodeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RetrieveAuthorizationCodeRpcTimeoutMultiplier set to "
                + this.clientProperties.getRetrieveAuthorizationCodeRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .retrieveAuthorizationCodeSettings()
        .setRetrySettings(retrieveAuthorizationCodeRetrySettingBuilder.build());
    RetrySettings.Builder resetAuthorizationCodeRetrySettingBuilder =
        clientSettingsBuilder.resetAuthorizationCodeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getResetAuthorizationCodeRpcTimeoutMultiplier() != null) {
      resetAuthorizationCodeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getResetAuthorizationCodeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResetAuthorizationCodeRpcTimeoutMultiplier set to "
                + this.clientProperties.getResetAuthorizationCodeRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .resetAuthorizationCodeSettings()
        .setRetrySettings(resetAuthorizationCodeRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public DomainsClient domainsClient(DomainsSettings domainsSettings) throws IOException {
    return DomainsClient.create(domainsSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-domains";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
