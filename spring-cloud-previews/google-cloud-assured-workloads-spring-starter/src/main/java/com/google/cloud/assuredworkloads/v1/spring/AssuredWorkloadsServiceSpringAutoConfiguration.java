/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.assuredworkloads.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.assuredworkloads.v1.AssuredWorkloadsServiceClient;
import com.google.cloud.assuredworkloads.v1.AssuredWorkloadsServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link AssuredWorkloadsServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(AssuredWorkloadsServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.assuredworkloads.v1.spring.auto.assured-workloads-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({
  AssuredWorkloadsServiceSpringProperties.class,
  GlobalProperties.class
})
public class AssuredWorkloadsServiceSpringAutoConfiguration {
  private final AssuredWorkloadsServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(AssuredWorkloadsServiceSpringAutoConfiguration.class);

  protected AssuredWorkloadsServiceSpringAutoConfiguration(
      AssuredWorkloadsServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider assuredWorkloadsServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from AssuredWorkloadsService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultAssuredWorkloadsServiceTransportChannelProvider() {
    return AssuredWorkloadsServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a AssuredWorkloadsServiceClient bean configured to use the default credentials
   * provider (obtained with assuredWorkloadsServiceCredentials()) and its default transport channel
   * provider (defaultAssuredWorkloadsServiceTransportChannelProvider()). It also configures the
   * quota project ID if provided. It will configure an executor provider in case there is more than
   * one thread configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in AssuredWorkloadsServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public AssuredWorkloadsServiceSettings assuredWorkloadsServiceSettings(
      @Qualifier("assuredWorkloadsServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultAssuredWorkloadsServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    AssuredWorkloadsServiceSettings.Builder clientSettingsBuilder =
        AssuredWorkloadsServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          AssuredWorkloadsServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          AssuredWorkloadsServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createWorkloadRetrySettingBuilder =
        clientSettingsBuilder.createWorkloadSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateWorkloadInitialRpcTimeout() != null) {
      createWorkloadRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateWorkloadInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateWorkloadInitialRpcTimeout set to "
                + this.clientProperties.getCreateWorkloadInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateWorkloadRpcTimeoutMultiplier() != null) {
      createWorkloadRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateWorkloadRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateWorkloadRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateWorkloadRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateWorkloadMaxRpcTimeout() != null) {
      createWorkloadRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateWorkloadMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateWorkloadMaxRpcTimeout set to "
                + this.clientProperties.getCreateWorkloadMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateWorkloadTotalTimeout() != null) {
      createWorkloadRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateWorkloadTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateWorkloadTotalTimeout set to "
                + this.clientProperties.getCreateWorkloadTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createWorkloadSettings()
        .setRetrySettings(createWorkloadRetrySettingBuilder.build());
    RetrySettings.Builder updateWorkloadRetrySettingBuilder =
        clientSettingsBuilder.updateWorkloadSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateWorkloadInitialRpcTimeout() != null) {
      updateWorkloadRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateWorkloadInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateWorkloadInitialRpcTimeout set to "
                + this.clientProperties.getUpdateWorkloadInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateWorkloadRpcTimeoutMultiplier() != null) {
      updateWorkloadRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateWorkloadRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateWorkloadRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateWorkloadRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateWorkloadMaxRpcTimeout() != null) {
      updateWorkloadRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateWorkloadMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateWorkloadMaxRpcTimeout set to "
                + this.clientProperties.getUpdateWorkloadMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateWorkloadTotalTimeout() != null) {
      updateWorkloadRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateWorkloadTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateWorkloadTotalTimeout set to "
                + this.clientProperties.getUpdateWorkloadTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateWorkloadSettings()
        .setRetrySettings(updateWorkloadRetrySettingBuilder.build());
    RetrySettings.Builder restrictAllowedResourcesRetrySettingBuilder =
        clientSettingsBuilder.restrictAllowedResourcesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRestrictAllowedResourcesInitialRpcTimeout() != null) {
      restrictAllowedResourcesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRestrictAllowedResourcesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RestrictAllowedResourcesInitialRpcTimeout set to "
                + this.clientProperties.getRestrictAllowedResourcesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRestrictAllowedResourcesRpcTimeoutMultiplier() != null) {
      restrictAllowedResourcesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRestrictAllowedResourcesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RestrictAllowedResourcesRpcTimeoutMultiplier set to "
                + this.clientProperties.getRestrictAllowedResourcesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRestrictAllowedResourcesMaxRpcTimeout() != null) {
      restrictAllowedResourcesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRestrictAllowedResourcesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RestrictAllowedResourcesMaxRpcTimeout set to "
                + this.clientProperties.getRestrictAllowedResourcesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRestrictAllowedResourcesTotalTimeout() != null) {
      restrictAllowedResourcesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRestrictAllowedResourcesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RestrictAllowedResourcesTotalTimeout set to "
                + this.clientProperties.getRestrictAllowedResourcesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .restrictAllowedResourcesSettings()
        .setRetrySettings(restrictAllowedResourcesRetrySettingBuilder.build());
    RetrySettings.Builder deleteWorkloadRetrySettingBuilder =
        clientSettingsBuilder.deleteWorkloadSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteWorkloadInitialRpcTimeout() != null) {
      deleteWorkloadRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteWorkloadInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteWorkloadInitialRpcTimeout set to "
                + this.clientProperties.getDeleteWorkloadInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteWorkloadRpcTimeoutMultiplier() != null) {
      deleteWorkloadRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteWorkloadRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteWorkloadRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteWorkloadRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteWorkloadMaxRpcTimeout() != null) {
      deleteWorkloadRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteWorkloadMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteWorkloadMaxRpcTimeout set to "
                + this.clientProperties.getDeleteWorkloadMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteWorkloadTotalTimeout() != null) {
      deleteWorkloadRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteWorkloadTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteWorkloadTotalTimeout set to "
                + this.clientProperties.getDeleteWorkloadTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteWorkloadSettings()
        .setRetrySettings(deleteWorkloadRetrySettingBuilder.build());
    RetrySettings.Builder getWorkloadRetrySettingBuilder =
        clientSettingsBuilder.getWorkloadSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetWorkloadInitialRpcTimeout() != null) {
      getWorkloadRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetWorkloadInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetWorkloadInitialRpcTimeout set to "
                + this.clientProperties.getGetWorkloadInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetWorkloadRpcTimeoutMultiplier() != null) {
      getWorkloadRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetWorkloadRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetWorkloadRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetWorkloadRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetWorkloadMaxRpcTimeout() != null) {
      getWorkloadRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetWorkloadMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetWorkloadMaxRpcTimeout set to "
                + this.clientProperties.getGetWorkloadMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetWorkloadTotalTimeout() != null) {
      getWorkloadRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetWorkloadTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetWorkloadTotalTimeout set to " + this.clientProperties.getGetWorkloadTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getWorkloadSettings()
        .setRetrySettings(getWorkloadRetrySettingBuilder.build());
    RetrySettings.Builder listWorkloadsRetrySettingBuilder =
        clientSettingsBuilder.listWorkloadsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListWorkloadsInitialRpcTimeout() != null) {
      listWorkloadsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListWorkloadsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListWorkloadsInitialRpcTimeout set to "
                + this.clientProperties.getListWorkloadsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListWorkloadsRpcTimeoutMultiplier() != null) {
      listWorkloadsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListWorkloadsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListWorkloadsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListWorkloadsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListWorkloadsMaxRpcTimeout() != null) {
      listWorkloadsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListWorkloadsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListWorkloadsMaxRpcTimeout set to "
                + this.clientProperties.getListWorkloadsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListWorkloadsTotalTimeout() != null) {
      listWorkloadsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListWorkloadsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListWorkloadsTotalTimeout set to "
                + this.clientProperties.getListWorkloadsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listWorkloadsSettings()
        .setRetrySettings(listWorkloadsRetrySettingBuilder.build());
    RetrySettings.Builder listViolationsRetrySettingBuilder =
        clientSettingsBuilder.listViolationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListViolationsInitialRpcTimeout() != null) {
      listViolationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListViolationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListViolationsInitialRpcTimeout set to "
                + this.clientProperties.getListViolationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListViolationsRpcTimeoutMultiplier() != null) {
      listViolationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListViolationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListViolationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListViolationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListViolationsMaxRpcTimeout() != null) {
      listViolationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListViolationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListViolationsMaxRpcTimeout set to "
                + this.clientProperties.getListViolationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListViolationsTotalTimeout() != null) {
      listViolationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListViolationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListViolationsTotalTimeout set to "
                + this.clientProperties.getListViolationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listViolationsSettings()
        .setRetrySettings(listViolationsRetrySettingBuilder.build());
    RetrySettings.Builder getViolationRetrySettingBuilder =
        clientSettingsBuilder.getViolationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetViolationInitialRpcTimeout() != null) {
      getViolationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetViolationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetViolationInitialRpcTimeout set to "
                + this.clientProperties.getGetViolationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetViolationRpcTimeoutMultiplier() != null) {
      getViolationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetViolationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetViolationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetViolationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetViolationMaxRpcTimeout() != null) {
      getViolationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetViolationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetViolationMaxRpcTimeout set to "
                + this.clientProperties.getGetViolationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetViolationTotalTimeout() != null) {
      getViolationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetViolationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetViolationTotalTimeout set to "
                + this.clientProperties.getGetViolationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getViolationSettings()
        .setRetrySettings(getViolationRetrySettingBuilder.build());
    RetrySettings.Builder acknowledgeViolationRetrySettingBuilder =
        clientSettingsBuilder.acknowledgeViolationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getAcknowledgeViolationInitialRpcTimeout() != null) {
      acknowledgeViolationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getAcknowledgeViolationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AcknowledgeViolationInitialRpcTimeout set to "
                + this.clientProperties.getAcknowledgeViolationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getAcknowledgeViolationRpcTimeoutMultiplier() != null) {
      acknowledgeViolationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getAcknowledgeViolationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AcknowledgeViolationRpcTimeoutMultiplier set to "
                + this.clientProperties.getAcknowledgeViolationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getAcknowledgeViolationMaxRpcTimeout() != null) {
      acknowledgeViolationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getAcknowledgeViolationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AcknowledgeViolationMaxRpcTimeout set to "
                + this.clientProperties.getAcknowledgeViolationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getAcknowledgeViolationTotalTimeout() != null) {
      acknowledgeViolationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getAcknowledgeViolationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AcknowledgeViolationTotalTimeout set to "
                + this.clientProperties.getAcknowledgeViolationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .acknowledgeViolationSettings()
        .setRetrySettings(acknowledgeViolationRetrySettingBuilder.build());
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public AssuredWorkloadsServiceClient assuredWorkloadsServiceClient(
      AssuredWorkloadsServiceSettings assuredWorkloadsServiceSettings) throws IOException {
    return AssuredWorkloadsServiceClient.create(assuredWorkloadsServiceSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-assured-workloads-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
