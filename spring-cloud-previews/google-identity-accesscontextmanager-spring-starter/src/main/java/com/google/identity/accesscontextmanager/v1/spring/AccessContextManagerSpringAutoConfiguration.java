/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.identity.accesscontextmanager.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtil;
import com.google.identity.accesscontextmanager.v1.AccessContextManagerClient;
import com.google.identity.accesscontextmanager.v1.AccessContextManagerSettings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link AccessContextManagerClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@AutoConfigureAfter(GcpContextAutoConfiguration.class)
@ConditionalOnClass(AccessContextManagerClient.class)
@ConditionalOnProperty(
    value = "com.google.identity.accesscontextmanager.v1.access-context-manager.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties(AccessContextManagerSpringProperties.class)
public class AccessContextManagerSpringAutoConfiguration {
  private final AccessContextManagerSpringProperties clientProperties;
  private final CredentialsProvider credentialsProvider;
  private static final Log LOGGER =
      LogFactory.getLog(AccessContextManagerSpringAutoConfiguration.class);

  protected AccessContextManagerSpringAutoConfiguration(
      AccessContextManagerSpringProperties clientProperties,
      CredentialsProvider credentialsProvider)
      throws IOException {
    this.clientProperties = clientProperties;
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from AccessContextManager-specific configuration");
      }
      this.credentialsProvider =
          ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    } else {
      this.credentialsProvider = credentialsProvider;
    }
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean(name = "defaultAccessContextManagerTransportChannelProvider")
  public TransportChannelProvider defaultAccessContextManagerTransportChannelProvider() {
    return AccessContextManagerSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a AccessContextManagerSettings bean configured to use the default credentials provider
   * (obtained with accessContextManagerCredentials()) and its default transport channel provider
   * (defaultAccessContextManagerTransportChannelProvider()). It also configures the quota project
   * ID if provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Retry settings are also configured from service-level and method-level properties specified
   * in AccessContextManagerSpringProperties. Method-level properties will take precedence over
   * service-level properties if available, and client library defaults will be used if neither are
   * specified.
   */
  @Bean
  @ConditionalOnMissingBean
  public AccessContextManagerSettings accessContextManagerSettings(
      @Qualifier("defaultAccessContextManagerTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    AccessContextManagerSettings.Builder clientSettingsBuilder =
        AccessContextManagerSettings.newBuilder()
            .setCredentialsProvider(this.credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          AccessContextManagerSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          AccessContextManagerSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    Retry serviceRetry = clientProperties.getRetry();
    if (serviceRetry != null) {
      RetrySettings listAccessPoliciesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAccessPoliciesSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listAccessPoliciesSettings()
          .setRetrySettings(listAccessPoliciesRetrySettings);

      RetrySettings getAccessPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getAccessPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getAccessPolicySettings()
          .setRetrySettings(getAccessPolicyRetrySettings);

      RetrySettings createAccessPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createAccessPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createAccessPolicySettings()
          .setRetrySettings(createAccessPolicyRetrySettings);

      RetrySettings updateAccessPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateAccessPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateAccessPolicySettings()
          .setRetrySettings(updateAccessPolicyRetrySettings);

      RetrySettings deleteAccessPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteAccessPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteAccessPolicySettings()
          .setRetrySettings(deleteAccessPolicyRetrySettings);

      RetrySettings listAccessLevelsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAccessLevelsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .listAccessLevelsSettings()
          .setRetrySettings(listAccessLevelsRetrySettings);

      RetrySettings getAccessLevelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getAccessLevelSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getAccessLevelSettings().setRetrySettings(getAccessLevelRetrySettings);

      RetrySettings createAccessLevelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createAccessLevelSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .createAccessLevelSettings()
          .setRetrySettings(createAccessLevelRetrySettings);

      RetrySettings updateAccessLevelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateAccessLevelSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .updateAccessLevelSettings()
          .setRetrySettings(updateAccessLevelRetrySettings);

      RetrySettings deleteAccessLevelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteAccessLevelSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .deleteAccessLevelSettings()
          .setRetrySettings(deleteAccessLevelRetrySettings);

      RetrySettings replaceAccessLevelsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.replaceAccessLevelsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .replaceAccessLevelsSettings()
          .setRetrySettings(replaceAccessLevelsRetrySettings);

      RetrySettings listServicePerimetersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listServicePerimetersSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listServicePerimetersSettings()
          .setRetrySettings(listServicePerimetersRetrySettings);

      RetrySettings getServicePerimeterRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getServicePerimeterSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .getServicePerimeterSettings()
          .setRetrySettings(getServicePerimeterRetrySettings);

      RetrySettings createServicePerimeterRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createServicePerimeterSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createServicePerimeterSettings()
          .setRetrySettings(createServicePerimeterRetrySettings);

      RetrySettings updateServicePerimeterRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateServicePerimeterSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateServicePerimeterSettings()
          .setRetrySettings(updateServicePerimeterRetrySettings);

      RetrySettings deleteServicePerimeterRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteServicePerimeterSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteServicePerimeterSettings()
          .setRetrySettings(deleteServicePerimeterRetrySettings);

      RetrySettings replaceServicePerimetersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.replaceServicePerimetersSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .replaceServicePerimetersSettings()
          .setRetrySettings(replaceServicePerimetersRetrySettings);

      RetrySettings commitServicePerimetersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.commitServicePerimetersSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .commitServicePerimetersSettings()
          .setRetrySettings(commitServicePerimetersRetrySettings);

      RetrySettings listGcpUserAccessBindingsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listGcpUserAccessBindingsSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .listGcpUserAccessBindingsSettings()
          .setRetrySettings(listGcpUserAccessBindingsRetrySettings);

      RetrySettings getGcpUserAccessBindingRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getGcpUserAccessBindingSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .getGcpUserAccessBindingSettings()
          .setRetrySettings(getGcpUserAccessBindingRetrySettings);

      RetrySettings createGcpUserAccessBindingRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createGcpUserAccessBindingSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .createGcpUserAccessBindingSettings()
          .setRetrySettings(createGcpUserAccessBindingRetrySettings);

      RetrySettings updateGcpUserAccessBindingRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateGcpUserAccessBindingSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .updateGcpUserAccessBindingSettings()
          .setRetrySettings(updateGcpUserAccessBindingRetrySettings);

      RetrySettings deleteGcpUserAccessBindingRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteGcpUserAccessBindingSettings().getRetrySettings(),
              serviceRetry);
      clientSettingsBuilder
          .deleteGcpUserAccessBindingSettings()
          .setRetrySettings(deleteGcpUserAccessBindingRetrySettings);

      RetrySettings setIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.setIamPolicySettings().setRetrySettings(setIamPolicyRetrySettings);

      RetrySettings getIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicySettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder.getIamPolicySettings().setRetrySettings(getIamPolicyRetrySettings);

      RetrySettings testIamPermissionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings(), serviceRetry);
      clientSettingsBuilder
          .testIamPermissionsSettings()
          .setRetrySettings(testIamPermissionsRetrySettings);

      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured service-level retry settings from properties.");
      }
    }
    Retry listAccessPoliciesRetry = clientProperties.getListAccessPoliciesRetry();
    if (listAccessPoliciesRetry != null) {
      RetrySettings listAccessPoliciesRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAccessPoliciesSettings().getRetrySettings(),
              listAccessPoliciesRetry);
      clientSettingsBuilder
          .listAccessPoliciesSettings()
          .setRetrySettings(listAccessPoliciesRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listAccessPolicies from properties.");
      }
    }
    Retry getAccessPolicyRetry = clientProperties.getGetAccessPolicyRetry();
    if (getAccessPolicyRetry != null) {
      RetrySettings getAccessPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getAccessPolicySettings().getRetrySettings(),
              getAccessPolicyRetry);
      clientSettingsBuilder
          .getAccessPolicySettings()
          .setRetrySettings(getAccessPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getAccessPolicy from properties.");
      }
    }
    Retry createAccessPolicyRetry = clientProperties.getCreateAccessPolicyRetry();
    if (createAccessPolicyRetry != null) {
      RetrySettings createAccessPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createAccessPolicySettings().getRetrySettings(),
              createAccessPolicyRetry);
      clientSettingsBuilder
          .createAccessPolicySettings()
          .setRetrySettings(createAccessPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createAccessPolicy from properties.");
      }
    }
    Retry updateAccessPolicyRetry = clientProperties.getUpdateAccessPolicyRetry();
    if (updateAccessPolicyRetry != null) {
      RetrySettings updateAccessPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateAccessPolicySettings().getRetrySettings(),
              updateAccessPolicyRetry);
      clientSettingsBuilder
          .updateAccessPolicySettings()
          .setRetrySettings(updateAccessPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateAccessPolicy from properties.");
      }
    }
    Retry deleteAccessPolicyRetry = clientProperties.getDeleteAccessPolicyRetry();
    if (deleteAccessPolicyRetry != null) {
      RetrySettings deleteAccessPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteAccessPolicySettings().getRetrySettings(),
              deleteAccessPolicyRetry);
      clientSettingsBuilder
          .deleteAccessPolicySettings()
          .setRetrySettings(deleteAccessPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteAccessPolicy from properties.");
      }
    }
    Retry listAccessLevelsRetry = clientProperties.getListAccessLevelsRetry();
    if (listAccessLevelsRetry != null) {
      RetrySettings listAccessLevelsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listAccessLevelsSettings().getRetrySettings(),
              listAccessLevelsRetry);
      clientSettingsBuilder
          .listAccessLevelsSettings()
          .setRetrySettings(listAccessLevelsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listAccessLevels from properties.");
      }
    }
    Retry getAccessLevelRetry = clientProperties.getGetAccessLevelRetry();
    if (getAccessLevelRetry != null) {
      RetrySettings getAccessLevelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getAccessLevelSettings().getRetrySettings(),
              getAccessLevelRetry);
      clientSettingsBuilder.getAccessLevelSettings().setRetrySettings(getAccessLevelRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getAccessLevel from properties.");
      }
    }
    Retry createAccessLevelRetry = clientProperties.getCreateAccessLevelRetry();
    if (createAccessLevelRetry != null) {
      RetrySettings createAccessLevelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createAccessLevelSettings().getRetrySettings(),
              createAccessLevelRetry);
      clientSettingsBuilder
          .createAccessLevelSettings()
          .setRetrySettings(createAccessLevelRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createAccessLevel from properties.");
      }
    }
    Retry updateAccessLevelRetry = clientProperties.getUpdateAccessLevelRetry();
    if (updateAccessLevelRetry != null) {
      RetrySettings updateAccessLevelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateAccessLevelSettings().getRetrySettings(),
              updateAccessLevelRetry);
      clientSettingsBuilder
          .updateAccessLevelSettings()
          .setRetrySettings(updateAccessLevelRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateAccessLevel from properties.");
      }
    }
    Retry deleteAccessLevelRetry = clientProperties.getDeleteAccessLevelRetry();
    if (deleteAccessLevelRetry != null) {
      RetrySettings deleteAccessLevelRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteAccessLevelSettings().getRetrySettings(),
              deleteAccessLevelRetry);
      clientSettingsBuilder
          .deleteAccessLevelSettings()
          .setRetrySettings(deleteAccessLevelRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteAccessLevel from properties.");
      }
    }
    Retry replaceAccessLevelsRetry = clientProperties.getReplaceAccessLevelsRetry();
    if (replaceAccessLevelsRetry != null) {
      RetrySettings replaceAccessLevelsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.replaceAccessLevelsSettings().getRetrySettings(),
              replaceAccessLevelsRetry);
      clientSettingsBuilder
          .replaceAccessLevelsSettings()
          .setRetrySettings(replaceAccessLevelsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for replaceAccessLevels from properties.");
      }
    }
    Retry listServicePerimetersRetry = clientProperties.getListServicePerimetersRetry();
    if (listServicePerimetersRetry != null) {
      RetrySettings listServicePerimetersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listServicePerimetersSettings().getRetrySettings(),
              listServicePerimetersRetry);
      clientSettingsBuilder
          .listServicePerimetersSettings()
          .setRetrySettings(listServicePerimetersRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listServicePerimeters from properties.");
      }
    }
    Retry getServicePerimeterRetry = clientProperties.getGetServicePerimeterRetry();
    if (getServicePerimeterRetry != null) {
      RetrySettings getServicePerimeterRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getServicePerimeterSettings().getRetrySettings(),
              getServicePerimeterRetry);
      clientSettingsBuilder
          .getServicePerimeterSettings()
          .setRetrySettings(getServicePerimeterRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getServicePerimeter from properties.");
      }
    }
    Retry createServicePerimeterRetry = clientProperties.getCreateServicePerimeterRetry();
    if (createServicePerimeterRetry != null) {
      RetrySettings createServicePerimeterRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createServicePerimeterSettings().getRetrySettings(),
              createServicePerimeterRetry);
      clientSettingsBuilder
          .createServicePerimeterSettings()
          .setRetrySettings(createServicePerimeterRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createServicePerimeter from properties.");
      }
    }
    Retry updateServicePerimeterRetry = clientProperties.getUpdateServicePerimeterRetry();
    if (updateServicePerimeterRetry != null) {
      RetrySettings updateServicePerimeterRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateServicePerimeterSettings().getRetrySettings(),
              updateServicePerimeterRetry);
      clientSettingsBuilder
          .updateServicePerimeterSettings()
          .setRetrySettings(updateServicePerimeterRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateServicePerimeter from properties.");
      }
    }
    Retry deleteServicePerimeterRetry = clientProperties.getDeleteServicePerimeterRetry();
    if (deleteServicePerimeterRetry != null) {
      RetrySettings deleteServicePerimeterRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteServicePerimeterSettings().getRetrySettings(),
              deleteServicePerimeterRetry);
      clientSettingsBuilder
          .deleteServicePerimeterSettings()
          .setRetrySettings(deleteServicePerimeterRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteServicePerimeter from properties.");
      }
    }
    Retry replaceServicePerimetersRetry = clientProperties.getReplaceServicePerimetersRetry();
    if (replaceServicePerimetersRetry != null) {
      RetrySettings replaceServicePerimetersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.replaceServicePerimetersSettings().getRetrySettings(),
              replaceServicePerimetersRetry);
      clientSettingsBuilder
          .replaceServicePerimetersSettings()
          .setRetrySettings(replaceServicePerimetersRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for replaceServicePerimeters from properties.");
      }
    }
    Retry commitServicePerimetersRetry = clientProperties.getCommitServicePerimetersRetry();
    if (commitServicePerimetersRetry != null) {
      RetrySettings commitServicePerimetersRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.commitServicePerimetersSettings().getRetrySettings(),
              commitServicePerimetersRetry);
      clientSettingsBuilder
          .commitServicePerimetersSettings()
          .setRetrySettings(commitServicePerimetersRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for commitServicePerimeters from properties.");
      }
    }
    Retry listGcpUserAccessBindingsRetry = clientProperties.getListGcpUserAccessBindingsRetry();
    if (listGcpUserAccessBindingsRetry != null) {
      RetrySettings listGcpUserAccessBindingsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.listGcpUserAccessBindingsSettings().getRetrySettings(),
              listGcpUserAccessBindingsRetry);
      clientSettingsBuilder
          .listGcpUserAccessBindingsSettings()
          .setRetrySettings(listGcpUserAccessBindingsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for listGcpUserAccessBindings from properties.");
      }
    }
    Retry getGcpUserAccessBindingRetry = clientProperties.getGetGcpUserAccessBindingRetry();
    if (getGcpUserAccessBindingRetry != null) {
      RetrySettings getGcpUserAccessBindingRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getGcpUserAccessBindingSettings().getRetrySettings(),
              getGcpUserAccessBindingRetry);
      clientSettingsBuilder
          .getGcpUserAccessBindingSettings()
          .setRetrySettings(getGcpUserAccessBindingRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for getGcpUserAccessBinding from properties.");
      }
    }
    Retry createGcpUserAccessBindingRetry = clientProperties.getCreateGcpUserAccessBindingRetry();
    if (createGcpUserAccessBindingRetry != null) {
      RetrySettings createGcpUserAccessBindingRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.createGcpUserAccessBindingSettings().getRetrySettings(),
              createGcpUserAccessBindingRetry);
      clientSettingsBuilder
          .createGcpUserAccessBindingSettings()
          .setRetrySettings(createGcpUserAccessBindingRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for createGcpUserAccessBinding from properties.");
      }
    }
    Retry updateGcpUserAccessBindingRetry = clientProperties.getUpdateGcpUserAccessBindingRetry();
    if (updateGcpUserAccessBindingRetry != null) {
      RetrySettings updateGcpUserAccessBindingRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.updateGcpUserAccessBindingSettings().getRetrySettings(),
              updateGcpUserAccessBindingRetry);
      clientSettingsBuilder
          .updateGcpUserAccessBindingSettings()
          .setRetrySettings(updateGcpUserAccessBindingRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for updateGcpUserAccessBinding from properties.");
      }
    }
    Retry deleteGcpUserAccessBindingRetry = clientProperties.getDeleteGcpUserAccessBindingRetry();
    if (deleteGcpUserAccessBindingRetry != null) {
      RetrySettings deleteGcpUserAccessBindingRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.deleteGcpUserAccessBindingSettings().getRetrySettings(),
              deleteGcpUserAccessBindingRetry);
      clientSettingsBuilder
          .deleteGcpUserAccessBindingSettings()
          .setRetrySettings(deleteGcpUserAccessBindingRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for deleteGcpUserAccessBinding from properties.");
      }
    }
    Retry setIamPolicyRetry = clientProperties.getSetIamPolicyRetry();
    if (setIamPolicyRetry != null) {
      RetrySettings setIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.setIamPolicySettings().getRetrySettings(), setIamPolicyRetry);
      clientSettingsBuilder.setIamPolicySettings().setRetrySettings(setIamPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for setIamPolicy from properties.");
      }
    }
    Retry getIamPolicyRetry = clientProperties.getGetIamPolicyRetry();
    if (getIamPolicyRetry != null) {
      RetrySettings getIamPolicyRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.getIamPolicySettings().getRetrySettings(), getIamPolicyRetry);
      clientSettingsBuilder.getIamPolicySettings().setRetrySettings(getIamPolicyRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Configured method-level retry settings for getIamPolicy from properties.");
      }
    }
    Retry testIamPermissionsRetry = clientProperties.getTestIamPermissionsRetry();
    if (testIamPermissionsRetry != null) {
      RetrySettings testIamPermissionsRetrySettings =
          RetryUtil.updateRetrySettings(
              clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings(),
              testIamPermissionsRetry);
      clientSettingsBuilder
          .testIamPermissionsSettings()
          .setRetrySettings(testIamPermissionsRetrySettings);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Configured method-level retry settings for testIamPermissions from properties.");
      }
    }
    return clientSettingsBuilder.build();
  }

  /** Provides a AccessContextManagerClient bean configured with AccessContextManagerSettings. */
  @Bean
  @ConditionalOnMissingBean
  public AccessContextManagerClient accessContextManagerClient(
      AccessContextManagerSettings accessContextManagerSettings) throws IOException {
    return AccessContextManagerClient.create(accessContextManagerSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-access-context-manager";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
