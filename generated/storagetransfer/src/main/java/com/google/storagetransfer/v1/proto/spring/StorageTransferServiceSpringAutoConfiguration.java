/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.storagetransfer.v1.proto.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import com.google.storagetransfer.v1.proto.StorageTransferServiceClient;
import com.google.storagetransfer.v1.proto.StorageTransferServiceSettings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link StorageTransferServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(StorageTransferServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.storagetransfer.v1.proto.spring.auto.storage-transfer-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({
  StorageTransferServiceSpringProperties.class,
  GlobalProperties.class
})
public class StorageTransferServiceSpringAutoConfiguration {
  private final StorageTransferServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(StorageTransferServiceSpringAutoConfiguration.class);

  protected StorageTransferServiceSpringAutoConfiguration(
      StorageTransferServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider storageTransferServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from StorageTransferService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultStorageTransferServiceTransportChannelProvider() {
    return StorageTransferServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a StorageTransferServiceClient bean configured to use the default credentials provider
   * (obtained with storageTransferServiceCredentials()) and its default transport channel provider
   * (defaultStorageTransferServiceTransportChannelProvider()). It also configures the quota project
   * ID if provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in StorageTransferServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public StorageTransferServiceClient storageTransferServiceClient(
      @Qualifier("storageTransferServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultStorageTransferServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    StorageTransferServiceSettings.Builder clientSettingsBuilder =
        StorageTransferServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          StorageTransferServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          StorageTransferServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder getGoogleServiceAccountRetrySettingBuilder =
        clientSettingsBuilder.getGoogleServiceAccountSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetGoogleServiceAccountInitialRetryDelay() != null) {
      getGoogleServiceAccountRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetGoogleServiceAccountInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGoogleServiceAccountInitialRetryDelay set to "
                + this.clientProperties.getGetGoogleServiceAccountInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetGoogleServiceAccountRetryDelayMultiplier() != null) {
      getGoogleServiceAccountRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetGoogleServiceAccountRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGoogleServiceAccountRetryDelayMultiplier set to "
                + this.clientProperties.getGetGoogleServiceAccountRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetGoogleServiceAccountMaxRetryDelay() != null) {
      getGoogleServiceAccountRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetGoogleServiceAccountMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGoogleServiceAccountMaxRetryDelay set to "
                + this.clientProperties.getGetGoogleServiceAccountMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetGoogleServiceAccountInitialRpcTimeout() != null) {
      getGoogleServiceAccountRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetGoogleServiceAccountInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGoogleServiceAccountInitialRpcTimeout set to "
                + this.clientProperties.getGetGoogleServiceAccountInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetGoogleServiceAccountRpcTimeoutMultiplier() != null) {
      getGoogleServiceAccountRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetGoogleServiceAccountRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGoogleServiceAccountRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetGoogleServiceAccountRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetGoogleServiceAccountMaxRpcTimeout() != null) {
      getGoogleServiceAccountRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetGoogleServiceAccountMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGoogleServiceAccountMaxRpcTimeout set to "
                + this.clientProperties.getGetGoogleServiceAccountMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetGoogleServiceAccountTotalTimeout() != null) {
      getGoogleServiceAccountRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetGoogleServiceAccountTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGoogleServiceAccountTotalTimeout set to "
                + this.clientProperties.getGetGoogleServiceAccountTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getGoogleServiceAccountSettings()
        .setRetrySettings(getGoogleServiceAccountRetrySettingBuilder.build());
    RetrySettings.Builder createTransferJobRetrySettingBuilder =
        clientSettingsBuilder.createTransferJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateTransferJobInitialRpcTimeout() != null) {
      createTransferJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateTransferJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTransferJobInitialRpcTimeout set to "
                + this.clientProperties.getCreateTransferJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateTransferJobRpcTimeoutMultiplier() != null) {
      createTransferJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateTransferJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTransferJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateTransferJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateTransferJobMaxRpcTimeout() != null) {
      createTransferJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateTransferJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTransferJobMaxRpcTimeout set to "
                + this.clientProperties.getCreateTransferJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateTransferJobTotalTimeout() != null) {
      createTransferJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateTransferJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTransferJobTotalTimeout set to "
                + this.clientProperties.getCreateTransferJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createTransferJobSettings()
        .setRetrySettings(createTransferJobRetrySettingBuilder.build());
    RetrySettings.Builder updateTransferJobRetrySettingBuilder =
        clientSettingsBuilder.updateTransferJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateTransferJobInitialRetryDelay() != null) {
      updateTransferJobRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateTransferJobInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTransferJobInitialRetryDelay set to "
                + this.clientProperties.getUpdateTransferJobInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateTransferJobRetryDelayMultiplier() != null) {
      updateTransferJobRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateTransferJobRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTransferJobRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateTransferJobRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateTransferJobMaxRetryDelay() != null) {
      updateTransferJobRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateTransferJobMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTransferJobMaxRetryDelay set to "
                + this.clientProperties.getUpdateTransferJobMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateTransferJobInitialRpcTimeout() != null) {
      updateTransferJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateTransferJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTransferJobInitialRpcTimeout set to "
                + this.clientProperties.getUpdateTransferJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateTransferJobRpcTimeoutMultiplier() != null) {
      updateTransferJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateTransferJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTransferJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateTransferJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateTransferJobMaxRpcTimeout() != null) {
      updateTransferJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateTransferJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTransferJobMaxRpcTimeout set to "
                + this.clientProperties.getUpdateTransferJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateTransferJobTotalTimeout() != null) {
      updateTransferJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateTransferJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTransferJobTotalTimeout set to "
                + this.clientProperties.getUpdateTransferJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateTransferJobSettings()
        .setRetrySettings(updateTransferJobRetrySettingBuilder.build());
    RetrySettings.Builder getTransferJobRetrySettingBuilder =
        clientSettingsBuilder.getTransferJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetTransferJobInitialRetryDelay() != null) {
      getTransferJobRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetTransferJobInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTransferJobInitialRetryDelay set to "
                + this.clientProperties.getGetTransferJobInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetTransferJobRetryDelayMultiplier() != null) {
      getTransferJobRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetTransferJobRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTransferJobRetryDelayMultiplier set to "
                + this.clientProperties.getGetTransferJobRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetTransferJobMaxRetryDelay() != null) {
      getTransferJobRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetTransferJobMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTransferJobMaxRetryDelay set to "
                + this.clientProperties.getGetTransferJobMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetTransferJobInitialRpcTimeout() != null) {
      getTransferJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetTransferJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTransferJobInitialRpcTimeout set to "
                + this.clientProperties.getGetTransferJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetTransferJobRpcTimeoutMultiplier() != null) {
      getTransferJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetTransferJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTransferJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetTransferJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetTransferJobMaxRpcTimeout() != null) {
      getTransferJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetTransferJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTransferJobMaxRpcTimeout set to "
                + this.clientProperties.getGetTransferJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetTransferJobTotalTimeout() != null) {
      getTransferJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetTransferJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTransferJobTotalTimeout set to "
                + this.clientProperties.getGetTransferJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getTransferJobSettings()
        .setRetrySettings(getTransferJobRetrySettingBuilder.build());
    RetrySettings.Builder listTransferJobsRetrySettingBuilder =
        clientSettingsBuilder.listTransferJobsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListTransferJobsInitialRetryDelay() != null) {
      listTransferJobsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListTransferJobsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTransferJobsInitialRetryDelay set to "
                + this.clientProperties.getListTransferJobsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListTransferJobsRetryDelayMultiplier() != null) {
      listTransferJobsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListTransferJobsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTransferJobsRetryDelayMultiplier set to "
                + this.clientProperties.getListTransferJobsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListTransferJobsMaxRetryDelay() != null) {
      listTransferJobsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListTransferJobsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTransferJobsMaxRetryDelay set to "
                + this.clientProperties.getListTransferJobsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListTransferJobsInitialRpcTimeout() != null) {
      listTransferJobsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListTransferJobsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTransferJobsInitialRpcTimeout set to "
                + this.clientProperties.getListTransferJobsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListTransferJobsRpcTimeoutMultiplier() != null) {
      listTransferJobsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListTransferJobsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTransferJobsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListTransferJobsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListTransferJobsMaxRpcTimeout() != null) {
      listTransferJobsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListTransferJobsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTransferJobsMaxRpcTimeout set to "
                + this.clientProperties.getListTransferJobsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListTransferJobsTotalTimeout() != null) {
      listTransferJobsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListTransferJobsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTransferJobsTotalTimeout set to "
                + this.clientProperties.getListTransferJobsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listTransferJobsSettings()
        .setRetrySettings(listTransferJobsRetrySettingBuilder.build());
    RetrySettings.Builder pauseTransferOperationRetrySettingBuilder =
        clientSettingsBuilder.pauseTransferOperationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getPauseTransferOperationInitialRetryDelay() != null) {
      pauseTransferOperationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getPauseTransferOperationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PauseTransferOperationInitialRetryDelay set to "
                + this.clientProperties.getPauseTransferOperationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getPauseTransferOperationRetryDelayMultiplier() != null) {
      pauseTransferOperationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getPauseTransferOperationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PauseTransferOperationRetryDelayMultiplier set to "
                + this.clientProperties.getPauseTransferOperationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getPauseTransferOperationMaxRetryDelay() != null) {
      pauseTransferOperationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getPauseTransferOperationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PauseTransferOperationMaxRetryDelay set to "
                + this.clientProperties.getPauseTransferOperationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getPauseTransferOperationInitialRpcTimeout() != null) {
      pauseTransferOperationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getPauseTransferOperationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PauseTransferOperationInitialRpcTimeout set to "
                + this.clientProperties.getPauseTransferOperationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getPauseTransferOperationRpcTimeoutMultiplier() != null) {
      pauseTransferOperationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getPauseTransferOperationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PauseTransferOperationRpcTimeoutMultiplier set to "
                + this.clientProperties.getPauseTransferOperationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getPauseTransferOperationMaxRpcTimeout() != null) {
      pauseTransferOperationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getPauseTransferOperationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PauseTransferOperationMaxRpcTimeout set to "
                + this.clientProperties.getPauseTransferOperationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getPauseTransferOperationTotalTimeout() != null) {
      pauseTransferOperationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getPauseTransferOperationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PauseTransferOperationTotalTimeout set to "
                + this.clientProperties.getPauseTransferOperationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .pauseTransferOperationSettings()
        .setRetrySettings(pauseTransferOperationRetrySettingBuilder.build());
    RetrySettings.Builder resumeTransferOperationRetrySettingBuilder =
        clientSettingsBuilder.resumeTransferOperationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getResumeTransferOperationInitialRetryDelay() != null) {
      resumeTransferOperationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getResumeTransferOperationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResumeTransferOperationInitialRetryDelay set to "
                + this.clientProperties.getResumeTransferOperationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getResumeTransferOperationRetryDelayMultiplier() != null) {
      resumeTransferOperationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getResumeTransferOperationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResumeTransferOperationRetryDelayMultiplier set to "
                + this.clientProperties.getResumeTransferOperationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getResumeTransferOperationMaxRetryDelay() != null) {
      resumeTransferOperationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getResumeTransferOperationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResumeTransferOperationMaxRetryDelay set to "
                + this.clientProperties.getResumeTransferOperationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getResumeTransferOperationInitialRpcTimeout() != null) {
      resumeTransferOperationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getResumeTransferOperationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResumeTransferOperationInitialRpcTimeout set to "
                + this.clientProperties.getResumeTransferOperationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getResumeTransferOperationRpcTimeoutMultiplier() != null) {
      resumeTransferOperationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getResumeTransferOperationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResumeTransferOperationRpcTimeoutMultiplier set to "
                + this.clientProperties.getResumeTransferOperationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getResumeTransferOperationMaxRpcTimeout() != null) {
      resumeTransferOperationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getResumeTransferOperationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResumeTransferOperationMaxRpcTimeout set to "
                + this.clientProperties.getResumeTransferOperationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getResumeTransferOperationTotalTimeout() != null) {
      resumeTransferOperationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getResumeTransferOperationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResumeTransferOperationTotalTimeout set to "
                + this.clientProperties.getResumeTransferOperationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .resumeTransferOperationSettings()
        .setRetrySettings(resumeTransferOperationRetrySettingBuilder.build());
    RetrySettings.Builder runTransferJobRetrySettingBuilder =
        clientSettingsBuilder.runTransferJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRunTransferJobInitialRetryDelay() != null) {
      runTransferJobRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getRunTransferJobInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RunTransferJobInitialRetryDelay set to "
                + this.clientProperties.getRunTransferJobInitialRetryDelay());
      }
    }
    if (this.clientProperties.getRunTransferJobRetryDelayMultiplier() != null) {
      runTransferJobRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getRunTransferJobRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RunTransferJobRetryDelayMultiplier set to "
                + this.clientProperties.getRunTransferJobRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getRunTransferJobMaxRetryDelay() != null) {
      runTransferJobRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getRunTransferJobMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RunTransferJobMaxRetryDelay set to "
                + this.clientProperties.getRunTransferJobMaxRetryDelay());
      }
    }
    if (this.clientProperties.getRunTransferJobInitialRpcTimeout() != null) {
      runTransferJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRunTransferJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RunTransferJobInitialRpcTimeout set to "
                + this.clientProperties.getRunTransferJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRunTransferJobRpcTimeoutMultiplier() != null) {
      runTransferJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRunTransferJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RunTransferJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getRunTransferJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRunTransferJobMaxRpcTimeout() != null) {
      runTransferJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRunTransferJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RunTransferJobMaxRpcTimeout set to "
                + this.clientProperties.getRunTransferJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRunTransferJobTotalTimeout() != null) {
      runTransferJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRunTransferJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RunTransferJobTotalTimeout set to "
                + this.clientProperties.getRunTransferJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .runTransferJobSettings()
        .setRetrySettings(runTransferJobRetrySettingBuilder.build());
    RetrySettings.Builder deleteTransferJobRetrySettingBuilder =
        clientSettingsBuilder.deleteTransferJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteTransferJobInitialRetryDelay() != null) {
      deleteTransferJobRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteTransferJobInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTransferJobInitialRetryDelay set to "
                + this.clientProperties.getDeleteTransferJobInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteTransferJobRetryDelayMultiplier() != null) {
      deleteTransferJobRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteTransferJobRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTransferJobRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteTransferJobRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteTransferJobMaxRetryDelay() != null) {
      deleteTransferJobRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteTransferJobMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTransferJobMaxRetryDelay set to "
                + this.clientProperties.getDeleteTransferJobMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteTransferJobInitialRpcTimeout() != null) {
      deleteTransferJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteTransferJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTransferJobInitialRpcTimeout set to "
                + this.clientProperties.getDeleteTransferJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteTransferJobRpcTimeoutMultiplier() != null) {
      deleteTransferJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteTransferJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTransferJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteTransferJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteTransferJobMaxRpcTimeout() != null) {
      deleteTransferJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteTransferJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTransferJobMaxRpcTimeout set to "
                + this.clientProperties.getDeleteTransferJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteTransferJobTotalTimeout() != null) {
      deleteTransferJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteTransferJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTransferJobTotalTimeout set to "
                + this.clientProperties.getDeleteTransferJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteTransferJobSettings()
        .setRetrySettings(deleteTransferJobRetrySettingBuilder.build());
    RetrySettings.Builder createAgentPoolRetrySettingBuilder =
        clientSettingsBuilder.createAgentPoolSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateAgentPoolInitialRetryDelay() != null) {
      createAgentPoolRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateAgentPoolInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAgentPoolInitialRetryDelay set to "
                + this.clientProperties.getCreateAgentPoolInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateAgentPoolRetryDelayMultiplier() != null) {
      createAgentPoolRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateAgentPoolRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAgentPoolRetryDelayMultiplier set to "
                + this.clientProperties.getCreateAgentPoolRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateAgentPoolMaxRetryDelay() != null) {
      createAgentPoolRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateAgentPoolMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAgentPoolMaxRetryDelay set to "
                + this.clientProperties.getCreateAgentPoolMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateAgentPoolInitialRpcTimeout() != null) {
      createAgentPoolRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateAgentPoolInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAgentPoolInitialRpcTimeout set to "
                + this.clientProperties.getCreateAgentPoolInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateAgentPoolRpcTimeoutMultiplier() != null) {
      createAgentPoolRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateAgentPoolRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAgentPoolRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateAgentPoolRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateAgentPoolMaxRpcTimeout() != null) {
      createAgentPoolRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateAgentPoolMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAgentPoolMaxRpcTimeout set to "
                + this.clientProperties.getCreateAgentPoolMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateAgentPoolTotalTimeout() != null) {
      createAgentPoolRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateAgentPoolTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAgentPoolTotalTimeout set to "
                + this.clientProperties.getCreateAgentPoolTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createAgentPoolSettings()
        .setRetrySettings(createAgentPoolRetrySettingBuilder.build());
    RetrySettings.Builder updateAgentPoolRetrySettingBuilder =
        clientSettingsBuilder.updateAgentPoolSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateAgentPoolInitialRetryDelay() != null) {
      updateAgentPoolRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateAgentPoolInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAgentPoolInitialRetryDelay set to "
                + this.clientProperties.getUpdateAgentPoolInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateAgentPoolRetryDelayMultiplier() != null) {
      updateAgentPoolRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateAgentPoolRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAgentPoolRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateAgentPoolRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateAgentPoolMaxRetryDelay() != null) {
      updateAgentPoolRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateAgentPoolMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAgentPoolMaxRetryDelay set to "
                + this.clientProperties.getUpdateAgentPoolMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateAgentPoolInitialRpcTimeout() != null) {
      updateAgentPoolRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateAgentPoolInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAgentPoolInitialRpcTimeout set to "
                + this.clientProperties.getUpdateAgentPoolInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateAgentPoolRpcTimeoutMultiplier() != null) {
      updateAgentPoolRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateAgentPoolRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAgentPoolRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateAgentPoolRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateAgentPoolMaxRpcTimeout() != null) {
      updateAgentPoolRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateAgentPoolMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAgentPoolMaxRpcTimeout set to "
                + this.clientProperties.getUpdateAgentPoolMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateAgentPoolTotalTimeout() != null) {
      updateAgentPoolRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateAgentPoolTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAgentPoolTotalTimeout set to "
                + this.clientProperties.getUpdateAgentPoolTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateAgentPoolSettings()
        .setRetrySettings(updateAgentPoolRetrySettingBuilder.build());
    RetrySettings.Builder getAgentPoolRetrySettingBuilder =
        clientSettingsBuilder.getAgentPoolSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetAgentPoolInitialRetryDelay() != null) {
      getAgentPoolRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetAgentPoolInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAgentPoolInitialRetryDelay set to "
                + this.clientProperties.getGetAgentPoolInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetAgentPoolRetryDelayMultiplier() != null) {
      getAgentPoolRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetAgentPoolRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAgentPoolRetryDelayMultiplier set to "
                + this.clientProperties.getGetAgentPoolRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetAgentPoolMaxRetryDelay() != null) {
      getAgentPoolRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetAgentPoolMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAgentPoolMaxRetryDelay set to "
                + this.clientProperties.getGetAgentPoolMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetAgentPoolInitialRpcTimeout() != null) {
      getAgentPoolRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetAgentPoolInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAgentPoolInitialRpcTimeout set to "
                + this.clientProperties.getGetAgentPoolInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAgentPoolRpcTimeoutMultiplier() != null) {
      getAgentPoolRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetAgentPoolRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAgentPoolRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetAgentPoolRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetAgentPoolMaxRpcTimeout() != null) {
      getAgentPoolRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetAgentPoolMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAgentPoolMaxRpcTimeout set to "
                + this.clientProperties.getGetAgentPoolMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAgentPoolTotalTimeout() != null) {
      getAgentPoolRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetAgentPoolTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAgentPoolTotalTimeout set to "
                + this.clientProperties.getGetAgentPoolTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getAgentPoolSettings()
        .setRetrySettings(getAgentPoolRetrySettingBuilder.build());
    RetrySettings.Builder listAgentPoolsRetrySettingBuilder =
        clientSettingsBuilder.listAgentPoolsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListAgentPoolsInitialRetryDelay() != null) {
      listAgentPoolsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListAgentPoolsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAgentPoolsInitialRetryDelay set to "
                + this.clientProperties.getListAgentPoolsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListAgentPoolsRetryDelayMultiplier() != null) {
      listAgentPoolsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListAgentPoolsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAgentPoolsRetryDelayMultiplier set to "
                + this.clientProperties.getListAgentPoolsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListAgentPoolsMaxRetryDelay() != null) {
      listAgentPoolsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListAgentPoolsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAgentPoolsMaxRetryDelay set to "
                + this.clientProperties.getListAgentPoolsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListAgentPoolsInitialRpcTimeout() != null) {
      listAgentPoolsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListAgentPoolsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAgentPoolsInitialRpcTimeout set to "
                + this.clientProperties.getListAgentPoolsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListAgentPoolsRpcTimeoutMultiplier() != null) {
      listAgentPoolsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListAgentPoolsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAgentPoolsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListAgentPoolsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListAgentPoolsMaxRpcTimeout() != null) {
      listAgentPoolsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListAgentPoolsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAgentPoolsMaxRpcTimeout set to "
                + this.clientProperties.getListAgentPoolsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListAgentPoolsTotalTimeout() != null) {
      listAgentPoolsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListAgentPoolsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAgentPoolsTotalTimeout set to "
                + this.clientProperties.getListAgentPoolsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listAgentPoolsSettings()
        .setRetrySettings(listAgentPoolsRetrySettingBuilder.build());
    RetrySettings.Builder deleteAgentPoolRetrySettingBuilder =
        clientSettingsBuilder.deleteAgentPoolSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteAgentPoolInitialRetryDelay() != null) {
      deleteAgentPoolRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteAgentPoolInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAgentPoolInitialRetryDelay set to "
                + this.clientProperties.getDeleteAgentPoolInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteAgentPoolRetryDelayMultiplier() != null) {
      deleteAgentPoolRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteAgentPoolRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAgentPoolRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteAgentPoolRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteAgentPoolMaxRetryDelay() != null) {
      deleteAgentPoolRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteAgentPoolMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAgentPoolMaxRetryDelay set to "
                + this.clientProperties.getDeleteAgentPoolMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteAgentPoolInitialRpcTimeout() != null) {
      deleteAgentPoolRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteAgentPoolInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAgentPoolInitialRpcTimeout set to "
                + this.clientProperties.getDeleteAgentPoolInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAgentPoolRpcTimeoutMultiplier() != null) {
      deleteAgentPoolRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteAgentPoolRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAgentPoolRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteAgentPoolRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteAgentPoolMaxRpcTimeout() != null) {
      deleteAgentPoolRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteAgentPoolMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAgentPoolMaxRpcTimeout set to "
                + this.clientProperties.getDeleteAgentPoolMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAgentPoolTotalTimeout() != null) {
      deleteAgentPoolRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteAgentPoolTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAgentPoolTotalTimeout set to "
                + this.clientProperties.getDeleteAgentPoolTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteAgentPoolSettings()
        .setRetrySettings(deleteAgentPoolRetrySettingBuilder.build());
    return StorageTransferServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-storage-transfer-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
