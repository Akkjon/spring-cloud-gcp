/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.devtools.cloudbuild.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.devtools.cloudbuild.v1.CloudBuildClient;
import com.google.cloud.devtools.cloudbuild.v1.CloudBuildSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link CloudBuildClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(CloudBuildClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.devtools.cloudbuild.v1.spring.auto.cloud-build.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({CloudBuildSpringProperties.class, GlobalProperties.class})
public class CloudBuildSpringAutoConfiguration {
  private final CloudBuildSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(CloudBuildSpringAutoConfiguration.class);

  protected CloudBuildSpringAutoConfiguration(
      CloudBuildSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider cloudBuildCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from CloudBuild-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultCloudBuildTransportChannelProvider() {
    return CloudBuildSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a CloudBuildClient bean configured to use the default credentials provider (obtained
   * with cloudBuildCredentials()) and its default transport channel provider
   * (defaultCloudBuildTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in CloudBuildSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public CloudBuildClient cloudBuildClient(
      @Qualifier("cloudBuildCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultCloudBuildTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    CloudBuildSettings.Builder clientSettingsBuilder =
        CloudBuildSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          CloudBuildSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          CloudBuildSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createBuildRetrySettingBuilder =
        clientSettingsBuilder.createBuildSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateBuildInitialRpcTimeout() != null) {
      createBuildRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateBuildInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateBuildInitialRpcTimeout set to "
                + this.clientProperties.getCreateBuildInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateBuildRpcTimeoutMultiplier() != null) {
      createBuildRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateBuildRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateBuildRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateBuildRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateBuildMaxRpcTimeout() != null) {
      createBuildRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateBuildMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateBuildMaxRpcTimeout set to "
                + this.clientProperties.getCreateBuildMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateBuildTotalTimeout() != null) {
      createBuildRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateBuildTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateBuildTotalTimeout set to " + this.clientProperties.getCreateBuildTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createBuildSettings()
        .setRetrySettings(createBuildRetrySettingBuilder.build());
    RetrySettings.Builder getBuildRetrySettingBuilder =
        clientSettingsBuilder.getBuildSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetBuildInitialRetryDelay() != null) {
      getBuildRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetBuildInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBuildInitialRetryDelay set to "
                + this.clientProperties.getGetBuildInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetBuildRetryDelayMultiplier() != null) {
      getBuildRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetBuildRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBuildRetryDelayMultiplier set to "
                + this.clientProperties.getGetBuildRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetBuildMaxRetryDelay() != null) {
      getBuildRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetBuildMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBuildMaxRetryDelay set to " + this.clientProperties.getGetBuildMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetBuildInitialRpcTimeout() != null) {
      getBuildRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetBuildInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBuildInitialRpcTimeout set to "
                + this.clientProperties.getGetBuildInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetBuildRpcTimeoutMultiplier() != null) {
      getBuildRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetBuildRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBuildRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetBuildRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetBuildMaxRpcTimeout() != null) {
      getBuildRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetBuildMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBuildMaxRpcTimeout set to " + this.clientProperties.getGetBuildMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetBuildTotalTimeout() != null) {
      getBuildRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetBuildTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBuildTotalTimeout set to " + this.clientProperties.getGetBuildTotalTimeout());
      }
    }
    clientSettingsBuilder.getBuildSettings().setRetrySettings(getBuildRetrySettingBuilder.build());
    RetrySettings.Builder listBuildsRetrySettingBuilder =
        clientSettingsBuilder.listBuildsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListBuildsInitialRetryDelay() != null) {
      listBuildsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListBuildsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBuildsInitialRetryDelay set to "
                + this.clientProperties.getListBuildsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListBuildsRetryDelayMultiplier() != null) {
      listBuildsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListBuildsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBuildsRetryDelayMultiplier set to "
                + this.clientProperties.getListBuildsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListBuildsMaxRetryDelay() != null) {
      listBuildsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListBuildsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBuildsMaxRetryDelay set to " + this.clientProperties.getListBuildsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListBuildsInitialRpcTimeout() != null) {
      listBuildsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListBuildsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBuildsInitialRpcTimeout set to "
                + this.clientProperties.getListBuildsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListBuildsRpcTimeoutMultiplier() != null) {
      listBuildsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListBuildsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBuildsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListBuildsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListBuildsMaxRpcTimeout() != null) {
      listBuildsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListBuildsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBuildsMaxRpcTimeout set to " + this.clientProperties.getListBuildsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListBuildsTotalTimeout() != null) {
      listBuildsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListBuildsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBuildsTotalTimeout set to " + this.clientProperties.getListBuildsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listBuildsSettings()
        .setRetrySettings(listBuildsRetrySettingBuilder.build());
    RetrySettings.Builder cancelBuildRetrySettingBuilder =
        clientSettingsBuilder.cancelBuildSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCancelBuildInitialRpcTimeout() != null) {
      cancelBuildRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCancelBuildInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelBuildInitialRpcTimeout set to "
                + this.clientProperties.getCancelBuildInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCancelBuildRpcTimeoutMultiplier() != null) {
      cancelBuildRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCancelBuildRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelBuildRpcTimeoutMultiplier set to "
                + this.clientProperties.getCancelBuildRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCancelBuildMaxRpcTimeout() != null) {
      cancelBuildRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCancelBuildMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelBuildMaxRpcTimeout set to "
                + this.clientProperties.getCancelBuildMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCancelBuildTotalTimeout() != null) {
      cancelBuildRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCancelBuildTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelBuildTotalTimeout set to " + this.clientProperties.getCancelBuildTotalTimeout());
      }
    }
    clientSettingsBuilder
        .cancelBuildSettings()
        .setRetrySettings(cancelBuildRetrySettingBuilder.build());
    RetrySettings.Builder retryBuildRetrySettingBuilder =
        clientSettingsBuilder.retryBuildSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRetryBuildInitialRpcTimeout() != null) {
      retryBuildRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRetryBuildInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RetryBuildInitialRpcTimeout set to "
                + this.clientProperties.getRetryBuildInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRetryBuildRpcTimeoutMultiplier() != null) {
      retryBuildRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRetryBuildRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RetryBuildRpcTimeoutMultiplier set to "
                + this.clientProperties.getRetryBuildRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRetryBuildMaxRpcTimeout() != null) {
      retryBuildRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRetryBuildMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RetryBuildMaxRpcTimeout set to " + this.clientProperties.getRetryBuildMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRetryBuildTotalTimeout() != null) {
      retryBuildRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRetryBuildTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RetryBuildTotalTimeout set to " + this.clientProperties.getRetryBuildTotalTimeout());
      }
    }
    clientSettingsBuilder
        .retryBuildSettings()
        .setRetrySettings(retryBuildRetrySettingBuilder.build());
    RetrySettings.Builder approveBuildRetrySettingBuilder =
        clientSettingsBuilder.approveBuildSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getApproveBuildRpcTimeoutMultiplier() != null) {
      approveBuildRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getApproveBuildRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ApproveBuildRpcTimeoutMultiplier set to "
                + this.clientProperties.getApproveBuildRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .approveBuildSettings()
        .setRetrySettings(approveBuildRetrySettingBuilder.build());
    RetrySettings.Builder createBuildTriggerRetrySettingBuilder =
        clientSettingsBuilder.createBuildTriggerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateBuildTriggerInitialRpcTimeout() != null) {
      createBuildTriggerRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateBuildTriggerInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateBuildTriggerInitialRpcTimeout set to "
                + this.clientProperties.getCreateBuildTriggerInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateBuildTriggerRpcTimeoutMultiplier() != null) {
      createBuildTriggerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateBuildTriggerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateBuildTriggerRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateBuildTriggerRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateBuildTriggerMaxRpcTimeout() != null) {
      createBuildTriggerRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateBuildTriggerMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateBuildTriggerMaxRpcTimeout set to "
                + this.clientProperties.getCreateBuildTriggerMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateBuildTriggerTotalTimeout() != null) {
      createBuildTriggerRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateBuildTriggerTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateBuildTriggerTotalTimeout set to "
                + this.clientProperties.getCreateBuildTriggerTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createBuildTriggerSettings()
        .setRetrySettings(createBuildTriggerRetrySettingBuilder.build());
    RetrySettings.Builder getBuildTriggerRetrySettingBuilder =
        clientSettingsBuilder.getBuildTriggerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetBuildTriggerInitialRetryDelay() != null) {
      getBuildTriggerRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetBuildTriggerInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBuildTriggerInitialRetryDelay set to "
                + this.clientProperties.getGetBuildTriggerInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetBuildTriggerRetryDelayMultiplier() != null) {
      getBuildTriggerRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetBuildTriggerRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBuildTriggerRetryDelayMultiplier set to "
                + this.clientProperties.getGetBuildTriggerRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetBuildTriggerMaxRetryDelay() != null) {
      getBuildTriggerRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetBuildTriggerMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBuildTriggerMaxRetryDelay set to "
                + this.clientProperties.getGetBuildTriggerMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetBuildTriggerInitialRpcTimeout() != null) {
      getBuildTriggerRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetBuildTriggerInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBuildTriggerInitialRpcTimeout set to "
                + this.clientProperties.getGetBuildTriggerInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetBuildTriggerRpcTimeoutMultiplier() != null) {
      getBuildTriggerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetBuildTriggerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBuildTriggerRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetBuildTriggerRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetBuildTriggerMaxRpcTimeout() != null) {
      getBuildTriggerRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetBuildTriggerMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBuildTriggerMaxRpcTimeout set to "
                + this.clientProperties.getGetBuildTriggerMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetBuildTriggerTotalTimeout() != null) {
      getBuildTriggerRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetBuildTriggerTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBuildTriggerTotalTimeout set to "
                + this.clientProperties.getGetBuildTriggerTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getBuildTriggerSettings()
        .setRetrySettings(getBuildTriggerRetrySettingBuilder.build());
    RetrySettings.Builder listBuildTriggersRetrySettingBuilder =
        clientSettingsBuilder.listBuildTriggersSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListBuildTriggersInitialRetryDelay() != null) {
      listBuildTriggersRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListBuildTriggersInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBuildTriggersInitialRetryDelay set to "
                + this.clientProperties.getListBuildTriggersInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListBuildTriggersRetryDelayMultiplier() != null) {
      listBuildTriggersRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListBuildTriggersRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBuildTriggersRetryDelayMultiplier set to "
                + this.clientProperties.getListBuildTriggersRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListBuildTriggersMaxRetryDelay() != null) {
      listBuildTriggersRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListBuildTriggersMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBuildTriggersMaxRetryDelay set to "
                + this.clientProperties.getListBuildTriggersMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListBuildTriggersInitialRpcTimeout() != null) {
      listBuildTriggersRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListBuildTriggersInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBuildTriggersInitialRpcTimeout set to "
                + this.clientProperties.getListBuildTriggersInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListBuildTriggersRpcTimeoutMultiplier() != null) {
      listBuildTriggersRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListBuildTriggersRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBuildTriggersRpcTimeoutMultiplier set to "
                + this.clientProperties.getListBuildTriggersRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListBuildTriggersMaxRpcTimeout() != null) {
      listBuildTriggersRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListBuildTriggersMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBuildTriggersMaxRpcTimeout set to "
                + this.clientProperties.getListBuildTriggersMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListBuildTriggersTotalTimeout() != null) {
      listBuildTriggersRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListBuildTriggersTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBuildTriggersTotalTimeout set to "
                + this.clientProperties.getListBuildTriggersTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listBuildTriggersSettings()
        .setRetrySettings(listBuildTriggersRetrySettingBuilder.build());
    RetrySettings.Builder deleteBuildTriggerRetrySettingBuilder =
        clientSettingsBuilder.deleteBuildTriggerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteBuildTriggerInitialRetryDelay() != null) {
      deleteBuildTriggerRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteBuildTriggerInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteBuildTriggerInitialRetryDelay set to "
                + this.clientProperties.getDeleteBuildTriggerInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteBuildTriggerRetryDelayMultiplier() != null) {
      deleteBuildTriggerRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteBuildTriggerRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteBuildTriggerRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteBuildTriggerRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteBuildTriggerMaxRetryDelay() != null) {
      deleteBuildTriggerRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteBuildTriggerMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteBuildTriggerMaxRetryDelay set to "
                + this.clientProperties.getDeleteBuildTriggerMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteBuildTriggerInitialRpcTimeout() != null) {
      deleteBuildTriggerRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteBuildTriggerInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteBuildTriggerInitialRpcTimeout set to "
                + this.clientProperties.getDeleteBuildTriggerInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteBuildTriggerRpcTimeoutMultiplier() != null) {
      deleteBuildTriggerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteBuildTriggerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteBuildTriggerRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteBuildTriggerRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteBuildTriggerMaxRpcTimeout() != null) {
      deleteBuildTriggerRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteBuildTriggerMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteBuildTriggerMaxRpcTimeout set to "
                + this.clientProperties.getDeleteBuildTriggerMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteBuildTriggerTotalTimeout() != null) {
      deleteBuildTriggerRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteBuildTriggerTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteBuildTriggerTotalTimeout set to "
                + this.clientProperties.getDeleteBuildTriggerTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteBuildTriggerSettings()
        .setRetrySettings(deleteBuildTriggerRetrySettingBuilder.build());
    RetrySettings.Builder updateBuildTriggerRetrySettingBuilder =
        clientSettingsBuilder.updateBuildTriggerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateBuildTriggerInitialRpcTimeout() != null) {
      updateBuildTriggerRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateBuildTriggerInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateBuildTriggerInitialRpcTimeout set to "
                + this.clientProperties.getUpdateBuildTriggerInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateBuildTriggerRpcTimeoutMultiplier() != null) {
      updateBuildTriggerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateBuildTriggerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateBuildTriggerRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateBuildTriggerRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateBuildTriggerMaxRpcTimeout() != null) {
      updateBuildTriggerRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateBuildTriggerMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateBuildTriggerMaxRpcTimeout set to "
                + this.clientProperties.getUpdateBuildTriggerMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateBuildTriggerTotalTimeout() != null) {
      updateBuildTriggerRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateBuildTriggerTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateBuildTriggerTotalTimeout set to "
                + this.clientProperties.getUpdateBuildTriggerTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateBuildTriggerSettings()
        .setRetrySettings(updateBuildTriggerRetrySettingBuilder.build());
    RetrySettings.Builder runBuildTriggerRetrySettingBuilder =
        clientSettingsBuilder.runBuildTriggerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRunBuildTriggerInitialRpcTimeout() != null) {
      runBuildTriggerRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRunBuildTriggerInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RunBuildTriggerInitialRpcTimeout set to "
                + this.clientProperties.getRunBuildTriggerInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRunBuildTriggerRpcTimeoutMultiplier() != null) {
      runBuildTriggerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRunBuildTriggerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RunBuildTriggerRpcTimeoutMultiplier set to "
                + this.clientProperties.getRunBuildTriggerRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRunBuildTriggerMaxRpcTimeout() != null) {
      runBuildTriggerRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRunBuildTriggerMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RunBuildTriggerMaxRpcTimeout set to "
                + this.clientProperties.getRunBuildTriggerMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRunBuildTriggerTotalTimeout() != null) {
      runBuildTriggerRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRunBuildTriggerTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RunBuildTriggerTotalTimeout set to "
                + this.clientProperties.getRunBuildTriggerTotalTimeout());
      }
    }
    clientSettingsBuilder
        .runBuildTriggerSettings()
        .setRetrySettings(runBuildTriggerRetrySettingBuilder.build());
    RetrySettings.Builder receiveTriggerWebhookRetrySettingBuilder =
        clientSettingsBuilder.receiveTriggerWebhookSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getReceiveTriggerWebhookRpcTimeoutMultiplier() != null) {
      receiveTriggerWebhookRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getReceiveTriggerWebhookRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReceiveTriggerWebhookRpcTimeoutMultiplier set to "
                + this.clientProperties.getReceiveTriggerWebhookRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .receiveTriggerWebhookSettings()
        .setRetrySettings(receiveTriggerWebhookRetrySettingBuilder.build());
    RetrySettings.Builder createWorkerPoolRetrySettingBuilder =
        clientSettingsBuilder.createWorkerPoolSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateWorkerPoolInitialRpcTimeout() != null) {
      createWorkerPoolRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateWorkerPoolInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateWorkerPoolInitialRpcTimeout set to "
                + this.clientProperties.getCreateWorkerPoolInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateWorkerPoolRpcTimeoutMultiplier() != null) {
      createWorkerPoolRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateWorkerPoolRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateWorkerPoolRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateWorkerPoolRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateWorkerPoolMaxRpcTimeout() != null) {
      createWorkerPoolRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateWorkerPoolMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateWorkerPoolMaxRpcTimeout set to "
                + this.clientProperties.getCreateWorkerPoolMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateWorkerPoolTotalTimeout() != null) {
      createWorkerPoolRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateWorkerPoolTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateWorkerPoolTotalTimeout set to "
                + this.clientProperties.getCreateWorkerPoolTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createWorkerPoolSettings()
        .setRetrySettings(createWorkerPoolRetrySettingBuilder.build());
    RetrySettings.Builder getWorkerPoolRetrySettingBuilder =
        clientSettingsBuilder.getWorkerPoolSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetWorkerPoolInitialRetryDelay() != null) {
      getWorkerPoolRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetWorkerPoolInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetWorkerPoolInitialRetryDelay set to "
                + this.clientProperties.getGetWorkerPoolInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetWorkerPoolRetryDelayMultiplier() != null) {
      getWorkerPoolRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetWorkerPoolRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetWorkerPoolRetryDelayMultiplier set to "
                + this.clientProperties.getGetWorkerPoolRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetWorkerPoolMaxRetryDelay() != null) {
      getWorkerPoolRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetWorkerPoolMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetWorkerPoolMaxRetryDelay set to "
                + this.clientProperties.getGetWorkerPoolMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetWorkerPoolInitialRpcTimeout() != null) {
      getWorkerPoolRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetWorkerPoolInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetWorkerPoolInitialRpcTimeout set to "
                + this.clientProperties.getGetWorkerPoolInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetWorkerPoolRpcTimeoutMultiplier() != null) {
      getWorkerPoolRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetWorkerPoolRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetWorkerPoolRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetWorkerPoolRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetWorkerPoolMaxRpcTimeout() != null) {
      getWorkerPoolRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetWorkerPoolMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetWorkerPoolMaxRpcTimeout set to "
                + this.clientProperties.getGetWorkerPoolMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetWorkerPoolTotalTimeout() != null) {
      getWorkerPoolRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetWorkerPoolTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetWorkerPoolTotalTimeout set to "
                + this.clientProperties.getGetWorkerPoolTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getWorkerPoolSettings()
        .setRetrySettings(getWorkerPoolRetrySettingBuilder.build());
    RetrySettings.Builder deleteWorkerPoolRetrySettingBuilder =
        clientSettingsBuilder.deleteWorkerPoolSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteWorkerPoolInitialRpcTimeout() != null) {
      deleteWorkerPoolRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteWorkerPoolInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteWorkerPoolInitialRpcTimeout set to "
                + this.clientProperties.getDeleteWorkerPoolInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteWorkerPoolRpcTimeoutMultiplier() != null) {
      deleteWorkerPoolRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteWorkerPoolRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteWorkerPoolRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteWorkerPoolRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteWorkerPoolMaxRpcTimeout() != null) {
      deleteWorkerPoolRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteWorkerPoolMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteWorkerPoolMaxRpcTimeout set to "
                + this.clientProperties.getDeleteWorkerPoolMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteWorkerPoolTotalTimeout() != null) {
      deleteWorkerPoolRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteWorkerPoolTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteWorkerPoolTotalTimeout set to "
                + this.clientProperties.getDeleteWorkerPoolTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteWorkerPoolSettings()
        .setRetrySettings(deleteWorkerPoolRetrySettingBuilder.build());
    RetrySettings.Builder updateWorkerPoolRetrySettingBuilder =
        clientSettingsBuilder.updateWorkerPoolSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateWorkerPoolInitialRpcTimeout() != null) {
      updateWorkerPoolRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateWorkerPoolInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateWorkerPoolInitialRpcTimeout set to "
                + this.clientProperties.getUpdateWorkerPoolInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateWorkerPoolRpcTimeoutMultiplier() != null) {
      updateWorkerPoolRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateWorkerPoolRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateWorkerPoolRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateWorkerPoolRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateWorkerPoolMaxRpcTimeout() != null) {
      updateWorkerPoolRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateWorkerPoolMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateWorkerPoolMaxRpcTimeout set to "
                + this.clientProperties.getUpdateWorkerPoolMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateWorkerPoolTotalTimeout() != null) {
      updateWorkerPoolRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateWorkerPoolTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateWorkerPoolTotalTimeout set to "
                + this.clientProperties.getUpdateWorkerPoolTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateWorkerPoolSettings()
        .setRetrySettings(updateWorkerPoolRetrySettingBuilder.build());
    RetrySettings.Builder listWorkerPoolsRetrySettingBuilder =
        clientSettingsBuilder.listWorkerPoolsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListWorkerPoolsInitialRetryDelay() != null) {
      listWorkerPoolsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListWorkerPoolsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListWorkerPoolsInitialRetryDelay set to "
                + this.clientProperties.getListWorkerPoolsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListWorkerPoolsRetryDelayMultiplier() != null) {
      listWorkerPoolsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListWorkerPoolsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListWorkerPoolsRetryDelayMultiplier set to "
                + this.clientProperties.getListWorkerPoolsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListWorkerPoolsMaxRetryDelay() != null) {
      listWorkerPoolsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListWorkerPoolsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListWorkerPoolsMaxRetryDelay set to "
                + this.clientProperties.getListWorkerPoolsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListWorkerPoolsInitialRpcTimeout() != null) {
      listWorkerPoolsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListWorkerPoolsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListWorkerPoolsInitialRpcTimeout set to "
                + this.clientProperties.getListWorkerPoolsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListWorkerPoolsRpcTimeoutMultiplier() != null) {
      listWorkerPoolsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListWorkerPoolsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListWorkerPoolsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListWorkerPoolsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListWorkerPoolsMaxRpcTimeout() != null) {
      listWorkerPoolsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListWorkerPoolsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListWorkerPoolsMaxRpcTimeout set to "
                + this.clientProperties.getListWorkerPoolsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListWorkerPoolsTotalTimeout() != null) {
      listWorkerPoolsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListWorkerPoolsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListWorkerPoolsTotalTimeout set to "
                + this.clientProperties.getListWorkerPoolsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listWorkerPoolsSettings()
        .setRetrySettings(listWorkerPoolsRetrySettingBuilder.build());
    return CloudBuildClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-cloud-build";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
