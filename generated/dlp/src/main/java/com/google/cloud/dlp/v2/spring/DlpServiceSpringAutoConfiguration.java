/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dlp.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dlp.v2.DlpServiceClient;
import com.google.cloud.dlp.v2.DlpServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link DlpServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(DlpServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dlp.v2.spring.auto.dlp-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({DlpServiceSpringProperties.class, GlobalProperties.class})
public class DlpServiceSpringAutoConfiguration {
  private final DlpServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(DlpServiceSpringAutoConfiguration.class);

  protected DlpServiceSpringAutoConfiguration(
      DlpServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider dlpServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from DlpService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultDlpServiceTransportChannelProvider() {
    return DlpServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a DlpServiceClient bean configured to use the default credentials provider (obtained
   * with dlpServiceCredentials()) and its default transport channel provider
   * (defaultDlpServiceTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in DlpServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public DlpServiceClient dlpServiceClient(
      @Qualifier("dlpServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultDlpServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    DlpServiceSettings.Builder clientSettingsBuilder =
        DlpServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          DlpServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          DlpServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder inspectContentRetrySettingBuilder =
        clientSettingsBuilder.inspectContentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getInspectContentInitialRetryDelay() != null) {
      inspectContentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getInspectContentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InspectContentInitialRetryDelay set to "
                + this.clientProperties.getInspectContentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getInspectContentRetryDelayMultiplier() != null) {
      inspectContentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getInspectContentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InspectContentRetryDelayMultiplier set to "
                + this.clientProperties.getInspectContentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getInspectContentMaxRetryDelay() != null) {
      inspectContentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getInspectContentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InspectContentMaxRetryDelay set to "
                + this.clientProperties.getInspectContentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getInspectContentInitialRpcTimeout() != null) {
      inspectContentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getInspectContentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InspectContentInitialRpcTimeout set to "
                + this.clientProperties.getInspectContentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getInspectContentRpcTimeoutMultiplier() != null) {
      inspectContentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getInspectContentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InspectContentRpcTimeoutMultiplier set to "
                + this.clientProperties.getInspectContentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getInspectContentMaxRpcTimeout() != null) {
      inspectContentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getInspectContentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InspectContentMaxRpcTimeout set to "
                + this.clientProperties.getInspectContentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getInspectContentTotalTimeout() != null) {
      inspectContentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getInspectContentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InspectContentTotalTimeout set to "
                + this.clientProperties.getInspectContentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .inspectContentSettings()
        .setRetrySettings(inspectContentRetrySettingBuilder.build());
    RetrySettings.Builder redactImageRetrySettingBuilder =
        clientSettingsBuilder.redactImageSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRedactImageInitialRetryDelay() != null) {
      redactImageRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getRedactImageInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RedactImageInitialRetryDelay set to "
                + this.clientProperties.getRedactImageInitialRetryDelay());
      }
    }
    if (this.clientProperties.getRedactImageRetryDelayMultiplier() != null) {
      redactImageRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getRedactImageRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RedactImageRetryDelayMultiplier set to "
                + this.clientProperties.getRedactImageRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getRedactImageMaxRetryDelay() != null) {
      redactImageRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getRedactImageMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RedactImageMaxRetryDelay set to "
                + this.clientProperties.getRedactImageMaxRetryDelay());
      }
    }
    if (this.clientProperties.getRedactImageInitialRpcTimeout() != null) {
      redactImageRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRedactImageInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RedactImageInitialRpcTimeout set to "
                + this.clientProperties.getRedactImageInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRedactImageRpcTimeoutMultiplier() != null) {
      redactImageRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRedactImageRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RedactImageRpcTimeoutMultiplier set to "
                + this.clientProperties.getRedactImageRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRedactImageMaxRpcTimeout() != null) {
      redactImageRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRedactImageMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RedactImageMaxRpcTimeout set to "
                + this.clientProperties.getRedactImageMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRedactImageTotalTimeout() != null) {
      redactImageRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRedactImageTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RedactImageTotalTimeout set to " + this.clientProperties.getRedactImageTotalTimeout());
      }
    }
    clientSettingsBuilder
        .redactImageSettings()
        .setRetrySettings(redactImageRetrySettingBuilder.build());
    RetrySettings.Builder deidentifyContentRetrySettingBuilder =
        clientSettingsBuilder.deidentifyContentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeidentifyContentInitialRetryDelay() != null) {
      deidentifyContentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeidentifyContentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeidentifyContentInitialRetryDelay set to "
                + this.clientProperties.getDeidentifyContentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeidentifyContentRetryDelayMultiplier() != null) {
      deidentifyContentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeidentifyContentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeidentifyContentRetryDelayMultiplier set to "
                + this.clientProperties.getDeidentifyContentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeidentifyContentMaxRetryDelay() != null) {
      deidentifyContentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeidentifyContentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeidentifyContentMaxRetryDelay set to "
                + this.clientProperties.getDeidentifyContentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeidentifyContentInitialRpcTimeout() != null) {
      deidentifyContentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeidentifyContentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeidentifyContentInitialRpcTimeout set to "
                + this.clientProperties.getDeidentifyContentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeidentifyContentRpcTimeoutMultiplier() != null) {
      deidentifyContentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeidentifyContentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeidentifyContentRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeidentifyContentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeidentifyContentMaxRpcTimeout() != null) {
      deidentifyContentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeidentifyContentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeidentifyContentMaxRpcTimeout set to "
                + this.clientProperties.getDeidentifyContentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeidentifyContentTotalTimeout() != null) {
      deidentifyContentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeidentifyContentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeidentifyContentTotalTimeout set to "
                + this.clientProperties.getDeidentifyContentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deidentifyContentSettings()
        .setRetrySettings(deidentifyContentRetrySettingBuilder.build());
    RetrySettings.Builder reidentifyContentRetrySettingBuilder =
        clientSettingsBuilder.reidentifyContentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getReidentifyContentInitialRetryDelay() != null) {
      reidentifyContentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getReidentifyContentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReidentifyContentInitialRetryDelay set to "
                + this.clientProperties.getReidentifyContentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getReidentifyContentRetryDelayMultiplier() != null) {
      reidentifyContentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getReidentifyContentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReidentifyContentRetryDelayMultiplier set to "
                + this.clientProperties.getReidentifyContentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getReidentifyContentMaxRetryDelay() != null) {
      reidentifyContentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getReidentifyContentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReidentifyContentMaxRetryDelay set to "
                + this.clientProperties.getReidentifyContentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getReidentifyContentInitialRpcTimeout() != null) {
      reidentifyContentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getReidentifyContentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReidentifyContentInitialRpcTimeout set to "
                + this.clientProperties.getReidentifyContentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getReidentifyContentRpcTimeoutMultiplier() != null) {
      reidentifyContentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getReidentifyContentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReidentifyContentRpcTimeoutMultiplier set to "
                + this.clientProperties.getReidentifyContentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getReidentifyContentMaxRpcTimeout() != null) {
      reidentifyContentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getReidentifyContentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReidentifyContentMaxRpcTimeout set to "
                + this.clientProperties.getReidentifyContentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getReidentifyContentTotalTimeout() != null) {
      reidentifyContentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getReidentifyContentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReidentifyContentTotalTimeout set to "
                + this.clientProperties.getReidentifyContentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .reidentifyContentSettings()
        .setRetrySettings(reidentifyContentRetrySettingBuilder.build());
    RetrySettings.Builder listInfoTypesRetrySettingBuilder =
        clientSettingsBuilder.listInfoTypesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListInfoTypesInitialRetryDelay() != null) {
      listInfoTypesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListInfoTypesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInfoTypesInitialRetryDelay set to "
                + this.clientProperties.getListInfoTypesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListInfoTypesRetryDelayMultiplier() != null) {
      listInfoTypesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListInfoTypesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInfoTypesRetryDelayMultiplier set to "
                + this.clientProperties.getListInfoTypesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListInfoTypesMaxRetryDelay() != null) {
      listInfoTypesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListInfoTypesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInfoTypesMaxRetryDelay set to "
                + this.clientProperties.getListInfoTypesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListInfoTypesInitialRpcTimeout() != null) {
      listInfoTypesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListInfoTypesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInfoTypesInitialRpcTimeout set to "
                + this.clientProperties.getListInfoTypesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListInfoTypesRpcTimeoutMultiplier() != null) {
      listInfoTypesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListInfoTypesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInfoTypesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListInfoTypesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListInfoTypesMaxRpcTimeout() != null) {
      listInfoTypesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListInfoTypesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInfoTypesMaxRpcTimeout set to "
                + this.clientProperties.getListInfoTypesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListInfoTypesTotalTimeout() != null) {
      listInfoTypesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListInfoTypesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInfoTypesTotalTimeout set to "
                + this.clientProperties.getListInfoTypesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listInfoTypesSettings()
        .setRetrySettings(listInfoTypesRetrySettingBuilder.build());
    RetrySettings.Builder createInspectTemplateRetrySettingBuilder =
        clientSettingsBuilder.createInspectTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateInspectTemplateInitialRpcTimeout() != null) {
      createInspectTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateInspectTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateInspectTemplateInitialRpcTimeout set to "
                + this.clientProperties.getCreateInspectTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateInspectTemplateRpcTimeoutMultiplier() != null) {
      createInspectTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateInspectTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateInspectTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateInspectTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateInspectTemplateMaxRpcTimeout() != null) {
      createInspectTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateInspectTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateInspectTemplateMaxRpcTimeout set to "
                + this.clientProperties.getCreateInspectTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateInspectTemplateTotalTimeout() != null) {
      createInspectTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateInspectTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateInspectTemplateTotalTimeout set to "
                + this.clientProperties.getCreateInspectTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createInspectTemplateSettings()
        .setRetrySettings(createInspectTemplateRetrySettingBuilder.build());
    RetrySettings.Builder updateInspectTemplateRetrySettingBuilder =
        clientSettingsBuilder.updateInspectTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateInspectTemplateInitialRpcTimeout() != null) {
      updateInspectTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateInspectTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInspectTemplateInitialRpcTimeout set to "
                + this.clientProperties.getUpdateInspectTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateInspectTemplateRpcTimeoutMultiplier() != null) {
      updateInspectTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateInspectTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInspectTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateInspectTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateInspectTemplateMaxRpcTimeout() != null) {
      updateInspectTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateInspectTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInspectTemplateMaxRpcTimeout set to "
                + this.clientProperties.getUpdateInspectTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateInspectTemplateTotalTimeout() != null) {
      updateInspectTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateInspectTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInspectTemplateTotalTimeout set to "
                + this.clientProperties.getUpdateInspectTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateInspectTemplateSettings()
        .setRetrySettings(updateInspectTemplateRetrySettingBuilder.build());
    RetrySettings.Builder getInspectTemplateRetrySettingBuilder =
        clientSettingsBuilder.getInspectTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetInspectTemplateInitialRetryDelay() != null) {
      getInspectTemplateRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetInspectTemplateInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInspectTemplateInitialRetryDelay set to "
                + this.clientProperties.getGetInspectTemplateInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetInspectTemplateRetryDelayMultiplier() != null) {
      getInspectTemplateRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetInspectTemplateRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInspectTemplateRetryDelayMultiplier set to "
                + this.clientProperties.getGetInspectTemplateRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetInspectTemplateMaxRetryDelay() != null) {
      getInspectTemplateRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetInspectTemplateMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInspectTemplateMaxRetryDelay set to "
                + this.clientProperties.getGetInspectTemplateMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetInspectTemplateInitialRpcTimeout() != null) {
      getInspectTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetInspectTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInspectTemplateInitialRpcTimeout set to "
                + this.clientProperties.getGetInspectTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetInspectTemplateRpcTimeoutMultiplier() != null) {
      getInspectTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetInspectTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInspectTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetInspectTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetInspectTemplateMaxRpcTimeout() != null) {
      getInspectTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetInspectTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInspectTemplateMaxRpcTimeout set to "
                + this.clientProperties.getGetInspectTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetInspectTemplateTotalTimeout() != null) {
      getInspectTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetInspectTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInspectTemplateTotalTimeout set to "
                + this.clientProperties.getGetInspectTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getInspectTemplateSettings()
        .setRetrySettings(getInspectTemplateRetrySettingBuilder.build());
    RetrySettings.Builder listInspectTemplatesRetrySettingBuilder =
        clientSettingsBuilder.listInspectTemplatesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListInspectTemplatesInitialRetryDelay() != null) {
      listInspectTemplatesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListInspectTemplatesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInspectTemplatesInitialRetryDelay set to "
                + this.clientProperties.getListInspectTemplatesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListInspectTemplatesRetryDelayMultiplier() != null) {
      listInspectTemplatesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListInspectTemplatesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInspectTemplatesRetryDelayMultiplier set to "
                + this.clientProperties.getListInspectTemplatesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListInspectTemplatesMaxRetryDelay() != null) {
      listInspectTemplatesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListInspectTemplatesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInspectTemplatesMaxRetryDelay set to "
                + this.clientProperties.getListInspectTemplatesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListInspectTemplatesInitialRpcTimeout() != null) {
      listInspectTemplatesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListInspectTemplatesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInspectTemplatesInitialRpcTimeout set to "
                + this.clientProperties.getListInspectTemplatesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListInspectTemplatesRpcTimeoutMultiplier() != null) {
      listInspectTemplatesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListInspectTemplatesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInspectTemplatesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListInspectTemplatesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListInspectTemplatesMaxRpcTimeout() != null) {
      listInspectTemplatesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListInspectTemplatesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInspectTemplatesMaxRpcTimeout set to "
                + this.clientProperties.getListInspectTemplatesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListInspectTemplatesTotalTimeout() != null) {
      listInspectTemplatesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListInspectTemplatesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInspectTemplatesTotalTimeout set to "
                + this.clientProperties.getListInspectTemplatesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listInspectTemplatesSettings()
        .setRetrySettings(listInspectTemplatesRetrySettingBuilder.build());
    RetrySettings.Builder deleteInspectTemplateRetrySettingBuilder =
        clientSettingsBuilder.deleteInspectTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteInspectTemplateInitialRetryDelay() != null) {
      deleteInspectTemplateRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteInspectTemplateInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteInspectTemplateInitialRetryDelay set to "
                + this.clientProperties.getDeleteInspectTemplateInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteInspectTemplateRetryDelayMultiplier() != null) {
      deleteInspectTemplateRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteInspectTemplateRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteInspectTemplateRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteInspectTemplateRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteInspectTemplateMaxRetryDelay() != null) {
      deleteInspectTemplateRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteInspectTemplateMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteInspectTemplateMaxRetryDelay set to "
                + this.clientProperties.getDeleteInspectTemplateMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteInspectTemplateInitialRpcTimeout() != null) {
      deleteInspectTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteInspectTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteInspectTemplateInitialRpcTimeout set to "
                + this.clientProperties.getDeleteInspectTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteInspectTemplateRpcTimeoutMultiplier() != null) {
      deleteInspectTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteInspectTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteInspectTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteInspectTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteInspectTemplateMaxRpcTimeout() != null) {
      deleteInspectTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteInspectTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteInspectTemplateMaxRpcTimeout set to "
                + this.clientProperties.getDeleteInspectTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteInspectTemplateTotalTimeout() != null) {
      deleteInspectTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteInspectTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteInspectTemplateTotalTimeout set to "
                + this.clientProperties.getDeleteInspectTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteInspectTemplateSettings()
        .setRetrySettings(deleteInspectTemplateRetrySettingBuilder.build());
    RetrySettings.Builder createDeidentifyTemplateRetrySettingBuilder =
        clientSettingsBuilder.createDeidentifyTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateDeidentifyTemplateInitialRpcTimeout() != null) {
      createDeidentifyTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateDeidentifyTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDeidentifyTemplateInitialRpcTimeout set to "
                + this.clientProperties.getCreateDeidentifyTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateDeidentifyTemplateRpcTimeoutMultiplier() != null) {
      createDeidentifyTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateDeidentifyTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDeidentifyTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateDeidentifyTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateDeidentifyTemplateMaxRpcTimeout() != null) {
      createDeidentifyTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateDeidentifyTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDeidentifyTemplateMaxRpcTimeout set to "
                + this.clientProperties.getCreateDeidentifyTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateDeidentifyTemplateTotalTimeout() != null) {
      createDeidentifyTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateDeidentifyTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDeidentifyTemplateTotalTimeout set to "
                + this.clientProperties.getCreateDeidentifyTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createDeidentifyTemplateSettings()
        .setRetrySettings(createDeidentifyTemplateRetrySettingBuilder.build());
    RetrySettings.Builder updateDeidentifyTemplateRetrySettingBuilder =
        clientSettingsBuilder.updateDeidentifyTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateDeidentifyTemplateInitialRpcTimeout() != null) {
      updateDeidentifyTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateDeidentifyTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDeidentifyTemplateInitialRpcTimeout set to "
                + this.clientProperties.getUpdateDeidentifyTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateDeidentifyTemplateRpcTimeoutMultiplier() != null) {
      updateDeidentifyTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateDeidentifyTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDeidentifyTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateDeidentifyTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateDeidentifyTemplateMaxRpcTimeout() != null) {
      updateDeidentifyTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateDeidentifyTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDeidentifyTemplateMaxRpcTimeout set to "
                + this.clientProperties.getUpdateDeidentifyTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateDeidentifyTemplateTotalTimeout() != null) {
      updateDeidentifyTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateDeidentifyTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDeidentifyTemplateTotalTimeout set to "
                + this.clientProperties.getUpdateDeidentifyTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateDeidentifyTemplateSettings()
        .setRetrySettings(updateDeidentifyTemplateRetrySettingBuilder.build());
    RetrySettings.Builder getDeidentifyTemplateRetrySettingBuilder =
        clientSettingsBuilder.getDeidentifyTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetDeidentifyTemplateInitialRetryDelay() != null) {
      getDeidentifyTemplateRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetDeidentifyTemplateInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDeidentifyTemplateInitialRetryDelay set to "
                + this.clientProperties.getGetDeidentifyTemplateInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetDeidentifyTemplateRetryDelayMultiplier() != null) {
      getDeidentifyTemplateRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetDeidentifyTemplateRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDeidentifyTemplateRetryDelayMultiplier set to "
                + this.clientProperties.getGetDeidentifyTemplateRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetDeidentifyTemplateMaxRetryDelay() != null) {
      getDeidentifyTemplateRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetDeidentifyTemplateMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDeidentifyTemplateMaxRetryDelay set to "
                + this.clientProperties.getGetDeidentifyTemplateMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetDeidentifyTemplateInitialRpcTimeout() != null) {
      getDeidentifyTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetDeidentifyTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDeidentifyTemplateInitialRpcTimeout set to "
                + this.clientProperties.getGetDeidentifyTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDeidentifyTemplateRpcTimeoutMultiplier() != null) {
      getDeidentifyTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetDeidentifyTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDeidentifyTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetDeidentifyTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetDeidentifyTemplateMaxRpcTimeout() != null) {
      getDeidentifyTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetDeidentifyTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDeidentifyTemplateMaxRpcTimeout set to "
                + this.clientProperties.getGetDeidentifyTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDeidentifyTemplateTotalTimeout() != null) {
      getDeidentifyTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetDeidentifyTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDeidentifyTemplateTotalTimeout set to "
                + this.clientProperties.getGetDeidentifyTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getDeidentifyTemplateSettings()
        .setRetrySettings(getDeidentifyTemplateRetrySettingBuilder.build());
    RetrySettings.Builder listDeidentifyTemplatesRetrySettingBuilder =
        clientSettingsBuilder.listDeidentifyTemplatesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListDeidentifyTemplatesInitialRetryDelay() != null) {
      listDeidentifyTemplatesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListDeidentifyTemplatesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDeidentifyTemplatesInitialRetryDelay set to "
                + this.clientProperties.getListDeidentifyTemplatesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListDeidentifyTemplatesRetryDelayMultiplier() != null) {
      listDeidentifyTemplatesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListDeidentifyTemplatesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDeidentifyTemplatesRetryDelayMultiplier set to "
                + this.clientProperties.getListDeidentifyTemplatesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListDeidentifyTemplatesMaxRetryDelay() != null) {
      listDeidentifyTemplatesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListDeidentifyTemplatesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDeidentifyTemplatesMaxRetryDelay set to "
                + this.clientProperties.getListDeidentifyTemplatesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListDeidentifyTemplatesInitialRpcTimeout() != null) {
      listDeidentifyTemplatesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListDeidentifyTemplatesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDeidentifyTemplatesInitialRpcTimeout set to "
                + this.clientProperties.getListDeidentifyTemplatesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListDeidentifyTemplatesRpcTimeoutMultiplier() != null) {
      listDeidentifyTemplatesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListDeidentifyTemplatesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDeidentifyTemplatesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListDeidentifyTemplatesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListDeidentifyTemplatesMaxRpcTimeout() != null) {
      listDeidentifyTemplatesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListDeidentifyTemplatesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDeidentifyTemplatesMaxRpcTimeout set to "
                + this.clientProperties.getListDeidentifyTemplatesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListDeidentifyTemplatesTotalTimeout() != null) {
      listDeidentifyTemplatesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListDeidentifyTemplatesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDeidentifyTemplatesTotalTimeout set to "
                + this.clientProperties.getListDeidentifyTemplatesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listDeidentifyTemplatesSettings()
        .setRetrySettings(listDeidentifyTemplatesRetrySettingBuilder.build());
    RetrySettings.Builder deleteDeidentifyTemplateRetrySettingBuilder =
        clientSettingsBuilder.deleteDeidentifyTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteDeidentifyTemplateInitialRetryDelay() != null) {
      deleteDeidentifyTemplateRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteDeidentifyTemplateInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDeidentifyTemplateInitialRetryDelay set to "
                + this.clientProperties.getDeleteDeidentifyTemplateInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteDeidentifyTemplateRetryDelayMultiplier() != null) {
      deleteDeidentifyTemplateRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteDeidentifyTemplateRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDeidentifyTemplateRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteDeidentifyTemplateRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteDeidentifyTemplateMaxRetryDelay() != null) {
      deleteDeidentifyTemplateRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteDeidentifyTemplateMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDeidentifyTemplateMaxRetryDelay set to "
                + this.clientProperties.getDeleteDeidentifyTemplateMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteDeidentifyTemplateInitialRpcTimeout() != null) {
      deleteDeidentifyTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteDeidentifyTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDeidentifyTemplateInitialRpcTimeout set to "
                + this.clientProperties.getDeleteDeidentifyTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteDeidentifyTemplateRpcTimeoutMultiplier() != null) {
      deleteDeidentifyTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteDeidentifyTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDeidentifyTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteDeidentifyTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteDeidentifyTemplateMaxRpcTimeout() != null) {
      deleteDeidentifyTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteDeidentifyTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDeidentifyTemplateMaxRpcTimeout set to "
                + this.clientProperties.getDeleteDeidentifyTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteDeidentifyTemplateTotalTimeout() != null) {
      deleteDeidentifyTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteDeidentifyTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDeidentifyTemplateTotalTimeout set to "
                + this.clientProperties.getDeleteDeidentifyTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteDeidentifyTemplateSettings()
        .setRetrySettings(deleteDeidentifyTemplateRetrySettingBuilder.build());
    RetrySettings.Builder createJobTriggerRetrySettingBuilder =
        clientSettingsBuilder.createJobTriggerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateJobTriggerInitialRpcTimeout() != null) {
      createJobTriggerRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateJobTriggerInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateJobTriggerInitialRpcTimeout set to "
                + this.clientProperties.getCreateJobTriggerInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateJobTriggerRpcTimeoutMultiplier() != null) {
      createJobTriggerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateJobTriggerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateJobTriggerRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateJobTriggerRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateJobTriggerMaxRpcTimeout() != null) {
      createJobTriggerRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateJobTriggerMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateJobTriggerMaxRpcTimeout set to "
                + this.clientProperties.getCreateJobTriggerMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateJobTriggerTotalTimeout() != null) {
      createJobTriggerRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateJobTriggerTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateJobTriggerTotalTimeout set to "
                + this.clientProperties.getCreateJobTriggerTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createJobTriggerSettings()
        .setRetrySettings(createJobTriggerRetrySettingBuilder.build());
    RetrySettings.Builder updateJobTriggerRetrySettingBuilder =
        clientSettingsBuilder.updateJobTriggerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateJobTriggerInitialRpcTimeout() != null) {
      updateJobTriggerRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateJobTriggerInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateJobTriggerInitialRpcTimeout set to "
                + this.clientProperties.getUpdateJobTriggerInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateJobTriggerRpcTimeoutMultiplier() != null) {
      updateJobTriggerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateJobTriggerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateJobTriggerRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateJobTriggerRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateJobTriggerMaxRpcTimeout() != null) {
      updateJobTriggerRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateJobTriggerMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateJobTriggerMaxRpcTimeout set to "
                + this.clientProperties.getUpdateJobTriggerMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateJobTriggerTotalTimeout() != null) {
      updateJobTriggerRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateJobTriggerTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateJobTriggerTotalTimeout set to "
                + this.clientProperties.getUpdateJobTriggerTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateJobTriggerSettings()
        .setRetrySettings(updateJobTriggerRetrySettingBuilder.build());
    RetrySettings.Builder hybridInspectJobTriggerRetrySettingBuilder =
        clientSettingsBuilder.hybridInspectJobTriggerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getHybridInspectJobTriggerInitialRpcTimeout() != null) {
      hybridInspectJobTriggerRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getHybridInspectJobTriggerInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "HybridInspectJobTriggerInitialRpcTimeout set to "
                + this.clientProperties.getHybridInspectJobTriggerInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getHybridInspectJobTriggerRpcTimeoutMultiplier() != null) {
      hybridInspectJobTriggerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getHybridInspectJobTriggerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "HybridInspectJobTriggerRpcTimeoutMultiplier set to "
                + this.clientProperties.getHybridInspectJobTriggerRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getHybridInspectJobTriggerMaxRpcTimeout() != null) {
      hybridInspectJobTriggerRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getHybridInspectJobTriggerMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "HybridInspectJobTriggerMaxRpcTimeout set to "
                + this.clientProperties.getHybridInspectJobTriggerMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getHybridInspectJobTriggerTotalTimeout() != null) {
      hybridInspectJobTriggerRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getHybridInspectJobTriggerTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "HybridInspectJobTriggerTotalTimeout set to "
                + this.clientProperties.getHybridInspectJobTriggerTotalTimeout());
      }
    }
    clientSettingsBuilder
        .hybridInspectJobTriggerSettings()
        .setRetrySettings(hybridInspectJobTriggerRetrySettingBuilder.build());
    RetrySettings.Builder getJobTriggerRetrySettingBuilder =
        clientSettingsBuilder.getJobTriggerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetJobTriggerInitialRetryDelay() != null) {
      getJobTriggerRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetJobTriggerInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobTriggerInitialRetryDelay set to "
                + this.clientProperties.getGetJobTriggerInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetJobTriggerRetryDelayMultiplier() != null) {
      getJobTriggerRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetJobTriggerRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobTriggerRetryDelayMultiplier set to "
                + this.clientProperties.getGetJobTriggerRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetJobTriggerMaxRetryDelay() != null) {
      getJobTriggerRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetJobTriggerMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobTriggerMaxRetryDelay set to "
                + this.clientProperties.getGetJobTriggerMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetJobTriggerInitialRpcTimeout() != null) {
      getJobTriggerRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetJobTriggerInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobTriggerInitialRpcTimeout set to "
                + this.clientProperties.getGetJobTriggerInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetJobTriggerRpcTimeoutMultiplier() != null) {
      getJobTriggerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetJobTriggerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobTriggerRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetJobTriggerRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetJobTriggerMaxRpcTimeout() != null) {
      getJobTriggerRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetJobTriggerMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobTriggerMaxRpcTimeout set to "
                + this.clientProperties.getGetJobTriggerMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetJobTriggerTotalTimeout() != null) {
      getJobTriggerRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetJobTriggerTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobTriggerTotalTimeout set to "
                + this.clientProperties.getGetJobTriggerTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getJobTriggerSettings()
        .setRetrySettings(getJobTriggerRetrySettingBuilder.build());
    RetrySettings.Builder listJobTriggersRetrySettingBuilder =
        clientSettingsBuilder.listJobTriggersSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListJobTriggersInitialRetryDelay() != null) {
      listJobTriggersRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListJobTriggersInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobTriggersInitialRetryDelay set to "
                + this.clientProperties.getListJobTriggersInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListJobTriggersRetryDelayMultiplier() != null) {
      listJobTriggersRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListJobTriggersRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobTriggersRetryDelayMultiplier set to "
                + this.clientProperties.getListJobTriggersRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListJobTriggersMaxRetryDelay() != null) {
      listJobTriggersRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListJobTriggersMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobTriggersMaxRetryDelay set to "
                + this.clientProperties.getListJobTriggersMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListJobTriggersInitialRpcTimeout() != null) {
      listJobTriggersRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListJobTriggersInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobTriggersInitialRpcTimeout set to "
                + this.clientProperties.getListJobTriggersInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListJobTriggersRpcTimeoutMultiplier() != null) {
      listJobTriggersRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListJobTriggersRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobTriggersRpcTimeoutMultiplier set to "
                + this.clientProperties.getListJobTriggersRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListJobTriggersMaxRpcTimeout() != null) {
      listJobTriggersRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListJobTriggersMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobTriggersMaxRpcTimeout set to "
                + this.clientProperties.getListJobTriggersMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListJobTriggersTotalTimeout() != null) {
      listJobTriggersRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListJobTriggersTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobTriggersTotalTimeout set to "
                + this.clientProperties.getListJobTriggersTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listJobTriggersSettings()
        .setRetrySettings(listJobTriggersRetrySettingBuilder.build());
    RetrySettings.Builder deleteJobTriggerRetrySettingBuilder =
        clientSettingsBuilder.deleteJobTriggerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteJobTriggerInitialRetryDelay() != null) {
      deleteJobTriggerRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteJobTriggerInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobTriggerInitialRetryDelay set to "
                + this.clientProperties.getDeleteJobTriggerInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteJobTriggerRetryDelayMultiplier() != null) {
      deleteJobTriggerRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteJobTriggerRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobTriggerRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteJobTriggerRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteJobTriggerMaxRetryDelay() != null) {
      deleteJobTriggerRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteJobTriggerMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobTriggerMaxRetryDelay set to "
                + this.clientProperties.getDeleteJobTriggerMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteJobTriggerInitialRpcTimeout() != null) {
      deleteJobTriggerRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteJobTriggerInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobTriggerInitialRpcTimeout set to "
                + this.clientProperties.getDeleteJobTriggerInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteJobTriggerRpcTimeoutMultiplier() != null) {
      deleteJobTriggerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteJobTriggerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobTriggerRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteJobTriggerRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteJobTriggerMaxRpcTimeout() != null) {
      deleteJobTriggerRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteJobTriggerMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobTriggerMaxRpcTimeout set to "
                + this.clientProperties.getDeleteJobTriggerMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteJobTriggerTotalTimeout() != null) {
      deleteJobTriggerRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteJobTriggerTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobTriggerTotalTimeout set to "
                + this.clientProperties.getDeleteJobTriggerTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteJobTriggerSettings()
        .setRetrySettings(deleteJobTriggerRetrySettingBuilder.build());
    RetrySettings.Builder activateJobTriggerRetrySettingBuilder =
        clientSettingsBuilder.activateJobTriggerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getActivateJobTriggerInitialRpcTimeout() != null) {
      activateJobTriggerRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getActivateJobTriggerInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ActivateJobTriggerInitialRpcTimeout set to "
                + this.clientProperties.getActivateJobTriggerInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getActivateJobTriggerRpcTimeoutMultiplier() != null) {
      activateJobTriggerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getActivateJobTriggerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ActivateJobTriggerRpcTimeoutMultiplier set to "
                + this.clientProperties.getActivateJobTriggerRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getActivateJobTriggerMaxRpcTimeout() != null) {
      activateJobTriggerRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getActivateJobTriggerMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ActivateJobTriggerMaxRpcTimeout set to "
                + this.clientProperties.getActivateJobTriggerMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getActivateJobTriggerTotalTimeout() != null) {
      activateJobTriggerRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getActivateJobTriggerTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ActivateJobTriggerTotalTimeout set to "
                + this.clientProperties.getActivateJobTriggerTotalTimeout());
      }
    }
    clientSettingsBuilder
        .activateJobTriggerSettings()
        .setRetrySettings(activateJobTriggerRetrySettingBuilder.build());
    RetrySettings.Builder createDlpJobRetrySettingBuilder =
        clientSettingsBuilder.createDlpJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateDlpJobInitialRpcTimeout() != null) {
      createDlpJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateDlpJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDlpJobInitialRpcTimeout set to "
                + this.clientProperties.getCreateDlpJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateDlpJobRpcTimeoutMultiplier() != null) {
      createDlpJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateDlpJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDlpJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateDlpJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateDlpJobMaxRpcTimeout() != null) {
      createDlpJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateDlpJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDlpJobMaxRpcTimeout set to "
                + this.clientProperties.getCreateDlpJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateDlpJobTotalTimeout() != null) {
      createDlpJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateDlpJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDlpJobTotalTimeout set to "
                + this.clientProperties.getCreateDlpJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createDlpJobSettings()
        .setRetrySettings(createDlpJobRetrySettingBuilder.build());
    RetrySettings.Builder listDlpJobsRetrySettingBuilder =
        clientSettingsBuilder.listDlpJobsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListDlpJobsInitialRetryDelay() != null) {
      listDlpJobsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListDlpJobsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDlpJobsInitialRetryDelay set to "
                + this.clientProperties.getListDlpJobsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListDlpJobsRetryDelayMultiplier() != null) {
      listDlpJobsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListDlpJobsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDlpJobsRetryDelayMultiplier set to "
                + this.clientProperties.getListDlpJobsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListDlpJobsMaxRetryDelay() != null) {
      listDlpJobsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListDlpJobsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDlpJobsMaxRetryDelay set to "
                + this.clientProperties.getListDlpJobsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListDlpJobsInitialRpcTimeout() != null) {
      listDlpJobsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListDlpJobsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDlpJobsInitialRpcTimeout set to "
                + this.clientProperties.getListDlpJobsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListDlpJobsRpcTimeoutMultiplier() != null) {
      listDlpJobsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListDlpJobsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDlpJobsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListDlpJobsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListDlpJobsMaxRpcTimeout() != null) {
      listDlpJobsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListDlpJobsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDlpJobsMaxRpcTimeout set to "
                + this.clientProperties.getListDlpJobsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListDlpJobsTotalTimeout() != null) {
      listDlpJobsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListDlpJobsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDlpJobsTotalTimeout set to " + this.clientProperties.getListDlpJobsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listDlpJobsSettings()
        .setRetrySettings(listDlpJobsRetrySettingBuilder.build());
    RetrySettings.Builder getDlpJobRetrySettingBuilder =
        clientSettingsBuilder.getDlpJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetDlpJobInitialRetryDelay() != null) {
      getDlpJobRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetDlpJobInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDlpJobInitialRetryDelay set to "
                + this.clientProperties.getGetDlpJobInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetDlpJobRetryDelayMultiplier() != null) {
      getDlpJobRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetDlpJobRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDlpJobRetryDelayMultiplier set to "
                + this.clientProperties.getGetDlpJobRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetDlpJobMaxRetryDelay() != null) {
      getDlpJobRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetDlpJobMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDlpJobMaxRetryDelay set to " + this.clientProperties.getGetDlpJobMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetDlpJobInitialRpcTimeout() != null) {
      getDlpJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetDlpJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDlpJobInitialRpcTimeout set to "
                + this.clientProperties.getGetDlpJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDlpJobRpcTimeoutMultiplier() != null) {
      getDlpJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetDlpJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDlpJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetDlpJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetDlpJobMaxRpcTimeout() != null) {
      getDlpJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetDlpJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDlpJobMaxRpcTimeout set to " + this.clientProperties.getGetDlpJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDlpJobTotalTimeout() != null) {
      getDlpJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetDlpJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDlpJobTotalTimeout set to " + this.clientProperties.getGetDlpJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getDlpJobSettings()
        .setRetrySettings(getDlpJobRetrySettingBuilder.build());
    RetrySettings.Builder deleteDlpJobRetrySettingBuilder =
        clientSettingsBuilder.deleteDlpJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteDlpJobInitialRetryDelay() != null) {
      deleteDlpJobRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteDlpJobInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDlpJobInitialRetryDelay set to "
                + this.clientProperties.getDeleteDlpJobInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteDlpJobRetryDelayMultiplier() != null) {
      deleteDlpJobRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteDlpJobRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDlpJobRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteDlpJobRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteDlpJobMaxRetryDelay() != null) {
      deleteDlpJobRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteDlpJobMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDlpJobMaxRetryDelay set to "
                + this.clientProperties.getDeleteDlpJobMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteDlpJobInitialRpcTimeout() != null) {
      deleteDlpJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteDlpJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDlpJobInitialRpcTimeout set to "
                + this.clientProperties.getDeleteDlpJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteDlpJobRpcTimeoutMultiplier() != null) {
      deleteDlpJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteDlpJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDlpJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteDlpJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteDlpJobMaxRpcTimeout() != null) {
      deleteDlpJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteDlpJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDlpJobMaxRpcTimeout set to "
                + this.clientProperties.getDeleteDlpJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteDlpJobTotalTimeout() != null) {
      deleteDlpJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteDlpJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDlpJobTotalTimeout set to "
                + this.clientProperties.getDeleteDlpJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteDlpJobSettings()
        .setRetrySettings(deleteDlpJobRetrySettingBuilder.build());
    RetrySettings.Builder cancelDlpJobRetrySettingBuilder =
        clientSettingsBuilder.cancelDlpJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCancelDlpJobInitialRpcTimeout() != null) {
      cancelDlpJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCancelDlpJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelDlpJobInitialRpcTimeout set to "
                + this.clientProperties.getCancelDlpJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCancelDlpJobRpcTimeoutMultiplier() != null) {
      cancelDlpJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCancelDlpJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelDlpJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getCancelDlpJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCancelDlpJobMaxRpcTimeout() != null) {
      cancelDlpJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCancelDlpJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelDlpJobMaxRpcTimeout set to "
                + this.clientProperties.getCancelDlpJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCancelDlpJobTotalTimeout() != null) {
      cancelDlpJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCancelDlpJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelDlpJobTotalTimeout set to "
                + this.clientProperties.getCancelDlpJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .cancelDlpJobSettings()
        .setRetrySettings(cancelDlpJobRetrySettingBuilder.build());
    RetrySettings.Builder createStoredInfoTypeRetrySettingBuilder =
        clientSettingsBuilder.createStoredInfoTypeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateStoredInfoTypeInitialRpcTimeout() != null) {
      createStoredInfoTypeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateStoredInfoTypeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateStoredInfoTypeInitialRpcTimeout set to "
                + this.clientProperties.getCreateStoredInfoTypeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateStoredInfoTypeRpcTimeoutMultiplier() != null) {
      createStoredInfoTypeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateStoredInfoTypeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateStoredInfoTypeRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateStoredInfoTypeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateStoredInfoTypeMaxRpcTimeout() != null) {
      createStoredInfoTypeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateStoredInfoTypeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateStoredInfoTypeMaxRpcTimeout set to "
                + this.clientProperties.getCreateStoredInfoTypeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateStoredInfoTypeTotalTimeout() != null) {
      createStoredInfoTypeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateStoredInfoTypeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateStoredInfoTypeTotalTimeout set to "
                + this.clientProperties.getCreateStoredInfoTypeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createStoredInfoTypeSettings()
        .setRetrySettings(createStoredInfoTypeRetrySettingBuilder.build());
    RetrySettings.Builder updateStoredInfoTypeRetrySettingBuilder =
        clientSettingsBuilder.updateStoredInfoTypeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateStoredInfoTypeInitialRpcTimeout() != null) {
      updateStoredInfoTypeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateStoredInfoTypeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateStoredInfoTypeInitialRpcTimeout set to "
                + this.clientProperties.getUpdateStoredInfoTypeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateStoredInfoTypeRpcTimeoutMultiplier() != null) {
      updateStoredInfoTypeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateStoredInfoTypeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateStoredInfoTypeRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateStoredInfoTypeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateStoredInfoTypeMaxRpcTimeout() != null) {
      updateStoredInfoTypeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateStoredInfoTypeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateStoredInfoTypeMaxRpcTimeout set to "
                + this.clientProperties.getUpdateStoredInfoTypeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateStoredInfoTypeTotalTimeout() != null) {
      updateStoredInfoTypeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateStoredInfoTypeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateStoredInfoTypeTotalTimeout set to "
                + this.clientProperties.getUpdateStoredInfoTypeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateStoredInfoTypeSettings()
        .setRetrySettings(updateStoredInfoTypeRetrySettingBuilder.build());
    RetrySettings.Builder getStoredInfoTypeRetrySettingBuilder =
        clientSettingsBuilder.getStoredInfoTypeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetStoredInfoTypeInitialRetryDelay() != null) {
      getStoredInfoTypeRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetStoredInfoTypeInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStoredInfoTypeInitialRetryDelay set to "
                + this.clientProperties.getGetStoredInfoTypeInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetStoredInfoTypeRetryDelayMultiplier() != null) {
      getStoredInfoTypeRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetStoredInfoTypeRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStoredInfoTypeRetryDelayMultiplier set to "
                + this.clientProperties.getGetStoredInfoTypeRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetStoredInfoTypeMaxRetryDelay() != null) {
      getStoredInfoTypeRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetStoredInfoTypeMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStoredInfoTypeMaxRetryDelay set to "
                + this.clientProperties.getGetStoredInfoTypeMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetStoredInfoTypeInitialRpcTimeout() != null) {
      getStoredInfoTypeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetStoredInfoTypeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStoredInfoTypeInitialRpcTimeout set to "
                + this.clientProperties.getGetStoredInfoTypeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetStoredInfoTypeRpcTimeoutMultiplier() != null) {
      getStoredInfoTypeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetStoredInfoTypeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStoredInfoTypeRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetStoredInfoTypeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetStoredInfoTypeMaxRpcTimeout() != null) {
      getStoredInfoTypeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetStoredInfoTypeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStoredInfoTypeMaxRpcTimeout set to "
                + this.clientProperties.getGetStoredInfoTypeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetStoredInfoTypeTotalTimeout() != null) {
      getStoredInfoTypeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetStoredInfoTypeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetStoredInfoTypeTotalTimeout set to "
                + this.clientProperties.getGetStoredInfoTypeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getStoredInfoTypeSettings()
        .setRetrySettings(getStoredInfoTypeRetrySettingBuilder.build());
    RetrySettings.Builder listStoredInfoTypesRetrySettingBuilder =
        clientSettingsBuilder.listStoredInfoTypesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListStoredInfoTypesInitialRetryDelay() != null) {
      listStoredInfoTypesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListStoredInfoTypesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStoredInfoTypesInitialRetryDelay set to "
                + this.clientProperties.getListStoredInfoTypesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListStoredInfoTypesRetryDelayMultiplier() != null) {
      listStoredInfoTypesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListStoredInfoTypesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStoredInfoTypesRetryDelayMultiplier set to "
                + this.clientProperties.getListStoredInfoTypesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListStoredInfoTypesMaxRetryDelay() != null) {
      listStoredInfoTypesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListStoredInfoTypesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStoredInfoTypesMaxRetryDelay set to "
                + this.clientProperties.getListStoredInfoTypesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListStoredInfoTypesInitialRpcTimeout() != null) {
      listStoredInfoTypesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListStoredInfoTypesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStoredInfoTypesInitialRpcTimeout set to "
                + this.clientProperties.getListStoredInfoTypesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListStoredInfoTypesRpcTimeoutMultiplier() != null) {
      listStoredInfoTypesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListStoredInfoTypesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStoredInfoTypesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListStoredInfoTypesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListStoredInfoTypesMaxRpcTimeout() != null) {
      listStoredInfoTypesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListStoredInfoTypesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStoredInfoTypesMaxRpcTimeout set to "
                + this.clientProperties.getListStoredInfoTypesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListStoredInfoTypesTotalTimeout() != null) {
      listStoredInfoTypesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListStoredInfoTypesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListStoredInfoTypesTotalTimeout set to "
                + this.clientProperties.getListStoredInfoTypesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listStoredInfoTypesSettings()
        .setRetrySettings(listStoredInfoTypesRetrySettingBuilder.build());
    RetrySettings.Builder deleteStoredInfoTypeRetrySettingBuilder =
        clientSettingsBuilder.deleteStoredInfoTypeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteStoredInfoTypeInitialRetryDelay() != null) {
      deleteStoredInfoTypeRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteStoredInfoTypeInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteStoredInfoTypeInitialRetryDelay set to "
                + this.clientProperties.getDeleteStoredInfoTypeInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteStoredInfoTypeRetryDelayMultiplier() != null) {
      deleteStoredInfoTypeRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteStoredInfoTypeRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteStoredInfoTypeRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteStoredInfoTypeRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteStoredInfoTypeMaxRetryDelay() != null) {
      deleteStoredInfoTypeRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteStoredInfoTypeMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteStoredInfoTypeMaxRetryDelay set to "
                + this.clientProperties.getDeleteStoredInfoTypeMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteStoredInfoTypeInitialRpcTimeout() != null) {
      deleteStoredInfoTypeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteStoredInfoTypeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteStoredInfoTypeInitialRpcTimeout set to "
                + this.clientProperties.getDeleteStoredInfoTypeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteStoredInfoTypeRpcTimeoutMultiplier() != null) {
      deleteStoredInfoTypeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteStoredInfoTypeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteStoredInfoTypeRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteStoredInfoTypeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteStoredInfoTypeMaxRpcTimeout() != null) {
      deleteStoredInfoTypeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteStoredInfoTypeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteStoredInfoTypeMaxRpcTimeout set to "
                + this.clientProperties.getDeleteStoredInfoTypeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteStoredInfoTypeTotalTimeout() != null) {
      deleteStoredInfoTypeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteStoredInfoTypeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteStoredInfoTypeTotalTimeout set to "
                + this.clientProperties.getDeleteStoredInfoTypeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteStoredInfoTypeSettings()
        .setRetrySettings(deleteStoredInfoTypeRetrySettingBuilder.build());
    RetrySettings.Builder hybridInspectDlpJobRetrySettingBuilder =
        clientSettingsBuilder.hybridInspectDlpJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getHybridInspectDlpJobInitialRpcTimeout() != null) {
      hybridInspectDlpJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getHybridInspectDlpJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "HybridInspectDlpJobInitialRpcTimeout set to "
                + this.clientProperties.getHybridInspectDlpJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getHybridInspectDlpJobRpcTimeoutMultiplier() != null) {
      hybridInspectDlpJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getHybridInspectDlpJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "HybridInspectDlpJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getHybridInspectDlpJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getHybridInspectDlpJobMaxRpcTimeout() != null) {
      hybridInspectDlpJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getHybridInspectDlpJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "HybridInspectDlpJobMaxRpcTimeout set to "
                + this.clientProperties.getHybridInspectDlpJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getHybridInspectDlpJobTotalTimeout() != null) {
      hybridInspectDlpJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getHybridInspectDlpJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "HybridInspectDlpJobTotalTimeout set to "
                + this.clientProperties.getHybridInspectDlpJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .hybridInspectDlpJobSettings()
        .setRetrySettings(hybridInspectDlpJobRetrySettingBuilder.build());
    RetrySettings.Builder finishDlpJobRetrySettingBuilder =
        clientSettingsBuilder.finishDlpJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getFinishDlpJobInitialRpcTimeout() != null) {
      finishDlpJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getFinishDlpJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FinishDlpJobInitialRpcTimeout set to "
                + this.clientProperties.getFinishDlpJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getFinishDlpJobRpcTimeoutMultiplier() != null) {
      finishDlpJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getFinishDlpJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FinishDlpJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getFinishDlpJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getFinishDlpJobMaxRpcTimeout() != null) {
      finishDlpJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getFinishDlpJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FinishDlpJobMaxRpcTimeout set to "
                + this.clientProperties.getFinishDlpJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getFinishDlpJobTotalTimeout() != null) {
      finishDlpJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getFinishDlpJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FinishDlpJobTotalTimeout set to "
                + this.clientProperties.getFinishDlpJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .finishDlpJobSettings()
        .setRetrySettings(finishDlpJobRetrySettingBuilder.build());
    return DlpServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-dlp-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
