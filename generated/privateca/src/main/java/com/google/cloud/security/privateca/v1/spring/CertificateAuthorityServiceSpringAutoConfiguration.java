/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.security.privateca.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.security.privateca.v1.CertificateAuthorityServiceClient;
import com.google.cloud.security.privateca.v1.CertificateAuthorityServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link CertificateAuthorityServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(CertificateAuthorityServiceClient.class)
@ConditionalOnProperty(
    value =
        "com.google.cloud.security.privateca.v1.spring.auto.certificate-authority-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({
  CertificateAuthorityServiceSpringProperties.class,
  GlobalProperties.class
})
public class CertificateAuthorityServiceSpringAutoConfiguration {
  private final CertificateAuthorityServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(CertificateAuthorityServiceSpringAutoConfiguration.class);

  protected CertificateAuthorityServiceSpringAutoConfiguration(
      CertificateAuthorityServiceSpringProperties clientProperties,
      GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider certificateAuthorityServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from CertificateAuthorityService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultCertificateAuthorityServiceTransportChannelProvider() {
    return CertificateAuthorityServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a CertificateAuthorityServiceClient bean configured to use the default credentials
   * provider (obtained with certificateAuthorityServiceCredentials()) and its default transport
   * channel provider (defaultCertificateAuthorityServiceTransportChannelProvider()). It also
   * configures the quota project ID if provided. It will configure an executor provider in case
   * there is more than one thread configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in
   * CertificateAuthorityServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public CertificateAuthorityServiceClient certificateAuthorityServiceClient(
      @Qualifier("certificateAuthorityServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultCertificateAuthorityServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    CertificateAuthorityServiceSettings.Builder clientSettingsBuilder =
        CertificateAuthorityServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          CertificateAuthorityServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          CertificateAuthorityServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createCertificateRetrySettingBuilder =
        clientSettingsBuilder.createCertificateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateCertificateInitialRetryDelay() != null) {
      createCertificateRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateCertificateInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateInitialRetryDelay set to "
                + this.clientProperties.getCreateCertificateInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateCertificateRetryDelayMultiplier() != null) {
      createCertificateRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateCertificateRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateRetryDelayMultiplier set to "
                + this.clientProperties.getCreateCertificateRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateCertificateMaxRetryDelay() != null) {
      createCertificateRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateCertificateMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateMaxRetryDelay set to "
                + this.clientProperties.getCreateCertificateMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateCertificateInitialRpcTimeout() != null) {
      createCertificateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateCertificateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateInitialRpcTimeout set to "
                + this.clientProperties.getCreateCertificateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateCertificateRpcTimeoutMultiplier() != null) {
      createCertificateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateCertificateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateCertificateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateCertificateMaxRpcTimeout() != null) {
      createCertificateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateCertificateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateMaxRpcTimeout set to "
                + this.clientProperties.getCreateCertificateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateCertificateTotalTimeout() != null) {
      createCertificateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateCertificateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateTotalTimeout set to "
                + this.clientProperties.getCreateCertificateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createCertificateSettings()
        .setRetrySettings(createCertificateRetrySettingBuilder.build());
    RetrySettings.Builder getCertificateRetrySettingBuilder =
        clientSettingsBuilder.getCertificateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetCertificateInitialRetryDelay() != null) {
      getCertificateRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetCertificateInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateInitialRetryDelay set to "
                + this.clientProperties.getGetCertificateInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetCertificateRetryDelayMultiplier() != null) {
      getCertificateRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetCertificateRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateRetryDelayMultiplier set to "
                + this.clientProperties.getGetCertificateRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetCertificateMaxRetryDelay() != null) {
      getCertificateRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetCertificateMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateMaxRetryDelay set to "
                + this.clientProperties.getGetCertificateMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetCertificateInitialRpcTimeout() != null) {
      getCertificateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetCertificateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateInitialRpcTimeout set to "
                + this.clientProperties.getGetCertificateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetCertificateRpcTimeoutMultiplier() != null) {
      getCertificateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetCertificateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetCertificateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetCertificateMaxRpcTimeout() != null) {
      getCertificateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetCertificateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateMaxRpcTimeout set to "
                + this.clientProperties.getGetCertificateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetCertificateTotalTimeout() != null) {
      getCertificateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetCertificateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateTotalTimeout set to "
                + this.clientProperties.getGetCertificateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getCertificateSettings()
        .setRetrySettings(getCertificateRetrySettingBuilder.build());
    RetrySettings.Builder listCertificatesRetrySettingBuilder =
        clientSettingsBuilder.listCertificatesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListCertificatesInitialRetryDelay() != null) {
      listCertificatesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListCertificatesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificatesInitialRetryDelay set to "
                + this.clientProperties.getListCertificatesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListCertificatesRetryDelayMultiplier() != null) {
      listCertificatesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListCertificatesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificatesRetryDelayMultiplier set to "
                + this.clientProperties.getListCertificatesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListCertificatesMaxRetryDelay() != null) {
      listCertificatesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListCertificatesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificatesMaxRetryDelay set to "
                + this.clientProperties.getListCertificatesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListCertificatesInitialRpcTimeout() != null) {
      listCertificatesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListCertificatesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificatesInitialRpcTimeout set to "
                + this.clientProperties.getListCertificatesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListCertificatesRpcTimeoutMultiplier() != null) {
      listCertificatesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListCertificatesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificatesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListCertificatesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListCertificatesMaxRpcTimeout() != null) {
      listCertificatesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListCertificatesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificatesMaxRpcTimeout set to "
                + this.clientProperties.getListCertificatesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListCertificatesTotalTimeout() != null) {
      listCertificatesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListCertificatesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificatesTotalTimeout set to "
                + this.clientProperties.getListCertificatesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listCertificatesSettings()
        .setRetrySettings(listCertificatesRetrySettingBuilder.build());
    RetrySettings.Builder revokeCertificateRetrySettingBuilder =
        clientSettingsBuilder.revokeCertificateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRevokeCertificateInitialRetryDelay() != null) {
      revokeCertificateRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getRevokeCertificateInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RevokeCertificateInitialRetryDelay set to "
                + this.clientProperties.getRevokeCertificateInitialRetryDelay());
      }
    }
    if (this.clientProperties.getRevokeCertificateRetryDelayMultiplier() != null) {
      revokeCertificateRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getRevokeCertificateRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RevokeCertificateRetryDelayMultiplier set to "
                + this.clientProperties.getRevokeCertificateRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getRevokeCertificateMaxRetryDelay() != null) {
      revokeCertificateRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getRevokeCertificateMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RevokeCertificateMaxRetryDelay set to "
                + this.clientProperties.getRevokeCertificateMaxRetryDelay());
      }
    }
    if (this.clientProperties.getRevokeCertificateInitialRpcTimeout() != null) {
      revokeCertificateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRevokeCertificateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RevokeCertificateInitialRpcTimeout set to "
                + this.clientProperties.getRevokeCertificateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRevokeCertificateRpcTimeoutMultiplier() != null) {
      revokeCertificateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRevokeCertificateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RevokeCertificateRpcTimeoutMultiplier set to "
                + this.clientProperties.getRevokeCertificateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRevokeCertificateMaxRpcTimeout() != null) {
      revokeCertificateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRevokeCertificateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RevokeCertificateMaxRpcTimeout set to "
                + this.clientProperties.getRevokeCertificateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRevokeCertificateTotalTimeout() != null) {
      revokeCertificateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRevokeCertificateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RevokeCertificateTotalTimeout set to "
                + this.clientProperties.getRevokeCertificateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .revokeCertificateSettings()
        .setRetrySettings(revokeCertificateRetrySettingBuilder.build());
    RetrySettings.Builder updateCertificateRetrySettingBuilder =
        clientSettingsBuilder.updateCertificateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateCertificateInitialRetryDelay() != null) {
      updateCertificateRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateCertificateInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateInitialRetryDelay set to "
                + this.clientProperties.getUpdateCertificateInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateCertificateRetryDelayMultiplier() != null) {
      updateCertificateRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateCertificateRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateCertificateRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateCertificateMaxRetryDelay() != null) {
      updateCertificateRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateCertificateMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateMaxRetryDelay set to "
                + this.clientProperties.getUpdateCertificateMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateCertificateInitialRpcTimeout() != null) {
      updateCertificateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateCertificateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateInitialRpcTimeout set to "
                + this.clientProperties.getUpdateCertificateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateCertificateRpcTimeoutMultiplier() != null) {
      updateCertificateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateCertificateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateCertificateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateCertificateMaxRpcTimeout() != null) {
      updateCertificateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateCertificateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateMaxRpcTimeout set to "
                + this.clientProperties.getUpdateCertificateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateCertificateTotalTimeout() != null) {
      updateCertificateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateCertificateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateTotalTimeout set to "
                + this.clientProperties.getUpdateCertificateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateCertificateSettings()
        .setRetrySettings(updateCertificateRetrySettingBuilder.build());
    RetrySettings.Builder activateCertificateAuthorityRetrySettingBuilder =
        clientSettingsBuilder.activateCertificateAuthoritySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getActivateCertificateAuthorityInitialRetryDelay() != null) {
      activateCertificateAuthorityRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getActivateCertificateAuthorityInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ActivateCertificateAuthorityInitialRetryDelay set to "
                + this.clientProperties.getActivateCertificateAuthorityInitialRetryDelay());
      }
    }
    if (this.clientProperties.getActivateCertificateAuthorityRetryDelayMultiplier() != null) {
      activateCertificateAuthorityRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getActivateCertificateAuthorityRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ActivateCertificateAuthorityRetryDelayMultiplier set to "
                + this.clientProperties.getActivateCertificateAuthorityRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getActivateCertificateAuthorityMaxRetryDelay() != null) {
      activateCertificateAuthorityRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getActivateCertificateAuthorityMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ActivateCertificateAuthorityMaxRetryDelay set to "
                + this.clientProperties.getActivateCertificateAuthorityMaxRetryDelay());
      }
    }
    if (this.clientProperties.getActivateCertificateAuthorityInitialRpcTimeout() != null) {
      activateCertificateAuthorityRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getActivateCertificateAuthorityInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ActivateCertificateAuthorityInitialRpcTimeout set to "
                + this.clientProperties.getActivateCertificateAuthorityInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getActivateCertificateAuthorityRpcTimeoutMultiplier() != null) {
      activateCertificateAuthorityRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getActivateCertificateAuthorityRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ActivateCertificateAuthorityRpcTimeoutMultiplier set to "
                + this.clientProperties.getActivateCertificateAuthorityRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getActivateCertificateAuthorityMaxRpcTimeout() != null) {
      activateCertificateAuthorityRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getActivateCertificateAuthorityMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ActivateCertificateAuthorityMaxRpcTimeout set to "
                + this.clientProperties.getActivateCertificateAuthorityMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getActivateCertificateAuthorityTotalTimeout() != null) {
      activateCertificateAuthorityRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getActivateCertificateAuthorityTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ActivateCertificateAuthorityTotalTimeout set to "
                + this.clientProperties.getActivateCertificateAuthorityTotalTimeout());
      }
    }
    clientSettingsBuilder
        .activateCertificateAuthoritySettings()
        .setRetrySettings(activateCertificateAuthorityRetrySettingBuilder.build());
    RetrySettings.Builder createCertificateAuthorityRetrySettingBuilder =
        clientSettingsBuilder.createCertificateAuthoritySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateCertificateAuthorityInitialRetryDelay() != null) {
      createCertificateAuthorityRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateCertificateAuthorityInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateAuthorityInitialRetryDelay set to "
                + this.clientProperties.getCreateCertificateAuthorityInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateCertificateAuthorityRetryDelayMultiplier() != null) {
      createCertificateAuthorityRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateCertificateAuthorityRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateAuthorityRetryDelayMultiplier set to "
                + this.clientProperties.getCreateCertificateAuthorityRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateCertificateAuthorityMaxRetryDelay() != null) {
      createCertificateAuthorityRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateCertificateAuthorityMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateAuthorityMaxRetryDelay set to "
                + this.clientProperties.getCreateCertificateAuthorityMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateCertificateAuthorityInitialRpcTimeout() != null) {
      createCertificateAuthorityRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateCertificateAuthorityInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateAuthorityInitialRpcTimeout set to "
                + this.clientProperties.getCreateCertificateAuthorityInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateCertificateAuthorityRpcTimeoutMultiplier() != null) {
      createCertificateAuthorityRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateCertificateAuthorityRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateAuthorityRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateCertificateAuthorityRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateCertificateAuthorityMaxRpcTimeout() != null) {
      createCertificateAuthorityRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateCertificateAuthorityMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateAuthorityMaxRpcTimeout set to "
                + this.clientProperties.getCreateCertificateAuthorityMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateCertificateAuthorityTotalTimeout() != null) {
      createCertificateAuthorityRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateCertificateAuthorityTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateAuthorityTotalTimeout set to "
                + this.clientProperties.getCreateCertificateAuthorityTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createCertificateAuthoritySettings()
        .setRetrySettings(createCertificateAuthorityRetrySettingBuilder.build());
    RetrySettings.Builder disableCertificateAuthorityRetrySettingBuilder =
        clientSettingsBuilder.disableCertificateAuthoritySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDisableCertificateAuthorityInitialRetryDelay() != null) {
      disableCertificateAuthorityRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDisableCertificateAuthorityInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DisableCertificateAuthorityInitialRetryDelay set to "
                + this.clientProperties.getDisableCertificateAuthorityInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDisableCertificateAuthorityRetryDelayMultiplier() != null) {
      disableCertificateAuthorityRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDisableCertificateAuthorityRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DisableCertificateAuthorityRetryDelayMultiplier set to "
                + this.clientProperties.getDisableCertificateAuthorityRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDisableCertificateAuthorityMaxRetryDelay() != null) {
      disableCertificateAuthorityRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDisableCertificateAuthorityMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DisableCertificateAuthorityMaxRetryDelay set to "
                + this.clientProperties.getDisableCertificateAuthorityMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDisableCertificateAuthorityInitialRpcTimeout() != null) {
      disableCertificateAuthorityRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDisableCertificateAuthorityInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DisableCertificateAuthorityInitialRpcTimeout set to "
                + this.clientProperties.getDisableCertificateAuthorityInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDisableCertificateAuthorityRpcTimeoutMultiplier() != null) {
      disableCertificateAuthorityRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDisableCertificateAuthorityRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DisableCertificateAuthorityRpcTimeoutMultiplier set to "
                + this.clientProperties.getDisableCertificateAuthorityRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDisableCertificateAuthorityMaxRpcTimeout() != null) {
      disableCertificateAuthorityRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDisableCertificateAuthorityMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DisableCertificateAuthorityMaxRpcTimeout set to "
                + this.clientProperties.getDisableCertificateAuthorityMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDisableCertificateAuthorityTotalTimeout() != null) {
      disableCertificateAuthorityRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDisableCertificateAuthorityTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DisableCertificateAuthorityTotalTimeout set to "
                + this.clientProperties.getDisableCertificateAuthorityTotalTimeout());
      }
    }
    clientSettingsBuilder
        .disableCertificateAuthoritySettings()
        .setRetrySettings(disableCertificateAuthorityRetrySettingBuilder.build());
    RetrySettings.Builder enableCertificateAuthorityRetrySettingBuilder =
        clientSettingsBuilder.enableCertificateAuthoritySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getEnableCertificateAuthorityInitialRetryDelay() != null) {
      enableCertificateAuthorityRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getEnableCertificateAuthorityInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "EnableCertificateAuthorityInitialRetryDelay set to "
                + this.clientProperties.getEnableCertificateAuthorityInitialRetryDelay());
      }
    }
    if (this.clientProperties.getEnableCertificateAuthorityRetryDelayMultiplier() != null) {
      enableCertificateAuthorityRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getEnableCertificateAuthorityRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "EnableCertificateAuthorityRetryDelayMultiplier set to "
                + this.clientProperties.getEnableCertificateAuthorityRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getEnableCertificateAuthorityMaxRetryDelay() != null) {
      enableCertificateAuthorityRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getEnableCertificateAuthorityMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "EnableCertificateAuthorityMaxRetryDelay set to "
                + this.clientProperties.getEnableCertificateAuthorityMaxRetryDelay());
      }
    }
    if (this.clientProperties.getEnableCertificateAuthorityInitialRpcTimeout() != null) {
      enableCertificateAuthorityRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getEnableCertificateAuthorityInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "EnableCertificateAuthorityInitialRpcTimeout set to "
                + this.clientProperties.getEnableCertificateAuthorityInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getEnableCertificateAuthorityRpcTimeoutMultiplier() != null) {
      enableCertificateAuthorityRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getEnableCertificateAuthorityRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "EnableCertificateAuthorityRpcTimeoutMultiplier set to "
                + this.clientProperties.getEnableCertificateAuthorityRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getEnableCertificateAuthorityMaxRpcTimeout() != null) {
      enableCertificateAuthorityRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getEnableCertificateAuthorityMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "EnableCertificateAuthorityMaxRpcTimeout set to "
                + this.clientProperties.getEnableCertificateAuthorityMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getEnableCertificateAuthorityTotalTimeout() != null) {
      enableCertificateAuthorityRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getEnableCertificateAuthorityTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "EnableCertificateAuthorityTotalTimeout set to "
                + this.clientProperties.getEnableCertificateAuthorityTotalTimeout());
      }
    }
    clientSettingsBuilder
        .enableCertificateAuthoritySettings()
        .setRetrySettings(enableCertificateAuthorityRetrySettingBuilder.build());
    RetrySettings.Builder fetchCertificateAuthorityCsrRetrySettingBuilder =
        clientSettingsBuilder.fetchCertificateAuthorityCsrSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getFetchCertificateAuthorityCsrInitialRetryDelay() != null) {
      fetchCertificateAuthorityCsrRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getFetchCertificateAuthorityCsrInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchCertificateAuthorityCsrInitialRetryDelay set to "
                + this.clientProperties.getFetchCertificateAuthorityCsrInitialRetryDelay());
      }
    }
    if (this.clientProperties.getFetchCertificateAuthorityCsrRetryDelayMultiplier() != null) {
      fetchCertificateAuthorityCsrRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getFetchCertificateAuthorityCsrRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchCertificateAuthorityCsrRetryDelayMultiplier set to "
                + this.clientProperties.getFetchCertificateAuthorityCsrRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getFetchCertificateAuthorityCsrMaxRetryDelay() != null) {
      fetchCertificateAuthorityCsrRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getFetchCertificateAuthorityCsrMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchCertificateAuthorityCsrMaxRetryDelay set to "
                + this.clientProperties.getFetchCertificateAuthorityCsrMaxRetryDelay());
      }
    }
    if (this.clientProperties.getFetchCertificateAuthorityCsrInitialRpcTimeout() != null) {
      fetchCertificateAuthorityCsrRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getFetchCertificateAuthorityCsrInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchCertificateAuthorityCsrInitialRpcTimeout set to "
                + this.clientProperties.getFetchCertificateAuthorityCsrInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getFetchCertificateAuthorityCsrRpcTimeoutMultiplier() != null) {
      fetchCertificateAuthorityCsrRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getFetchCertificateAuthorityCsrRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchCertificateAuthorityCsrRpcTimeoutMultiplier set to "
                + this.clientProperties.getFetchCertificateAuthorityCsrRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getFetchCertificateAuthorityCsrMaxRpcTimeout() != null) {
      fetchCertificateAuthorityCsrRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getFetchCertificateAuthorityCsrMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchCertificateAuthorityCsrMaxRpcTimeout set to "
                + this.clientProperties.getFetchCertificateAuthorityCsrMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getFetchCertificateAuthorityCsrTotalTimeout() != null) {
      fetchCertificateAuthorityCsrRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getFetchCertificateAuthorityCsrTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchCertificateAuthorityCsrTotalTimeout set to "
                + this.clientProperties.getFetchCertificateAuthorityCsrTotalTimeout());
      }
    }
    clientSettingsBuilder
        .fetchCertificateAuthorityCsrSettings()
        .setRetrySettings(fetchCertificateAuthorityCsrRetrySettingBuilder.build());
    RetrySettings.Builder getCertificateAuthorityRetrySettingBuilder =
        clientSettingsBuilder.getCertificateAuthoritySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetCertificateAuthorityInitialRetryDelay() != null) {
      getCertificateAuthorityRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetCertificateAuthorityInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateAuthorityInitialRetryDelay set to "
                + this.clientProperties.getGetCertificateAuthorityInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetCertificateAuthorityRetryDelayMultiplier() != null) {
      getCertificateAuthorityRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetCertificateAuthorityRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateAuthorityRetryDelayMultiplier set to "
                + this.clientProperties.getGetCertificateAuthorityRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetCertificateAuthorityMaxRetryDelay() != null) {
      getCertificateAuthorityRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetCertificateAuthorityMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateAuthorityMaxRetryDelay set to "
                + this.clientProperties.getGetCertificateAuthorityMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetCertificateAuthorityInitialRpcTimeout() != null) {
      getCertificateAuthorityRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetCertificateAuthorityInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateAuthorityInitialRpcTimeout set to "
                + this.clientProperties.getGetCertificateAuthorityInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetCertificateAuthorityRpcTimeoutMultiplier() != null) {
      getCertificateAuthorityRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetCertificateAuthorityRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateAuthorityRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetCertificateAuthorityRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetCertificateAuthorityMaxRpcTimeout() != null) {
      getCertificateAuthorityRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetCertificateAuthorityMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateAuthorityMaxRpcTimeout set to "
                + this.clientProperties.getGetCertificateAuthorityMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetCertificateAuthorityTotalTimeout() != null) {
      getCertificateAuthorityRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetCertificateAuthorityTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateAuthorityTotalTimeout set to "
                + this.clientProperties.getGetCertificateAuthorityTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getCertificateAuthoritySettings()
        .setRetrySettings(getCertificateAuthorityRetrySettingBuilder.build());
    RetrySettings.Builder listCertificateAuthoritiesRetrySettingBuilder =
        clientSettingsBuilder.listCertificateAuthoritiesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListCertificateAuthoritiesInitialRetryDelay() != null) {
      listCertificateAuthoritiesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListCertificateAuthoritiesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateAuthoritiesInitialRetryDelay set to "
                + this.clientProperties.getListCertificateAuthoritiesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListCertificateAuthoritiesRetryDelayMultiplier() != null) {
      listCertificateAuthoritiesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListCertificateAuthoritiesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateAuthoritiesRetryDelayMultiplier set to "
                + this.clientProperties.getListCertificateAuthoritiesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListCertificateAuthoritiesMaxRetryDelay() != null) {
      listCertificateAuthoritiesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListCertificateAuthoritiesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateAuthoritiesMaxRetryDelay set to "
                + this.clientProperties.getListCertificateAuthoritiesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListCertificateAuthoritiesInitialRpcTimeout() != null) {
      listCertificateAuthoritiesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListCertificateAuthoritiesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateAuthoritiesInitialRpcTimeout set to "
                + this.clientProperties.getListCertificateAuthoritiesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListCertificateAuthoritiesRpcTimeoutMultiplier() != null) {
      listCertificateAuthoritiesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListCertificateAuthoritiesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateAuthoritiesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListCertificateAuthoritiesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListCertificateAuthoritiesMaxRpcTimeout() != null) {
      listCertificateAuthoritiesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListCertificateAuthoritiesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateAuthoritiesMaxRpcTimeout set to "
                + this.clientProperties.getListCertificateAuthoritiesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListCertificateAuthoritiesTotalTimeout() != null) {
      listCertificateAuthoritiesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListCertificateAuthoritiesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateAuthoritiesTotalTimeout set to "
                + this.clientProperties.getListCertificateAuthoritiesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listCertificateAuthoritiesSettings()
        .setRetrySettings(listCertificateAuthoritiesRetrySettingBuilder.build());
    RetrySettings.Builder undeleteCertificateAuthorityRetrySettingBuilder =
        clientSettingsBuilder.undeleteCertificateAuthoritySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUndeleteCertificateAuthorityInitialRetryDelay() != null) {
      undeleteCertificateAuthorityRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUndeleteCertificateAuthorityInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteCertificateAuthorityInitialRetryDelay set to "
                + this.clientProperties.getUndeleteCertificateAuthorityInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUndeleteCertificateAuthorityRetryDelayMultiplier() != null) {
      undeleteCertificateAuthorityRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUndeleteCertificateAuthorityRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteCertificateAuthorityRetryDelayMultiplier set to "
                + this.clientProperties.getUndeleteCertificateAuthorityRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUndeleteCertificateAuthorityMaxRetryDelay() != null) {
      undeleteCertificateAuthorityRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUndeleteCertificateAuthorityMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteCertificateAuthorityMaxRetryDelay set to "
                + this.clientProperties.getUndeleteCertificateAuthorityMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUndeleteCertificateAuthorityInitialRpcTimeout() != null) {
      undeleteCertificateAuthorityRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUndeleteCertificateAuthorityInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteCertificateAuthorityInitialRpcTimeout set to "
                + this.clientProperties.getUndeleteCertificateAuthorityInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUndeleteCertificateAuthorityRpcTimeoutMultiplier() != null) {
      undeleteCertificateAuthorityRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUndeleteCertificateAuthorityRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteCertificateAuthorityRpcTimeoutMultiplier set to "
                + this.clientProperties.getUndeleteCertificateAuthorityRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUndeleteCertificateAuthorityMaxRpcTimeout() != null) {
      undeleteCertificateAuthorityRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUndeleteCertificateAuthorityMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteCertificateAuthorityMaxRpcTimeout set to "
                + this.clientProperties.getUndeleteCertificateAuthorityMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUndeleteCertificateAuthorityTotalTimeout() != null) {
      undeleteCertificateAuthorityRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUndeleteCertificateAuthorityTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteCertificateAuthorityTotalTimeout set to "
                + this.clientProperties.getUndeleteCertificateAuthorityTotalTimeout());
      }
    }
    clientSettingsBuilder
        .undeleteCertificateAuthoritySettings()
        .setRetrySettings(undeleteCertificateAuthorityRetrySettingBuilder.build());
    RetrySettings.Builder deleteCertificateAuthorityRetrySettingBuilder =
        clientSettingsBuilder.deleteCertificateAuthoritySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteCertificateAuthorityInitialRetryDelay() != null) {
      deleteCertificateAuthorityRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteCertificateAuthorityInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCertificateAuthorityInitialRetryDelay set to "
                + this.clientProperties.getDeleteCertificateAuthorityInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteCertificateAuthorityRetryDelayMultiplier() != null) {
      deleteCertificateAuthorityRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteCertificateAuthorityRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCertificateAuthorityRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteCertificateAuthorityRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteCertificateAuthorityMaxRetryDelay() != null) {
      deleteCertificateAuthorityRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteCertificateAuthorityMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCertificateAuthorityMaxRetryDelay set to "
                + this.clientProperties.getDeleteCertificateAuthorityMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteCertificateAuthorityInitialRpcTimeout() != null) {
      deleteCertificateAuthorityRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteCertificateAuthorityInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCertificateAuthorityInitialRpcTimeout set to "
                + this.clientProperties.getDeleteCertificateAuthorityInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteCertificateAuthorityRpcTimeoutMultiplier() != null) {
      deleteCertificateAuthorityRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteCertificateAuthorityRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCertificateAuthorityRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteCertificateAuthorityRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteCertificateAuthorityMaxRpcTimeout() != null) {
      deleteCertificateAuthorityRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteCertificateAuthorityMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCertificateAuthorityMaxRpcTimeout set to "
                + this.clientProperties.getDeleteCertificateAuthorityMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteCertificateAuthorityTotalTimeout() != null) {
      deleteCertificateAuthorityRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteCertificateAuthorityTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCertificateAuthorityTotalTimeout set to "
                + this.clientProperties.getDeleteCertificateAuthorityTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteCertificateAuthoritySettings()
        .setRetrySettings(deleteCertificateAuthorityRetrySettingBuilder.build());
    RetrySettings.Builder updateCertificateAuthorityRetrySettingBuilder =
        clientSettingsBuilder.updateCertificateAuthoritySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateCertificateAuthorityInitialRetryDelay() != null) {
      updateCertificateAuthorityRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateCertificateAuthorityInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateAuthorityInitialRetryDelay set to "
                + this.clientProperties.getUpdateCertificateAuthorityInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateCertificateAuthorityRetryDelayMultiplier() != null) {
      updateCertificateAuthorityRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateCertificateAuthorityRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateAuthorityRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateCertificateAuthorityRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateCertificateAuthorityMaxRetryDelay() != null) {
      updateCertificateAuthorityRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateCertificateAuthorityMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateAuthorityMaxRetryDelay set to "
                + this.clientProperties.getUpdateCertificateAuthorityMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateCertificateAuthorityInitialRpcTimeout() != null) {
      updateCertificateAuthorityRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateCertificateAuthorityInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateAuthorityInitialRpcTimeout set to "
                + this.clientProperties.getUpdateCertificateAuthorityInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateCertificateAuthorityRpcTimeoutMultiplier() != null) {
      updateCertificateAuthorityRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateCertificateAuthorityRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateAuthorityRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateCertificateAuthorityRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateCertificateAuthorityMaxRpcTimeout() != null) {
      updateCertificateAuthorityRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateCertificateAuthorityMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateAuthorityMaxRpcTimeout set to "
                + this.clientProperties.getUpdateCertificateAuthorityMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateCertificateAuthorityTotalTimeout() != null) {
      updateCertificateAuthorityRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateCertificateAuthorityTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateAuthorityTotalTimeout set to "
                + this.clientProperties.getUpdateCertificateAuthorityTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateCertificateAuthoritySettings()
        .setRetrySettings(updateCertificateAuthorityRetrySettingBuilder.build());
    RetrySettings.Builder createCaPoolRetrySettingBuilder =
        clientSettingsBuilder.createCaPoolSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateCaPoolInitialRetryDelay() != null) {
      createCaPoolRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateCaPoolInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCaPoolInitialRetryDelay set to "
                + this.clientProperties.getCreateCaPoolInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateCaPoolRetryDelayMultiplier() != null) {
      createCaPoolRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateCaPoolRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCaPoolRetryDelayMultiplier set to "
                + this.clientProperties.getCreateCaPoolRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateCaPoolMaxRetryDelay() != null) {
      createCaPoolRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateCaPoolMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCaPoolMaxRetryDelay set to "
                + this.clientProperties.getCreateCaPoolMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateCaPoolInitialRpcTimeout() != null) {
      createCaPoolRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateCaPoolInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCaPoolInitialRpcTimeout set to "
                + this.clientProperties.getCreateCaPoolInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateCaPoolRpcTimeoutMultiplier() != null) {
      createCaPoolRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateCaPoolRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCaPoolRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateCaPoolRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateCaPoolMaxRpcTimeout() != null) {
      createCaPoolRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateCaPoolMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCaPoolMaxRpcTimeout set to "
                + this.clientProperties.getCreateCaPoolMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateCaPoolTotalTimeout() != null) {
      createCaPoolRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateCaPoolTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCaPoolTotalTimeout set to "
                + this.clientProperties.getCreateCaPoolTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createCaPoolSettings()
        .setRetrySettings(createCaPoolRetrySettingBuilder.build());
    RetrySettings.Builder updateCaPoolRetrySettingBuilder =
        clientSettingsBuilder.updateCaPoolSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateCaPoolInitialRetryDelay() != null) {
      updateCaPoolRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateCaPoolInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCaPoolInitialRetryDelay set to "
                + this.clientProperties.getUpdateCaPoolInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateCaPoolRetryDelayMultiplier() != null) {
      updateCaPoolRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateCaPoolRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCaPoolRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateCaPoolRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateCaPoolMaxRetryDelay() != null) {
      updateCaPoolRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateCaPoolMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCaPoolMaxRetryDelay set to "
                + this.clientProperties.getUpdateCaPoolMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateCaPoolInitialRpcTimeout() != null) {
      updateCaPoolRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateCaPoolInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCaPoolInitialRpcTimeout set to "
                + this.clientProperties.getUpdateCaPoolInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateCaPoolRpcTimeoutMultiplier() != null) {
      updateCaPoolRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateCaPoolRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCaPoolRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateCaPoolRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateCaPoolMaxRpcTimeout() != null) {
      updateCaPoolRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateCaPoolMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCaPoolMaxRpcTimeout set to "
                + this.clientProperties.getUpdateCaPoolMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateCaPoolTotalTimeout() != null) {
      updateCaPoolRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateCaPoolTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCaPoolTotalTimeout set to "
                + this.clientProperties.getUpdateCaPoolTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateCaPoolSettings()
        .setRetrySettings(updateCaPoolRetrySettingBuilder.build());
    RetrySettings.Builder getCaPoolRetrySettingBuilder =
        clientSettingsBuilder.getCaPoolSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetCaPoolInitialRetryDelay() != null) {
      getCaPoolRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetCaPoolInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCaPoolInitialRetryDelay set to "
                + this.clientProperties.getGetCaPoolInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetCaPoolRetryDelayMultiplier() != null) {
      getCaPoolRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetCaPoolRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCaPoolRetryDelayMultiplier set to "
                + this.clientProperties.getGetCaPoolRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetCaPoolMaxRetryDelay() != null) {
      getCaPoolRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetCaPoolMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCaPoolMaxRetryDelay set to " + this.clientProperties.getGetCaPoolMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetCaPoolInitialRpcTimeout() != null) {
      getCaPoolRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetCaPoolInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCaPoolInitialRpcTimeout set to "
                + this.clientProperties.getGetCaPoolInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetCaPoolRpcTimeoutMultiplier() != null) {
      getCaPoolRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetCaPoolRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCaPoolRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetCaPoolRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetCaPoolMaxRpcTimeout() != null) {
      getCaPoolRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetCaPoolMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCaPoolMaxRpcTimeout set to " + this.clientProperties.getGetCaPoolMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetCaPoolTotalTimeout() != null) {
      getCaPoolRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetCaPoolTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCaPoolTotalTimeout set to " + this.clientProperties.getGetCaPoolTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getCaPoolSettings()
        .setRetrySettings(getCaPoolRetrySettingBuilder.build());
    RetrySettings.Builder listCaPoolsRetrySettingBuilder =
        clientSettingsBuilder.listCaPoolsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListCaPoolsInitialRetryDelay() != null) {
      listCaPoolsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListCaPoolsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCaPoolsInitialRetryDelay set to "
                + this.clientProperties.getListCaPoolsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListCaPoolsRetryDelayMultiplier() != null) {
      listCaPoolsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListCaPoolsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCaPoolsRetryDelayMultiplier set to "
                + this.clientProperties.getListCaPoolsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListCaPoolsMaxRetryDelay() != null) {
      listCaPoolsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListCaPoolsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCaPoolsMaxRetryDelay set to "
                + this.clientProperties.getListCaPoolsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListCaPoolsInitialRpcTimeout() != null) {
      listCaPoolsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListCaPoolsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCaPoolsInitialRpcTimeout set to "
                + this.clientProperties.getListCaPoolsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListCaPoolsRpcTimeoutMultiplier() != null) {
      listCaPoolsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListCaPoolsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCaPoolsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListCaPoolsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListCaPoolsMaxRpcTimeout() != null) {
      listCaPoolsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListCaPoolsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCaPoolsMaxRpcTimeout set to "
                + this.clientProperties.getListCaPoolsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListCaPoolsTotalTimeout() != null) {
      listCaPoolsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListCaPoolsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCaPoolsTotalTimeout set to " + this.clientProperties.getListCaPoolsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listCaPoolsSettings()
        .setRetrySettings(listCaPoolsRetrySettingBuilder.build());
    RetrySettings.Builder deleteCaPoolRetrySettingBuilder =
        clientSettingsBuilder.deleteCaPoolSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteCaPoolInitialRetryDelay() != null) {
      deleteCaPoolRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteCaPoolInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCaPoolInitialRetryDelay set to "
                + this.clientProperties.getDeleteCaPoolInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteCaPoolRetryDelayMultiplier() != null) {
      deleteCaPoolRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteCaPoolRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCaPoolRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteCaPoolRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteCaPoolMaxRetryDelay() != null) {
      deleteCaPoolRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteCaPoolMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCaPoolMaxRetryDelay set to "
                + this.clientProperties.getDeleteCaPoolMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteCaPoolInitialRpcTimeout() != null) {
      deleteCaPoolRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteCaPoolInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCaPoolInitialRpcTimeout set to "
                + this.clientProperties.getDeleteCaPoolInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteCaPoolRpcTimeoutMultiplier() != null) {
      deleteCaPoolRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteCaPoolRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCaPoolRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteCaPoolRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteCaPoolMaxRpcTimeout() != null) {
      deleteCaPoolRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteCaPoolMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCaPoolMaxRpcTimeout set to "
                + this.clientProperties.getDeleteCaPoolMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteCaPoolTotalTimeout() != null) {
      deleteCaPoolRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteCaPoolTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCaPoolTotalTimeout set to "
                + this.clientProperties.getDeleteCaPoolTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteCaPoolSettings()
        .setRetrySettings(deleteCaPoolRetrySettingBuilder.build());
    RetrySettings.Builder fetchCaCertsRetrySettingBuilder =
        clientSettingsBuilder.fetchCaCertsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getFetchCaCertsInitialRetryDelay() != null) {
      fetchCaCertsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getFetchCaCertsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchCaCertsInitialRetryDelay set to "
                + this.clientProperties.getFetchCaCertsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getFetchCaCertsRetryDelayMultiplier() != null) {
      fetchCaCertsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getFetchCaCertsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchCaCertsRetryDelayMultiplier set to "
                + this.clientProperties.getFetchCaCertsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getFetchCaCertsMaxRetryDelay() != null) {
      fetchCaCertsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getFetchCaCertsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchCaCertsMaxRetryDelay set to "
                + this.clientProperties.getFetchCaCertsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getFetchCaCertsInitialRpcTimeout() != null) {
      fetchCaCertsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getFetchCaCertsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchCaCertsInitialRpcTimeout set to "
                + this.clientProperties.getFetchCaCertsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getFetchCaCertsRpcTimeoutMultiplier() != null) {
      fetchCaCertsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getFetchCaCertsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchCaCertsRpcTimeoutMultiplier set to "
                + this.clientProperties.getFetchCaCertsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getFetchCaCertsMaxRpcTimeout() != null) {
      fetchCaCertsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getFetchCaCertsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchCaCertsMaxRpcTimeout set to "
                + this.clientProperties.getFetchCaCertsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getFetchCaCertsTotalTimeout() != null) {
      fetchCaCertsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getFetchCaCertsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchCaCertsTotalTimeout set to "
                + this.clientProperties.getFetchCaCertsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .fetchCaCertsSettings()
        .setRetrySettings(fetchCaCertsRetrySettingBuilder.build());
    RetrySettings.Builder getCertificateRevocationListRetrySettingBuilder =
        clientSettingsBuilder.getCertificateRevocationListSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetCertificateRevocationListInitialRetryDelay() != null) {
      getCertificateRevocationListRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetCertificateRevocationListInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateRevocationListInitialRetryDelay set to "
                + this.clientProperties.getGetCertificateRevocationListInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetCertificateRevocationListRetryDelayMultiplier() != null) {
      getCertificateRevocationListRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetCertificateRevocationListRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateRevocationListRetryDelayMultiplier set to "
                + this.clientProperties.getGetCertificateRevocationListRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetCertificateRevocationListMaxRetryDelay() != null) {
      getCertificateRevocationListRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetCertificateRevocationListMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateRevocationListMaxRetryDelay set to "
                + this.clientProperties.getGetCertificateRevocationListMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetCertificateRevocationListInitialRpcTimeout() != null) {
      getCertificateRevocationListRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetCertificateRevocationListInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateRevocationListInitialRpcTimeout set to "
                + this.clientProperties.getGetCertificateRevocationListInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetCertificateRevocationListRpcTimeoutMultiplier() != null) {
      getCertificateRevocationListRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetCertificateRevocationListRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateRevocationListRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetCertificateRevocationListRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetCertificateRevocationListMaxRpcTimeout() != null) {
      getCertificateRevocationListRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetCertificateRevocationListMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateRevocationListMaxRpcTimeout set to "
                + this.clientProperties.getGetCertificateRevocationListMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetCertificateRevocationListTotalTimeout() != null) {
      getCertificateRevocationListRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetCertificateRevocationListTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateRevocationListTotalTimeout set to "
                + this.clientProperties.getGetCertificateRevocationListTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getCertificateRevocationListSettings()
        .setRetrySettings(getCertificateRevocationListRetrySettingBuilder.build());
    RetrySettings.Builder listCertificateRevocationListsRetrySettingBuilder =
        clientSettingsBuilder
            .listCertificateRevocationListsSettings()
            .getRetrySettings()
            .toBuilder();
    if (this.clientProperties.getListCertificateRevocationListsInitialRetryDelay() != null) {
      listCertificateRevocationListsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListCertificateRevocationListsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateRevocationListsInitialRetryDelay set to "
                + this.clientProperties.getListCertificateRevocationListsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListCertificateRevocationListsRetryDelayMultiplier() != null) {
      listCertificateRevocationListsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListCertificateRevocationListsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateRevocationListsRetryDelayMultiplier set to "
                + this.clientProperties.getListCertificateRevocationListsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListCertificateRevocationListsMaxRetryDelay() != null) {
      listCertificateRevocationListsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListCertificateRevocationListsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateRevocationListsMaxRetryDelay set to "
                + this.clientProperties.getListCertificateRevocationListsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListCertificateRevocationListsInitialRpcTimeout() != null) {
      listCertificateRevocationListsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListCertificateRevocationListsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateRevocationListsInitialRpcTimeout set to "
                + this.clientProperties.getListCertificateRevocationListsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListCertificateRevocationListsRpcTimeoutMultiplier() != null) {
      listCertificateRevocationListsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListCertificateRevocationListsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateRevocationListsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListCertificateRevocationListsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListCertificateRevocationListsMaxRpcTimeout() != null) {
      listCertificateRevocationListsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListCertificateRevocationListsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateRevocationListsMaxRpcTimeout set to "
                + this.clientProperties.getListCertificateRevocationListsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListCertificateRevocationListsTotalTimeout() != null) {
      listCertificateRevocationListsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListCertificateRevocationListsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateRevocationListsTotalTimeout set to "
                + this.clientProperties.getListCertificateRevocationListsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listCertificateRevocationListsSettings()
        .setRetrySettings(listCertificateRevocationListsRetrySettingBuilder.build());
    RetrySettings.Builder updateCertificateRevocationListRetrySettingBuilder =
        clientSettingsBuilder
            .updateCertificateRevocationListSettings()
            .getRetrySettings()
            .toBuilder();
    if (this.clientProperties.getUpdateCertificateRevocationListInitialRetryDelay() != null) {
      updateCertificateRevocationListRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateCertificateRevocationListInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateRevocationListInitialRetryDelay set to "
                + this.clientProperties.getUpdateCertificateRevocationListInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateCertificateRevocationListRetryDelayMultiplier() != null) {
      updateCertificateRevocationListRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateCertificateRevocationListRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateRevocationListRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateCertificateRevocationListRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateCertificateRevocationListMaxRetryDelay() != null) {
      updateCertificateRevocationListRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateCertificateRevocationListMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateRevocationListMaxRetryDelay set to "
                + this.clientProperties.getUpdateCertificateRevocationListMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateCertificateRevocationListInitialRpcTimeout() != null) {
      updateCertificateRevocationListRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateCertificateRevocationListInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateRevocationListInitialRpcTimeout set to "
                + this.clientProperties.getUpdateCertificateRevocationListInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateCertificateRevocationListRpcTimeoutMultiplier() != null) {
      updateCertificateRevocationListRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateCertificateRevocationListRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateRevocationListRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateCertificateRevocationListRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateCertificateRevocationListMaxRpcTimeout() != null) {
      updateCertificateRevocationListRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateCertificateRevocationListMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateRevocationListMaxRpcTimeout set to "
                + this.clientProperties.getUpdateCertificateRevocationListMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateCertificateRevocationListTotalTimeout() != null) {
      updateCertificateRevocationListRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateCertificateRevocationListTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateRevocationListTotalTimeout set to "
                + this.clientProperties.getUpdateCertificateRevocationListTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateCertificateRevocationListSettings()
        .setRetrySettings(updateCertificateRevocationListRetrySettingBuilder.build());
    RetrySettings.Builder createCertificateTemplateRetrySettingBuilder =
        clientSettingsBuilder.createCertificateTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateCertificateTemplateInitialRetryDelay() != null) {
      createCertificateTemplateRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateCertificateTemplateInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateTemplateInitialRetryDelay set to "
                + this.clientProperties.getCreateCertificateTemplateInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateCertificateTemplateRetryDelayMultiplier() != null) {
      createCertificateTemplateRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateCertificateTemplateRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateTemplateRetryDelayMultiplier set to "
                + this.clientProperties.getCreateCertificateTemplateRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateCertificateTemplateMaxRetryDelay() != null) {
      createCertificateTemplateRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateCertificateTemplateMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateTemplateMaxRetryDelay set to "
                + this.clientProperties.getCreateCertificateTemplateMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateCertificateTemplateInitialRpcTimeout() != null) {
      createCertificateTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateCertificateTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateTemplateInitialRpcTimeout set to "
                + this.clientProperties.getCreateCertificateTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateCertificateTemplateRpcTimeoutMultiplier() != null) {
      createCertificateTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateCertificateTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateCertificateTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateCertificateTemplateMaxRpcTimeout() != null) {
      createCertificateTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateCertificateTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateTemplateMaxRpcTimeout set to "
                + this.clientProperties.getCreateCertificateTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateCertificateTemplateTotalTimeout() != null) {
      createCertificateTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateCertificateTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCertificateTemplateTotalTimeout set to "
                + this.clientProperties.getCreateCertificateTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createCertificateTemplateSettings()
        .setRetrySettings(createCertificateTemplateRetrySettingBuilder.build());
    RetrySettings.Builder deleteCertificateTemplateRetrySettingBuilder =
        clientSettingsBuilder.deleteCertificateTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteCertificateTemplateInitialRetryDelay() != null) {
      deleteCertificateTemplateRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteCertificateTemplateInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCertificateTemplateInitialRetryDelay set to "
                + this.clientProperties.getDeleteCertificateTemplateInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteCertificateTemplateRetryDelayMultiplier() != null) {
      deleteCertificateTemplateRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteCertificateTemplateRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCertificateTemplateRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteCertificateTemplateRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteCertificateTemplateMaxRetryDelay() != null) {
      deleteCertificateTemplateRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteCertificateTemplateMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCertificateTemplateMaxRetryDelay set to "
                + this.clientProperties.getDeleteCertificateTemplateMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteCertificateTemplateInitialRpcTimeout() != null) {
      deleteCertificateTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteCertificateTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCertificateTemplateInitialRpcTimeout set to "
                + this.clientProperties.getDeleteCertificateTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteCertificateTemplateRpcTimeoutMultiplier() != null) {
      deleteCertificateTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteCertificateTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCertificateTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteCertificateTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteCertificateTemplateMaxRpcTimeout() != null) {
      deleteCertificateTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteCertificateTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCertificateTemplateMaxRpcTimeout set to "
                + this.clientProperties.getDeleteCertificateTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteCertificateTemplateTotalTimeout() != null) {
      deleteCertificateTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteCertificateTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCertificateTemplateTotalTimeout set to "
                + this.clientProperties.getDeleteCertificateTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteCertificateTemplateSettings()
        .setRetrySettings(deleteCertificateTemplateRetrySettingBuilder.build());
    RetrySettings.Builder getCertificateTemplateRetrySettingBuilder =
        clientSettingsBuilder.getCertificateTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetCertificateTemplateInitialRetryDelay() != null) {
      getCertificateTemplateRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetCertificateTemplateInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateTemplateInitialRetryDelay set to "
                + this.clientProperties.getGetCertificateTemplateInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetCertificateTemplateRetryDelayMultiplier() != null) {
      getCertificateTemplateRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetCertificateTemplateRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateTemplateRetryDelayMultiplier set to "
                + this.clientProperties.getGetCertificateTemplateRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetCertificateTemplateMaxRetryDelay() != null) {
      getCertificateTemplateRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetCertificateTemplateMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateTemplateMaxRetryDelay set to "
                + this.clientProperties.getGetCertificateTemplateMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetCertificateTemplateInitialRpcTimeout() != null) {
      getCertificateTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetCertificateTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateTemplateInitialRpcTimeout set to "
                + this.clientProperties.getGetCertificateTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetCertificateTemplateRpcTimeoutMultiplier() != null) {
      getCertificateTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetCertificateTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetCertificateTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetCertificateTemplateMaxRpcTimeout() != null) {
      getCertificateTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetCertificateTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateTemplateMaxRpcTimeout set to "
                + this.clientProperties.getGetCertificateTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetCertificateTemplateTotalTimeout() != null) {
      getCertificateTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetCertificateTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCertificateTemplateTotalTimeout set to "
                + this.clientProperties.getGetCertificateTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getCertificateTemplateSettings()
        .setRetrySettings(getCertificateTemplateRetrySettingBuilder.build());
    RetrySettings.Builder listCertificateTemplatesRetrySettingBuilder =
        clientSettingsBuilder.listCertificateTemplatesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListCertificateTemplatesInitialRetryDelay() != null) {
      listCertificateTemplatesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListCertificateTemplatesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateTemplatesInitialRetryDelay set to "
                + this.clientProperties.getListCertificateTemplatesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListCertificateTemplatesRetryDelayMultiplier() != null) {
      listCertificateTemplatesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListCertificateTemplatesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateTemplatesRetryDelayMultiplier set to "
                + this.clientProperties.getListCertificateTemplatesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListCertificateTemplatesMaxRetryDelay() != null) {
      listCertificateTemplatesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListCertificateTemplatesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateTemplatesMaxRetryDelay set to "
                + this.clientProperties.getListCertificateTemplatesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListCertificateTemplatesInitialRpcTimeout() != null) {
      listCertificateTemplatesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListCertificateTemplatesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateTemplatesInitialRpcTimeout set to "
                + this.clientProperties.getListCertificateTemplatesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListCertificateTemplatesRpcTimeoutMultiplier() != null) {
      listCertificateTemplatesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListCertificateTemplatesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateTemplatesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListCertificateTemplatesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListCertificateTemplatesMaxRpcTimeout() != null) {
      listCertificateTemplatesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListCertificateTemplatesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateTemplatesMaxRpcTimeout set to "
                + this.clientProperties.getListCertificateTemplatesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListCertificateTemplatesTotalTimeout() != null) {
      listCertificateTemplatesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListCertificateTemplatesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCertificateTemplatesTotalTimeout set to "
                + this.clientProperties.getListCertificateTemplatesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listCertificateTemplatesSettings()
        .setRetrySettings(listCertificateTemplatesRetrySettingBuilder.build());
    RetrySettings.Builder updateCertificateTemplateRetrySettingBuilder =
        clientSettingsBuilder.updateCertificateTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateCertificateTemplateInitialRetryDelay() != null) {
      updateCertificateTemplateRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateCertificateTemplateInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateTemplateInitialRetryDelay set to "
                + this.clientProperties.getUpdateCertificateTemplateInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateCertificateTemplateRetryDelayMultiplier() != null) {
      updateCertificateTemplateRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateCertificateTemplateRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateTemplateRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateCertificateTemplateRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateCertificateTemplateMaxRetryDelay() != null) {
      updateCertificateTemplateRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateCertificateTemplateMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateTemplateMaxRetryDelay set to "
                + this.clientProperties.getUpdateCertificateTemplateMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateCertificateTemplateInitialRpcTimeout() != null) {
      updateCertificateTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateCertificateTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateTemplateInitialRpcTimeout set to "
                + this.clientProperties.getUpdateCertificateTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateCertificateTemplateRpcTimeoutMultiplier() != null) {
      updateCertificateTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateCertificateTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateCertificateTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateCertificateTemplateMaxRpcTimeout() != null) {
      updateCertificateTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateCertificateTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateTemplateMaxRpcTimeout set to "
                + this.clientProperties.getUpdateCertificateTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateCertificateTemplateTotalTimeout() != null) {
      updateCertificateTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateCertificateTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCertificateTemplateTotalTimeout set to "
                + this.clientProperties.getUpdateCertificateTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateCertificateTemplateSettings()
        .setRetrySettings(updateCertificateTemplateRetrySettingBuilder.build());
    RetrySettings.Builder listLocationsRetrySettingBuilder =
        clientSettingsBuilder.listLocationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListLocationsInitialRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListLocationsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRetryDelay set to "
                + this.clientProperties.getListLocationsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsRetryDelayMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListLocationsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRetryDelayMultiplier set to "
                + this.clientProperties.getListLocationsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListLocationsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRetryDelay set to "
                + this.clientProperties.getListLocationsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsInitialRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListLocationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRpcTimeout set to "
                + this.clientProperties.getListLocationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsRpcTimeoutMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListLocationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRpcTimeout set to "
                + this.clientProperties.getListLocationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsTotalTimeout() != null) {
      listLocationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListLocationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsTotalTimeout set to "
                + this.clientProperties.getListLocationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listLocationsSettings()
        .setRetrySettings(listLocationsRetrySettingBuilder.build());
    RetrySettings.Builder getLocationRetrySettingBuilder =
        clientSettingsBuilder.getLocationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetLocationInitialRetryDelay() != null) {
      getLocationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetLocationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRetryDelay set to "
                + this.clientProperties.getGetLocationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationRetryDelayMultiplier() != null) {
      getLocationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetLocationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRetryDelayMultiplier set to "
                + this.clientProperties.getGetLocationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRetryDelay() != null) {
      getLocationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetLocationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRetryDelay set to "
                + this.clientProperties.getGetLocationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationInitialRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetLocationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRpcTimeout set to "
                + this.clientProperties.getGetLocationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationRpcTimeoutMultiplier() != null) {
      getLocationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetLocationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRpcTimeout set to "
                + this.clientProperties.getGetLocationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationTotalTimeout() != null) {
      getLocationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetLocationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationTotalTimeout set to " + this.clientProperties.getGetLocationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getLocationSettings()
        .setRetrySettings(getLocationRetrySettingBuilder.build());
    RetrySettings.Builder setIamPolicyRetrySettingBuilder =
        clientSettingsBuilder.setIamPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetIamPolicyInitialRetryDelay() != null) {
      setIamPolicyRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getSetIamPolicyInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyInitialRetryDelay set to "
                + this.clientProperties.getSetIamPolicyInitialRetryDelay());
      }
    }
    if (this.clientProperties.getSetIamPolicyRetryDelayMultiplier() != null) {
      setIamPolicyRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getSetIamPolicyRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyRetryDelayMultiplier set to "
                + this.clientProperties.getSetIamPolicyRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getSetIamPolicyMaxRetryDelay() != null) {
      setIamPolicyRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getSetIamPolicyMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyMaxRetryDelay set to "
                + this.clientProperties.getSetIamPolicyMaxRetryDelay());
      }
    }
    if (this.clientProperties.getSetIamPolicyInitialRpcTimeout() != null) {
      setIamPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetIamPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyInitialRpcTimeout set to "
                + this.clientProperties.getSetIamPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetIamPolicyRpcTimeoutMultiplier() != null) {
      setIamPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetIamPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetIamPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetIamPolicyMaxRpcTimeout() != null) {
      setIamPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetIamPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyMaxRpcTimeout set to "
                + this.clientProperties.getSetIamPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetIamPolicyTotalTimeout() != null) {
      setIamPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetIamPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyTotalTimeout set to "
                + this.clientProperties.getSetIamPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setIamPolicySettings()
        .setRetrySettings(setIamPolicyRetrySettingBuilder.build());
    RetrySettings.Builder getIamPolicyRetrySettingBuilder =
        clientSettingsBuilder.getIamPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetIamPolicyInitialRetryDelay() != null) {
      getIamPolicyRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetIamPolicyInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyInitialRetryDelay set to "
                + this.clientProperties.getGetIamPolicyInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetIamPolicyRetryDelayMultiplier() != null) {
      getIamPolicyRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetIamPolicyRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyRetryDelayMultiplier set to "
                + this.clientProperties.getGetIamPolicyRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetIamPolicyMaxRetryDelay() != null) {
      getIamPolicyRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetIamPolicyMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyMaxRetryDelay set to "
                + this.clientProperties.getGetIamPolicyMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetIamPolicyInitialRpcTimeout() != null) {
      getIamPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetIamPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyInitialRpcTimeout set to "
                + this.clientProperties.getGetIamPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetIamPolicyRpcTimeoutMultiplier() != null) {
      getIamPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetIamPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetIamPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetIamPolicyMaxRpcTimeout() != null) {
      getIamPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetIamPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyMaxRpcTimeout set to "
                + this.clientProperties.getGetIamPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetIamPolicyTotalTimeout() != null) {
      getIamPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetIamPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyTotalTimeout set to "
                + this.clientProperties.getGetIamPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getIamPolicySettings()
        .setRetrySettings(getIamPolicyRetrySettingBuilder.build());
    RetrySettings.Builder testIamPermissionsRetrySettingBuilder =
        clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getTestIamPermissionsInitialRetryDelay() != null) {
      testIamPermissionsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getTestIamPermissionsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsInitialRetryDelay set to "
                + this.clientProperties.getTestIamPermissionsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getTestIamPermissionsRetryDelayMultiplier() != null) {
      testIamPermissionsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getTestIamPermissionsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsRetryDelayMultiplier set to "
                + this.clientProperties.getTestIamPermissionsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getTestIamPermissionsMaxRetryDelay() != null) {
      testIamPermissionsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getTestIamPermissionsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsMaxRetryDelay set to "
                + this.clientProperties.getTestIamPermissionsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getTestIamPermissionsInitialRpcTimeout() != null) {
      testIamPermissionsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getTestIamPermissionsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsInitialRpcTimeout set to "
                + this.clientProperties.getTestIamPermissionsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getTestIamPermissionsRpcTimeoutMultiplier() != null) {
      testIamPermissionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getTestIamPermissionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getTestIamPermissionsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getTestIamPermissionsMaxRpcTimeout() != null) {
      testIamPermissionsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getTestIamPermissionsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsMaxRpcTimeout set to "
                + this.clientProperties.getTestIamPermissionsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getTestIamPermissionsTotalTimeout() != null) {
      testIamPermissionsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getTestIamPermissionsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsTotalTimeout set to "
                + this.clientProperties.getTestIamPermissionsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .testIamPermissionsSettings()
        .setRetrySettings(testIamPermissionsRetrySettingBuilder.build());
    return CertificateAuthorityServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-certificate-authority-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
