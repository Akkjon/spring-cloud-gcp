/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.osconfig.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.osconfig.v1.OsConfigServiceClient;
import com.google.cloud.osconfig.v1.OsConfigServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link OsConfigServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(OsConfigServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.osconfig.v1.spring.auto.os-config-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({OsConfigServiceSpringProperties.class, GlobalProperties.class})
public class OsConfigServiceSpringAutoConfiguration {
  private final OsConfigServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(OsConfigServiceSpringAutoConfiguration.class);

  protected OsConfigServiceSpringAutoConfiguration(
      OsConfigServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider osConfigServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from OsConfigService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultOsConfigServiceTransportChannelProvider() {
    return OsConfigServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a OsConfigServiceClient bean configured to use the default credentials provider
   * (obtained with osConfigServiceCredentials()) and its default transport channel provider
   * (defaultOsConfigServiceTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in OsConfigServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public OsConfigServiceClient osConfigServiceClient(
      @Qualifier("osConfigServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultOsConfigServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    OsConfigServiceSettings.Builder clientSettingsBuilder =
        OsConfigServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          OsConfigServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          OsConfigServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder executePatchJobRetrySettingBuilder =
        clientSettingsBuilder.executePatchJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getExecutePatchJobInitialRetryDelay() != null) {
      executePatchJobRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getExecutePatchJobInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExecutePatchJobInitialRetryDelay set to "
                + this.clientProperties.getExecutePatchJobInitialRetryDelay());
      }
    }
    if (this.clientProperties.getExecutePatchJobRetryDelayMultiplier() != null) {
      executePatchJobRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getExecutePatchJobRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExecutePatchJobRetryDelayMultiplier set to "
                + this.clientProperties.getExecutePatchJobRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getExecutePatchJobMaxRetryDelay() != null) {
      executePatchJobRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getExecutePatchJobMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExecutePatchJobMaxRetryDelay set to "
                + this.clientProperties.getExecutePatchJobMaxRetryDelay());
      }
    }
    if (this.clientProperties.getExecutePatchJobInitialRpcTimeout() != null) {
      executePatchJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getExecutePatchJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExecutePatchJobInitialRpcTimeout set to "
                + this.clientProperties.getExecutePatchJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getExecutePatchJobRpcTimeoutMultiplier() != null) {
      executePatchJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getExecutePatchJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExecutePatchJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getExecutePatchJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getExecutePatchJobMaxRpcTimeout() != null) {
      executePatchJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getExecutePatchJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExecutePatchJobMaxRpcTimeout set to "
                + this.clientProperties.getExecutePatchJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getExecutePatchJobTotalTimeout() != null) {
      executePatchJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getExecutePatchJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExecutePatchJobTotalTimeout set to "
                + this.clientProperties.getExecutePatchJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .executePatchJobSettings()
        .setRetrySettings(executePatchJobRetrySettingBuilder.build());
    RetrySettings.Builder getPatchJobRetrySettingBuilder =
        clientSettingsBuilder.getPatchJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetPatchJobInitialRetryDelay() != null) {
      getPatchJobRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetPatchJobInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPatchJobInitialRetryDelay set to "
                + this.clientProperties.getGetPatchJobInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetPatchJobRetryDelayMultiplier() != null) {
      getPatchJobRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetPatchJobRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPatchJobRetryDelayMultiplier set to "
                + this.clientProperties.getGetPatchJobRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetPatchJobMaxRetryDelay() != null) {
      getPatchJobRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetPatchJobMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPatchJobMaxRetryDelay set to "
                + this.clientProperties.getGetPatchJobMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetPatchJobInitialRpcTimeout() != null) {
      getPatchJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetPatchJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPatchJobInitialRpcTimeout set to "
                + this.clientProperties.getGetPatchJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetPatchJobRpcTimeoutMultiplier() != null) {
      getPatchJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetPatchJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPatchJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetPatchJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetPatchJobMaxRpcTimeout() != null) {
      getPatchJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetPatchJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPatchJobMaxRpcTimeout set to "
                + this.clientProperties.getGetPatchJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetPatchJobTotalTimeout() != null) {
      getPatchJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetPatchJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPatchJobTotalTimeout set to " + this.clientProperties.getGetPatchJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getPatchJobSettings()
        .setRetrySettings(getPatchJobRetrySettingBuilder.build());
    RetrySettings.Builder cancelPatchJobRetrySettingBuilder =
        clientSettingsBuilder.cancelPatchJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCancelPatchJobInitialRetryDelay() != null) {
      cancelPatchJobRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCancelPatchJobInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelPatchJobInitialRetryDelay set to "
                + this.clientProperties.getCancelPatchJobInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCancelPatchJobRetryDelayMultiplier() != null) {
      cancelPatchJobRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCancelPatchJobRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelPatchJobRetryDelayMultiplier set to "
                + this.clientProperties.getCancelPatchJobRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCancelPatchJobMaxRetryDelay() != null) {
      cancelPatchJobRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCancelPatchJobMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelPatchJobMaxRetryDelay set to "
                + this.clientProperties.getCancelPatchJobMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCancelPatchJobInitialRpcTimeout() != null) {
      cancelPatchJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCancelPatchJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelPatchJobInitialRpcTimeout set to "
                + this.clientProperties.getCancelPatchJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCancelPatchJobRpcTimeoutMultiplier() != null) {
      cancelPatchJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCancelPatchJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelPatchJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getCancelPatchJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCancelPatchJobMaxRpcTimeout() != null) {
      cancelPatchJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCancelPatchJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelPatchJobMaxRpcTimeout set to "
                + this.clientProperties.getCancelPatchJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCancelPatchJobTotalTimeout() != null) {
      cancelPatchJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCancelPatchJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelPatchJobTotalTimeout set to "
                + this.clientProperties.getCancelPatchJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .cancelPatchJobSettings()
        .setRetrySettings(cancelPatchJobRetrySettingBuilder.build());
    RetrySettings.Builder listPatchJobsRetrySettingBuilder =
        clientSettingsBuilder.listPatchJobsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListPatchJobsInitialRetryDelay() != null) {
      listPatchJobsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListPatchJobsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchJobsInitialRetryDelay set to "
                + this.clientProperties.getListPatchJobsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListPatchJobsRetryDelayMultiplier() != null) {
      listPatchJobsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListPatchJobsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchJobsRetryDelayMultiplier set to "
                + this.clientProperties.getListPatchJobsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListPatchJobsMaxRetryDelay() != null) {
      listPatchJobsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListPatchJobsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchJobsMaxRetryDelay set to "
                + this.clientProperties.getListPatchJobsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListPatchJobsInitialRpcTimeout() != null) {
      listPatchJobsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListPatchJobsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchJobsInitialRpcTimeout set to "
                + this.clientProperties.getListPatchJobsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListPatchJobsRpcTimeoutMultiplier() != null) {
      listPatchJobsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListPatchJobsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchJobsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListPatchJobsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListPatchJobsMaxRpcTimeout() != null) {
      listPatchJobsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListPatchJobsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchJobsMaxRpcTimeout set to "
                + this.clientProperties.getListPatchJobsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListPatchJobsTotalTimeout() != null) {
      listPatchJobsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListPatchJobsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchJobsTotalTimeout set to "
                + this.clientProperties.getListPatchJobsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listPatchJobsSettings()
        .setRetrySettings(listPatchJobsRetrySettingBuilder.build());
    RetrySettings.Builder listPatchJobInstanceDetailsRetrySettingBuilder =
        clientSettingsBuilder.listPatchJobInstanceDetailsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListPatchJobInstanceDetailsInitialRetryDelay() != null) {
      listPatchJobInstanceDetailsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListPatchJobInstanceDetailsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchJobInstanceDetailsInitialRetryDelay set to "
                + this.clientProperties.getListPatchJobInstanceDetailsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListPatchJobInstanceDetailsRetryDelayMultiplier() != null) {
      listPatchJobInstanceDetailsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListPatchJobInstanceDetailsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchJobInstanceDetailsRetryDelayMultiplier set to "
                + this.clientProperties.getListPatchJobInstanceDetailsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListPatchJobInstanceDetailsMaxRetryDelay() != null) {
      listPatchJobInstanceDetailsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListPatchJobInstanceDetailsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchJobInstanceDetailsMaxRetryDelay set to "
                + this.clientProperties.getListPatchJobInstanceDetailsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListPatchJobInstanceDetailsInitialRpcTimeout() != null) {
      listPatchJobInstanceDetailsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListPatchJobInstanceDetailsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchJobInstanceDetailsInitialRpcTimeout set to "
                + this.clientProperties.getListPatchJobInstanceDetailsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListPatchJobInstanceDetailsRpcTimeoutMultiplier() != null) {
      listPatchJobInstanceDetailsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListPatchJobInstanceDetailsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchJobInstanceDetailsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListPatchJobInstanceDetailsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListPatchJobInstanceDetailsMaxRpcTimeout() != null) {
      listPatchJobInstanceDetailsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListPatchJobInstanceDetailsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchJobInstanceDetailsMaxRpcTimeout set to "
                + this.clientProperties.getListPatchJobInstanceDetailsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListPatchJobInstanceDetailsTotalTimeout() != null) {
      listPatchJobInstanceDetailsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListPatchJobInstanceDetailsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchJobInstanceDetailsTotalTimeout set to "
                + this.clientProperties.getListPatchJobInstanceDetailsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listPatchJobInstanceDetailsSettings()
        .setRetrySettings(listPatchJobInstanceDetailsRetrySettingBuilder.build());
    RetrySettings.Builder createPatchDeploymentRetrySettingBuilder =
        clientSettingsBuilder.createPatchDeploymentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreatePatchDeploymentInitialRetryDelay() != null) {
      createPatchDeploymentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreatePatchDeploymentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePatchDeploymentInitialRetryDelay set to "
                + this.clientProperties.getCreatePatchDeploymentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreatePatchDeploymentRetryDelayMultiplier() != null) {
      createPatchDeploymentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreatePatchDeploymentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePatchDeploymentRetryDelayMultiplier set to "
                + this.clientProperties.getCreatePatchDeploymentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreatePatchDeploymentMaxRetryDelay() != null) {
      createPatchDeploymentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreatePatchDeploymentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePatchDeploymentMaxRetryDelay set to "
                + this.clientProperties.getCreatePatchDeploymentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreatePatchDeploymentInitialRpcTimeout() != null) {
      createPatchDeploymentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreatePatchDeploymentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePatchDeploymentInitialRpcTimeout set to "
                + this.clientProperties.getCreatePatchDeploymentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreatePatchDeploymentRpcTimeoutMultiplier() != null) {
      createPatchDeploymentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreatePatchDeploymentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePatchDeploymentRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreatePatchDeploymentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreatePatchDeploymentMaxRpcTimeout() != null) {
      createPatchDeploymentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreatePatchDeploymentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePatchDeploymentMaxRpcTimeout set to "
                + this.clientProperties.getCreatePatchDeploymentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreatePatchDeploymentTotalTimeout() != null) {
      createPatchDeploymentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreatePatchDeploymentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePatchDeploymentTotalTimeout set to "
                + this.clientProperties.getCreatePatchDeploymentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createPatchDeploymentSettings()
        .setRetrySettings(createPatchDeploymentRetrySettingBuilder.build());
    RetrySettings.Builder getPatchDeploymentRetrySettingBuilder =
        clientSettingsBuilder.getPatchDeploymentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetPatchDeploymentInitialRetryDelay() != null) {
      getPatchDeploymentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetPatchDeploymentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPatchDeploymentInitialRetryDelay set to "
                + this.clientProperties.getGetPatchDeploymentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetPatchDeploymentRetryDelayMultiplier() != null) {
      getPatchDeploymentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetPatchDeploymentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPatchDeploymentRetryDelayMultiplier set to "
                + this.clientProperties.getGetPatchDeploymentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetPatchDeploymentMaxRetryDelay() != null) {
      getPatchDeploymentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetPatchDeploymentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPatchDeploymentMaxRetryDelay set to "
                + this.clientProperties.getGetPatchDeploymentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetPatchDeploymentInitialRpcTimeout() != null) {
      getPatchDeploymentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetPatchDeploymentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPatchDeploymentInitialRpcTimeout set to "
                + this.clientProperties.getGetPatchDeploymentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetPatchDeploymentRpcTimeoutMultiplier() != null) {
      getPatchDeploymentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetPatchDeploymentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPatchDeploymentRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetPatchDeploymentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetPatchDeploymentMaxRpcTimeout() != null) {
      getPatchDeploymentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetPatchDeploymentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPatchDeploymentMaxRpcTimeout set to "
                + this.clientProperties.getGetPatchDeploymentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetPatchDeploymentTotalTimeout() != null) {
      getPatchDeploymentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetPatchDeploymentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPatchDeploymentTotalTimeout set to "
                + this.clientProperties.getGetPatchDeploymentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getPatchDeploymentSettings()
        .setRetrySettings(getPatchDeploymentRetrySettingBuilder.build());
    RetrySettings.Builder listPatchDeploymentsRetrySettingBuilder =
        clientSettingsBuilder.listPatchDeploymentsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListPatchDeploymentsInitialRetryDelay() != null) {
      listPatchDeploymentsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListPatchDeploymentsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchDeploymentsInitialRetryDelay set to "
                + this.clientProperties.getListPatchDeploymentsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListPatchDeploymentsRetryDelayMultiplier() != null) {
      listPatchDeploymentsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListPatchDeploymentsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchDeploymentsRetryDelayMultiplier set to "
                + this.clientProperties.getListPatchDeploymentsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListPatchDeploymentsMaxRetryDelay() != null) {
      listPatchDeploymentsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListPatchDeploymentsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchDeploymentsMaxRetryDelay set to "
                + this.clientProperties.getListPatchDeploymentsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListPatchDeploymentsInitialRpcTimeout() != null) {
      listPatchDeploymentsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListPatchDeploymentsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchDeploymentsInitialRpcTimeout set to "
                + this.clientProperties.getListPatchDeploymentsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListPatchDeploymentsRpcTimeoutMultiplier() != null) {
      listPatchDeploymentsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListPatchDeploymentsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchDeploymentsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListPatchDeploymentsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListPatchDeploymentsMaxRpcTimeout() != null) {
      listPatchDeploymentsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListPatchDeploymentsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchDeploymentsMaxRpcTimeout set to "
                + this.clientProperties.getListPatchDeploymentsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListPatchDeploymentsTotalTimeout() != null) {
      listPatchDeploymentsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListPatchDeploymentsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPatchDeploymentsTotalTimeout set to "
                + this.clientProperties.getListPatchDeploymentsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listPatchDeploymentsSettings()
        .setRetrySettings(listPatchDeploymentsRetrySettingBuilder.build());
    RetrySettings.Builder deletePatchDeploymentRetrySettingBuilder =
        clientSettingsBuilder.deletePatchDeploymentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeletePatchDeploymentInitialRetryDelay() != null) {
      deletePatchDeploymentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeletePatchDeploymentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePatchDeploymentInitialRetryDelay set to "
                + this.clientProperties.getDeletePatchDeploymentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeletePatchDeploymentRetryDelayMultiplier() != null) {
      deletePatchDeploymentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeletePatchDeploymentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePatchDeploymentRetryDelayMultiplier set to "
                + this.clientProperties.getDeletePatchDeploymentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeletePatchDeploymentMaxRetryDelay() != null) {
      deletePatchDeploymentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeletePatchDeploymentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePatchDeploymentMaxRetryDelay set to "
                + this.clientProperties.getDeletePatchDeploymentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeletePatchDeploymentInitialRpcTimeout() != null) {
      deletePatchDeploymentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeletePatchDeploymentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePatchDeploymentInitialRpcTimeout set to "
                + this.clientProperties.getDeletePatchDeploymentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeletePatchDeploymentRpcTimeoutMultiplier() != null) {
      deletePatchDeploymentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeletePatchDeploymentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePatchDeploymentRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeletePatchDeploymentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeletePatchDeploymentMaxRpcTimeout() != null) {
      deletePatchDeploymentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeletePatchDeploymentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePatchDeploymentMaxRpcTimeout set to "
                + this.clientProperties.getDeletePatchDeploymentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeletePatchDeploymentTotalTimeout() != null) {
      deletePatchDeploymentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeletePatchDeploymentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePatchDeploymentTotalTimeout set to "
                + this.clientProperties.getDeletePatchDeploymentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deletePatchDeploymentSettings()
        .setRetrySettings(deletePatchDeploymentRetrySettingBuilder.build());
    RetrySettings.Builder updatePatchDeploymentRetrySettingBuilder =
        clientSettingsBuilder.updatePatchDeploymentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdatePatchDeploymentInitialRetryDelay() != null) {
      updatePatchDeploymentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdatePatchDeploymentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePatchDeploymentInitialRetryDelay set to "
                + this.clientProperties.getUpdatePatchDeploymentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdatePatchDeploymentRetryDelayMultiplier() != null) {
      updatePatchDeploymentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdatePatchDeploymentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePatchDeploymentRetryDelayMultiplier set to "
                + this.clientProperties.getUpdatePatchDeploymentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdatePatchDeploymentMaxRetryDelay() != null) {
      updatePatchDeploymentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdatePatchDeploymentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePatchDeploymentMaxRetryDelay set to "
                + this.clientProperties.getUpdatePatchDeploymentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdatePatchDeploymentInitialRpcTimeout() != null) {
      updatePatchDeploymentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdatePatchDeploymentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePatchDeploymentInitialRpcTimeout set to "
                + this.clientProperties.getUpdatePatchDeploymentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdatePatchDeploymentRpcTimeoutMultiplier() != null) {
      updatePatchDeploymentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdatePatchDeploymentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePatchDeploymentRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdatePatchDeploymentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdatePatchDeploymentMaxRpcTimeout() != null) {
      updatePatchDeploymentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdatePatchDeploymentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePatchDeploymentMaxRpcTimeout set to "
                + this.clientProperties.getUpdatePatchDeploymentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdatePatchDeploymentTotalTimeout() != null) {
      updatePatchDeploymentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdatePatchDeploymentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePatchDeploymentTotalTimeout set to "
                + this.clientProperties.getUpdatePatchDeploymentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updatePatchDeploymentSettings()
        .setRetrySettings(updatePatchDeploymentRetrySettingBuilder.build());
    RetrySettings.Builder pausePatchDeploymentRetrySettingBuilder =
        clientSettingsBuilder.pausePatchDeploymentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getPausePatchDeploymentInitialRetryDelay() != null) {
      pausePatchDeploymentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getPausePatchDeploymentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PausePatchDeploymentInitialRetryDelay set to "
                + this.clientProperties.getPausePatchDeploymentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getPausePatchDeploymentRetryDelayMultiplier() != null) {
      pausePatchDeploymentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getPausePatchDeploymentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PausePatchDeploymentRetryDelayMultiplier set to "
                + this.clientProperties.getPausePatchDeploymentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getPausePatchDeploymentMaxRetryDelay() != null) {
      pausePatchDeploymentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getPausePatchDeploymentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PausePatchDeploymentMaxRetryDelay set to "
                + this.clientProperties.getPausePatchDeploymentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getPausePatchDeploymentInitialRpcTimeout() != null) {
      pausePatchDeploymentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getPausePatchDeploymentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PausePatchDeploymentInitialRpcTimeout set to "
                + this.clientProperties.getPausePatchDeploymentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getPausePatchDeploymentRpcTimeoutMultiplier() != null) {
      pausePatchDeploymentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getPausePatchDeploymentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PausePatchDeploymentRpcTimeoutMultiplier set to "
                + this.clientProperties.getPausePatchDeploymentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getPausePatchDeploymentMaxRpcTimeout() != null) {
      pausePatchDeploymentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getPausePatchDeploymentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PausePatchDeploymentMaxRpcTimeout set to "
                + this.clientProperties.getPausePatchDeploymentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getPausePatchDeploymentTotalTimeout() != null) {
      pausePatchDeploymentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getPausePatchDeploymentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PausePatchDeploymentTotalTimeout set to "
                + this.clientProperties.getPausePatchDeploymentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .pausePatchDeploymentSettings()
        .setRetrySettings(pausePatchDeploymentRetrySettingBuilder.build());
    RetrySettings.Builder resumePatchDeploymentRetrySettingBuilder =
        clientSettingsBuilder.resumePatchDeploymentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getResumePatchDeploymentInitialRetryDelay() != null) {
      resumePatchDeploymentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getResumePatchDeploymentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResumePatchDeploymentInitialRetryDelay set to "
                + this.clientProperties.getResumePatchDeploymentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getResumePatchDeploymentRetryDelayMultiplier() != null) {
      resumePatchDeploymentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getResumePatchDeploymentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResumePatchDeploymentRetryDelayMultiplier set to "
                + this.clientProperties.getResumePatchDeploymentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getResumePatchDeploymentMaxRetryDelay() != null) {
      resumePatchDeploymentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getResumePatchDeploymentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResumePatchDeploymentMaxRetryDelay set to "
                + this.clientProperties.getResumePatchDeploymentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getResumePatchDeploymentInitialRpcTimeout() != null) {
      resumePatchDeploymentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getResumePatchDeploymentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResumePatchDeploymentInitialRpcTimeout set to "
                + this.clientProperties.getResumePatchDeploymentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getResumePatchDeploymentRpcTimeoutMultiplier() != null) {
      resumePatchDeploymentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getResumePatchDeploymentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResumePatchDeploymentRpcTimeoutMultiplier set to "
                + this.clientProperties.getResumePatchDeploymentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getResumePatchDeploymentMaxRpcTimeout() != null) {
      resumePatchDeploymentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getResumePatchDeploymentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResumePatchDeploymentMaxRpcTimeout set to "
                + this.clientProperties.getResumePatchDeploymentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getResumePatchDeploymentTotalTimeout() != null) {
      resumePatchDeploymentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getResumePatchDeploymentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResumePatchDeploymentTotalTimeout set to "
                + this.clientProperties.getResumePatchDeploymentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .resumePatchDeploymentSettings()
        .setRetrySettings(resumePatchDeploymentRetrySettingBuilder.build());
    return OsConfigServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-os-config-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
