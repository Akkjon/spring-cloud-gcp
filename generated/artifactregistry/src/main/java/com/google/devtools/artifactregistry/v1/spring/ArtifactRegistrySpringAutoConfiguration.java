/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.devtools.artifactregistry.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import com.google.devtools.artifactregistry.v1.ArtifactRegistryClient;
import com.google.devtools.artifactregistry.v1.ArtifactRegistrySettings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ArtifactRegistryClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ArtifactRegistryClient.class)
@ConditionalOnProperty(
    value = "com.google.devtools.artifactregistry.v1.spring.auto.artifact-registry.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({ArtifactRegistrySpringProperties.class, GlobalProperties.class})
public class ArtifactRegistrySpringAutoConfiguration {
  private final ArtifactRegistrySpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(ArtifactRegistrySpringAutoConfiguration.class);

  protected ArtifactRegistrySpringAutoConfiguration(
      ArtifactRegistrySpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider artifactRegistryCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from ArtifactRegistry-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultArtifactRegistryTransportChannelProvider() {
    return ArtifactRegistrySettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ArtifactRegistryClient bean configured to use the default credentials provider
   * (obtained with artifactRegistryCredentials()) and its default transport channel provider
   * (defaultArtifactRegistryTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in ArtifactRegistrySpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public ArtifactRegistryClient artifactRegistryClient(
      @Qualifier("artifactRegistryCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultArtifactRegistryTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ArtifactRegistrySettings.Builder clientSettingsBuilder =
        ArtifactRegistrySettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ArtifactRegistrySettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          ArtifactRegistrySettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listDockerImagesRetrySettingBuilder =
        clientSettingsBuilder.listDockerImagesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListDockerImagesInitialRpcTimeout() != null) {
      listDockerImagesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListDockerImagesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDockerImagesInitialRpcTimeout set to "
                + this.clientProperties.getListDockerImagesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListDockerImagesRpcTimeoutMultiplier() != null) {
      listDockerImagesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListDockerImagesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDockerImagesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListDockerImagesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListDockerImagesMaxRpcTimeout() != null) {
      listDockerImagesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListDockerImagesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDockerImagesMaxRpcTimeout set to "
                + this.clientProperties.getListDockerImagesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListDockerImagesTotalTimeout() != null) {
      listDockerImagesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListDockerImagesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDockerImagesTotalTimeout set to "
                + this.clientProperties.getListDockerImagesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listDockerImagesSettings()
        .setRetrySettings(listDockerImagesRetrySettingBuilder.build());
    RetrySettings.Builder getDockerImageRetrySettingBuilder =
        clientSettingsBuilder.getDockerImageSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetDockerImageInitialRpcTimeout() != null) {
      getDockerImageRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetDockerImageInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDockerImageInitialRpcTimeout set to "
                + this.clientProperties.getGetDockerImageInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDockerImageRpcTimeoutMultiplier() != null) {
      getDockerImageRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetDockerImageRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDockerImageRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetDockerImageRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetDockerImageMaxRpcTimeout() != null) {
      getDockerImageRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetDockerImageMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDockerImageMaxRpcTimeout set to "
                + this.clientProperties.getGetDockerImageMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDockerImageTotalTimeout() != null) {
      getDockerImageRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetDockerImageTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDockerImageTotalTimeout set to "
                + this.clientProperties.getGetDockerImageTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getDockerImageSettings()
        .setRetrySettings(getDockerImageRetrySettingBuilder.build());
    RetrySettings.Builder importAptArtifactsRetrySettingBuilder =
        clientSettingsBuilder.importAptArtifactsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getImportAptArtifactsInitialRpcTimeout() != null) {
      importAptArtifactsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getImportAptArtifactsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportAptArtifactsInitialRpcTimeout set to "
                + this.clientProperties.getImportAptArtifactsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getImportAptArtifactsRpcTimeoutMultiplier() != null) {
      importAptArtifactsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getImportAptArtifactsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportAptArtifactsRpcTimeoutMultiplier set to "
                + this.clientProperties.getImportAptArtifactsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getImportAptArtifactsMaxRpcTimeout() != null) {
      importAptArtifactsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getImportAptArtifactsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportAptArtifactsMaxRpcTimeout set to "
                + this.clientProperties.getImportAptArtifactsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getImportAptArtifactsTotalTimeout() != null) {
      importAptArtifactsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getImportAptArtifactsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportAptArtifactsTotalTimeout set to "
                + this.clientProperties.getImportAptArtifactsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .importAptArtifactsSettings()
        .setRetrySettings(importAptArtifactsRetrySettingBuilder.build());
    RetrySettings.Builder importYumArtifactsRetrySettingBuilder =
        clientSettingsBuilder.importYumArtifactsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getImportYumArtifactsInitialRpcTimeout() != null) {
      importYumArtifactsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getImportYumArtifactsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportYumArtifactsInitialRpcTimeout set to "
                + this.clientProperties.getImportYumArtifactsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getImportYumArtifactsRpcTimeoutMultiplier() != null) {
      importYumArtifactsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getImportYumArtifactsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportYumArtifactsRpcTimeoutMultiplier set to "
                + this.clientProperties.getImportYumArtifactsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getImportYumArtifactsMaxRpcTimeout() != null) {
      importYumArtifactsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getImportYumArtifactsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportYumArtifactsMaxRpcTimeout set to "
                + this.clientProperties.getImportYumArtifactsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getImportYumArtifactsTotalTimeout() != null) {
      importYumArtifactsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getImportYumArtifactsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportYumArtifactsTotalTimeout set to "
                + this.clientProperties.getImportYumArtifactsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .importYumArtifactsSettings()
        .setRetrySettings(importYumArtifactsRetrySettingBuilder.build());
    RetrySettings.Builder listRepositoriesRetrySettingBuilder =
        clientSettingsBuilder.listRepositoriesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListRepositoriesInitialRpcTimeout() != null) {
      listRepositoriesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListRepositoriesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRepositoriesInitialRpcTimeout set to "
                + this.clientProperties.getListRepositoriesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListRepositoriesRpcTimeoutMultiplier() != null) {
      listRepositoriesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListRepositoriesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRepositoriesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListRepositoriesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListRepositoriesMaxRpcTimeout() != null) {
      listRepositoriesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListRepositoriesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRepositoriesMaxRpcTimeout set to "
                + this.clientProperties.getListRepositoriesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListRepositoriesTotalTimeout() != null) {
      listRepositoriesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListRepositoriesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRepositoriesTotalTimeout set to "
                + this.clientProperties.getListRepositoriesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listRepositoriesSettings()
        .setRetrySettings(listRepositoriesRetrySettingBuilder.build());
    RetrySettings.Builder getRepositoryRetrySettingBuilder =
        clientSettingsBuilder.getRepositorySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetRepositoryInitialRpcTimeout() != null) {
      getRepositoryRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetRepositoryInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRepositoryInitialRpcTimeout set to "
                + this.clientProperties.getGetRepositoryInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetRepositoryRpcTimeoutMultiplier() != null) {
      getRepositoryRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetRepositoryRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRepositoryRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetRepositoryRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetRepositoryMaxRpcTimeout() != null) {
      getRepositoryRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetRepositoryMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRepositoryMaxRpcTimeout set to "
                + this.clientProperties.getGetRepositoryMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetRepositoryTotalTimeout() != null) {
      getRepositoryRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetRepositoryTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRepositoryTotalTimeout set to "
                + this.clientProperties.getGetRepositoryTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getRepositorySettings()
        .setRetrySettings(getRepositoryRetrySettingBuilder.build());
    RetrySettings.Builder createRepositoryRetrySettingBuilder =
        clientSettingsBuilder.createRepositorySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateRepositoryInitialRpcTimeout() != null) {
      createRepositoryRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateRepositoryInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateRepositoryInitialRpcTimeout set to "
                + this.clientProperties.getCreateRepositoryInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateRepositoryRpcTimeoutMultiplier() != null) {
      createRepositoryRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateRepositoryRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateRepositoryRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateRepositoryRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateRepositoryMaxRpcTimeout() != null) {
      createRepositoryRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateRepositoryMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateRepositoryMaxRpcTimeout set to "
                + this.clientProperties.getCreateRepositoryMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateRepositoryTotalTimeout() != null) {
      createRepositoryRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateRepositoryTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateRepositoryTotalTimeout set to "
                + this.clientProperties.getCreateRepositoryTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createRepositorySettings()
        .setRetrySettings(createRepositoryRetrySettingBuilder.build());
    RetrySettings.Builder updateRepositoryRetrySettingBuilder =
        clientSettingsBuilder.updateRepositorySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateRepositoryInitialRpcTimeout() != null) {
      updateRepositoryRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateRepositoryInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateRepositoryInitialRpcTimeout set to "
                + this.clientProperties.getUpdateRepositoryInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateRepositoryRpcTimeoutMultiplier() != null) {
      updateRepositoryRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateRepositoryRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateRepositoryRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateRepositoryRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateRepositoryMaxRpcTimeout() != null) {
      updateRepositoryRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateRepositoryMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateRepositoryMaxRpcTimeout set to "
                + this.clientProperties.getUpdateRepositoryMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateRepositoryTotalTimeout() != null) {
      updateRepositoryRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateRepositoryTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateRepositoryTotalTimeout set to "
                + this.clientProperties.getUpdateRepositoryTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateRepositorySettings()
        .setRetrySettings(updateRepositoryRetrySettingBuilder.build());
    RetrySettings.Builder deleteRepositoryRetrySettingBuilder =
        clientSettingsBuilder.deleteRepositorySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteRepositoryInitialRpcTimeout() != null) {
      deleteRepositoryRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteRepositoryInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRepositoryInitialRpcTimeout set to "
                + this.clientProperties.getDeleteRepositoryInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteRepositoryRpcTimeoutMultiplier() != null) {
      deleteRepositoryRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteRepositoryRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRepositoryRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteRepositoryRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteRepositoryMaxRpcTimeout() != null) {
      deleteRepositoryRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteRepositoryMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRepositoryMaxRpcTimeout set to "
                + this.clientProperties.getDeleteRepositoryMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteRepositoryTotalTimeout() != null) {
      deleteRepositoryRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteRepositoryTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRepositoryTotalTimeout set to "
                + this.clientProperties.getDeleteRepositoryTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteRepositorySettings()
        .setRetrySettings(deleteRepositoryRetrySettingBuilder.build());
    RetrySettings.Builder listPackagesRetrySettingBuilder =
        clientSettingsBuilder.listPackagesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListPackagesInitialRpcTimeout() != null) {
      listPackagesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListPackagesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPackagesInitialRpcTimeout set to "
                + this.clientProperties.getListPackagesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListPackagesRpcTimeoutMultiplier() != null) {
      listPackagesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListPackagesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPackagesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListPackagesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListPackagesMaxRpcTimeout() != null) {
      listPackagesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListPackagesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPackagesMaxRpcTimeout set to "
                + this.clientProperties.getListPackagesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListPackagesTotalTimeout() != null) {
      listPackagesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListPackagesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPackagesTotalTimeout set to "
                + this.clientProperties.getListPackagesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listPackagesSettings()
        .setRetrySettings(listPackagesRetrySettingBuilder.build());
    RetrySettings.Builder getPackageRetrySettingBuilder =
        clientSettingsBuilder.getPackageSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetPackageInitialRpcTimeout() != null) {
      getPackageRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetPackageInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPackageInitialRpcTimeout set to "
                + this.clientProperties.getGetPackageInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetPackageRpcTimeoutMultiplier() != null) {
      getPackageRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetPackageRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPackageRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetPackageRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetPackageMaxRpcTimeout() != null) {
      getPackageRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetPackageMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPackageMaxRpcTimeout set to " + this.clientProperties.getGetPackageMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetPackageTotalTimeout() != null) {
      getPackageRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetPackageTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPackageTotalTimeout set to " + this.clientProperties.getGetPackageTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getPackageSettings()
        .setRetrySettings(getPackageRetrySettingBuilder.build());
    RetrySettings.Builder deletePackageRetrySettingBuilder =
        clientSettingsBuilder.deletePackageSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeletePackageInitialRpcTimeout() != null) {
      deletePackageRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeletePackageInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePackageInitialRpcTimeout set to "
                + this.clientProperties.getDeletePackageInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeletePackageRpcTimeoutMultiplier() != null) {
      deletePackageRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeletePackageRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePackageRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeletePackageRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeletePackageMaxRpcTimeout() != null) {
      deletePackageRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeletePackageMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePackageMaxRpcTimeout set to "
                + this.clientProperties.getDeletePackageMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeletePackageTotalTimeout() != null) {
      deletePackageRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeletePackageTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePackageTotalTimeout set to "
                + this.clientProperties.getDeletePackageTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deletePackageSettings()
        .setRetrySettings(deletePackageRetrySettingBuilder.build());
    RetrySettings.Builder listVersionsRetrySettingBuilder =
        clientSettingsBuilder.listVersionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListVersionsInitialRpcTimeout() != null) {
      listVersionsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListVersionsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListVersionsInitialRpcTimeout set to "
                + this.clientProperties.getListVersionsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListVersionsRpcTimeoutMultiplier() != null) {
      listVersionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListVersionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListVersionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListVersionsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListVersionsMaxRpcTimeout() != null) {
      listVersionsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListVersionsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListVersionsMaxRpcTimeout set to "
                + this.clientProperties.getListVersionsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListVersionsTotalTimeout() != null) {
      listVersionsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListVersionsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListVersionsTotalTimeout set to "
                + this.clientProperties.getListVersionsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listVersionsSettings()
        .setRetrySettings(listVersionsRetrySettingBuilder.build());
    RetrySettings.Builder getVersionRetrySettingBuilder =
        clientSettingsBuilder.getVersionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetVersionInitialRpcTimeout() != null) {
      getVersionRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetVersionInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetVersionInitialRpcTimeout set to "
                + this.clientProperties.getGetVersionInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetVersionRpcTimeoutMultiplier() != null) {
      getVersionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetVersionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetVersionRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetVersionRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetVersionMaxRpcTimeout() != null) {
      getVersionRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetVersionMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetVersionMaxRpcTimeout set to " + this.clientProperties.getGetVersionMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetVersionTotalTimeout() != null) {
      getVersionRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetVersionTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetVersionTotalTimeout set to " + this.clientProperties.getGetVersionTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getVersionSettings()
        .setRetrySettings(getVersionRetrySettingBuilder.build());
    RetrySettings.Builder deleteVersionRetrySettingBuilder =
        clientSettingsBuilder.deleteVersionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteVersionInitialRpcTimeout() != null) {
      deleteVersionRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteVersionInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteVersionInitialRpcTimeout set to "
                + this.clientProperties.getDeleteVersionInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteVersionRpcTimeoutMultiplier() != null) {
      deleteVersionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteVersionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteVersionRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteVersionRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteVersionMaxRpcTimeout() != null) {
      deleteVersionRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteVersionMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteVersionMaxRpcTimeout set to "
                + this.clientProperties.getDeleteVersionMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteVersionTotalTimeout() != null) {
      deleteVersionRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteVersionTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteVersionTotalTimeout set to "
                + this.clientProperties.getDeleteVersionTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteVersionSettings()
        .setRetrySettings(deleteVersionRetrySettingBuilder.build());
    RetrySettings.Builder listFilesRetrySettingBuilder =
        clientSettingsBuilder.listFilesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListFilesInitialRpcTimeout() != null) {
      listFilesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListFilesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFilesInitialRpcTimeout set to "
                + this.clientProperties.getListFilesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListFilesRpcTimeoutMultiplier() != null) {
      listFilesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListFilesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFilesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListFilesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListFilesMaxRpcTimeout() != null) {
      listFilesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListFilesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFilesMaxRpcTimeout set to " + this.clientProperties.getListFilesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListFilesTotalTimeout() != null) {
      listFilesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListFilesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFilesTotalTimeout set to " + this.clientProperties.getListFilesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listFilesSettings()
        .setRetrySettings(listFilesRetrySettingBuilder.build());
    RetrySettings.Builder getFileRetrySettingBuilder =
        clientSettingsBuilder.getFileSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetFileInitialRpcTimeout() != null) {
      getFileRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetFileInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetFileInitialRpcTimeout set to "
                + this.clientProperties.getGetFileInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetFileRpcTimeoutMultiplier() != null) {
      getFileRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetFileRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetFileRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetFileRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetFileMaxRpcTimeout() != null) {
      getFileRetrySettingBuilder.setMaxRpcTimeout(this.clientProperties.getGetFileMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetFileMaxRpcTimeout set to " + this.clientProperties.getGetFileMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetFileTotalTimeout() != null) {
      getFileRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetFileTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetFileTotalTimeout set to " + this.clientProperties.getGetFileTotalTimeout());
      }
    }
    clientSettingsBuilder.getFileSettings().setRetrySettings(getFileRetrySettingBuilder.build());
    RetrySettings.Builder listTagsRetrySettingBuilder =
        clientSettingsBuilder.listTagsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListTagsInitialRpcTimeout() != null) {
      listTagsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListTagsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTagsInitialRpcTimeout set to "
                + this.clientProperties.getListTagsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListTagsRpcTimeoutMultiplier() != null) {
      listTagsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListTagsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTagsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListTagsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListTagsMaxRpcTimeout() != null) {
      listTagsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListTagsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTagsMaxRpcTimeout set to " + this.clientProperties.getListTagsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListTagsTotalTimeout() != null) {
      listTagsRetrySettingBuilder.setTotalTimeout(this.clientProperties.getListTagsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTagsTotalTimeout set to " + this.clientProperties.getListTagsTotalTimeout());
      }
    }
    clientSettingsBuilder.listTagsSettings().setRetrySettings(listTagsRetrySettingBuilder.build());
    RetrySettings.Builder getTagRetrySettingBuilder =
        clientSettingsBuilder.getTagSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetTagInitialRpcTimeout() != null) {
      getTagRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetTagInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTagInitialRpcTimeout set to " + this.clientProperties.getGetTagInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetTagRpcTimeoutMultiplier() != null) {
      getTagRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetTagRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTagRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetTagRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetTagMaxRpcTimeout() != null) {
      getTagRetrySettingBuilder.setMaxRpcTimeout(this.clientProperties.getGetTagMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTagMaxRpcTimeout set to " + this.clientProperties.getGetTagMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetTagTotalTimeout() != null) {
      getTagRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetTagTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("GetTagTotalTimeout set to " + this.clientProperties.getGetTagTotalTimeout());
      }
    }
    clientSettingsBuilder.getTagSettings().setRetrySettings(getTagRetrySettingBuilder.build());
    RetrySettings.Builder createTagRetrySettingBuilder =
        clientSettingsBuilder.createTagSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateTagInitialRpcTimeout() != null) {
      createTagRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateTagInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTagInitialRpcTimeout set to "
                + this.clientProperties.getCreateTagInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateTagRpcTimeoutMultiplier() != null) {
      createTagRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateTagRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTagRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateTagRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateTagMaxRpcTimeout() != null) {
      createTagRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateTagMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTagMaxRpcTimeout set to " + this.clientProperties.getCreateTagMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateTagTotalTimeout() != null) {
      createTagRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateTagTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTagTotalTimeout set to " + this.clientProperties.getCreateTagTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createTagSettings()
        .setRetrySettings(createTagRetrySettingBuilder.build());
    RetrySettings.Builder updateTagRetrySettingBuilder =
        clientSettingsBuilder.updateTagSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateTagInitialRpcTimeout() != null) {
      updateTagRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateTagInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTagInitialRpcTimeout set to "
                + this.clientProperties.getUpdateTagInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateTagRpcTimeoutMultiplier() != null) {
      updateTagRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateTagRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTagRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateTagRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateTagMaxRpcTimeout() != null) {
      updateTagRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateTagMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTagMaxRpcTimeout set to " + this.clientProperties.getUpdateTagMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateTagTotalTimeout() != null) {
      updateTagRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateTagTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTagTotalTimeout set to " + this.clientProperties.getUpdateTagTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateTagSettings()
        .setRetrySettings(updateTagRetrySettingBuilder.build());
    RetrySettings.Builder deleteTagRetrySettingBuilder =
        clientSettingsBuilder.deleteTagSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteTagInitialRpcTimeout() != null) {
      deleteTagRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteTagInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTagInitialRpcTimeout set to "
                + this.clientProperties.getDeleteTagInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteTagRpcTimeoutMultiplier() != null) {
      deleteTagRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteTagRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTagRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteTagRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteTagMaxRpcTimeout() != null) {
      deleteTagRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteTagMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTagMaxRpcTimeout set to " + this.clientProperties.getDeleteTagMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteTagTotalTimeout() != null) {
      deleteTagRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteTagTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTagTotalTimeout set to " + this.clientProperties.getDeleteTagTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteTagSettings()
        .setRetrySettings(deleteTagRetrySettingBuilder.build());
    RetrySettings.Builder setIamPolicyRetrySettingBuilder =
        clientSettingsBuilder.setIamPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetIamPolicyInitialRpcTimeout() != null) {
      setIamPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetIamPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyInitialRpcTimeout set to "
                + this.clientProperties.getSetIamPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetIamPolicyRpcTimeoutMultiplier() != null) {
      setIamPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetIamPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetIamPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetIamPolicyMaxRpcTimeout() != null) {
      setIamPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetIamPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyMaxRpcTimeout set to "
                + this.clientProperties.getSetIamPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetIamPolicyTotalTimeout() != null) {
      setIamPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetIamPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyTotalTimeout set to "
                + this.clientProperties.getSetIamPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setIamPolicySettings()
        .setRetrySettings(setIamPolicyRetrySettingBuilder.build());
    RetrySettings.Builder getIamPolicyRetrySettingBuilder =
        clientSettingsBuilder.getIamPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetIamPolicyInitialRpcTimeout() != null) {
      getIamPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetIamPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyInitialRpcTimeout set to "
                + this.clientProperties.getGetIamPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetIamPolicyRpcTimeoutMultiplier() != null) {
      getIamPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetIamPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetIamPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetIamPolicyMaxRpcTimeout() != null) {
      getIamPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetIamPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyMaxRpcTimeout set to "
                + this.clientProperties.getGetIamPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetIamPolicyTotalTimeout() != null) {
      getIamPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetIamPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyTotalTimeout set to "
                + this.clientProperties.getGetIamPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getIamPolicySettings()
        .setRetrySettings(getIamPolicyRetrySettingBuilder.build());
    RetrySettings.Builder testIamPermissionsRetrySettingBuilder =
        clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getTestIamPermissionsInitialRpcTimeout() != null) {
      testIamPermissionsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getTestIamPermissionsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsInitialRpcTimeout set to "
                + this.clientProperties.getTestIamPermissionsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getTestIamPermissionsRpcTimeoutMultiplier() != null) {
      testIamPermissionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getTestIamPermissionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getTestIamPermissionsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getTestIamPermissionsMaxRpcTimeout() != null) {
      testIamPermissionsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getTestIamPermissionsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsMaxRpcTimeout set to "
                + this.clientProperties.getTestIamPermissionsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getTestIamPermissionsTotalTimeout() != null) {
      testIamPermissionsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getTestIamPermissionsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsTotalTimeout set to "
                + this.clientProperties.getTestIamPermissionsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .testIamPermissionsSettings()
        .setRetrySettings(testIamPermissionsRetrySettingBuilder.build());
    RetrySettings.Builder getProjectSettingsRetrySettingBuilder =
        clientSettingsBuilder.getProjectSettingsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetProjectSettingsInitialRpcTimeout() != null) {
      getProjectSettingsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetProjectSettingsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProjectSettingsInitialRpcTimeout set to "
                + this.clientProperties.getGetProjectSettingsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetProjectSettingsRpcTimeoutMultiplier() != null) {
      getProjectSettingsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetProjectSettingsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProjectSettingsRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetProjectSettingsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetProjectSettingsMaxRpcTimeout() != null) {
      getProjectSettingsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetProjectSettingsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProjectSettingsMaxRpcTimeout set to "
                + this.clientProperties.getGetProjectSettingsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetProjectSettingsTotalTimeout() != null) {
      getProjectSettingsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetProjectSettingsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProjectSettingsTotalTimeout set to "
                + this.clientProperties.getGetProjectSettingsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getProjectSettingsSettings()
        .setRetrySettings(getProjectSettingsRetrySettingBuilder.build());
    RetrySettings.Builder updateProjectSettingsRetrySettingBuilder =
        clientSettingsBuilder.updateProjectSettingsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateProjectSettingsInitialRpcTimeout() != null) {
      updateProjectSettingsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateProjectSettingsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProjectSettingsInitialRpcTimeout set to "
                + this.clientProperties.getUpdateProjectSettingsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateProjectSettingsRpcTimeoutMultiplier() != null) {
      updateProjectSettingsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateProjectSettingsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProjectSettingsRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateProjectSettingsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateProjectSettingsMaxRpcTimeout() != null) {
      updateProjectSettingsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateProjectSettingsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProjectSettingsMaxRpcTimeout set to "
                + this.clientProperties.getUpdateProjectSettingsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateProjectSettingsTotalTimeout() != null) {
      updateProjectSettingsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateProjectSettingsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProjectSettingsTotalTimeout set to "
                + this.clientProperties.getUpdateProjectSettingsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateProjectSettingsSettings()
        .setRetrySettings(updateProjectSettingsRetrySettingBuilder.build());
    return ArtifactRegistryClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-artifact-registry";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
