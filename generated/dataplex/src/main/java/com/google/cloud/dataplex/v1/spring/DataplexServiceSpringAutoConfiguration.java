/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dataplex.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dataplex.v1.DataplexServiceClient;
import com.google.cloud.dataplex.v1.DataplexServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link DataplexServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(DataplexServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dataplex.v1.spring.auto.dataplex-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({DataplexServiceSpringProperties.class, GlobalProperties.class})
public class DataplexServiceSpringAutoConfiguration {
  private final DataplexServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(DataplexServiceSpringAutoConfiguration.class);

  protected DataplexServiceSpringAutoConfiguration(
      DataplexServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider dataplexServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from DataplexService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultDataplexServiceTransportChannelProvider() {
    return DataplexServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a DataplexServiceClient bean configured to use the default credentials provider
   * (obtained with dataplexServiceCredentials()) and its default transport channel provider
   * (defaultDataplexServiceTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in DataplexServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public DataplexServiceClient dataplexServiceClient(
      @Qualifier("dataplexServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultDataplexServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    DataplexServiceSettings.Builder clientSettingsBuilder =
        DataplexServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          DataplexServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          DataplexServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createLakeRetrySettingBuilder =
        clientSettingsBuilder.createLakeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateLakeInitialRpcTimeout() != null) {
      createLakeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateLakeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateLakeInitialRpcTimeout set to "
                + this.clientProperties.getCreateLakeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateLakeRpcTimeoutMultiplier() != null) {
      createLakeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateLakeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateLakeRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateLakeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateLakeMaxRpcTimeout() != null) {
      createLakeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateLakeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateLakeMaxRpcTimeout set to " + this.clientProperties.getCreateLakeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateLakeTotalTimeout() != null) {
      createLakeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateLakeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateLakeTotalTimeout set to " + this.clientProperties.getCreateLakeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createLakeSettings()
        .setRetrySettings(createLakeRetrySettingBuilder.build());
    RetrySettings.Builder updateLakeRetrySettingBuilder =
        clientSettingsBuilder.updateLakeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateLakeInitialRpcTimeout() != null) {
      updateLakeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateLakeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateLakeInitialRpcTimeout set to "
                + this.clientProperties.getUpdateLakeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateLakeRpcTimeoutMultiplier() != null) {
      updateLakeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateLakeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateLakeRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateLakeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateLakeMaxRpcTimeout() != null) {
      updateLakeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateLakeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateLakeMaxRpcTimeout set to " + this.clientProperties.getUpdateLakeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateLakeTotalTimeout() != null) {
      updateLakeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateLakeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateLakeTotalTimeout set to " + this.clientProperties.getUpdateLakeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateLakeSettings()
        .setRetrySettings(updateLakeRetrySettingBuilder.build());
    RetrySettings.Builder deleteLakeRetrySettingBuilder =
        clientSettingsBuilder.deleteLakeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteLakeInitialRpcTimeout() != null) {
      deleteLakeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteLakeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteLakeInitialRpcTimeout set to "
                + this.clientProperties.getDeleteLakeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteLakeRpcTimeoutMultiplier() != null) {
      deleteLakeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteLakeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteLakeRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteLakeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteLakeMaxRpcTimeout() != null) {
      deleteLakeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteLakeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteLakeMaxRpcTimeout set to " + this.clientProperties.getDeleteLakeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteLakeTotalTimeout() != null) {
      deleteLakeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteLakeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteLakeTotalTimeout set to " + this.clientProperties.getDeleteLakeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteLakeSettings()
        .setRetrySettings(deleteLakeRetrySettingBuilder.build());
    RetrySettings.Builder listLakesRetrySettingBuilder =
        clientSettingsBuilder.listLakesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListLakesInitialRetryDelay() != null) {
      listLakesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListLakesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLakesInitialRetryDelay set to "
                + this.clientProperties.getListLakesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListLakesRetryDelayMultiplier() != null) {
      listLakesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListLakesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLakesRetryDelayMultiplier set to "
                + this.clientProperties.getListLakesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListLakesMaxRetryDelay() != null) {
      listLakesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListLakesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLakesMaxRetryDelay set to " + this.clientProperties.getListLakesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListLakesInitialRpcTimeout() != null) {
      listLakesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListLakesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLakesInitialRpcTimeout set to "
                + this.clientProperties.getListLakesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListLakesRpcTimeoutMultiplier() != null) {
      listLakesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListLakesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLakesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListLakesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListLakesMaxRpcTimeout() != null) {
      listLakesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListLakesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLakesMaxRpcTimeout set to " + this.clientProperties.getListLakesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListLakesTotalTimeout() != null) {
      listLakesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListLakesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLakesTotalTimeout set to " + this.clientProperties.getListLakesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listLakesSettings()
        .setRetrySettings(listLakesRetrySettingBuilder.build());
    RetrySettings.Builder getLakeRetrySettingBuilder =
        clientSettingsBuilder.getLakeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetLakeInitialRetryDelay() != null) {
      getLakeRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetLakeInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLakeInitialRetryDelay set to "
                + this.clientProperties.getGetLakeInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetLakeRetryDelayMultiplier() != null) {
      getLakeRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetLakeRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLakeRetryDelayMultiplier set to "
                + this.clientProperties.getGetLakeRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetLakeMaxRetryDelay() != null) {
      getLakeRetrySettingBuilder.setMaxRetryDelay(this.clientProperties.getGetLakeMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLakeMaxRetryDelay set to " + this.clientProperties.getGetLakeMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetLakeInitialRpcTimeout() != null) {
      getLakeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetLakeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLakeInitialRpcTimeout set to "
                + this.clientProperties.getGetLakeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLakeRpcTimeoutMultiplier() != null) {
      getLakeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetLakeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLakeRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetLakeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetLakeMaxRpcTimeout() != null) {
      getLakeRetrySettingBuilder.setMaxRpcTimeout(this.clientProperties.getGetLakeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLakeMaxRpcTimeout set to " + this.clientProperties.getGetLakeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLakeTotalTimeout() != null) {
      getLakeRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetLakeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLakeTotalTimeout set to " + this.clientProperties.getGetLakeTotalTimeout());
      }
    }
    clientSettingsBuilder.getLakeSettings().setRetrySettings(getLakeRetrySettingBuilder.build());
    RetrySettings.Builder listLakeActionsRetrySettingBuilder =
        clientSettingsBuilder.listLakeActionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListLakeActionsInitialRetryDelay() != null) {
      listLakeActionsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListLakeActionsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLakeActionsInitialRetryDelay set to "
                + this.clientProperties.getListLakeActionsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListLakeActionsRetryDelayMultiplier() != null) {
      listLakeActionsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListLakeActionsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLakeActionsRetryDelayMultiplier set to "
                + this.clientProperties.getListLakeActionsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListLakeActionsMaxRetryDelay() != null) {
      listLakeActionsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListLakeActionsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLakeActionsMaxRetryDelay set to "
                + this.clientProperties.getListLakeActionsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListLakeActionsInitialRpcTimeout() != null) {
      listLakeActionsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListLakeActionsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLakeActionsInitialRpcTimeout set to "
                + this.clientProperties.getListLakeActionsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListLakeActionsRpcTimeoutMultiplier() != null) {
      listLakeActionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListLakeActionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLakeActionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListLakeActionsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListLakeActionsMaxRpcTimeout() != null) {
      listLakeActionsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListLakeActionsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLakeActionsMaxRpcTimeout set to "
                + this.clientProperties.getListLakeActionsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListLakeActionsTotalTimeout() != null) {
      listLakeActionsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListLakeActionsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLakeActionsTotalTimeout set to "
                + this.clientProperties.getListLakeActionsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listLakeActionsSettings()
        .setRetrySettings(listLakeActionsRetrySettingBuilder.build());
    RetrySettings.Builder createZoneRetrySettingBuilder =
        clientSettingsBuilder.createZoneSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateZoneInitialRpcTimeout() != null) {
      createZoneRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateZoneInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateZoneInitialRpcTimeout set to "
                + this.clientProperties.getCreateZoneInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateZoneRpcTimeoutMultiplier() != null) {
      createZoneRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateZoneRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateZoneRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateZoneRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateZoneMaxRpcTimeout() != null) {
      createZoneRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateZoneMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateZoneMaxRpcTimeout set to " + this.clientProperties.getCreateZoneMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateZoneTotalTimeout() != null) {
      createZoneRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateZoneTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateZoneTotalTimeout set to " + this.clientProperties.getCreateZoneTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createZoneSettings()
        .setRetrySettings(createZoneRetrySettingBuilder.build());
    RetrySettings.Builder updateZoneRetrySettingBuilder =
        clientSettingsBuilder.updateZoneSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateZoneInitialRpcTimeout() != null) {
      updateZoneRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateZoneInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateZoneInitialRpcTimeout set to "
                + this.clientProperties.getUpdateZoneInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateZoneRpcTimeoutMultiplier() != null) {
      updateZoneRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateZoneRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateZoneRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateZoneRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateZoneMaxRpcTimeout() != null) {
      updateZoneRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateZoneMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateZoneMaxRpcTimeout set to " + this.clientProperties.getUpdateZoneMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateZoneTotalTimeout() != null) {
      updateZoneRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateZoneTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateZoneTotalTimeout set to " + this.clientProperties.getUpdateZoneTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateZoneSettings()
        .setRetrySettings(updateZoneRetrySettingBuilder.build());
    RetrySettings.Builder deleteZoneRetrySettingBuilder =
        clientSettingsBuilder.deleteZoneSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteZoneInitialRpcTimeout() != null) {
      deleteZoneRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteZoneInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteZoneInitialRpcTimeout set to "
                + this.clientProperties.getDeleteZoneInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteZoneRpcTimeoutMultiplier() != null) {
      deleteZoneRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteZoneRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteZoneRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteZoneRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteZoneMaxRpcTimeout() != null) {
      deleteZoneRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteZoneMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteZoneMaxRpcTimeout set to " + this.clientProperties.getDeleteZoneMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteZoneTotalTimeout() != null) {
      deleteZoneRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteZoneTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteZoneTotalTimeout set to " + this.clientProperties.getDeleteZoneTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteZoneSettings()
        .setRetrySettings(deleteZoneRetrySettingBuilder.build());
    RetrySettings.Builder listZonesRetrySettingBuilder =
        clientSettingsBuilder.listZonesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListZonesInitialRetryDelay() != null) {
      listZonesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListZonesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListZonesInitialRetryDelay set to "
                + this.clientProperties.getListZonesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListZonesRetryDelayMultiplier() != null) {
      listZonesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListZonesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListZonesRetryDelayMultiplier set to "
                + this.clientProperties.getListZonesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListZonesMaxRetryDelay() != null) {
      listZonesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListZonesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListZonesMaxRetryDelay set to " + this.clientProperties.getListZonesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListZonesInitialRpcTimeout() != null) {
      listZonesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListZonesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListZonesInitialRpcTimeout set to "
                + this.clientProperties.getListZonesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListZonesRpcTimeoutMultiplier() != null) {
      listZonesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListZonesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListZonesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListZonesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListZonesMaxRpcTimeout() != null) {
      listZonesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListZonesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListZonesMaxRpcTimeout set to " + this.clientProperties.getListZonesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListZonesTotalTimeout() != null) {
      listZonesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListZonesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListZonesTotalTimeout set to " + this.clientProperties.getListZonesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listZonesSettings()
        .setRetrySettings(listZonesRetrySettingBuilder.build());
    RetrySettings.Builder getZoneRetrySettingBuilder =
        clientSettingsBuilder.getZoneSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetZoneInitialRetryDelay() != null) {
      getZoneRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetZoneInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetZoneInitialRetryDelay set to "
                + this.clientProperties.getGetZoneInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetZoneRetryDelayMultiplier() != null) {
      getZoneRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetZoneRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetZoneRetryDelayMultiplier set to "
                + this.clientProperties.getGetZoneRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetZoneMaxRetryDelay() != null) {
      getZoneRetrySettingBuilder.setMaxRetryDelay(this.clientProperties.getGetZoneMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetZoneMaxRetryDelay set to " + this.clientProperties.getGetZoneMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetZoneInitialRpcTimeout() != null) {
      getZoneRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetZoneInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetZoneInitialRpcTimeout set to "
                + this.clientProperties.getGetZoneInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetZoneRpcTimeoutMultiplier() != null) {
      getZoneRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetZoneRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetZoneRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetZoneRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetZoneMaxRpcTimeout() != null) {
      getZoneRetrySettingBuilder.setMaxRpcTimeout(this.clientProperties.getGetZoneMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetZoneMaxRpcTimeout set to " + this.clientProperties.getGetZoneMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetZoneTotalTimeout() != null) {
      getZoneRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetZoneTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetZoneTotalTimeout set to " + this.clientProperties.getGetZoneTotalTimeout());
      }
    }
    clientSettingsBuilder.getZoneSettings().setRetrySettings(getZoneRetrySettingBuilder.build());
    RetrySettings.Builder listZoneActionsRetrySettingBuilder =
        clientSettingsBuilder.listZoneActionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListZoneActionsInitialRetryDelay() != null) {
      listZoneActionsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListZoneActionsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListZoneActionsInitialRetryDelay set to "
                + this.clientProperties.getListZoneActionsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListZoneActionsRetryDelayMultiplier() != null) {
      listZoneActionsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListZoneActionsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListZoneActionsRetryDelayMultiplier set to "
                + this.clientProperties.getListZoneActionsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListZoneActionsMaxRetryDelay() != null) {
      listZoneActionsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListZoneActionsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListZoneActionsMaxRetryDelay set to "
                + this.clientProperties.getListZoneActionsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListZoneActionsInitialRpcTimeout() != null) {
      listZoneActionsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListZoneActionsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListZoneActionsInitialRpcTimeout set to "
                + this.clientProperties.getListZoneActionsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListZoneActionsRpcTimeoutMultiplier() != null) {
      listZoneActionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListZoneActionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListZoneActionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListZoneActionsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListZoneActionsMaxRpcTimeout() != null) {
      listZoneActionsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListZoneActionsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListZoneActionsMaxRpcTimeout set to "
                + this.clientProperties.getListZoneActionsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListZoneActionsTotalTimeout() != null) {
      listZoneActionsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListZoneActionsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListZoneActionsTotalTimeout set to "
                + this.clientProperties.getListZoneActionsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listZoneActionsSettings()
        .setRetrySettings(listZoneActionsRetrySettingBuilder.build());
    RetrySettings.Builder createAssetRetrySettingBuilder =
        clientSettingsBuilder.createAssetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateAssetInitialRpcTimeout() != null) {
      createAssetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateAssetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAssetInitialRpcTimeout set to "
                + this.clientProperties.getCreateAssetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateAssetRpcTimeoutMultiplier() != null) {
      createAssetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateAssetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAssetRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateAssetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateAssetMaxRpcTimeout() != null) {
      createAssetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateAssetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAssetMaxRpcTimeout set to "
                + this.clientProperties.getCreateAssetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateAssetTotalTimeout() != null) {
      createAssetRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateAssetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAssetTotalTimeout set to " + this.clientProperties.getCreateAssetTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createAssetSettings()
        .setRetrySettings(createAssetRetrySettingBuilder.build());
    RetrySettings.Builder updateAssetRetrySettingBuilder =
        clientSettingsBuilder.updateAssetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateAssetInitialRpcTimeout() != null) {
      updateAssetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateAssetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAssetInitialRpcTimeout set to "
                + this.clientProperties.getUpdateAssetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateAssetRpcTimeoutMultiplier() != null) {
      updateAssetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateAssetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAssetRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateAssetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateAssetMaxRpcTimeout() != null) {
      updateAssetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateAssetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAssetMaxRpcTimeout set to "
                + this.clientProperties.getUpdateAssetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateAssetTotalTimeout() != null) {
      updateAssetRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateAssetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAssetTotalTimeout set to " + this.clientProperties.getUpdateAssetTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateAssetSettings()
        .setRetrySettings(updateAssetRetrySettingBuilder.build());
    RetrySettings.Builder deleteAssetRetrySettingBuilder =
        clientSettingsBuilder.deleteAssetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteAssetInitialRpcTimeout() != null) {
      deleteAssetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteAssetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAssetInitialRpcTimeout set to "
                + this.clientProperties.getDeleteAssetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAssetRpcTimeoutMultiplier() != null) {
      deleteAssetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteAssetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAssetRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteAssetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteAssetMaxRpcTimeout() != null) {
      deleteAssetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteAssetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAssetMaxRpcTimeout set to "
                + this.clientProperties.getDeleteAssetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAssetTotalTimeout() != null) {
      deleteAssetRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteAssetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAssetTotalTimeout set to " + this.clientProperties.getDeleteAssetTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteAssetSettings()
        .setRetrySettings(deleteAssetRetrySettingBuilder.build());
    RetrySettings.Builder listAssetsRetrySettingBuilder =
        clientSettingsBuilder.listAssetsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListAssetsInitialRetryDelay() != null) {
      listAssetsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListAssetsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetsInitialRetryDelay set to "
                + this.clientProperties.getListAssetsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListAssetsRetryDelayMultiplier() != null) {
      listAssetsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListAssetsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetsRetryDelayMultiplier set to "
                + this.clientProperties.getListAssetsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListAssetsMaxRetryDelay() != null) {
      listAssetsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListAssetsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetsMaxRetryDelay set to " + this.clientProperties.getListAssetsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListAssetsInitialRpcTimeout() != null) {
      listAssetsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListAssetsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetsInitialRpcTimeout set to "
                + this.clientProperties.getListAssetsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListAssetsRpcTimeoutMultiplier() != null) {
      listAssetsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListAssetsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListAssetsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListAssetsMaxRpcTimeout() != null) {
      listAssetsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListAssetsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetsMaxRpcTimeout set to " + this.clientProperties.getListAssetsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListAssetsTotalTimeout() != null) {
      listAssetsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListAssetsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetsTotalTimeout set to " + this.clientProperties.getListAssetsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listAssetsSettings()
        .setRetrySettings(listAssetsRetrySettingBuilder.build());
    RetrySettings.Builder getAssetRetrySettingBuilder =
        clientSettingsBuilder.getAssetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetAssetInitialRetryDelay() != null) {
      getAssetRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetAssetInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAssetInitialRetryDelay set to "
                + this.clientProperties.getGetAssetInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetAssetRetryDelayMultiplier() != null) {
      getAssetRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetAssetRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAssetRetryDelayMultiplier set to "
                + this.clientProperties.getGetAssetRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetAssetMaxRetryDelay() != null) {
      getAssetRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetAssetMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAssetMaxRetryDelay set to " + this.clientProperties.getGetAssetMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetAssetInitialRpcTimeout() != null) {
      getAssetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetAssetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAssetInitialRpcTimeout set to "
                + this.clientProperties.getGetAssetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAssetRpcTimeoutMultiplier() != null) {
      getAssetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetAssetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAssetRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetAssetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetAssetMaxRpcTimeout() != null) {
      getAssetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetAssetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAssetMaxRpcTimeout set to " + this.clientProperties.getGetAssetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAssetTotalTimeout() != null) {
      getAssetRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetAssetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAssetTotalTimeout set to " + this.clientProperties.getGetAssetTotalTimeout());
      }
    }
    clientSettingsBuilder.getAssetSettings().setRetrySettings(getAssetRetrySettingBuilder.build());
    RetrySettings.Builder listAssetActionsRetrySettingBuilder =
        clientSettingsBuilder.listAssetActionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListAssetActionsInitialRetryDelay() != null) {
      listAssetActionsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListAssetActionsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetActionsInitialRetryDelay set to "
                + this.clientProperties.getListAssetActionsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListAssetActionsRetryDelayMultiplier() != null) {
      listAssetActionsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListAssetActionsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetActionsRetryDelayMultiplier set to "
                + this.clientProperties.getListAssetActionsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListAssetActionsMaxRetryDelay() != null) {
      listAssetActionsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListAssetActionsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetActionsMaxRetryDelay set to "
                + this.clientProperties.getListAssetActionsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListAssetActionsInitialRpcTimeout() != null) {
      listAssetActionsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListAssetActionsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetActionsInitialRpcTimeout set to "
                + this.clientProperties.getListAssetActionsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListAssetActionsRpcTimeoutMultiplier() != null) {
      listAssetActionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListAssetActionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetActionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListAssetActionsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListAssetActionsMaxRpcTimeout() != null) {
      listAssetActionsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListAssetActionsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetActionsMaxRpcTimeout set to "
                + this.clientProperties.getListAssetActionsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListAssetActionsTotalTimeout() != null) {
      listAssetActionsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListAssetActionsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetActionsTotalTimeout set to "
                + this.clientProperties.getListAssetActionsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listAssetActionsSettings()
        .setRetrySettings(listAssetActionsRetrySettingBuilder.build());
    RetrySettings.Builder createTaskRetrySettingBuilder =
        clientSettingsBuilder.createTaskSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateTaskInitialRpcTimeout() != null) {
      createTaskRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateTaskInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTaskInitialRpcTimeout set to "
                + this.clientProperties.getCreateTaskInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateTaskRpcTimeoutMultiplier() != null) {
      createTaskRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateTaskRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTaskRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateTaskRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateTaskMaxRpcTimeout() != null) {
      createTaskRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateTaskMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTaskMaxRpcTimeout set to " + this.clientProperties.getCreateTaskMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateTaskTotalTimeout() != null) {
      createTaskRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateTaskTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTaskTotalTimeout set to " + this.clientProperties.getCreateTaskTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createTaskSettings()
        .setRetrySettings(createTaskRetrySettingBuilder.build());
    RetrySettings.Builder updateTaskRetrySettingBuilder =
        clientSettingsBuilder.updateTaskSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateTaskInitialRpcTimeout() != null) {
      updateTaskRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateTaskInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTaskInitialRpcTimeout set to "
                + this.clientProperties.getUpdateTaskInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateTaskRpcTimeoutMultiplier() != null) {
      updateTaskRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateTaskRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTaskRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateTaskRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateTaskMaxRpcTimeout() != null) {
      updateTaskRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateTaskMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTaskMaxRpcTimeout set to " + this.clientProperties.getUpdateTaskMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateTaskTotalTimeout() != null) {
      updateTaskRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateTaskTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTaskTotalTimeout set to " + this.clientProperties.getUpdateTaskTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateTaskSettings()
        .setRetrySettings(updateTaskRetrySettingBuilder.build());
    RetrySettings.Builder deleteTaskRetrySettingBuilder =
        clientSettingsBuilder.deleteTaskSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteTaskInitialRpcTimeout() != null) {
      deleteTaskRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteTaskInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTaskInitialRpcTimeout set to "
                + this.clientProperties.getDeleteTaskInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteTaskRpcTimeoutMultiplier() != null) {
      deleteTaskRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteTaskRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTaskRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteTaskRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteTaskMaxRpcTimeout() != null) {
      deleteTaskRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteTaskMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTaskMaxRpcTimeout set to " + this.clientProperties.getDeleteTaskMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteTaskTotalTimeout() != null) {
      deleteTaskRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteTaskTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTaskTotalTimeout set to " + this.clientProperties.getDeleteTaskTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteTaskSettings()
        .setRetrySettings(deleteTaskRetrySettingBuilder.build());
    RetrySettings.Builder listTasksRetrySettingBuilder =
        clientSettingsBuilder.listTasksSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListTasksInitialRetryDelay() != null) {
      listTasksRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListTasksInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTasksInitialRetryDelay set to "
                + this.clientProperties.getListTasksInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListTasksRetryDelayMultiplier() != null) {
      listTasksRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListTasksRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTasksRetryDelayMultiplier set to "
                + this.clientProperties.getListTasksRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListTasksMaxRetryDelay() != null) {
      listTasksRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListTasksMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTasksMaxRetryDelay set to " + this.clientProperties.getListTasksMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListTasksInitialRpcTimeout() != null) {
      listTasksRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListTasksInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTasksInitialRpcTimeout set to "
                + this.clientProperties.getListTasksInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListTasksRpcTimeoutMultiplier() != null) {
      listTasksRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListTasksRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTasksRpcTimeoutMultiplier set to "
                + this.clientProperties.getListTasksRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListTasksMaxRpcTimeout() != null) {
      listTasksRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListTasksMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTasksMaxRpcTimeout set to " + this.clientProperties.getListTasksMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListTasksTotalTimeout() != null) {
      listTasksRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListTasksTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTasksTotalTimeout set to " + this.clientProperties.getListTasksTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listTasksSettings()
        .setRetrySettings(listTasksRetrySettingBuilder.build());
    RetrySettings.Builder getTaskRetrySettingBuilder =
        clientSettingsBuilder.getTaskSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetTaskInitialRetryDelay() != null) {
      getTaskRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetTaskInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTaskInitialRetryDelay set to "
                + this.clientProperties.getGetTaskInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetTaskRetryDelayMultiplier() != null) {
      getTaskRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetTaskRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTaskRetryDelayMultiplier set to "
                + this.clientProperties.getGetTaskRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetTaskMaxRetryDelay() != null) {
      getTaskRetrySettingBuilder.setMaxRetryDelay(this.clientProperties.getGetTaskMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTaskMaxRetryDelay set to " + this.clientProperties.getGetTaskMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetTaskInitialRpcTimeout() != null) {
      getTaskRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetTaskInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTaskInitialRpcTimeout set to "
                + this.clientProperties.getGetTaskInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetTaskRpcTimeoutMultiplier() != null) {
      getTaskRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetTaskRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTaskRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetTaskRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetTaskMaxRpcTimeout() != null) {
      getTaskRetrySettingBuilder.setMaxRpcTimeout(this.clientProperties.getGetTaskMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTaskMaxRpcTimeout set to " + this.clientProperties.getGetTaskMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetTaskTotalTimeout() != null) {
      getTaskRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetTaskTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTaskTotalTimeout set to " + this.clientProperties.getGetTaskTotalTimeout());
      }
    }
    clientSettingsBuilder.getTaskSettings().setRetrySettings(getTaskRetrySettingBuilder.build());
    RetrySettings.Builder listJobsRetrySettingBuilder =
        clientSettingsBuilder.listJobsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListJobsInitialRetryDelay() != null) {
      listJobsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListJobsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobsInitialRetryDelay set to "
                + this.clientProperties.getListJobsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListJobsRetryDelayMultiplier() != null) {
      listJobsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListJobsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobsRetryDelayMultiplier set to "
                + this.clientProperties.getListJobsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListJobsMaxRetryDelay() != null) {
      listJobsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListJobsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobsMaxRetryDelay set to " + this.clientProperties.getListJobsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListJobsInitialRpcTimeout() != null) {
      listJobsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListJobsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobsInitialRpcTimeout set to "
                + this.clientProperties.getListJobsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListJobsRpcTimeoutMultiplier() != null) {
      listJobsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListJobsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListJobsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListJobsMaxRpcTimeout() != null) {
      listJobsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListJobsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobsMaxRpcTimeout set to " + this.clientProperties.getListJobsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListJobsTotalTimeout() != null) {
      listJobsRetrySettingBuilder.setTotalTimeout(this.clientProperties.getListJobsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobsTotalTimeout set to " + this.clientProperties.getListJobsTotalTimeout());
      }
    }
    clientSettingsBuilder.listJobsSettings().setRetrySettings(listJobsRetrySettingBuilder.build());
    RetrySettings.Builder getJobRetrySettingBuilder =
        clientSettingsBuilder.getJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetJobInitialRetryDelay() != null) {
      getJobRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetJobInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobInitialRetryDelay set to " + this.clientProperties.getGetJobInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetJobRetryDelayMultiplier() != null) {
      getJobRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetJobRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobRetryDelayMultiplier set to "
                + this.clientProperties.getGetJobRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetJobMaxRetryDelay() != null) {
      getJobRetrySettingBuilder.setMaxRetryDelay(this.clientProperties.getGetJobMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobMaxRetryDelay set to " + this.clientProperties.getGetJobMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetJobInitialRpcTimeout() != null) {
      getJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobInitialRpcTimeout set to " + this.clientProperties.getGetJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetJobRpcTimeoutMultiplier() != null) {
      getJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetJobMaxRpcTimeout() != null) {
      getJobRetrySettingBuilder.setMaxRpcTimeout(this.clientProperties.getGetJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobMaxRpcTimeout set to " + this.clientProperties.getGetJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetJobTotalTimeout() != null) {
      getJobRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("GetJobTotalTimeout set to " + this.clientProperties.getGetJobTotalTimeout());
      }
    }
    clientSettingsBuilder.getJobSettings().setRetrySettings(getJobRetrySettingBuilder.build());
    RetrySettings.Builder cancelJobRetrySettingBuilder =
        clientSettingsBuilder.cancelJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCancelJobInitialRpcTimeout() != null) {
      cancelJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCancelJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelJobInitialRpcTimeout set to "
                + this.clientProperties.getCancelJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCancelJobRpcTimeoutMultiplier() != null) {
      cancelJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCancelJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getCancelJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCancelJobMaxRpcTimeout() != null) {
      cancelJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCancelJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelJobMaxRpcTimeout set to " + this.clientProperties.getCancelJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCancelJobTotalTimeout() != null) {
      cancelJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCancelJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelJobTotalTimeout set to " + this.clientProperties.getCancelJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .cancelJobSettings()
        .setRetrySettings(cancelJobRetrySettingBuilder.build());
    RetrySettings.Builder createEnvironmentRetrySettingBuilder =
        clientSettingsBuilder.createEnvironmentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateEnvironmentInitialRpcTimeout() != null) {
      createEnvironmentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateEnvironmentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEnvironmentInitialRpcTimeout set to "
                + this.clientProperties.getCreateEnvironmentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateEnvironmentRpcTimeoutMultiplier() != null) {
      createEnvironmentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateEnvironmentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEnvironmentRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateEnvironmentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateEnvironmentMaxRpcTimeout() != null) {
      createEnvironmentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateEnvironmentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEnvironmentMaxRpcTimeout set to "
                + this.clientProperties.getCreateEnvironmentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateEnvironmentTotalTimeout() != null) {
      createEnvironmentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateEnvironmentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEnvironmentTotalTimeout set to "
                + this.clientProperties.getCreateEnvironmentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createEnvironmentSettings()
        .setRetrySettings(createEnvironmentRetrySettingBuilder.build());
    RetrySettings.Builder updateEnvironmentRetrySettingBuilder =
        clientSettingsBuilder.updateEnvironmentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateEnvironmentInitialRpcTimeout() != null) {
      updateEnvironmentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateEnvironmentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEnvironmentInitialRpcTimeout set to "
                + this.clientProperties.getUpdateEnvironmentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateEnvironmentRpcTimeoutMultiplier() != null) {
      updateEnvironmentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateEnvironmentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEnvironmentRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateEnvironmentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateEnvironmentMaxRpcTimeout() != null) {
      updateEnvironmentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateEnvironmentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEnvironmentMaxRpcTimeout set to "
                + this.clientProperties.getUpdateEnvironmentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateEnvironmentTotalTimeout() != null) {
      updateEnvironmentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateEnvironmentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEnvironmentTotalTimeout set to "
                + this.clientProperties.getUpdateEnvironmentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateEnvironmentSettings()
        .setRetrySettings(updateEnvironmentRetrySettingBuilder.build());
    RetrySettings.Builder deleteEnvironmentRetrySettingBuilder =
        clientSettingsBuilder.deleteEnvironmentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteEnvironmentInitialRpcTimeout() != null) {
      deleteEnvironmentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteEnvironmentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEnvironmentInitialRpcTimeout set to "
                + this.clientProperties.getDeleteEnvironmentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteEnvironmentRpcTimeoutMultiplier() != null) {
      deleteEnvironmentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteEnvironmentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEnvironmentRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteEnvironmentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteEnvironmentMaxRpcTimeout() != null) {
      deleteEnvironmentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteEnvironmentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEnvironmentMaxRpcTimeout set to "
                + this.clientProperties.getDeleteEnvironmentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteEnvironmentTotalTimeout() != null) {
      deleteEnvironmentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteEnvironmentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEnvironmentTotalTimeout set to "
                + this.clientProperties.getDeleteEnvironmentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteEnvironmentSettings()
        .setRetrySettings(deleteEnvironmentRetrySettingBuilder.build());
    RetrySettings.Builder listEnvironmentsRetrySettingBuilder =
        clientSettingsBuilder.listEnvironmentsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListEnvironmentsInitialRetryDelay() != null) {
      listEnvironmentsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListEnvironmentsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEnvironmentsInitialRetryDelay set to "
                + this.clientProperties.getListEnvironmentsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListEnvironmentsRetryDelayMultiplier() != null) {
      listEnvironmentsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListEnvironmentsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEnvironmentsRetryDelayMultiplier set to "
                + this.clientProperties.getListEnvironmentsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListEnvironmentsMaxRetryDelay() != null) {
      listEnvironmentsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListEnvironmentsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEnvironmentsMaxRetryDelay set to "
                + this.clientProperties.getListEnvironmentsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListEnvironmentsInitialRpcTimeout() != null) {
      listEnvironmentsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListEnvironmentsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEnvironmentsInitialRpcTimeout set to "
                + this.clientProperties.getListEnvironmentsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListEnvironmentsRpcTimeoutMultiplier() != null) {
      listEnvironmentsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListEnvironmentsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEnvironmentsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListEnvironmentsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListEnvironmentsMaxRpcTimeout() != null) {
      listEnvironmentsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListEnvironmentsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEnvironmentsMaxRpcTimeout set to "
                + this.clientProperties.getListEnvironmentsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListEnvironmentsTotalTimeout() != null) {
      listEnvironmentsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListEnvironmentsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEnvironmentsTotalTimeout set to "
                + this.clientProperties.getListEnvironmentsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listEnvironmentsSettings()
        .setRetrySettings(listEnvironmentsRetrySettingBuilder.build());
    RetrySettings.Builder getEnvironmentRetrySettingBuilder =
        clientSettingsBuilder.getEnvironmentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetEnvironmentInitialRetryDelay() != null) {
      getEnvironmentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetEnvironmentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentInitialRetryDelay set to "
                + this.clientProperties.getGetEnvironmentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetEnvironmentRetryDelayMultiplier() != null) {
      getEnvironmentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetEnvironmentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentRetryDelayMultiplier set to "
                + this.clientProperties.getGetEnvironmentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetEnvironmentMaxRetryDelay() != null) {
      getEnvironmentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetEnvironmentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentMaxRetryDelay set to "
                + this.clientProperties.getGetEnvironmentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetEnvironmentInitialRpcTimeout() != null) {
      getEnvironmentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetEnvironmentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentInitialRpcTimeout set to "
                + this.clientProperties.getGetEnvironmentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEnvironmentRpcTimeoutMultiplier() != null) {
      getEnvironmentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetEnvironmentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetEnvironmentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetEnvironmentMaxRpcTimeout() != null) {
      getEnvironmentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetEnvironmentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentMaxRpcTimeout set to "
                + this.clientProperties.getGetEnvironmentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEnvironmentTotalTimeout() != null) {
      getEnvironmentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetEnvironmentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentTotalTimeout set to "
                + this.clientProperties.getGetEnvironmentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getEnvironmentSettings()
        .setRetrySettings(getEnvironmentRetrySettingBuilder.build());
    RetrySettings.Builder listSessionsRetrySettingBuilder =
        clientSettingsBuilder.listSessionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListSessionsRpcTimeoutMultiplier() != null) {
      listSessionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListSessionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSessionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListSessionsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listSessionsSettings()
        .setRetrySettings(listSessionsRetrySettingBuilder.build());
    RetrySettings.Builder listLocationsRetrySettingBuilder =
        clientSettingsBuilder.listLocationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListLocationsRpcTimeoutMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listLocationsSettings()
        .setRetrySettings(listLocationsRetrySettingBuilder.build());
    RetrySettings.Builder getLocationRetrySettingBuilder =
        clientSettingsBuilder.getLocationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetLocationRpcTimeoutMultiplier() != null) {
      getLocationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getLocationSettings()
        .setRetrySettings(getLocationRetrySettingBuilder.build());
    return DataplexServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-dataplex-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
