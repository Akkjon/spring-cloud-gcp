/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dataplex.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dataplex.v1.ContentServiceClient;
import com.google.cloud.dataplex.v1.ContentServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ContentServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ContentServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dataplex.v1.spring.auto.content-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({ContentServiceSpringProperties.class, GlobalProperties.class})
public class ContentServiceSpringAutoConfiguration {
  private final ContentServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(ContentServiceSpringAutoConfiguration.class);

  protected ContentServiceSpringAutoConfiguration(
      ContentServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider contentServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from ContentService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultContentServiceTransportChannelProvider() {
    return ContentServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ContentServiceClient bean configured to use the default credentials provider
   * (obtained with contentServiceCredentials()) and its default transport channel provider
   * (defaultContentServiceTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in ContentServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public ContentServiceClient contentServiceClient(
      @Qualifier("contentServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultContentServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ContentServiceSettings.Builder clientSettingsBuilder =
        ContentServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ContentServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          ContentServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createContentRetrySettingBuilder =
        clientSettingsBuilder.createContentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateContentInitialRpcTimeout() != null) {
      createContentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateContentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateContentInitialRpcTimeout set to "
                + this.clientProperties.getCreateContentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateContentRpcTimeoutMultiplier() != null) {
      createContentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateContentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateContentRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateContentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateContentMaxRpcTimeout() != null) {
      createContentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateContentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateContentMaxRpcTimeout set to "
                + this.clientProperties.getCreateContentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateContentTotalTimeout() != null) {
      createContentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateContentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateContentTotalTimeout set to "
                + this.clientProperties.getCreateContentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createContentSettings()
        .setRetrySettings(createContentRetrySettingBuilder.build());
    RetrySettings.Builder updateContentRetrySettingBuilder =
        clientSettingsBuilder.updateContentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateContentInitialRpcTimeout() != null) {
      updateContentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateContentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateContentInitialRpcTimeout set to "
                + this.clientProperties.getUpdateContentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateContentRpcTimeoutMultiplier() != null) {
      updateContentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateContentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateContentRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateContentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateContentMaxRpcTimeout() != null) {
      updateContentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateContentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateContentMaxRpcTimeout set to "
                + this.clientProperties.getUpdateContentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateContentTotalTimeout() != null) {
      updateContentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateContentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateContentTotalTimeout set to "
                + this.clientProperties.getUpdateContentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateContentSettings()
        .setRetrySettings(updateContentRetrySettingBuilder.build());
    RetrySettings.Builder deleteContentRetrySettingBuilder =
        clientSettingsBuilder.deleteContentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteContentInitialRpcTimeout() != null) {
      deleteContentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteContentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteContentInitialRpcTimeout set to "
                + this.clientProperties.getDeleteContentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteContentRpcTimeoutMultiplier() != null) {
      deleteContentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteContentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteContentRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteContentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteContentMaxRpcTimeout() != null) {
      deleteContentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteContentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteContentMaxRpcTimeout set to "
                + this.clientProperties.getDeleteContentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteContentTotalTimeout() != null) {
      deleteContentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteContentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteContentTotalTimeout set to "
                + this.clientProperties.getDeleteContentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteContentSettings()
        .setRetrySettings(deleteContentRetrySettingBuilder.build());
    RetrySettings.Builder getContentRetrySettingBuilder =
        clientSettingsBuilder.getContentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetContentInitialRetryDelay() != null) {
      getContentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetContentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContentInitialRetryDelay set to "
                + this.clientProperties.getGetContentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetContentRetryDelayMultiplier() != null) {
      getContentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetContentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContentRetryDelayMultiplier set to "
                + this.clientProperties.getGetContentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetContentMaxRetryDelay() != null) {
      getContentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetContentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContentMaxRetryDelay set to " + this.clientProperties.getGetContentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetContentInitialRpcTimeout() != null) {
      getContentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetContentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContentInitialRpcTimeout set to "
                + this.clientProperties.getGetContentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetContentRpcTimeoutMultiplier() != null) {
      getContentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetContentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContentRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetContentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetContentMaxRpcTimeout() != null) {
      getContentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetContentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContentMaxRpcTimeout set to " + this.clientProperties.getGetContentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetContentTotalTimeout() != null) {
      getContentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetContentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContentTotalTimeout set to " + this.clientProperties.getGetContentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getContentSettings()
        .setRetrySettings(getContentRetrySettingBuilder.build());
    RetrySettings.Builder getIamPolicyRetrySettingBuilder =
        clientSettingsBuilder.getIamPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetIamPolicyInitialRetryDelay() != null) {
      getIamPolicyRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetIamPolicyInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyInitialRetryDelay set to "
                + this.clientProperties.getGetIamPolicyInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetIamPolicyRetryDelayMultiplier() != null) {
      getIamPolicyRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetIamPolicyRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyRetryDelayMultiplier set to "
                + this.clientProperties.getGetIamPolicyRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetIamPolicyMaxRetryDelay() != null) {
      getIamPolicyRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetIamPolicyMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyMaxRetryDelay set to "
                + this.clientProperties.getGetIamPolicyMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetIamPolicyInitialRpcTimeout() != null) {
      getIamPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetIamPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyInitialRpcTimeout set to "
                + this.clientProperties.getGetIamPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetIamPolicyRpcTimeoutMultiplier() != null) {
      getIamPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetIamPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetIamPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetIamPolicyMaxRpcTimeout() != null) {
      getIamPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetIamPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyMaxRpcTimeout set to "
                + this.clientProperties.getGetIamPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetIamPolicyTotalTimeout() != null) {
      getIamPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetIamPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyTotalTimeout set to "
                + this.clientProperties.getGetIamPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getIamPolicySettings()
        .setRetrySettings(getIamPolicyRetrySettingBuilder.build());
    RetrySettings.Builder setIamPolicyRetrySettingBuilder =
        clientSettingsBuilder.setIamPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetIamPolicyInitialRpcTimeout() != null) {
      setIamPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetIamPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyInitialRpcTimeout set to "
                + this.clientProperties.getSetIamPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetIamPolicyRpcTimeoutMultiplier() != null) {
      setIamPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetIamPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetIamPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetIamPolicyMaxRpcTimeout() != null) {
      setIamPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetIamPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyMaxRpcTimeout set to "
                + this.clientProperties.getSetIamPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetIamPolicyTotalTimeout() != null) {
      setIamPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetIamPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyTotalTimeout set to "
                + this.clientProperties.getSetIamPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setIamPolicySettings()
        .setRetrySettings(setIamPolicyRetrySettingBuilder.build());
    RetrySettings.Builder testIamPermissionsRetrySettingBuilder =
        clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getTestIamPermissionsInitialRetryDelay() != null) {
      testIamPermissionsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getTestIamPermissionsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsInitialRetryDelay set to "
                + this.clientProperties.getTestIamPermissionsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getTestIamPermissionsRetryDelayMultiplier() != null) {
      testIamPermissionsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getTestIamPermissionsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsRetryDelayMultiplier set to "
                + this.clientProperties.getTestIamPermissionsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getTestIamPermissionsMaxRetryDelay() != null) {
      testIamPermissionsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getTestIamPermissionsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsMaxRetryDelay set to "
                + this.clientProperties.getTestIamPermissionsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getTestIamPermissionsInitialRpcTimeout() != null) {
      testIamPermissionsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getTestIamPermissionsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsInitialRpcTimeout set to "
                + this.clientProperties.getTestIamPermissionsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getTestIamPermissionsRpcTimeoutMultiplier() != null) {
      testIamPermissionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getTestIamPermissionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getTestIamPermissionsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getTestIamPermissionsMaxRpcTimeout() != null) {
      testIamPermissionsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getTestIamPermissionsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsMaxRpcTimeout set to "
                + this.clientProperties.getTestIamPermissionsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getTestIamPermissionsTotalTimeout() != null) {
      testIamPermissionsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getTestIamPermissionsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsTotalTimeout set to "
                + this.clientProperties.getTestIamPermissionsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .testIamPermissionsSettings()
        .setRetrySettings(testIamPermissionsRetrySettingBuilder.build());
    RetrySettings.Builder listContentRetrySettingBuilder =
        clientSettingsBuilder.listContentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListContentInitialRetryDelay() != null) {
      listContentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListContentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContentInitialRetryDelay set to "
                + this.clientProperties.getListContentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListContentRetryDelayMultiplier() != null) {
      listContentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListContentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContentRetryDelayMultiplier set to "
                + this.clientProperties.getListContentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListContentMaxRetryDelay() != null) {
      listContentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListContentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContentMaxRetryDelay set to "
                + this.clientProperties.getListContentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListContentInitialRpcTimeout() != null) {
      listContentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListContentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContentInitialRpcTimeout set to "
                + this.clientProperties.getListContentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListContentRpcTimeoutMultiplier() != null) {
      listContentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListContentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContentRpcTimeoutMultiplier set to "
                + this.clientProperties.getListContentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListContentMaxRpcTimeout() != null) {
      listContentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListContentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContentMaxRpcTimeout set to "
                + this.clientProperties.getListContentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListContentTotalTimeout() != null) {
      listContentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListContentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContentTotalTimeout set to " + this.clientProperties.getListContentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listContentSettings()
        .setRetrySettings(listContentRetrySettingBuilder.build());
    RetrySettings.Builder listLocationsRetrySettingBuilder =
        clientSettingsBuilder.listLocationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListLocationsRpcTimeoutMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listLocationsSettings()
        .setRetrySettings(listLocationsRetrySettingBuilder.build());
    RetrySettings.Builder getLocationRetrySettingBuilder =
        clientSettingsBuilder.getLocationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetLocationRpcTimeoutMultiplier() != null) {
      getLocationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getLocationSettings()
        .setRetrySettings(getLocationRetrySettingBuilder.build());
    return ContentServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-content-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
