/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.appengine.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.appengine.v1.DomainMappingsClient;
import com.google.appengine.v1.DomainMappingsSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link DomainMappingsClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(DomainMappingsClient.class)
@ConditionalOnProperty(
    value = "com.google.appengine.v1.spring.auto.domain-mappings.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({DomainMappingsSpringProperties.class, GlobalProperties.class})
public class DomainMappingsSpringAutoConfiguration {
  private final DomainMappingsSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(DomainMappingsSpringAutoConfiguration.class);

  protected DomainMappingsSpringAutoConfiguration(
      DomainMappingsSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider domainMappingsCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from DomainMappings-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultDomainMappingsTransportChannelProvider() {
    return DomainMappingsSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a DomainMappingsClient bean configured to use the default credentials provider
   * (obtained with domainMappingsCredentials()) and its default transport channel provider
   * (defaultDomainMappingsTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in DomainMappingsSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public DomainMappingsClient domainMappingsClient(
      @Qualifier("domainMappingsCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultDomainMappingsTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    DomainMappingsSettings.Builder clientSettingsBuilder =
        DomainMappingsSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          DomainMappingsSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          DomainMappingsSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listDomainMappingsRetrySettingBuilder =
        clientSettingsBuilder.listDomainMappingsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListDomainMappingsInitialRpcTimeout() != null) {
      listDomainMappingsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListDomainMappingsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDomainMappingsInitialRpcTimeout set to "
                + this.clientProperties.getListDomainMappingsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListDomainMappingsRpcTimeoutMultiplier() != null) {
      listDomainMappingsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListDomainMappingsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDomainMappingsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListDomainMappingsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListDomainMappingsMaxRpcTimeout() != null) {
      listDomainMappingsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListDomainMappingsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDomainMappingsMaxRpcTimeout set to "
                + this.clientProperties.getListDomainMappingsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListDomainMappingsTotalTimeout() != null) {
      listDomainMappingsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListDomainMappingsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDomainMappingsTotalTimeout set to "
                + this.clientProperties.getListDomainMappingsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listDomainMappingsSettings()
        .setRetrySettings(listDomainMappingsRetrySettingBuilder.build());
    RetrySettings.Builder getDomainMappingRetrySettingBuilder =
        clientSettingsBuilder.getDomainMappingSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetDomainMappingInitialRpcTimeout() != null) {
      getDomainMappingRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetDomainMappingInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDomainMappingInitialRpcTimeout set to "
                + this.clientProperties.getGetDomainMappingInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDomainMappingRpcTimeoutMultiplier() != null) {
      getDomainMappingRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetDomainMappingRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDomainMappingRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetDomainMappingRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetDomainMappingMaxRpcTimeout() != null) {
      getDomainMappingRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetDomainMappingMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDomainMappingMaxRpcTimeout set to "
                + this.clientProperties.getGetDomainMappingMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDomainMappingTotalTimeout() != null) {
      getDomainMappingRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetDomainMappingTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDomainMappingTotalTimeout set to "
                + this.clientProperties.getGetDomainMappingTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getDomainMappingSettings()
        .setRetrySettings(getDomainMappingRetrySettingBuilder.build());
    RetrySettings.Builder createDomainMappingRetrySettingBuilder =
        clientSettingsBuilder.createDomainMappingSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateDomainMappingInitialRpcTimeout() != null) {
      createDomainMappingRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateDomainMappingInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDomainMappingInitialRpcTimeout set to "
                + this.clientProperties.getCreateDomainMappingInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateDomainMappingRpcTimeoutMultiplier() != null) {
      createDomainMappingRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateDomainMappingRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDomainMappingRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateDomainMappingRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateDomainMappingMaxRpcTimeout() != null) {
      createDomainMappingRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateDomainMappingMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDomainMappingMaxRpcTimeout set to "
                + this.clientProperties.getCreateDomainMappingMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateDomainMappingTotalTimeout() != null) {
      createDomainMappingRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateDomainMappingTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDomainMappingTotalTimeout set to "
                + this.clientProperties.getCreateDomainMappingTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createDomainMappingSettings()
        .setRetrySettings(createDomainMappingRetrySettingBuilder.build());
    RetrySettings.Builder updateDomainMappingRetrySettingBuilder =
        clientSettingsBuilder.updateDomainMappingSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateDomainMappingInitialRpcTimeout() != null) {
      updateDomainMappingRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateDomainMappingInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDomainMappingInitialRpcTimeout set to "
                + this.clientProperties.getUpdateDomainMappingInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateDomainMappingRpcTimeoutMultiplier() != null) {
      updateDomainMappingRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateDomainMappingRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDomainMappingRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateDomainMappingRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateDomainMappingMaxRpcTimeout() != null) {
      updateDomainMappingRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateDomainMappingMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDomainMappingMaxRpcTimeout set to "
                + this.clientProperties.getUpdateDomainMappingMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateDomainMappingTotalTimeout() != null) {
      updateDomainMappingRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateDomainMappingTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDomainMappingTotalTimeout set to "
                + this.clientProperties.getUpdateDomainMappingTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateDomainMappingSettings()
        .setRetrySettings(updateDomainMappingRetrySettingBuilder.build());
    RetrySettings.Builder deleteDomainMappingRetrySettingBuilder =
        clientSettingsBuilder.deleteDomainMappingSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteDomainMappingInitialRpcTimeout() != null) {
      deleteDomainMappingRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteDomainMappingInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDomainMappingInitialRpcTimeout set to "
                + this.clientProperties.getDeleteDomainMappingInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteDomainMappingRpcTimeoutMultiplier() != null) {
      deleteDomainMappingRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteDomainMappingRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDomainMappingRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteDomainMappingRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteDomainMappingMaxRpcTimeout() != null) {
      deleteDomainMappingRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteDomainMappingMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDomainMappingMaxRpcTimeout set to "
                + this.clientProperties.getDeleteDomainMappingMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteDomainMappingTotalTimeout() != null) {
      deleteDomainMappingRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteDomainMappingTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDomainMappingTotalTimeout set to "
                + this.clientProperties.getDeleteDomainMappingTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteDomainMappingSettings()
        .setRetrySettings(deleteDomainMappingRetrySettingBuilder.build());
    return DomainMappingsClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-domain-mappings";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
