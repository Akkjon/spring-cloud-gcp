/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.appengine.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.appengine.v1.ApplicationsClient;
import com.google.appengine.v1.ApplicationsSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ApplicationsClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ApplicationsClient.class)
@ConditionalOnProperty(
    value = "com.google.appengine.v1.spring.auto.applications.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({ApplicationsSpringProperties.class, GlobalProperties.class})
public class ApplicationsSpringAutoConfiguration {
  private final ApplicationsSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(ApplicationsSpringAutoConfiguration.class);

  protected ApplicationsSpringAutoConfiguration(
      ApplicationsSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider applicationsCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Applications-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultApplicationsTransportChannelProvider() {
    return ApplicationsSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ApplicationsClient bean configured to use the default credentials provider (obtained
   * with applicationsCredentials()) and its default transport channel provider
   * (defaultApplicationsTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in ApplicationsSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public ApplicationsClient applicationsClient(
      @Qualifier("applicationsCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultApplicationsTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ApplicationsSettings.Builder clientSettingsBuilder =
        ApplicationsSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ApplicationsSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          ApplicationsSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder getApplicationRetrySettingBuilder =
        clientSettingsBuilder.getApplicationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetApplicationInitialRpcTimeout() != null) {
      getApplicationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetApplicationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetApplicationInitialRpcTimeout set to "
                + this.clientProperties.getGetApplicationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetApplicationRpcTimeoutMultiplier() != null) {
      getApplicationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetApplicationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetApplicationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetApplicationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetApplicationMaxRpcTimeout() != null) {
      getApplicationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetApplicationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetApplicationMaxRpcTimeout set to "
                + this.clientProperties.getGetApplicationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetApplicationTotalTimeout() != null) {
      getApplicationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetApplicationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetApplicationTotalTimeout set to "
                + this.clientProperties.getGetApplicationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getApplicationSettings()
        .setRetrySettings(getApplicationRetrySettingBuilder.build());
    RetrySettings.Builder createApplicationRetrySettingBuilder =
        clientSettingsBuilder.createApplicationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateApplicationInitialRpcTimeout() != null) {
      createApplicationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateApplicationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateApplicationInitialRpcTimeout set to "
                + this.clientProperties.getCreateApplicationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateApplicationRpcTimeoutMultiplier() != null) {
      createApplicationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateApplicationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateApplicationRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateApplicationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateApplicationMaxRpcTimeout() != null) {
      createApplicationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateApplicationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateApplicationMaxRpcTimeout set to "
                + this.clientProperties.getCreateApplicationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateApplicationTotalTimeout() != null) {
      createApplicationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateApplicationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateApplicationTotalTimeout set to "
                + this.clientProperties.getCreateApplicationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createApplicationSettings()
        .setRetrySettings(createApplicationRetrySettingBuilder.build());
    RetrySettings.Builder updateApplicationRetrySettingBuilder =
        clientSettingsBuilder.updateApplicationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateApplicationInitialRpcTimeout() != null) {
      updateApplicationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateApplicationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateApplicationInitialRpcTimeout set to "
                + this.clientProperties.getUpdateApplicationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateApplicationRpcTimeoutMultiplier() != null) {
      updateApplicationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateApplicationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateApplicationRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateApplicationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateApplicationMaxRpcTimeout() != null) {
      updateApplicationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateApplicationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateApplicationMaxRpcTimeout set to "
                + this.clientProperties.getUpdateApplicationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateApplicationTotalTimeout() != null) {
      updateApplicationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateApplicationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateApplicationTotalTimeout set to "
                + this.clientProperties.getUpdateApplicationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateApplicationSettings()
        .setRetrySettings(updateApplicationRetrySettingBuilder.build());
    RetrySettings.Builder repairApplicationRetrySettingBuilder =
        clientSettingsBuilder.repairApplicationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRepairApplicationInitialRpcTimeout() != null) {
      repairApplicationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRepairApplicationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RepairApplicationInitialRpcTimeout set to "
                + this.clientProperties.getRepairApplicationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRepairApplicationRpcTimeoutMultiplier() != null) {
      repairApplicationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRepairApplicationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RepairApplicationRpcTimeoutMultiplier set to "
                + this.clientProperties.getRepairApplicationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRepairApplicationMaxRpcTimeout() != null) {
      repairApplicationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRepairApplicationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RepairApplicationMaxRpcTimeout set to "
                + this.clientProperties.getRepairApplicationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRepairApplicationTotalTimeout() != null) {
      repairApplicationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRepairApplicationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RepairApplicationTotalTimeout set to "
                + this.clientProperties.getRepairApplicationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .repairApplicationSettings()
        .setRetrySettings(repairApplicationRetrySettingBuilder.build());
    return ApplicationsClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-applications";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
