/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.appengine.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.appengine.v1.VersionsClient;
import com.google.appengine.v1.VersionsSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link VersionsClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(VersionsClient.class)
@ConditionalOnProperty(
    value = "com.google.appengine.v1.spring.auto.versions.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({VersionsSpringProperties.class, GlobalProperties.class})
public class VersionsSpringAutoConfiguration {
  private final VersionsSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(VersionsSpringAutoConfiguration.class);

  protected VersionsSpringAutoConfiguration(
      VersionsSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider versionsCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Versions-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultVersionsTransportChannelProvider() {
    return VersionsSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a VersionsClient bean configured to use the default credentials provider (obtained
   * with versionsCredentials()) and its default transport channel provider
   * (defaultVersionsTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in VersionsSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public VersionsClient versionsClient(
      @Qualifier("versionsCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultVersionsTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    VersionsSettings.Builder clientSettingsBuilder =
        VersionsSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          VersionsSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          VersionsSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listVersionsRetrySettingBuilder =
        clientSettingsBuilder.listVersionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListVersionsInitialRpcTimeout() != null) {
      listVersionsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListVersionsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListVersionsInitialRpcTimeout set to "
                + this.clientProperties.getListVersionsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListVersionsRpcTimeoutMultiplier() != null) {
      listVersionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListVersionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListVersionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListVersionsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListVersionsMaxRpcTimeout() != null) {
      listVersionsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListVersionsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListVersionsMaxRpcTimeout set to "
                + this.clientProperties.getListVersionsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListVersionsTotalTimeout() != null) {
      listVersionsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListVersionsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListVersionsTotalTimeout set to "
                + this.clientProperties.getListVersionsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listVersionsSettings()
        .setRetrySettings(listVersionsRetrySettingBuilder.build());
    RetrySettings.Builder getVersionRetrySettingBuilder =
        clientSettingsBuilder.getVersionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetVersionInitialRpcTimeout() != null) {
      getVersionRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetVersionInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetVersionInitialRpcTimeout set to "
                + this.clientProperties.getGetVersionInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetVersionRpcTimeoutMultiplier() != null) {
      getVersionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetVersionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetVersionRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetVersionRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetVersionMaxRpcTimeout() != null) {
      getVersionRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetVersionMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetVersionMaxRpcTimeout set to " + this.clientProperties.getGetVersionMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetVersionTotalTimeout() != null) {
      getVersionRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetVersionTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetVersionTotalTimeout set to " + this.clientProperties.getGetVersionTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getVersionSettings()
        .setRetrySettings(getVersionRetrySettingBuilder.build());
    RetrySettings.Builder createVersionRetrySettingBuilder =
        clientSettingsBuilder.createVersionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateVersionInitialRpcTimeout() != null) {
      createVersionRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateVersionInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateVersionInitialRpcTimeout set to "
                + this.clientProperties.getCreateVersionInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateVersionRpcTimeoutMultiplier() != null) {
      createVersionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateVersionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateVersionRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateVersionRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateVersionMaxRpcTimeout() != null) {
      createVersionRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateVersionMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateVersionMaxRpcTimeout set to "
                + this.clientProperties.getCreateVersionMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateVersionTotalTimeout() != null) {
      createVersionRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateVersionTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateVersionTotalTimeout set to "
                + this.clientProperties.getCreateVersionTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createVersionSettings()
        .setRetrySettings(createVersionRetrySettingBuilder.build());
    RetrySettings.Builder updateVersionRetrySettingBuilder =
        clientSettingsBuilder.updateVersionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateVersionInitialRpcTimeout() != null) {
      updateVersionRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateVersionInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateVersionInitialRpcTimeout set to "
                + this.clientProperties.getUpdateVersionInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateVersionRpcTimeoutMultiplier() != null) {
      updateVersionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateVersionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateVersionRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateVersionRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateVersionMaxRpcTimeout() != null) {
      updateVersionRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateVersionMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateVersionMaxRpcTimeout set to "
                + this.clientProperties.getUpdateVersionMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateVersionTotalTimeout() != null) {
      updateVersionRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateVersionTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateVersionTotalTimeout set to "
                + this.clientProperties.getUpdateVersionTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateVersionSettings()
        .setRetrySettings(updateVersionRetrySettingBuilder.build());
    RetrySettings.Builder deleteVersionRetrySettingBuilder =
        clientSettingsBuilder.deleteVersionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteVersionInitialRpcTimeout() != null) {
      deleteVersionRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteVersionInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteVersionInitialRpcTimeout set to "
                + this.clientProperties.getDeleteVersionInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteVersionRpcTimeoutMultiplier() != null) {
      deleteVersionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteVersionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteVersionRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteVersionRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteVersionMaxRpcTimeout() != null) {
      deleteVersionRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteVersionMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteVersionMaxRpcTimeout set to "
                + this.clientProperties.getDeleteVersionMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteVersionTotalTimeout() != null) {
      deleteVersionRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteVersionTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteVersionTotalTimeout set to "
                + this.clientProperties.getDeleteVersionTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteVersionSettings()
        .setRetrySettings(deleteVersionRetrySettingBuilder.build());
    return VersionsClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-versions";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
