/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.appengine.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.appengine.v1.FirewallClient;
import com.google.appengine.v1.FirewallSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link FirewallClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(FirewallClient.class)
@ConditionalOnProperty(
    value = "com.google.appengine.v1.spring.auto.firewall.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({FirewallSpringProperties.class, GlobalProperties.class})
public class FirewallSpringAutoConfiguration {
  private final FirewallSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(FirewallSpringAutoConfiguration.class);

  protected FirewallSpringAutoConfiguration(
      FirewallSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider firewallCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Firewall-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultFirewallTransportChannelProvider() {
    return FirewallSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a FirewallClient bean configured to use the default credentials provider (obtained
   * with firewallCredentials()) and its default transport channel provider
   * (defaultFirewallTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in FirewallSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public FirewallClient firewallClient(
      @Qualifier("firewallCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultFirewallTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    FirewallSettings.Builder clientSettingsBuilder =
        FirewallSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          FirewallSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          FirewallSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listIngressRulesRetrySettingBuilder =
        clientSettingsBuilder.listIngressRulesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListIngressRulesInitialRpcTimeout() != null) {
      listIngressRulesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListIngressRulesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListIngressRulesInitialRpcTimeout set to "
                + this.clientProperties.getListIngressRulesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListIngressRulesRpcTimeoutMultiplier() != null) {
      listIngressRulesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListIngressRulesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListIngressRulesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListIngressRulesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListIngressRulesMaxRpcTimeout() != null) {
      listIngressRulesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListIngressRulesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListIngressRulesMaxRpcTimeout set to "
                + this.clientProperties.getListIngressRulesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListIngressRulesTotalTimeout() != null) {
      listIngressRulesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListIngressRulesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListIngressRulesTotalTimeout set to "
                + this.clientProperties.getListIngressRulesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listIngressRulesSettings()
        .setRetrySettings(listIngressRulesRetrySettingBuilder.build());
    RetrySettings.Builder batchUpdateIngressRulesRetrySettingBuilder =
        clientSettingsBuilder.batchUpdateIngressRulesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getBatchUpdateIngressRulesInitialRpcTimeout() != null) {
      batchUpdateIngressRulesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getBatchUpdateIngressRulesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchUpdateIngressRulesInitialRpcTimeout set to "
                + this.clientProperties.getBatchUpdateIngressRulesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getBatchUpdateIngressRulesRpcTimeoutMultiplier() != null) {
      batchUpdateIngressRulesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getBatchUpdateIngressRulesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchUpdateIngressRulesRpcTimeoutMultiplier set to "
                + this.clientProperties.getBatchUpdateIngressRulesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getBatchUpdateIngressRulesMaxRpcTimeout() != null) {
      batchUpdateIngressRulesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getBatchUpdateIngressRulesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchUpdateIngressRulesMaxRpcTimeout set to "
                + this.clientProperties.getBatchUpdateIngressRulesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getBatchUpdateIngressRulesTotalTimeout() != null) {
      batchUpdateIngressRulesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getBatchUpdateIngressRulesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchUpdateIngressRulesTotalTimeout set to "
                + this.clientProperties.getBatchUpdateIngressRulesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .batchUpdateIngressRulesSettings()
        .setRetrySettings(batchUpdateIngressRulesRetrySettingBuilder.build());
    RetrySettings.Builder createIngressRuleRetrySettingBuilder =
        clientSettingsBuilder.createIngressRuleSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateIngressRuleInitialRpcTimeout() != null) {
      createIngressRuleRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateIngressRuleInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateIngressRuleInitialRpcTimeout set to "
                + this.clientProperties.getCreateIngressRuleInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateIngressRuleRpcTimeoutMultiplier() != null) {
      createIngressRuleRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateIngressRuleRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateIngressRuleRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateIngressRuleRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateIngressRuleMaxRpcTimeout() != null) {
      createIngressRuleRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateIngressRuleMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateIngressRuleMaxRpcTimeout set to "
                + this.clientProperties.getCreateIngressRuleMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateIngressRuleTotalTimeout() != null) {
      createIngressRuleRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateIngressRuleTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateIngressRuleTotalTimeout set to "
                + this.clientProperties.getCreateIngressRuleTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createIngressRuleSettings()
        .setRetrySettings(createIngressRuleRetrySettingBuilder.build());
    RetrySettings.Builder getIngressRuleRetrySettingBuilder =
        clientSettingsBuilder.getIngressRuleSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetIngressRuleInitialRpcTimeout() != null) {
      getIngressRuleRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetIngressRuleInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIngressRuleInitialRpcTimeout set to "
                + this.clientProperties.getGetIngressRuleInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetIngressRuleRpcTimeoutMultiplier() != null) {
      getIngressRuleRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetIngressRuleRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIngressRuleRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetIngressRuleRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetIngressRuleMaxRpcTimeout() != null) {
      getIngressRuleRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetIngressRuleMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIngressRuleMaxRpcTimeout set to "
                + this.clientProperties.getGetIngressRuleMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetIngressRuleTotalTimeout() != null) {
      getIngressRuleRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetIngressRuleTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIngressRuleTotalTimeout set to "
                + this.clientProperties.getGetIngressRuleTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getIngressRuleSettings()
        .setRetrySettings(getIngressRuleRetrySettingBuilder.build());
    RetrySettings.Builder updateIngressRuleRetrySettingBuilder =
        clientSettingsBuilder.updateIngressRuleSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateIngressRuleInitialRpcTimeout() != null) {
      updateIngressRuleRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateIngressRuleInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateIngressRuleInitialRpcTimeout set to "
                + this.clientProperties.getUpdateIngressRuleInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateIngressRuleRpcTimeoutMultiplier() != null) {
      updateIngressRuleRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateIngressRuleRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateIngressRuleRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateIngressRuleRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateIngressRuleMaxRpcTimeout() != null) {
      updateIngressRuleRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateIngressRuleMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateIngressRuleMaxRpcTimeout set to "
                + this.clientProperties.getUpdateIngressRuleMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateIngressRuleTotalTimeout() != null) {
      updateIngressRuleRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateIngressRuleTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateIngressRuleTotalTimeout set to "
                + this.clientProperties.getUpdateIngressRuleTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateIngressRuleSettings()
        .setRetrySettings(updateIngressRuleRetrySettingBuilder.build());
    RetrySettings.Builder deleteIngressRuleRetrySettingBuilder =
        clientSettingsBuilder.deleteIngressRuleSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteIngressRuleInitialRpcTimeout() != null) {
      deleteIngressRuleRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteIngressRuleInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteIngressRuleInitialRpcTimeout set to "
                + this.clientProperties.getDeleteIngressRuleInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteIngressRuleRpcTimeoutMultiplier() != null) {
      deleteIngressRuleRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteIngressRuleRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteIngressRuleRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteIngressRuleRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteIngressRuleMaxRpcTimeout() != null) {
      deleteIngressRuleRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteIngressRuleMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteIngressRuleMaxRpcTimeout set to "
                + this.clientProperties.getDeleteIngressRuleMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteIngressRuleTotalTimeout() != null) {
      deleteIngressRuleRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteIngressRuleTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteIngressRuleTotalTimeout set to "
                + this.clientProperties.getDeleteIngressRuleTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteIngressRuleSettings()
        .setRetrySettings(deleteIngressRuleRetrySettingBuilder.build());
    return FirewallClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-firewall";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
