/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.appengine.v1.spring;

import com.google.api.core.BetaApi;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.CredentialsSupplier;
import javax.annotation.Generated;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.NestedConfigurationProperty;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/** Provides default property values for Applications client bean */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@ConfigurationProperties("com.google.appengine.v1.spring.auto.applications")
public class ApplicationsSpringProperties implements CredentialsSupplier {
  @NestedConfigurationProperty
  private final Credentials credentials =
      new Credentials(
          "https://www.googleapis.com/auth/appengine.admin",
          "https://www.googleapis.com/auth/cloud-platform",
          "https://www.googleapis.com/auth/cloud-platform.read-only");

  private String quotaProjectId;
  private Integer executorThreadCount;
  private boolean useRest = false;
  private Duration getApplicationInitialRpcTimeout;
  private Double getApplicationRpcTimeoutMultiplier;
  private Duration getApplicationMaxRpcTimeout;
  private Duration getApplicationTotalTimeout;
  private Duration createApplicationInitialRpcTimeout;
  private Double createApplicationRpcTimeoutMultiplier;
  private Duration createApplicationMaxRpcTimeout;
  private Duration createApplicationTotalTimeout;
  private Duration updateApplicationInitialRpcTimeout;
  private Double updateApplicationRpcTimeoutMultiplier;
  private Duration updateApplicationMaxRpcTimeout;
  private Duration updateApplicationTotalTimeout;
  private Duration repairApplicationInitialRpcTimeout;
  private Double repairApplicationRpcTimeoutMultiplier;
  private Duration repairApplicationMaxRpcTimeout;
  private Duration repairApplicationTotalTimeout;

  @Override
  public Credentials getCredentials() {
    return this.credentials;
  }

  public String getQuotaProjectId() {
    return this.quotaProjectId;
  }

  public void setQuotaProjectId(String quotaProjectId) {
    this.quotaProjectId = quotaProjectId;
  }

  public boolean getUseRest() {
    return this.useRest;
  }

  public void setUseRest(boolean useRest) {
    this.useRest = useRest;
  }

  public Integer getExecutorThreadCount() {
    return this.executorThreadCount;
  }

  public void setExecutorThreadCount(Integer executorThreadCount) {
    this.executorThreadCount = executorThreadCount;
  }

  public Duration getGetApplicationInitialRpcTimeout() {
    return this.getApplicationInitialRpcTimeout;
  }

  public void setGetApplicationInitialRpcTimeout(
      java.time.Duration getApplicationInitialRpcTimeout) {
    this.getApplicationInitialRpcTimeout =
        Duration.parse(getApplicationInitialRpcTimeout.toString());
  }

  public Double getGetApplicationRpcTimeoutMultiplier() {
    return this.getApplicationRpcTimeoutMultiplier;
  }

  public void setGetApplicationRpcTimeoutMultiplier(Double getApplicationRpcTimeoutMultiplier) {
    this.getApplicationRpcTimeoutMultiplier = getApplicationRpcTimeoutMultiplier;
  }

  public Duration getGetApplicationMaxRpcTimeout() {
    return this.getApplicationMaxRpcTimeout;
  }

  public void setGetApplicationMaxRpcTimeout(java.time.Duration getApplicationMaxRpcTimeout) {
    this.getApplicationMaxRpcTimeout = Duration.parse(getApplicationMaxRpcTimeout.toString());
  }

  public Duration getGetApplicationTotalTimeout() {
    return this.getApplicationTotalTimeout;
  }

  public void setGetApplicationTotalTimeout(java.time.Duration getApplicationTotalTimeout) {
    this.getApplicationTotalTimeout = Duration.parse(getApplicationTotalTimeout.toString());
  }

  public Duration getCreateApplicationInitialRpcTimeout() {
    return this.createApplicationInitialRpcTimeout;
  }

  public void setCreateApplicationInitialRpcTimeout(
      java.time.Duration createApplicationInitialRpcTimeout) {
    this.createApplicationInitialRpcTimeout =
        Duration.parse(createApplicationInitialRpcTimeout.toString());
  }

  public Double getCreateApplicationRpcTimeoutMultiplier() {
    return this.createApplicationRpcTimeoutMultiplier;
  }

  public void setCreateApplicationRpcTimeoutMultiplier(
      Double createApplicationRpcTimeoutMultiplier) {
    this.createApplicationRpcTimeoutMultiplier = createApplicationRpcTimeoutMultiplier;
  }

  public Duration getCreateApplicationMaxRpcTimeout() {
    return this.createApplicationMaxRpcTimeout;
  }

  public void setCreateApplicationMaxRpcTimeout(java.time.Duration createApplicationMaxRpcTimeout) {
    this.createApplicationMaxRpcTimeout = Duration.parse(createApplicationMaxRpcTimeout.toString());
  }

  public Duration getCreateApplicationTotalTimeout() {
    return this.createApplicationTotalTimeout;
  }

  public void setCreateApplicationTotalTimeout(java.time.Duration createApplicationTotalTimeout) {
    this.createApplicationTotalTimeout = Duration.parse(createApplicationTotalTimeout.toString());
  }

  public Duration getUpdateApplicationInitialRpcTimeout() {
    return this.updateApplicationInitialRpcTimeout;
  }

  public void setUpdateApplicationInitialRpcTimeout(
      java.time.Duration updateApplicationInitialRpcTimeout) {
    this.updateApplicationInitialRpcTimeout =
        Duration.parse(updateApplicationInitialRpcTimeout.toString());
  }

  public Double getUpdateApplicationRpcTimeoutMultiplier() {
    return this.updateApplicationRpcTimeoutMultiplier;
  }

  public void setUpdateApplicationRpcTimeoutMultiplier(
      Double updateApplicationRpcTimeoutMultiplier) {
    this.updateApplicationRpcTimeoutMultiplier = updateApplicationRpcTimeoutMultiplier;
  }

  public Duration getUpdateApplicationMaxRpcTimeout() {
    return this.updateApplicationMaxRpcTimeout;
  }

  public void setUpdateApplicationMaxRpcTimeout(java.time.Duration updateApplicationMaxRpcTimeout) {
    this.updateApplicationMaxRpcTimeout = Duration.parse(updateApplicationMaxRpcTimeout.toString());
  }

  public Duration getUpdateApplicationTotalTimeout() {
    return this.updateApplicationTotalTimeout;
  }

  public void setUpdateApplicationTotalTimeout(java.time.Duration updateApplicationTotalTimeout) {
    this.updateApplicationTotalTimeout = Duration.parse(updateApplicationTotalTimeout.toString());
  }

  public Duration getRepairApplicationInitialRpcTimeout() {
    return this.repairApplicationInitialRpcTimeout;
  }

  public void setRepairApplicationInitialRpcTimeout(
      java.time.Duration repairApplicationInitialRpcTimeout) {
    this.repairApplicationInitialRpcTimeout =
        Duration.parse(repairApplicationInitialRpcTimeout.toString());
  }

  public Double getRepairApplicationRpcTimeoutMultiplier() {
    return this.repairApplicationRpcTimeoutMultiplier;
  }

  public void setRepairApplicationRpcTimeoutMultiplier(
      Double repairApplicationRpcTimeoutMultiplier) {
    this.repairApplicationRpcTimeoutMultiplier = repairApplicationRpcTimeoutMultiplier;
  }

  public Duration getRepairApplicationMaxRpcTimeout() {
    return this.repairApplicationMaxRpcTimeout;
  }

  public void setRepairApplicationMaxRpcTimeout(java.time.Duration repairApplicationMaxRpcTimeout) {
    this.repairApplicationMaxRpcTimeout = Duration.parse(repairApplicationMaxRpcTimeout.toString());
  }

  public Duration getRepairApplicationTotalTimeout() {
    return this.repairApplicationTotalTimeout;
  }

  public void setRepairApplicationTotalTimeout(java.time.Duration repairApplicationTotalTimeout) {
    this.repairApplicationTotalTimeout = Duration.parse(repairApplicationTotalTimeout.toString());
  }
}
