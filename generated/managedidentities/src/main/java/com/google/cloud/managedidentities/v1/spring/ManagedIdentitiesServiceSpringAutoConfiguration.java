/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.managedidentities.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.managedidentities.v1.ManagedIdentitiesServiceClient;
import com.google.cloud.managedidentities.v1.ManagedIdentitiesServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ManagedIdentitiesServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ManagedIdentitiesServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.managedidentities.v1.spring.auto.managed-identities-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({
  ManagedIdentitiesServiceSpringProperties.class,
  GlobalProperties.class
})
public class ManagedIdentitiesServiceSpringAutoConfiguration {
  private final ManagedIdentitiesServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(ManagedIdentitiesServiceSpringAutoConfiguration.class);

  protected ManagedIdentitiesServiceSpringAutoConfiguration(
      ManagedIdentitiesServiceSpringProperties clientProperties,
      GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider managedIdentitiesServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from ManagedIdentitiesService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultManagedIdentitiesServiceTransportChannelProvider() {
    return ManagedIdentitiesServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ManagedIdentitiesServiceClient bean configured to use the default credentials
   * provider (obtained with managedIdentitiesServiceCredentials()) and its default transport
   * channel provider (defaultManagedIdentitiesServiceTransportChannelProvider()). It also
   * configures the quota project ID if provided. It will configure an executor provider in case
   * there is more than one thread configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in ManagedIdentitiesServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public ManagedIdentitiesServiceClient managedIdentitiesServiceClient(
      @Qualifier("managedIdentitiesServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultManagedIdentitiesServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ManagedIdentitiesServiceSettings.Builder clientSettingsBuilder =
        ManagedIdentitiesServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ManagedIdentitiesServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    RetrySettings.Builder createMicrosoftAdDomainRetrySettingBuilder =
        clientSettingsBuilder.createMicrosoftAdDomainSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateMicrosoftAdDomainInitialRpcTimeout() != null) {
      createMicrosoftAdDomainRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateMicrosoftAdDomainInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateMicrosoftAdDomainInitialRpcTimeout set to "
                + this.clientProperties.getCreateMicrosoftAdDomainInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateMicrosoftAdDomainRpcTimeoutMultiplier() != null) {
      createMicrosoftAdDomainRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateMicrosoftAdDomainRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateMicrosoftAdDomainRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateMicrosoftAdDomainRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateMicrosoftAdDomainMaxRpcTimeout() != null) {
      createMicrosoftAdDomainRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateMicrosoftAdDomainMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateMicrosoftAdDomainMaxRpcTimeout set to "
                + this.clientProperties.getCreateMicrosoftAdDomainMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateMicrosoftAdDomainTotalTimeout() != null) {
      createMicrosoftAdDomainRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateMicrosoftAdDomainTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateMicrosoftAdDomainTotalTimeout set to "
                + this.clientProperties.getCreateMicrosoftAdDomainTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createMicrosoftAdDomainSettings()
        .setRetrySettings(createMicrosoftAdDomainRetrySettingBuilder.build());
    RetrySettings.Builder resetAdminPasswordRetrySettingBuilder =
        clientSettingsBuilder.resetAdminPasswordSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getResetAdminPasswordInitialRpcTimeout() != null) {
      resetAdminPasswordRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getResetAdminPasswordInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResetAdminPasswordInitialRpcTimeout set to "
                + this.clientProperties.getResetAdminPasswordInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getResetAdminPasswordRpcTimeoutMultiplier() != null) {
      resetAdminPasswordRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getResetAdminPasswordRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResetAdminPasswordRpcTimeoutMultiplier set to "
                + this.clientProperties.getResetAdminPasswordRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getResetAdminPasswordMaxRpcTimeout() != null) {
      resetAdminPasswordRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getResetAdminPasswordMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResetAdminPasswordMaxRpcTimeout set to "
                + this.clientProperties.getResetAdminPasswordMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getResetAdminPasswordTotalTimeout() != null) {
      resetAdminPasswordRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getResetAdminPasswordTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResetAdminPasswordTotalTimeout set to "
                + this.clientProperties.getResetAdminPasswordTotalTimeout());
      }
    }
    clientSettingsBuilder
        .resetAdminPasswordSettings()
        .setRetrySettings(resetAdminPasswordRetrySettingBuilder.build());
    RetrySettings.Builder listDomainsRetrySettingBuilder =
        clientSettingsBuilder.listDomainsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListDomainsInitialRpcTimeout() != null) {
      listDomainsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListDomainsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDomainsInitialRpcTimeout set to "
                + this.clientProperties.getListDomainsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListDomainsRpcTimeoutMultiplier() != null) {
      listDomainsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListDomainsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDomainsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListDomainsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListDomainsMaxRpcTimeout() != null) {
      listDomainsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListDomainsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDomainsMaxRpcTimeout set to "
                + this.clientProperties.getListDomainsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListDomainsTotalTimeout() != null) {
      listDomainsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListDomainsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDomainsTotalTimeout set to " + this.clientProperties.getListDomainsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listDomainsSettings()
        .setRetrySettings(listDomainsRetrySettingBuilder.build());
    RetrySettings.Builder getDomainRetrySettingBuilder =
        clientSettingsBuilder.getDomainSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetDomainInitialRpcTimeout() != null) {
      getDomainRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetDomainInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDomainInitialRpcTimeout set to "
                + this.clientProperties.getGetDomainInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDomainRpcTimeoutMultiplier() != null) {
      getDomainRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetDomainRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDomainRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetDomainRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetDomainMaxRpcTimeout() != null) {
      getDomainRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetDomainMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDomainMaxRpcTimeout set to " + this.clientProperties.getGetDomainMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDomainTotalTimeout() != null) {
      getDomainRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetDomainTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDomainTotalTimeout set to " + this.clientProperties.getGetDomainTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getDomainSettings()
        .setRetrySettings(getDomainRetrySettingBuilder.build());
    RetrySettings.Builder updateDomainRetrySettingBuilder =
        clientSettingsBuilder.updateDomainSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateDomainInitialRpcTimeout() != null) {
      updateDomainRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateDomainInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDomainInitialRpcTimeout set to "
                + this.clientProperties.getUpdateDomainInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateDomainRpcTimeoutMultiplier() != null) {
      updateDomainRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateDomainRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDomainRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateDomainRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateDomainMaxRpcTimeout() != null) {
      updateDomainRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateDomainMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDomainMaxRpcTimeout set to "
                + this.clientProperties.getUpdateDomainMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateDomainTotalTimeout() != null) {
      updateDomainRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateDomainTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDomainTotalTimeout set to "
                + this.clientProperties.getUpdateDomainTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateDomainSettings()
        .setRetrySettings(updateDomainRetrySettingBuilder.build());
    RetrySettings.Builder deleteDomainRetrySettingBuilder =
        clientSettingsBuilder.deleteDomainSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteDomainInitialRpcTimeout() != null) {
      deleteDomainRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteDomainInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDomainInitialRpcTimeout set to "
                + this.clientProperties.getDeleteDomainInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteDomainRpcTimeoutMultiplier() != null) {
      deleteDomainRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteDomainRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDomainRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteDomainRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteDomainMaxRpcTimeout() != null) {
      deleteDomainRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteDomainMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDomainMaxRpcTimeout set to "
                + this.clientProperties.getDeleteDomainMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteDomainTotalTimeout() != null) {
      deleteDomainRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteDomainTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDomainTotalTimeout set to "
                + this.clientProperties.getDeleteDomainTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteDomainSettings()
        .setRetrySettings(deleteDomainRetrySettingBuilder.build());
    RetrySettings.Builder attachTrustRetrySettingBuilder =
        clientSettingsBuilder.attachTrustSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getAttachTrustInitialRpcTimeout() != null) {
      attachTrustRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getAttachTrustInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AttachTrustInitialRpcTimeout set to "
                + this.clientProperties.getAttachTrustInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getAttachTrustRpcTimeoutMultiplier() != null) {
      attachTrustRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getAttachTrustRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AttachTrustRpcTimeoutMultiplier set to "
                + this.clientProperties.getAttachTrustRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getAttachTrustMaxRpcTimeout() != null) {
      attachTrustRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getAttachTrustMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AttachTrustMaxRpcTimeout set to "
                + this.clientProperties.getAttachTrustMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getAttachTrustTotalTimeout() != null) {
      attachTrustRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getAttachTrustTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AttachTrustTotalTimeout set to " + this.clientProperties.getAttachTrustTotalTimeout());
      }
    }
    clientSettingsBuilder
        .attachTrustSettings()
        .setRetrySettings(attachTrustRetrySettingBuilder.build());
    RetrySettings.Builder reconfigureTrustRetrySettingBuilder =
        clientSettingsBuilder.reconfigureTrustSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getReconfigureTrustInitialRpcTimeout() != null) {
      reconfigureTrustRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getReconfigureTrustInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReconfigureTrustInitialRpcTimeout set to "
                + this.clientProperties.getReconfigureTrustInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getReconfigureTrustRpcTimeoutMultiplier() != null) {
      reconfigureTrustRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getReconfigureTrustRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReconfigureTrustRpcTimeoutMultiplier set to "
                + this.clientProperties.getReconfigureTrustRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getReconfigureTrustMaxRpcTimeout() != null) {
      reconfigureTrustRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getReconfigureTrustMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReconfigureTrustMaxRpcTimeout set to "
                + this.clientProperties.getReconfigureTrustMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getReconfigureTrustTotalTimeout() != null) {
      reconfigureTrustRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getReconfigureTrustTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReconfigureTrustTotalTimeout set to "
                + this.clientProperties.getReconfigureTrustTotalTimeout());
      }
    }
    clientSettingsBuilder
        .reconfigureTrustSettings()
        .setRetrySettings(reconfigureTrustRetrySettingBuilder.build());
    RetrySettings.Builder detachTrustRetrySettingBuilder =
        clientSettingsBuilder.detachTrustSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDetachTrustInitialRpcTimeout() != null) {
      detachTrustRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDetachTrustInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DetachTrustInitialRpcTimeout set to "
                + this.clientProperties.getDetachTrustInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDetachTrustRpcTimeoutMultiplier() != null) {
      detachTrustRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDetachTrustRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DetachTrustRpcTimeoutMultiplier set to "
                + this.clientProperties.getDetachTrustRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDetachTrustMaxRpcTimeout() != null) {
      detachTrustRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDetachTrustMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DetachTrustMaxRpcTimeout set to "
                + this.clientProperties.getDetachTrustMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDetachTrustTotalTimeout() != null) {
      detachTrustRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDetachTrustTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DetachTrustTotalTimeout set to " + this.clientProperties.getDetachTrustTotalTimeout());
      }
    }
    clientSettingsBuilder
        .detachTrustSettings()
        .setRetrySettings(detachTrustRetrySettingBuilder.build());
    RetrySettings.Builder validateTrustRetrySettingBuilder =
        clientSettingsBuilder.validateTrustSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getValidateTrustInitialRpcTimeout() != null) {
      validateTrustRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getValidateTrustInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ValidateTrustInitialRpcTimeout set to "
                + this.clientProperties.getValidateTrustInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getValidateTrustRpcTimeoutMultiplier() != null) {
      validateTrustRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getValidateTrustRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ValidateTrustRpcTimeoutMultiplier set to "
                + this.clientProperties.getValidateTrustRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getValidateTrustMaxRpcTimeout() != null) {
      validateTrustRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getValidateTrustMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ValidateTrustMaxRpcTimeout set to "
                + this.clientProperties.getValidateTrustMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getValidateTrustTotalTimeout() != null) {
      validateTrustRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getValidateTrustTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ValidateTrustTotalTimeout set to "
                + this.clientProperties.getValidateTrustTotalTimeout());
      }
    }
    clientSettingsBuilder
        .validateTrustSettings()
        .setRetrySettings(validateTrustRetrySettingBuilder.build());
    return ManagedIdentitiesServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-managed-identities-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
