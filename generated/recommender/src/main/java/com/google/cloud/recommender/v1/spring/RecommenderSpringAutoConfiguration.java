/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.recommender.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.recommender.v1.RecommenderClient;
import com.google.cloud.recommender.v1.RecommenderSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link RecommenderClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(RecommenderClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.recommender.v1.spring.auto.recommender.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({RecommenderSpringProperties.class, GlobalProperties.class})
public class RecommenderSpringAutoConfiguration {
  private final RecommenderSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(RecommenderSpringAutoConfiguration.class);

  protected RecommenderSpringAutoConfiguration(
      RecommenderSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider recommenderCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Recommender-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultRecommenderTransportChannelProvider() {
    return RecommenderSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a RecommenderClient bean configured to use the default credentials provider (obtained
   * with recommenderCredentials()) and its default transport channel provider
   * (defaultRecommenderTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in RecommenderSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public RecommenderClient recommenderClient(
      @Qualifier("recommenderCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultRecommenderTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    RecommenderSettings.Builder clientSettingsBuilder =
        RecommenderSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          RecommenderSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          RecommenderSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listInsightsRetrySettingBuilder =
        clientSettingsBuilder.listInsightsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListInsightsInitialRetryDelay() != null) {
      listInsightsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListInsightsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInsightsInitialRetryDelay set to "
                + this.clientProperties.getListInsightsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListInsightsRetryDelayMultiplier() != null) {
      listInsightsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListInsightsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInsightsRetryDelayMultiplier set to "
                + this.clientProperties.getListInsightsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListInsightsMaxRetryDelay() != null) {
      listInsightsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListInsightsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInsightsMaxRetryDelay set to "
                + this.clientProperties.getListInsightsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListInsightsInitialRpcTimeout() != null) {
      listInsightsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListInsightsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInsightsInitialRpcTimeout set to "
                + this.clientProperties.getListInsightsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListInsightsRpcTimeoutMultiplier() != null) {
      listInsightsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListInsightsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInsightsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListInsightsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListInsightsMaxRpcTimeout() != null) {
      listInsightsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListInsightsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInsightsMaxRpcTimeout set to "
                + this.clientProperties.getListInsightsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListInsightsTotalTimeout() != null) {
      listInsightsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListInsightsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInsightsTotalTimeout set to "
                + this.clientProperties.getListInsightsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listInsightsSettings()
        .setRetrySettings(listInsightsRetrySettingBuilder.build());
    RetrySettings.Builder getInsightRetrySettingBuilder =
        clientSettingsBuilder.getInsightSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetInsightInitialRetryDelay() != null) {
      getInsightRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetInsightInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInsightInitialRetryDelay set to "
                + this.clientProperties.getGetInsightInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetInsightRetryDelayMultiplier() != null) {
      getInsightRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetInsightRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInsightRetryDelayMultiplier set to "
                + this.clientProperties.getGetInsightRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetInsightMaxRetryDelay() != null) {
      getInsightRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetInsightMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInsightMaxRetryDelay set to " + this.clientProperties.getGetInsightMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetInsightInitialRpcTimeout() != null) {
      getInsightRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetInsightInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInsightInitialRpcTimeout set to "
                + this.clientProperties.getGetInsightInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetInsightRpcTimeoutMultiplier() != null) {
      getInsightRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetInsightRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInsightRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetInsightRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetInsightMaxRpcTimeout() != null) {
      getInsightRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetInsightMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInsightMaxRpcTimeout set to " + this.clientProperties.getGetInsightMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetInsightTotalTimeout() != null) {
      getInsightRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetInsightTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInsightTotalTimeout set to " + this.clientProperties.getGetInsightTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getInsightSettings()
        .setRetrySettings(getInsightRetrySettingBuilder.build());
    RetrySettings.Builder markInsightAcceptedRetrySettingBuilder =
        clientSettingsBuilder.markInsightAcceptedSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getMarkInsightAcceptedInitialRpcTimeout() != null) {
      markInsightAcceptedRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getMarkInsightAcceptedInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "MarkInsightAcceptedInitialRpcTimeout set to "
                + this.clientProperties.getMarkInsightAcceptedInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getMarkInsightAcceptedRpcTimeoutMultiplier() != null) {
      markInsightAcceptedRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getMarkInsightAcceptedRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "MarkInsightAcceptedRpcTimeoutMultiplier set to "
                + this.clientProperties.getMarkInsightAcceptedRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getMarkInsightAcceptedMaxRpcTimeout() != null) {
      markInsightAcceptedRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getMarkInsightAcceptedMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "MarkInsightAcceptedMaxRpcTimeout set to "
                + this.clientProperties.getMarkInsightAcceptedMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getMarkInsightAcceptedTotalTimeout() != null) {
      markInsightAcceptedRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getMarkInsightAcceptedTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "MarkInsightAcceptedTotalTimeout set to "
                + this.clientProperties.getMarkInsightAcceptedTotalTimeout());
      }
    }
    clientSettingsBuilder
        .markInsightAcceptedSettings()
        .setRetrySettings(markInsightAcceptedRetrySettingBuilder.build());
    RetrySettings.Builder listRecommendationsRetrySettingBuilder =
        clientSettingsBuilder.listRecommendationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListRecommendationsInitialRetryDelay() != null) {
      listRecommendationsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListRecommendationsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRecommendationsInitialRetryDelay set to "
                + this.clientProperties.getListRecommendationsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListRecommendationsRetryDelayMultiplier() != null) {
      listRecommendationsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListRecommendationsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRecommendationsRetryDelayMultiplier set to "
                + this.clientProperties.getListRecommendationsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListRecommendationsMaxRetryDelay() != null) {
      listRecommendationsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListRecommendationsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRecommendationsMaxRetryDelay set to "
                + this.clientProperties.getListRecommendationsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListRecommendationsInitialRpcTimeout() != null) {
      listRecommendationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListRecommendationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRecommendationsInitialRpcTimeout set to "
                + this.clientProperties.getListRecommendationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListRecommendationsRpcTimeoutMultiplier() != null) {
      listRecommendationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListRecommendationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRecommendationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListRecommendationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListRecommendationsMaxRpcTimeout() != null) {
      listRecommendationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListRecommendationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRecommendationsMaxRpcTimeout set to "
                + this.clientProperties.getListRecommendationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListRecommendationsTotalTimeout() != null) {
      listRecommendationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListRecommendationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRecommendationsTotalTimeout set to "
                + this.clientProperties.getListRecommendationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listRecommendationsSettings()
        .setRetrySettings(listRecommendationsRetrySettingBuilder.build());
    RetrySettings.Builder getRecommendationRetrySettingBuilder =
        clientSettingsBuilder.getRecommendationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetRecommendationInitialRetryDelay() != null) {
      getRecommendationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetRecommendationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRecommendationInitialRetryDelay set to "
                + this.clientProperties.getGetRecommendationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetRecommendationRetryDelayMultiplier() != null) {
      getRecommendationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetRecommendationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRecommendationRetryDelayMultiplier set to "
                + this.clientProperties.getGetRecommendationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetRecommendationMaxRetryDelay() != null) {
      getRecommendationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetRecommendationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRecommendationMaxRetryDelay set to "
                + this.clientProperties.getGetRecommendationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetRecommendationInitialRpcTimeout() != null) {
      getRecommendationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetRecommendationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRecommendationInitialRpcTimeout set to "
                + this.clientProperties.getGetRecommendationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetRecommendationRpcTimeoutMultiplier() != null) {
      getRecommendationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetRecommendationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRecommendationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetRecommendationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetRecommendationMaxRpcTimeout() != null) {
      getRecommendationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetRecommendationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRecommendationMaxRpcTimeout set to "
                + this.clientProperties.getGetRecommendationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetRecommendationTotalTimeout() != null) {
      getRecommendationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetRecommendationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRecommendationTotalTimeout set to "
                + this.clientProperties.getGetRecommendationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getRecommendationSettings()
        .setRetrySettings(getRecommendationRetrySettingBuilder.build());
    RetrySettings.Builder markRecommendationClaimedRetrySettingBuilder =
        clientSettingsBuilder.markRecommendationClaimedSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getMarkRecommendationClaimedInitialRpcTimeout() != null) {
      markRecommendationClaimedRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getMarkRecommendationClaimedInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "MarkRecommendationClaimedInitialRpcTimeout set to "
                + this.clientProperties.getMarkRecommendationClaimedInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getMarkRecommendationClaimedRpcTimeoutMultiplier() != null) {
      markRecommendationClaimedRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getMarkRecommendationClaimedRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "MarkRecommendationClaimedRpcTimeoutMultiplier set to "
                + this.clientProperties.getMarkRecommendationClaimedRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getMarkRecommendationClaimedMaxRpcTimeout() != null) {
      markRecommendationClaimedRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getMarkRecommendationClaimedMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "MarkRecommendationClaimedMaxRpcTimeout set to "
                + this.clientProperties.getMarkRecommendationClaimedMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getMarkRecommendationClaimedTotalTimeout() != null) {
      markRecommendationClaimedRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getMarkRecommendationClaimedTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "MarkRecommendationClaimedTotalTimeout set to "
                + this.clientProperties.getMarkRecommendationClaimedTotalTimeout());
      }
    }
    clientSettingsBuilder
        .markRecommendationClaimedSettings()
        .setRetrySettings(markRecommendationClaimedRetrySettingBuilder.build());
    RetrySettings.Builder markRecommendationSucceededRetrySettingBuilder =
        clientSettingsBuilder.markRecommendationSucceededSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getMarkRecommendationSucceededInitialRpcTimeout() != null) {
      markRecommendationSucceededRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getMarkRecommendationSucceededInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "MarkRecommendationSucceededInitialRpcTimeout set to "
                + this.clientProperties.getMarkRecommendationSucceededInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getMarkRecommendationSucceededRpcTimeoutMultiplier() != null) {
      markRecommendationSucceededRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getMarkRecommendationSucceededRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "MarkRecommendationSucceededRpcTimeoutMultiplier set to "
                + this.clientProperties.getMarkRecommendationSucceededRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getMarkRecommendationSucceededMaxRpcTimeout() != null) {
      markRecommendationSucceededRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getMarkRecommendationSucceededMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "MarkRecommendationSucceededMaxRpcTimeout set to "
                + this.clientProperties.getMarkRecommendationSucceededMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getMarkRecommendationSucceededTotalTimeout() != null) {
      markRecommendationSucceededRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getMarkRecommendationSucceededTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "MarkRecommendationSucceededTotalTimeout set to "
                + this.clientProperties.getMarkRecommendationSucceededTotalTimeout());
      }
    }
    clientSettingsBuilder
        .markRecommendationSucceededSettings()
        .setRetrySettings(markRecommendationSucceededRetrySettingBuilder.build());
    RetrySettings.Builder markRecommendationFailedRetrySettingBuilder =
        clientSettingsBuilder.markRecommendationFailedSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getMarkRecommendationFailedInitialRpcTimeout() != null) {
      markRecommendationFailedRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getMarkRecommendationFailedInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "MarkRecommendationFailedInitialRpcTimeout set to "
                + this.clientProperties.getMarkRecommendationFailedInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getMarkRecommendationFailedRpcTimeoutMultiplier() != null) {
      markRecommendationFailedRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getMarkRecommendationFailedRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "MarkRecommendationFailedRpcTimeoutMultiplier set to "
                + this.clientProperties.getMarkRecommendationFailedRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getMarkRecommendationFailedMaxRpcTimeout() != null) {
      markRecommendationFailedRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getMarkRecommendationFailedMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "MarkRecommendationFailedMaxRpcTimeout set to "
                + this.clientProperties.getMarkRecommendationFailedMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getMarkRecommendationFailedTotalTimeout() != null) {
      markRecommendationFailedRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getMarkRecommendationFailedTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "MarkRecommendationFailedTotalTimeout set to "
                + this.clientProperties.getMarkRecommendationFailedTotalTimeout());
      }
    }
    clientSettingsBuilder
        .markRecommendationFailedSettings()
        .setRetrySettings(markRecommendationFailedRetrySettingBuilder.build());
    RetrySettings.Builder getRecommenderConfigRetrySettingBuilder =
        clientSettingsBuilder.getRecommenderConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetRecommenderConfigRpcTimeoutMultiplier() != null) {
      getRecommenderConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetRecommenderConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRecommenderConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetRecommenderConfigRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getRecommenderConfigSettings()
        .setRetrySettings(getRecommenderConfigRetrySettingBuilder.build());
    RetrySettings.Builder updateRecommenderConfigRetrySettingBuilder =
        clientSettingsBuilder.updateRecommenderConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateRecommenderConfigRpcTimeoutMultiplier() != null) {
      updateRecommenderConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateRecommenderConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateRecommenderConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateRecommenderConfigRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .updateRecommenderConfigSettings()
        .setRetrySettings(updateRecommenderConfigRetrySettingBuilder.build());
    RetrySettings.Builder getInsightTypeConfigRetrySettingBuilder =
        clientSettingsBuilder.getInsightTypeConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetInsightTypeConfigRpcTimeoutMultiplier() != null) {
      getInsightTypeConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetInsightTypeConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInsightTypeConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetInsightTypeConfigRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getInsightTypeConfigSettings()
        .setRetrySettings(getInsightTypeConfigRetrySettingBuilder.build());
    RetrySettings.Builder updateInsightTypeConfigRetrySettingBuilder =
        clientSettingsBuilder.updateInsightTypeConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateInsightTypeConfigRpcTimeoutMultiplier() != null) {
      updateInsightTypeConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateInsightTypeConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInsightTypeConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateInsightTypeConfigRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .updateInsightTypeConfigSettings()
        .setRetrySettings(updateInsightTypeConfigRetrySettingBuilder.build());
    return RecommenderClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-recommender";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
