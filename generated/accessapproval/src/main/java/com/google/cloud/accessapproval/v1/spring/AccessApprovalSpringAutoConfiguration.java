/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.accessapproval.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.accessapproval.v1.AccessApprovalAdminClient;
import com.google.cloud.accessapproval.v1.AccessApprovalAdminSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link AccessApprovalClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(AccessApprovalAdminClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.accessapproval.v1.spring.auto.access-approval.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({AccessApprovalSpringProperties.class, GlobalProperties.class})
public class AccessApprovalSpringAutoConfiguration {
  private final AccessApprovalSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(AccessApprovalSpringAutoConfiguration.class);

  protected AccessApprovalSpringAutoConfiguration(
      AccessApprovalSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider accessApprovalCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from AccessApproval-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultAccessApprovalTransportChannelProvider() {
    return AccessApprovalAdminSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a AccessApprovalClient bean configured to use the default credentials provider
   * (obtained with accessApprovalCredentials()) and its default transport channel provider
   * (defaultAccessApprovalTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in AccessApprovalSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public AccessApprovalAdminClient accessApprovalClient(
      @Qualifier("accessApprovalCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultAccessApprovalTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    AccessApprovalAdminSettings.Builder clientSettingsBuilder =
        AccessApprovalAdminSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          AccessApprovalAdminSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          AccessApprovalAdminSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listApprovalRequestsRetrySettingBuilder =
        clientSettingsBuilder.listApprovalRequestsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListApprovalRequestsInitialRetryDelay() != null) {
      listApprovalRequestsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListApprovalRequestsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListApprovalRequestsInitialRetryDelay set to "
                + this.clientProperties.getListApprovalRequestsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListApprovalRequestsRetryDelayMultiplier() != null) {
      listApprovalRequestsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListApprovalRequestsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListApprovalRequestsRetryDelayMultiplier set to "
                + this.clientProperties.getListApprovalRequestsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListApprovalRequestsMaxRetryDelay() != null) {
      listApprovalRequestsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListApprovalRequestsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListApprovalRequestsMaxRetryDelay set to "
                + this.clientProperties.getListApprovalRequestsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListApprovalRequestsInitialRpcTimeout() != null) {
      listApprovalRequestsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListApprovalRequestsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListApprovalRequestsInitialRpcTimeout set to "
                + this.clientProperties.getListApprovalRequestsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListApprovalRequestsRpcTimeoutMultiplier() != null) {
      listApprovalRequestsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListApprovalRequestsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListApprovalRequestsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListApprovalRequestsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListApprovalRequestsMaxRpcTimeout() != null) {
      listApprovalRequestsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListApprovalRequestsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListApprovalRequestsMaxRpcTimeout set to "
                + this.clientProperties.getListApprovalRequestsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListApprovalRequestsTotalTimeout() != null) {
      listApprovalRequestsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListApprovalRequestsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListApprovalRequestsTotalTimeout set to "
                + this.clientProperties.getListApprovalRequestsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listApprovalRequestsSettings()
        .setRetrySettings(listApprovalRequestsRetrySettingBuilder.build());
    RetrySettings.Builder getApprovalRequestRetrySettingBuilder =
        clientSettingsBuilder.getApprovalRequestSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetApprovalRequestInitialRetryDelay() != null) {
      getApprovalRequestRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetApprovalRequestInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetApprovalRequestInitialRetryDelay set to "
                + this.clientProperties.getGetApprovalRequestInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetApprovalRequestRetryDelayMultiplier() != null) {
      getApprovalRequestRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetApprovalRequestRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetApprovalRequestRetryDelayMultiplier set to "
                + this.clientProperties.getGetApprovalRequestRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetApprovalRequestMaxRetryDelay() != null) {
      getApprovalRequestRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetApprovalRequestMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetApprovalRequestMaxRetryDelay set to "
                + this.clientProperties.getGetApprovalRequestMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetApprovalRequestInitialRpcTimeout() != null) {
      getApprovalRequestRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetApprovalRequestInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetApprovalRequestInitialRpcTimeout set to "
                + this.clientProperties.getGetApprovalRequestInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetApprovalRequestRpcTimeoutMultiplier() != null) {
      getApprovalRequestRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetApprovalRequestRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetApprovalRequestRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetApprovalRequestRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetApprovalRequestMaxRpcTimeout() != null) {
      getApprovalRequestRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetApprovalRequestMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetApprovalRequestMaxRpcTimeout set to "
                + this.clientProperties.getGetApprovalRequestMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetApprovalRequestTotalTimeout() != null) {
      getApprovalRequestRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetApprovalRequestTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetApprovalRequestTotalTimeout set to "
                + this.clientProperties.getGetApprovalRequestTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getApprovalRequestSettings()
        .setRetrySettings(getApprovalRequestRetrySettingBuilder.build());
    RetrySettings.Builder approveApprovalRequestRetrySettingBuilder =
        clientSettingsBuilder.approveApprovalRequestSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getApproveApprovalRequestInitialRpcTimeout() != null) {
      approveApprovalRequestRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getApproveApprovalRequestInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ApproveApprovalRequestInitialRpcTimeout set to "
                + this.clientProperties.getApproveApprovalRequestInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getApproveApprovalRequestRpcTimeoutMultiplier() != null) {
      approveApprovalRequestRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getApproveApprovalRequestRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ApproveApprovalRequestRpcTimeoutMultiplier set to "
                + this.clientProperties.getApproveApprovalRequestRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getApproveApprovalRequestMaxRpcTimeout() != null) {
      approveApprovalRequestRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getApproveApprovalRequestMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ApproveApprovalRequestMaxRpcTimeout set to "
                + this.clientProperties.getApproveApprovalRequestMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getApproveApprovalRequestTotalTimeout() != null) {
      approveApprovalRequestRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getApproveApprovalRequestTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ApproveApprovalRequestTotalTimeout set to "
                + this.clientProperties.getApproveApprovalRequestTotalTimeout());
      }
    }
    clientSettingsBuilder
        .approveApprovalRequestSettings()
        .setRetrySettings(approveApprovalRequestRetrySettingBuilder.build());
    RetrySettings.Builder dismissApprovalRequestRetrySettingBuilder =
        clientSettingsBuilder.dismissApprovalRequestSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDismissApprovalRequestInitialRpcTimeout() != null) {
      dismissApprovalRequestRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDismissApprovalRequestInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DismissApprovalRequestInitialRpcTimeout set to "
                + this.clientProperties.getDismissApprovalRequestInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDismissApprovalRequestRpcTimeoutMultiplier() != null) {
      dismissApprovalRequestRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDismissApprovalRequestRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DismissApprovalRequestRpcTimeoutMultiplier set to "
                + this.clientProperties.getDismissApprovalRequestRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDismissApprovalRequestMaxRpcTimeout() != null) {
      dismissApprovalRequestRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDismissApprovalRequestMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DismissApprovalRequestMaxRpcTimeout set to "
                + this.clientProperties.getDismissApprovalRequestMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDismissApprovalRequestTotalTimeout() != null) {
      dismissApprovalRequestRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDismissApprovalRequestTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DismissApprovalRequestTotalTimeout set to "
                + this.clientProperties.getDismissApprovalRequestTotalTimeout());
      }
    }
    clientSettingsBuilder
        .dismissApprovalRequestSettings()
        .setRetrySettings(dismissApprovalRequestRetrySettingBuilder.build());
    RetrySettings.Builder invalidateApprovalRequestRetrySettingBuilder =
        clientSettingsBuilder.invalidateApprovalRequestSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getInvalidateApprovalRequestInitialRpcTimeout() != null) {
      invalidateApprovalRequestRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getInvalidateApprovalRequestInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InvalidateApprovalRequestInitialRpcTimeout set to "
                + this.clientProperties.getInvalidateApprovalRequestInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getInvalidateApprovalRequestRpcTimeoutMultiplier() != null) {
      invalidateApprovalRequestRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getInvalidateApprovalRequestRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InvalidateApprovalRequestRpcTimeoutMultiplier set to "
                + this.clientProperties.getInvalidateApprovalRequestRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getInvalidateApprovalRequestMaxRpcTimeout() != null) {
      invalidateApprovalRequestRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getInvalidateApprovalRequestMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InvalidateApprovalRequestMaxRpcTimeout set to "
                + this.clientProperties.getInvalidateApprovalRequestMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getInvalidateApprovalRequestTotalTimeout() != null) {
      invalidateApprovalRequestRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getInvalidateApprovalRequestTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InvalidateApprovalRequestTotalTimeout set to "
                + this.clientProperties.getInvalidateApprovalRequestTotalTimeout());
      }
    }
    clientSettingsBuilder
        .invalidateApprovalRequestSettings()
        .setRetrySettings(invalidateApprovalRequestRetrySettingBuilder.build());
    RetrySettings.Builder getAccessApprovalSettingsRetrySettingBuilder =
        clientSettingsBuilder.getAccessApprovalSettingsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetAccessApprovalSettingsInitialRetryDelay() != null) {
      getAccessApprovalSettingsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetAccessApprovalSettingsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAccessApprovalSettingsInitialRetryDelay set to "
                + this.clientProperties.getGetAccessApprovalSettingsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetAccessApprovalSettingsRetryDelayMultiplier() != null) {
      getAccessApprovalSettingsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetAccessApprovalSettingsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAccessApprovalSettingsRetryDelayMultiplier set to "
                + this.clientProperties.getGetAccessApprovalSettingsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetAccessApprovalSettingsMaxRetryDelay() != null) {
      getAccessApprovalSettingsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetAccessApprovalSettingsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAccessApprovalSettingsMaxRetryDelay set to "
                + this.clientProperties.getGetAccessApprovalSettingsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetAccessApprovalSettingsInitialRpcTimeout() != null) {
      getAccessApprovalSettingsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetAccessApprovalSettingsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAccessApprovalSettingsInitialRpcTimeout set to "
                + this.clientProperties.getGetAccessApprovalSettingsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAccessApprovalSettingsRpcTimeoutMultiplier() != null) {
      getAccessApprovalSettingsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetAccessApprovalSettingsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAccessApprovalSettingsRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetAccessApprovalSettingsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetAccessApprovalSettingsMaxRpcTimeout() != null) {
      getAccessApprovalSettingsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetAccessApprovalSettingsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAccessApprovalSettingsMaxRpcTimeout set to "
                + this.clientProperties.getGetAccessApprovalSettingsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAccessApprovalSettingsTotalTimeout() != null) {
      getAccessApprovalSettingsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetAccessApprovalSettingsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAccessApprovalSettingsTotalTimeout set to "
                + this.clientProperties.getGetAccessApprovalSettingsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getAccessApprovalSettingsSettings()
        .setRetrySettings(getAccessApprovalSettingsRetrySettingBuilder.build());
    RetrySettings.Builder updateAccessApprovalSettingsRetrySettingBuilder =
        clientSettingsBuilder.updateAccessApprovalSettingsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateAccessApprovalSettingsInitialRpcTimeout() != null) {
      updateAccessApprovalSettingsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateAccessApprovalSettingsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAccessApprovalSettingsInitialRpcTimeout set to "
                + this.clientProperties.getUpdateAccessApprovalSettingsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateAccessApprovalSettingsRpcTimeoutMultiplier() != null) {
      updateAccessApprovalSettingsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateAccessApprovalSettingsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAccessApprovalSettingsRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateAccessApprovalSettingsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateAccessApprovalSettingsMaxRpcTimeout() != null) {
      updateAccessApprovalSettingsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateAccessApprovalSettingsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAccessApprovalSettingsMaxRpcTimeout set to "
                + this.clientProperties.getUpdateAccessApprovalSettingsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateAccessApprovalSettingsTotalTimeout() != null) {
      updateAccessApprovalSettingsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateAccessApprovalSettingsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAccessApprovalSettingsTotalTimeout set to "
                + this.clientProperties.getUpdateAccessApprovalSettingsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateAccessApprovalSettingsSettings()
        .setRetrySettings(updateAccessApprovalSettingsRetrySettingBuilder.build());
    RetrySettings.Builder deleteAccessApprovalSettingsRetrySettingBuilder =
        clientSettingsBuilder.deleteAccessApprovalSettingsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteAccessApprovalSettingsInitialRpcTimeout() != null) {
      deleteAccessApprovalSettingsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteAccessApprovalSettingsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAccessApprovalSettingsInitialRpcTimeout set to "
                + this.clientProperties.getDeleteAccessApprovalSettingsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAccessApprovalSettingsRpcTimeoutMultiplier() != null) {
      deleteAccessApprovalSettingsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteAccessApprovalSettingsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAccessApprovalSettingsRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteAccessApprovalSettingsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteAccessApprovalSettingsMaxRpcTimeout() != null) {
      deleteAccessApprovalSettingsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteAccessApprovalSettingsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAccessApprovalSettingsMaxRpcTimeout set to "
                + this.clientProperties.getDeleteAccessApprovalSettingsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAccessApprovalSettingsTotalTimeout() != null) {
      deleteAccessApprovalSettingsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteAccessApprovalSettingsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAccessApprovalSettingsTotalTimeout set to "
                + this.clientProperties.getDeleteAccessApprovalSettingsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteAccessApprovalSettingsSettings()
        .setRetrySettings(deleteAccessApprovalSettingsRetrySettingBuilder.build());
    RetrySettings.Builder getAccessApprovalServiceAccountRetrySettingBuilder =
        clientSettingsBuilder
            .getAccessApprovalServiceAccountSettings()
            .getRetrySettings()
            .toBuilder();
    if (this.clientProperties.getGetAccessApprovalServiceAccountRpcTimeoutMultiplier() != null) {
      getAccessApprovalServiceAccountRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetAccessApprovalServiceAccountRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAccessApprovalServiceAccountRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetAccessApprovalServiceAccountRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getAccessApprovalServiceAccountSettings()
        .setRetrySettings(getAccessApprovalServiceAccountRetrySettingBuilder.build());
    return AccessApprovalAdminClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-access-approval";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
