/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.documentai.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.documentai.v1.DocumentProcessorServiceClient;
import com.google.cloud.documentai.v1.DocumentProcessorServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link DocumentProcessorServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(DocumentProcessorServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.documentai.v1.spring.auto.document-processor-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({
  DocumentProcessorServiceSpringProperties.class,
  GlobalProperties.class
})
public class DocumentProcessorServiceSpringAutoConfiguration {
  private final DocumentProcessorServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(DocumentProcessorServiceSpringAutoConfiguration.class);

  protected DocumentProcessorServiceSpringAutoConfiguration(
      DocumentProcessorServiceSpringProperties clientProperties,
      GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider documentProcessorServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from DocumentProcessorService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultDocumentProcessorServiceTransportChannelProvider() {
    return DocumentProcessorServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a DocumentProcessorServiceClient bean configured to use the default credentials
   * provider (obtained with documentProcessorServiceCredentials()) and its default transport
   * channel provider (defaultDocumentProcessorServiceTransportChannelProvider()). It also
   * configures the quota project ID if provided. It will configure an executor provider in case
   * there is more than one thread configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in DocumentProcessorServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public DocumentProcessorServiceClient documentProcessorServiceClient(
      @Qualifier("documentProcessorServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultDocumentProcessorServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    DocumentProcessorServiceSettings.Builder clientSettingsBuilder =
        DocumentProcessorServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          DocumentProcessorServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          DocumentProcessorServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder processDocumentRetrySettingBuilder =
        clientSettingsBuilder.processDocumentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getProcessDocumentInitialRetryDelay() != null) {
      processDocumentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getProcessDocumentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ProcessDocumentInitialRetryDelay set to "
                + this.clientProperties.getProcessDocumentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getProcessDocumentRetryDelayMultiplier() != null) {
      processDocumentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getProcessDocumentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ProcessDocumentRetryDelayMultiplier set to "
                + this.clientProperties.getProcessDocumentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getProcessDocumentMaxRetryDelay() != null) {
      processDocumentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getProcessDocumentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ProcessDocumentMaxRetryDelay set to "
                + this.clientProperties.getProcessDocumentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getProcessDocumentInitialRpcTimeout() != null) {
      processDocumentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getProcessDocumentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ProcessDocumentInitialRpcTimeout set to "
                + this.clientProperties.getProcessDocumentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getProcessDocumentRpcTimeoutMultiplier() != null) {
      processDocumentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getProcessDocumentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ProcessDocumentRpcTimeoutMultiplier set to "
                + this.clientProperties.getProcessDocumentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getProcessDocumentMaxRpcTimeout() != null) {
      processDocumentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getProcessDocumentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ProcessDocumentMaxRpcTimeout set to "
                + this.clientProperties.getProcessDocumentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getProcessDocumentTotalTimeout() != null) {
      processDocumentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getProcessDocumentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ProcessDocumentTotalTimeout set to "
                + this.clientProperties.getProcessDocumentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .processDocumentSettings()
        .setRetrySettings(processDocumentRetrySettingBuilder.build());
    RetrySettings.Builder batchProcessDocumentsRetrySettingBuilder =
        clientSettingsBuilder.batchProcessDocumentsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getBatchProcessDocumentsInitialRetryDelay() != null) {
      batchProcessDocumentsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getBatchProcessDocumentsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchProcessDocumentsInitialRetryDelay set to "
                + this.clientProperties.getBatchProcessDocumentsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getBatchProcessDocumentsRetryDelayMultiplier() != null) {
      batchProcessDocumentsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getBatchProcessDocumentsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchProcessDocumentsRetryDelayMultiplier set to "
                + this.clientProperties.getBatchProcessDocumentsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getBatchProcessDocumentsMaxRetryDelay() != null) {
      batchProcessDocumentsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getBatchProcessDocumentsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchProcessDocumentsMaxRetryDelay set to "
                + this.clientProperties.getBatchProcessDocumentsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getBatchProcessDocumentsInitialRpcTimeout() != null) {
      batchProcessDocumentsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getBatchProcessDocumentsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchProcessDocumentsInitialRpcTimeout set to "
                + this.clientProperties.getBatchProcessDocumentsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getBatchProcessDocumentsRpcTimeoutMultiplier() != null) {
      batchProcessDocumentsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getBatchProcessDocumentsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchProcessDocumentsRpcTimeoutMultiplier set to "
                + this.clientProperties.getBatchProcessDocumentsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getBatchProcessDocumentsMaxRpcTimeout() != null) {
      batchProcessDocumentsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getBatchProcessDocumentsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchProcessDocumentsMaxRpcTimeout set to "
                + this.clientProperties.getBatchProcessDocumentsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getBatchProcessDocumentsTotalTimeout() != null) {
      batchProcessDocumentsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getBatchProcessDocumentsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchProcessDocumentsTotalTimeout set to "
                + this.clientProperties.getBatchProcessDocumentsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .batchProcessDocumentsSettings()
        .setRetrySettings(batchProcessDocumentsRetrySettingBuilder.build());
    RetrySettings.Builder fetchProcessorTypesRetrySettingBuilder =
        clientSettingsBuilder.fetchProcessorTypesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getFetchProcessorTypesRpcTimeoutMultiplier() != null) {
      fetchProcessorTypesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getFetchProcessorTypesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchProcessorTypesRpcTimeoutMultiplier set to "
                + this.clientProperties.getFetchProcessorTypesRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .fetchProcessorTypesSettings()
        .setRetrySettings(fetchProcessorTypesRetrySettingBuilder.build());
    RetrySettings.Builder listProcessorTypesRetrySettingBuilder =
        clientSettingsBuilder.listProcessorTypesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListProcessorTypesRpcTimeoutMultiplier() != null) {
      listProcessorTypesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListProcessorTypesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProcessorTypesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListProcessorTypesRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listProcessorTypesSettings()
        .setRetrySettings(listProcessorTypesRetrySettingBuilder.build());
    RetrySettings.Builder listProcessorsRetrySettingBuilder =
        clientSettingsBuilder.listProcessorsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListProcessorsRpcTimeoutMultiplier() != null) {
      listProcessorsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListProcessorsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProcessorsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListProcessorsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listProcessorsSettings()
        .setRetrySettings(listProcessorsRetrySettingBuilder.build());
    RetrySettings.Builder getProcessorRetrySettingBuilder =
        clientSettingsBuilder.getProcessorSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetProcessorRpcTimeoutMultiplier() != null) {
      getProcessorRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetProcessorRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProcessorRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetProcessorRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getProcessorSettings()
        .setRetrySettings(getProcessorRetrySettingBuilder.build());
    RetrySettings.Builder getProcessorVersionRetrySettingBuilder =
        clientSettingsBuilder.getProcessorVersionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetProcessorVersionRpcTimeoutMultiplier() != null) {
      getProcessorVersionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetProcessorVersionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProcessorVersionRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetProcessorVersionRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getProcessorVersionSettings()
        .setRetrySettings(getProcessorVersionRetrySettingBuilder.build());
    RetrySettings.Builder listProcessorVersionsRetrySettingBuilder =
        clientSettingsBuilder.listProcessorVersionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListProcessorVersionsRpcTimeoutMultiplier() != null) {
      listProcessorVersionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListProcessorVersionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProcessorVersionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListProcessorVersionsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listProcessorVersionsSettings()
        .setRetrySettings(listProcessorVersionsRetrySettingBuilder.build());
    RetrySettings.Builder deleteProcessorVersionRetrySettingBuilder =
        clientSettingsBuilder.deleteProcessorVersionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteProcessorVersionRpcTimeoutMultiplier() != null) {
      deleteProcessorVersionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteProcessorVersionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProcessorVersionRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteProcessorVersionRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .deleteProcessorVersionSettings()
        .setRetrySettings(deleteProcessorVersionRetrySettingBuilder.build());
    RetrySettings.Builder deployProcessorVersionRetrySettingBuilder =
        clientSettingsBuilder.deployProcessorVersionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeployProcessorVersionRpcTimeoutMultiplier() != null) {
      deployProcessorVersionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeployProcessorVersionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeployProcessorVersionRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeployProcessorVersionRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .deployProcessorVersionSettings()
        .setRetrySettings(deployProcessorVersionRetrySettingBuilder.build());
    RetrySettings.Builder undeployProcessorVersionRetrySettingBuilder =
        clientSettingsBuilder.undeployProcessorVersionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUndeployProcessorVersionRpcTimeoutMultiplier() != null) {
      undeployProcessorVersionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUndeployProcessorVersionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeployProcessorVersionRpcTimeoutMultiplier set to "
                + this.clientProperties.getUndeployProcessorVersionRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .undeployProcessorVersionSettings()
        .setRetrySettings(undeployProcessorVersionRetrySettingBuilder.build());
    RetrySettings.Builder createProcessorRetrySettingBuilder =
        clientSettingsBuilder.createProcessorSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateProcessorRpcTimeoutMultiplier() != null) {
      createProcessorRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateProcessorRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProcessorRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateProcessorRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .createProcessorSettings()
        .setRetrySettings(createProcessorRetrySettingBuilder.build());
    RetrySettings.Builder deleteProcessorRetrySettingBuilder =
        clientSettingsBuilder.deleteProcessorSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteProcessorRpcTimeoutMultiplier() != null) {
      deleteProcessorRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteProcessorRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProcessorRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteProcessorRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .deleteProcessorSettings()
        .setRetrySettings(deleteProcessorRetrySettingBuilder.build());
    RetrySettings.Builder enableProcessorRetrySettingBuilder =
        clientSettingsBuilder.enableProcessorSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getEnableProcessorRpcTimeoutMultiplier() != null) {
      enableProcessorRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getEnableProcessorRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "EnableProcessorRpcTimeoutMultiplier set to "
                + this.clientProperties.getEnableProcessorRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .enableProcessorSettings()
        .setRetrySettings(enableProcessorRetrySettingBuilder.build());
    RetrySettings.Builder disableProcessorRetrySettingBuilder =
        clientSettingsBuilder.disableProcessorSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDisableProcessorRpcTimeoutMultiplier() != null) {
      disableProcessorRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDisableProcessorRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DisableProcessorRpcTimeoutMultiplier set to "
                + this.clientProperties.getDisableProcessorRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .disableProcessorSettings()
        .setRetrySettings(disableProcessorRetrySettingBuilder.build());
    RetrySettings.Builder setDefaultProcessorVersionRetrySettingBuilder =
        clientSettingsBuilder.setDefaultProcessorVersionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetDefaultProcessorVersionRpcTimeoutMultiplier() != null) {
      setDefaultProcessorVersionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetDefaultProcessorVersionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetDefaultProcessorVersionRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetDefaultProcessorVersionRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .setDefaultProcessorVersionSettings()
        .setRetrySettings(setDefaultProcessorVersionRetrySettingBuilder.build());
    RetrySettings.Builder reviewDocumentRetrySettingBuilder =
        clientSettingsBuilder.reviewDocumentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getReviewDocumentInitialRetryDelay() != null) {
      reviewDocumentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getReviewDocumentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReviewDocumentInitialRetryDelay set to "
                + this.clientProperties.getReviewDocumentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getReviewDocumentRetryDelayMultiplier() != null) {
      reviewDocumentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getReviewDocumentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReviewDocumentRetryDelayMultiplier set to "
                + this.clientProperties.getReviewDocumentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getReviewDocumentMaxRetryDelay() != null) {
      reviewDocumentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getReviewDocumentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReviewDocumentMaxRetryDelay set to "
                + this.clientProperties.getReviewDocumentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getReviewDocumentInitialRpcTimeout() != null) {
      reviewDocumentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getReviewDocumentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReviewDocumentInitialRpcTimeout set to "
                + this.clientProperties.getReviewDocumentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getReviewDocumentRpcTimeoutMultiplier() != null) {
      reviewDocumentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getReviewDocumentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReviewDocumentRpcTimeoutMultiplier set to "
                + this.clientProperties.getReviewDocumentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getReviewDocumentMaxRpcTimeout() != null) {
      reviewDocumentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getReviewDocumentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReviewDocumentMaxRpcTimeout set to "
                + this.clientProperties.getReviewDocumentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getReviewDocumentTotalTimeout() != null) {
      reviewDocumentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getReviewDocumentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReviewDocumentTotalTimeout set to "
                + this.clientProperties.getReviewDocumentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .reviewDocumentSettings()
        .setRetrySettings(reviewDocumentRetrySettingBuilder.build());
    RetrySettings.Builder listLocationsRetrySettingBuilder =
        clientSettingsBuilder.listLocationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListLocationsRpcTimeoutMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listLocationsSettings()
        .setRetrySettings(listLocationsRetrySettingBuilder.build());
    RetrySettings.Builder getLocationRetrySettingBuilder =
        clientSettingsBuilder.getLocationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetLocationRpcTimeoutMultiplier() != null) {
      getLocationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getLocationSettings()
        .setRetrySettings(getLocationRetrySettingBuilder.build());
    return DocumentProcessorServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-document-processor-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
