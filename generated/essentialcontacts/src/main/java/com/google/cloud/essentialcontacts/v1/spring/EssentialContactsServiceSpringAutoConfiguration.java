/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.essentialcontacts.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.essentialcontacts.v1.EssentialContactsServiceClient;
import com.google.cloud.essentialcontacts.v1.EssentialContactsServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link EssentialContactsServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(EssentialContactsServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.essentialcontacts.v1.spring.auto.essential-contacts-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({
  EssentialContactsServiceSpringProperties.class,
  GlobalProperties.class
})
public class EssentialContactsServiceSpringAutoConfiguration {
  private final EssentialContactsServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(EssentialContactsServiceSpringAutoConfiguration.class);

  protected EssentialContactsServiceSpringAutoConfiguration(
      EssentialContactsServiceSpringProperties clientProperties,
      GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider essentialContactsServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from EssentialContactsService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultEssentialContactsServiceTransportChannelProvider() {
    return EssentialContactsServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a EssentialContactsServiceClient bean configured to use the default credentials
   * provider (obtained with essentialContactsServiceCredentials()) and its default transport
   * channel provider (defaultEssentialContactsServiceTransportChannelProvider()). It also
   * configures the quota project ID if provided. It will configure an executor provider in case
   * there is more than one thread configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in EssentialContactsServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public EssentialContactsServiceClient essentialContactsServiceClient(
      @Qualifier("essentialContactsServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultEssentialContactsServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    EssentialContactsServiceSettings.Builder clientSettingsBuilder =
        EssentialContactsServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          EssentialContactsServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          EssentialContactsServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createContactRetrySettingBuilder =
        clientSettingsBuilder.createContactSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateContactInitialRpcTimeout() != null) {
      createContactRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateContactInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateContactInitialRpcTimeout set to "
                + this.clientProperties.getCreateContactInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateContactRpcTimeoutMultiplier() != null) {
      createContactRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateContactRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateContactRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateContactRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateContactMaxRpcTimeout() != null) {
      createContactRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateContactMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateContactMaxRpcTimeout set to "
                + this.clientProperties.getCreateContactMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateContactTotalTimeout() != null) {
      createContactRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateContactTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateContactTotalTimeout set to "
                + this.clientProperties.getCreateContactTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createContactSettings()
        .setRetrySettings(createContactRetrySettingBuilder.build());
    RetrySettings.Builder updateContactRetrySettingBuilder =
        clientSettingsBuilder.updateContactSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateContactInitialRpcTimeout() != null) {
      updateContactRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateContactInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateContactInitialRpcTimeout set to "
                + this.clientProperties.getUpdateContactInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateContactRpcTimeoutMultiplier() != null) {
      updateContactRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateContactRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateContactRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateContactRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateContactMaxRpcTimeout() != null) {
      updateContactRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateContactMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateContactMaxRpcTimeout set to "
                + this.clientProperties.getUpdateContactMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateContactTotalTimeout() != null) {
      updateContactRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateContactTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateContactTotalTimeout set to "
                + this.clientProperties.getUpdateContactTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateContactSettings()
        .setRetrySettings(updateContactRetrySettingBuilder.build());
    RetrySettings.Builder listContactsRetrySettingBuilder =
        clientSettingsBuilder.listContactsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListContactsInitialRetryDelay() != null) {
      listContactsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListContactsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContactsInitialRetryDelay set to "
                + this.clientProperties.getListContactsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListContactsRetryDelayMultiplier() != null) {
      listContactsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListContactsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContactsRetryDelayMultiplier set to "
                + this.clientProperties.getListContactsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListContactsMaxRetryDelay() != null) {
      listContactsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListContactsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContactsMaxRetryDelay set to "
                + this.clientProperties.getListContactsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListContactsInitialRpcTimeout() != null) {
      listContactsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListContactsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContactsInitialRpcTimeout set to "
                + this.clientProperties.getListContactsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListContactsRpcTimeoutMultiplier() != null) {
      listContactsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListContactsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContactsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListContactsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListContactsMaxRpcTimeout() != null) {
      listContactsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListContactsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContactsMaxRpcTimeout set to "
                + this.clientProperties.getListContactsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListContactsTotalTimeout() != null) {
      listContactsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListContactsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContactsTotalTimeout set to "
                + this.clientProperties.getListContactsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listContactsSettings()
        .setRetrySettings(listContactsRetrySettingBuilder.build());
    RetrySettings.Builder getContactRetrySettingBuilder =
        clientSettingsBuilder.getContactSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetContactInitialRetryDelay() != null) {
      getContactRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetContactInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContactInitialRetryDelay set to "
                + this.clientProperties.getGetContactInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetContactRetryDelayMultiplier() != null) {
      getContactRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetContactRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContactRetryDelayMultiplier set to "
                + this.clientProperties.getGetContactRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetContactMaxRetryDelay() != null) {
      getContactRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetContactMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContactMaxRetryDelay set to " + this.clientProperties.getGetContactMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetContactInitialRpcTimeout() != null) {
      getContactRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetContactInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContactInitialRpcTimeout set to "
                + this.clientProperties.getGetContactInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetContactRpcTimeoutMultiplier() != null) {
      getContactRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetContactRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContactRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetContactRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetContactMaxRpcTimeout() != null) {
      getContactRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetContactMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContactMaxRpcTimeout set to " + this.clientProperties.getGetContactMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetContactTotalTimeout() != null) {
      getContactRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetContactTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContactTotalTimeout set to " + this.clientProperties.getGetContactTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getContactSettings()
        .setRetrySettings(getContactRetrySettingBuilder.build());
    RetrySettings.Builder deleteContactRetrySettingBuilder =
        clientSettingsBuilder.deleteContactSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteContactInitialRpcTimeout() != null) {
      deleteContactRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteContactInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteContactInitialRpcTimeout set to "
                + this.clientProperties.getDeleteContactInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteContactRpcTimeoutMultiplier() != null) {
      deleteContactRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteContactRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteContactRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteContactRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteContactMaxRpcTimeout() != null) {
      deleteContactRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteContactMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteContactMaxRpcTimeout set to "
                + this.clientProperties.getDeleteContactMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteContactTotalTimeout() != null) {
      deleteContactRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteContactTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteContactTotalTimeout set to "
                + this.clientProperties.getDeleteContactTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteContactSettings()
        .setRetrySettings(deleteContactRetrySettingBuilder.build());
    RetrySettings.Builder computeContactsRetrySettingBuilder =
        clientSettingsBuilder.computeContactsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getComputeContactsInitialRpcTimeout() != null) {
      computeContactsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getComputeContactsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ComputeContactsInitialRpcTimeout set to "
                + this.clientProperties.getComputeContactsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getComputeContactsRpcTimeoutMultiplier() != null) {
      computeContactsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getComputeContactsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ComputeContactsRpcTimeoutMultiplier set to "
                + this.clientProperties.getComputeContactsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getComputeContactsMaxRpcTimeout() != null) {
      computeContactsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getComputeContactsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ComputeContactsMaxRpcTimeout set to "
                + this.clientProperties.getComputeContactsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getComputeContactsTotalTimeout() != null) {
      computeContactsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getComputeContactsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ComputeContactsTotalTimeout set to "
                + this.clientProperties.getComputeContactsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .computeContactsSettings()
        .setRetrySettings(computeContactsRetrySettingBuilder.build());
    RetrySettings.Builder sendTestMessageRetrySettingBuilder =
        clientSettingsBuilder.sendTestMessageSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSendTestMessageInitialRpcTimeout() != null) {
      sendTestMessageRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSendTestMessageInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SendTestMessageInitialRpcTimeout set to "
                + this.clientProperties.getSendTestMessageInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSendTestMessageRpcTimeoutMultiplier() != null) {
      sendTestMessageRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSendTestMessageRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SendTestMessageRpcTimeoutMultiplier set to "
                + this.clientProperties.getSendTestMessageRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSendTestMessageMaxRpcTimeout() != null) {
      sendTestMessageRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSendTestMessageMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SendTestMessageMaxRpcTimeout set to "
                + this.clientProperties.getSendTestMessageMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSendTestMessageTotalTimeout() != null) {
      sendTestMessageRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSendTestMessageTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SendTestMessageTotalTimeout set to "
                + this.clientProperties.getSendTestMessageTotalTimeout());
      }
    }
    clientSettingsBuilder
        .sendTestMessageSettings()
        .setRetrySettings(sendTestMessageRetrySettingBuilder.build());
    return EssentialContactsServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-essential-contacts-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
