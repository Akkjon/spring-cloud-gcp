/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.api.servicemanagement.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.api.servicemanagement.v1.ServiceManagerClient;
import com.google.cloud.api.servicemanagement.v1.ServiceManagerSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ServiceManagerClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ServiceManagerClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.api.servicemanagement.v1.spring.auto.service-manager.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({ServiceManagerSpringProperties.class, GlobalProperties.class})
public class ServiceManagerSpringAutoConfiguration {
  private final ServiceManagerSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(ServiceManagerSpringAutoConfiguration.class);

  protected ServiceManagerSpringAutoConfiguration(
      ServiceManagerSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider serviceManagerCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from ServiceManager-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultServiceManagerTransportChannelProvider() {
    return ServiceManagerSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ServiceManagerClient bean configured to use the default credentials provider
   * (obtained with serviceManagerCredentials()) and its default transport channel provider
   * (defaultServiceManagerTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in ServiceManagerSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public ServiceManagerClient serviceManagerClient(
      @Qualifier("serviceManagerCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultServiceManagerTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ServiceManagerSettings.Builder clientSettingsBuilder =
        ServiceManagerSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ServiceManagerSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          ServiceManagerSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listServicesRetrySettingBuilder =
        clientSettingsBuilder.listServicesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListServicesInitialRpcTimeout() != null) {
      listServicesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListServicesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesInitialRpcTimeout set to "
                + this.clientProperties.getListServicesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListServicesRpcTimeoutMultiplier() != null) {
      listServicesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListServicesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListServicesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListServicesMaxRpcTimeout() != null) {
      listServicesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListServicesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesMaxRpcTimeout set to "
                + this.clientProperties.getListServicesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListServicesTotalTimeout() != null) {
      listServicesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListServicesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesTotalTimeout set to "
                + this.clientProperties.getListServicesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listServicesSettings()
        .setRetrySettings(listServicesRetrySettingBuilder.build());
    RetrySettings.Builder getServiceRetrySettingBuilder =
        clientSettingsBuilder.getServiceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetServiceInitialRpcTimeout() != null) {
      getServiceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetServiceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceInitialRpcTimeout set to "
                + this.clientProperties.getGetServiceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetServiceRpcTimeoutMultiplier() != null) {
      getServiceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetServiceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetServiceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetServiceMaxRpcTimeout() != null) {
      getServiceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetServiceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceMaxRpcTimeout set to " + this.clientProperties.getGetServiceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetServiceTotalTimeout() != null) {
      getServiceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetServiceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceTotalTimeout set to " + this.clientProperties.getGetServiceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getServiceSettings()
        .setRetrySettings(getServiceRetrySettingBuilder.build());
    RetrySettings.Builder createServiceRetrySettingBuilder =
        clientSettingsBuilder.createServiceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateServiceInitialRpcTimeout() != null) {
      createServiceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateServiceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceInitialRpcTimeout set to "
                + this.clientProperties.getCreateServiceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateServiceRpcTimeoutMultiplier() != null) {
      createServiceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateServiceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateServiceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateServiceMaxRpcTimeout() != null) {
      createServiceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateServiceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceMaxRpcTimeout set to "
                + this.clientProperties.getCreateServiceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateServiceTotalTimeout() != null) {
      createServiceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateServiceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceTotalTimeout set to "
                + this.clientProperties.getCreateServiceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createServiceSettings()
        .setRetrySettings(createServiceRetrySettingBuilder.build());
    RetrySettings.Builder deleteServiceRetrySettingBuilder =
        clientSettingsBuilder.deleteServiceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteServiceInitialRpcTimeout() != null) {
      deleteServiceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteServiceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceInitialRpcTimeout set to "
                + this.clientProperties.getDeleteServiceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteServiceRpcTimeoutMultiplier() != null) {
      deleteServiceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteServiceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteServiceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteServiceMaxRpcTimeout() != null) {
      deleteServiceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteServiceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceMaxRpcTimeout set to "
                + this.clientProperties.getDeleteServiceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteServiceTotalTimeout() != null) {
      deleteServiceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteServiceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceTotalTimeout set to "
                + this.clientProperties.getDeleteServiceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteServiceSettings()
        .setRetrySettings(deleteServiceRetrySettingBuilder.build());
    RetrySettings.Builder undeleteServiceRetrySettingBuilder =
        clientSettingsBuilder.undeleteServiceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUndeleteServiceInitialRpcTimeout() != null) {
      undeleteServiceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUndeleteServiceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteServiceInitialRpcTimeout set to "
                + this.clientProperties.getUndeleteServiceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUndeleteServiceRpcTimeoutMultiplier() != null) {
      undeleteServiceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUndeleteServiceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteServiceRpcTimeoutMultiplier set to "
                + this.clientProperties.getUndeleteServiceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUndeleteServiceMaxRpcTimeout() != null) {
      undeleteServiceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUndeleteServiceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteServiceMaxRpcTimeout set to "
                + this.clientProperties.getUndeleteServiceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUndeleteServiceTotalTimeout() != null) {
      undeleteServiceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUndeleteServiceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteServiceTotalTimeout set to "
                + this.clientProperties.getUndeleteServiceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .undeleteServiceSettings()
        .setRetrySettings(undeleteServiceRetrySettingBuilder.build());
    RetrySettings.Builder listServiceConfigsRetrySettingBuilder =
        clientSettingsBuilder.listServiceConfigsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListServiceConfigsInitialRpcTimeout() != null) {
      listServiceConfigsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListServiceConfigsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServiceConfigsInitialRpcTimeout set to "
                + this.clientProperties.getListServiceConfigsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListServiceConfigsRpcTimeoutMultiplier() != null) {
      listServiceConfigsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListServiceConfigsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServiceConfigsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListServiceConfigsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListServiceConfigsMaxRpcTimeout() != null) {
      listServiceConfigsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListServiceConfigsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServiceConfigsMaxRpcTimeout set to "
                + this.clientProperties.getListServiceConfigsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListServiceConfigsTotalTimeout() != null) {
      listServiceConfigsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListServiceConfigsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServiceConfigsTotalTimeout set to "
                + this.clientProperties.getListServiceConfigsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listServiceConfigsSettings()
        .setRetrySettings(listServiceConfigsRetrySettingBuilder.build());
    RetrySettings.Builder getServiceConfigRetrySettingBuilder =
        clientSettingsBuilder.getServiceConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetServiceConfigInitialRpcTimeout() != null) {
      getServiceConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetServiceConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceConfigInitialRpcTimeout set to "
                + this.clientProperties.getGetServiceConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetServiceConfigRpcTimeoutMultiplier() != null) {
      getServiceConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetServiceConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetServiceConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetServiceConfigMaxRpcTimeout() != null) {
      getServiceConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetServiceConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceConfigMaxRpcTimeout set to "
                + this.clientProperties.getGetServiceConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetServiceConfigTotalTimeout() != null) {
      getServiceConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetServiceConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceConfigTotalTimeout set to "
                + this.clientProperties.getGetServiceConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getServiceConfigSettings()
        .setRetrySettings(getServiceConfigRetrySettingBuilder.build());
    RetrySettings.Builder createServiceConfigRetrySettingBuilder =
        clientSettingsBuilder.createServiceConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateServiceConfigInitialRpcTimeout() != null) {
      createServiceConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateServiceConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceConfigInitialRpcTimeout set to "
                + this.clientProperties.getCreateServiceConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateServiceConfigRpcTimeoutMultiplier() != null) {
      createServiceConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateServiceConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateServiceConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateServiceConfigMaxRpcTimeout() != null) {
      createServiceConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateServiceConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceConfigMaxRpcTimeout set to "
                + this.clientProperties.getCreateServiceConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateServiceConfigTotalTimeout() != null) {
      createServiceConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateServiceConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceConfigTotalTimeout set to "
                + this.clientProperties.getCreateServiceConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createServiceConfigSettings()
        .setRetrySettings(createServiceConfigRetrySettingBuilder.build());
    RetrySettings.Builder submitConfigSourceRetrySettingBuilder =
        clientSettingsBuilder.submitConfigSourceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSubmitConfigSourceInitialRpcTimeout() != null) {
      submitConfigSourceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSubmitConfigSourceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SubmitConfigSourceInitialRpcTimeout set to "
                + this.clientProperties.getSubmitConfigSourceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSubmitConfigSourceRpcTimeoutMultiplier() != null) {
      submitConfigSourceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSubmitConfigSourceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SubmitConfigSourceRpcTimeoutMultiplier set to "
                + this.clientProperties.getSubmitConfigSourceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSubmitConfigSourceMaxRpcTimeout() != null) {
      submitConfigSourceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSubmitConfigSourceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SubmitConfigSourceMaxRpcTimeout set to "
                + this.clientProperties.getSubmitConfigSourceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSubmitConfigSourceTotalTimeout() != null) {
      submitConfigSourceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSubmitConfigSourceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SubmitConfigSourceTotalTimeout set to "
                + this.clientProperties.getSubmitConfigSourceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .submitConfigSourceSettings()
        .setRetrySettings(submitConfigSourceRetrySettingBuilder.build());
    RetrySettings.Builder listServiceRolloutsRetrySettingBuilder =
        clientSettingsBuilder.listServiceRolloutsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListServiceRolloutsInitialRpcTimeout() != null) {
      listServiceRolloutsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListServiceRolloutsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServiceRolloutsInitialRpcTimeout set to "
                + this.clientProperties.getListServiceRolloutsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListServiceRolloutsRpcTimeoutMultiplier() != null) {
      listServiceRolloutsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListServiceRolloutsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServiceRolloutsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListServiceRolloutsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListServiceRolloutsMaxRpcTimeout() != null) {
      listServiceRolloutsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListServiceRolloutsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServiceRolloutsMaxRpcTimeout set to "
                + this.clientProperties.getListServiceRolloutsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListServiceRolloutsTotalTimeout() != null) {
      listServiceRolloutsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListServiceRolloutsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServiceRolloutsTotalTimeout set to "
                + this.clientProperties.getListServiceRolloutsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listServiceRolloutsSettings()
        .setRetrySettings(listServiceRolloutsRetrySettingBuilder.build());
    RetrySettings.Builder getServiceRolloutRetrySettingBuilder =
        clientSettingsBuilder.getServiceRolloutSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetServiceRolloutInitialRpcTimeout() != null) {
      getServiceRolloutRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetServiceRolloutInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceRolloutInitialRpcTimeout set to "
                + this.clientProperties.getGetServiceRolloutInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetServiceRolloutRpcTimeoutMultiplier() != null) {
      getServiceRolloutRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetServiceRolloutRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceRolloutRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetServiceRolloutRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetServiceRolloutMaxRpcTimeout() != null) {
      getServiceRolloutRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetServiceRolloutMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceRolloutMaxRpcTimeout set to "
                + this.clientProperties.getGetServiceRolloutMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetServiceRolloutTotalTimeout() != null) {
      getServiceRolloutRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetServiceRolloutTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceRolloutTotalTimeout set to "
                + this.clientProperties.getGetServiceRolloutTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getServiceRolloutSettings()
        .setRetrySettings(getServiceRolloutRetrySettingBuilder.build());
    RetrySettings.Builder createServiceRolloutRetrySettingBuilder =
        clientSettingsBuilder.createServiceRolloutSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateServiceRolloutInitialRpcTimeout() != null) {
      createServiceRolloutRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateServiceRolloutInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceRolloutInitialRpcTimeout set to "
                + this.clientProperties.getCreateServiceRolloutInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateServiceRolloutRpcTimeoutMultiplier() != null) {
      createServiceRolloutRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateServiceRolloutRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceRolloutRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateServiceRolloutRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateServiceRolloutMaxRpcTimeout() != null) {
      createServiceRolloutRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateServiceRolloutMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceRolloutMaxRpcTimeout set to "
                + this.clientProperties.getCreateServiceRolloutMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateServiceRolloutTotalTimeout() != null) {
      createServiceRolloutRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateServiceRolloutTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceRolloutTotalTimeout set to "
                + this.clientProperties.getCreateServiceRolloutTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createServiceRolloutSettings()
        .setRetrySettings(createServiceRolloutRetrySettingBuilder.build());
    RetrySettings.Builder generateConfigReportRetrySettingBuilder =
        clientSettingsBuilder.generateConfigReportSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGenerateConfigReportInitialRpcTimeout() != null) {
      generateConfigReportRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGenerateConfigReportInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GenerateConfigReportInitialRpcTimeout set to "
                + this.clientProperties.getGenerateConfigReportInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGenerateConfigReportRpcTimeoutMultiplier() != null) {
      generateConfigReportRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGenerateConfigReportRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GenerateConfigReportRpcTimeoutMultiplier set to "
                + this.clientProperties.getGenerateConfigReportRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGenerateConfigReportMaxRpcTimeout() != null) {
      generateConfigReportRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGenerateConfigReportMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GenerateConfigReportMaxRpcTimeout set to "
                + this.clientProperties.getGenerateConfigReportMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGenerateConfigReportTotalTimeout() != null) {
      generateConfigReportRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGenerateConfigReportTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GenerateConfigReportTotalTimeout set to "
                + this.clientProperties.getGenerateConfigReportTotalTimeout());
      }
    }
    clientSettingsBuilder
        .generateConfigReportSettings()
        .setRetrySettings(generateConfigReportRetrySettingBuilder.build());
    return ServiceManagerClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-service-manager";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
