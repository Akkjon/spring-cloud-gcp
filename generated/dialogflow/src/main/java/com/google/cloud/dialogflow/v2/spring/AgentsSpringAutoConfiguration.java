/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dialogflow.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dialogflow.v2.AgentsClient;
import com.google.cloud.dialogflow.v2.AgentsSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link AgentsClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(AgentsClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dialogflow.v2.spring.auto.agents.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({AgentsSpringProperties.class, GlobalProperties.class})
public class AgentsSpringAutoConfiguration {
  private final AgentsSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(AgentsSpringAutoConfiguration.class);

  protected AgentsSpringAutoConfiguration(
      AgentsSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider agentsCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Agents-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultAgentsTransportChannelProvider() {
    return AgentsSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a AgentsClient bean configured to use the default credentials provider (obtained with
   * agentsCredentials()) and its default transport channel provider
   * (defaultAgentsTransportChannelProvider()). It also configures the quota project ID if provided.
   * It will configure an executor provider in case there is more than one thread configured in the
   * client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in AgentsSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public AgentsClient agentsClient(
      @Qualifier("agentsCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultAgentsTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    AgentsSettings.Builder clientSettingsBuilder =
        AgentsSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          AgentsSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          AgentsSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder getAgentRetrySettingBuilder =
        clientSettingsBuilder.getAgentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetAgentInitialRetryDelay() != null) {
      getAgentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetAgentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAgentInitialRetryDelay set to "
                + this.clientProperties.getGetAgentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetAgentRetryDelayMultiplier() != null) {
      getAgentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetAgentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAgentRetryDelayMultiplier set to "
                + this.clientProperties.getGetAgentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetAgentMaxRetryDelay() != null) {
      getAgentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetAgentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAgentMaxRetryDelay set to " + this.clientProperties.getGetAgentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetAgentInitialRpcTimeout() != null) {
      getAgentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetAgentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAgentInitialRpcTimeout set to "
                + this.clientProperties.getGetAgentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAgentRpcTimeoutMultiplier() != null) {
      getAgentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetAgentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAgentRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetAgentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetAgentMaxRpcTimeout() != null) {
      getAgentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetAgentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAgentMaxRpcTimeout set to " + this.clientProperties.getGetAgentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAgentTotalTimeout() != null) {
      getAgentRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetAgentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAgentTotalTimeout set to " + this.clientProperties.getGetAgentTotalTimeout());
      }
    }
    clientSettingsBuilder.getAgentSettings().setRetrySettings(getAgentRetrySettingBuilder.build());
    RetrySettings.Builder setAgentRetrySettingBuilder =
        clientSettingsBuilder.setAgentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetAgentInitialRetryDelay() != null) {
      setAgentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getSetAgentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetAgentInitialRetryDelay set to "
                + this.clientProperties.getSetAgentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getSetAgentRetryDelayMultiplier() != null) {
      setAgentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getSetAgentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetAgentRetryDelayMultiplier set to "
                + this.clientProperties.getSetAgentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getSetAgentMaxRetryDelay() != null) {
      setAgentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getSetAgentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetAgentMaxRetryDelay set to " + this.clientProperties.getSetAgentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getSetAgentInitialRpcTimeout() != null) {
      setAgentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetAgentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetAgentInitialRpcTimeout set to "
                + this.clientProperties.getSetAgentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetAgentRpcTimeoutMultiplier() != null) {
      setAgentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetAgentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetAgentRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetAgentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetAgentMaxRpcTimeout() != null) {
      setAgentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetAgentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetAgentMaxRpcTimeout set to " + this.clientProperties.getSetAgentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetAgentTotalTimeout() != null) {
      setAgentRetrySettingBuilder.setTotalTimeout(this.clientProperties.getSetAgentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetAgentTotalTimeout set to " + this.clientProperties.getSetAgentTotalTimeout());
      }
    }
    clientSettingsBuilder.setAgentSettings().setRetrySettings(setAgentRetrySettingBuilder.build());
    RetrySettings.Builder deleteAgentRetrySettingBuilder =
        clientSettingsBuilder.deleteAgentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteAgentInitialRetryDelay() != null) {
      deleteAgentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteAgentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAgentInitialRetryDelay set to "
                + this.clientProperties.getDeleteAgentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteAgentRetryDelayMultiplier() != null) {
      deleteAgentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteAgentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAgentRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteAgentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteAgentMaxRetryDelay() != null) {
      deleteAgentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteAgentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAgentMaxRetryDelay set to "
                + this.clientProperties.getDeleteAgentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteAgentInitialRpcTimeout() != null) {
      deleteAgentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteAgentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAgentInitialRpcTimeout set to "
                + this.clientProperties.getDeleteAgentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAgentRpcTimeoutMultiplier() != null) {
      deleteAgentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteAgentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAgentRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteAgentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteAgentMaxRpcTimeout() != null) {
      deleteAgentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteAgentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAgentMaxRpcTimeout set to "
                + this.clientProperties.getDeleteAgentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAgentTotalTimeout() != null) {
      deleteAgentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteAgentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAgentTotalTimeout set to " + this.clientProperties.getDeleteAgentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteAgentSettings()
        .setRetrySettings(deleteAgentRetrySettingBuilder.build());
    RetrySettings.Builder searchAgentsRetrySettingBuilder =
        clientSettingsBuilder.searchAgentsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSearchAgentsInitialRetryDelay() != null) {
      searchAgentsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getSearchAgentsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SearchAgentsInitialRetryDelay set to "
                + this.clientProperties.getSearchAgentsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getSearchAgentsRetryDelayMultiplier() != null) {
      searchAgentsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getSearchAgentsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SearchAgentsRetryDelayMultiplier set to "
                + this.clientProperties.getSearchAgentsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getSearchAgentsMaxRetryDelay() != null) {
      searchAgentsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getSearchAgentsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SearchAgentsMaxRetryDelay set to "
                + this.clientProperties.getSearchAgentsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getSearchAgentsInitialRpcTimeout() != null) {
      searchAgentsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSearchAgentsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SearchAgentsInitialRpcTimeout set to "
                + this.clientProperties.getSearchAgentsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSearchAgentsRpcTimeoutMultiplier() != null) {
      searchAgentsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSearchAgentsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SearchAgentsRpcTimeoutMultiplier set to "
                + this.clientProperties.getSearchAgentsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSearchAgentsMaxRpcTimeout() != null) {
      searchAgentsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSearchAgentsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SearchAgentsMaxRpcTimeout set to "
                + this.clientProperties.getSearchAgentsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSearchAgentsTotalTimeout() != null) {
      searchAgentsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSearchAgentsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SearchAgentsTotalTimeout set to "
                + this.clientProperties.getSearchAgentsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .searchAgentsSettings()
        .setRetrySettings(searchAgentsRetrySettingBuilder.build());
    RetrySettings.Builder trainAgentRetrySettingBuilder =
        clientSettingsBuilder.trainAgentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getTrainAgentInitialRetryDelay() != null) {
      trainAgentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getTrainAgentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TrainAgentInitialRetryDelay set to "
                + this.clientProperties.getTrainAgentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getTrainAgentRetryDelayMultiplier() != null) {
      trainAgentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getTrainAgentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TrainAgentRetryDelayMultiplier set to "
                + this.clientProperties.getTrainAgentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getTrainAgentMaxRetryDelay() != null) {
      trainAgentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getTrainAgentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TrainAgentMaxRetryDelay set to " + this.clientProperties.getTrainAgentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getTrainAgentInitialRpcTimeout() != null) {
      trainAgentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getTrainAgentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TrainAgentInitialRpcTimeout set to "
                + this.clientProperties.getTrainAgentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getTrainAgentRpcTimeoutMultiplier() != null) {
      trainAgentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getTrainAgentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TrainAgentRpcTimeoutMultiplier set to "
                + this.clientProperties.getTrainAgentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getTrainAgentMaxRpcTimeout() != null) {
      trainAgentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getTrainAgentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TrainAgentMaxRpcTimeout set to " + this.clientProperties.getTrainAgentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getTrainAgentTotalTimeout() != null) {
      trainAgentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getTrainAgentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TrainAgentTotalTimeout set to " + this.clientProperties.getTrainAgentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .trainAgentSettings()
        .setRetrySettings(trainAgentRetrySettingBuilder.build());
    RetrySettings.Builder exportAgentRetrySettingBuilder =
        clientSettingsBuilder.exportAgentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getExportAgentInitialRetryDelay() != null) {
      exportAgentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getExportAgentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportAgentInitialRetryDelay set to "
                + this.clientProperties.getExportAgentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getExportAgentRetryDelayMultiplier() != null) {
      exportAgentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getExportAgentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportAgentRetryDelayMultiplier set to "
                + this.clientProperties.getExportAgentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getExportAgentMaxRetryDelay() != null) {
      exportAgentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getExportAgentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportAgentMaxRetryDelay set to "
                + this.clientProperties.getExportAgentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getExportAgentInitialRpcTimeout() != null) {
      exportAgentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getExportAgentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportAgentInitialRpcTimeout set to "
                + this.clientProperties.getExportAgentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getExportAgentRpcTimeoutMultiplier() != null) {
      exportAgentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getExportAgentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportAgentRpcTimeoutMultiplier set to "
                + this.clientProperties.getExportAgentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getExportAgentMaxRpcTimeout() != null) {
      exportAgentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getExportAgentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportAgentMaxRpcTimeout set to "
                + this.clientProperties.getExportAgentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getExportAgentTotalTimeout() != null) {
      exportAgentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getExportAgentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportAgentTotalTimeout set to " + this.clientProperties.getExportAgentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .exportAgentSettings()
        .setRetrySettings(exportAgentRetrySettingBuilder.build());
    RetrySettings.Builder importAgentRetrySettingBuilder =
        clientSettingsBuilder.importAgentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getImportAgentInitialRetryDelay() != null) {
      importAgentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getImportAgentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportAgentInitialRetryDelay set to "
                + this.clientProperties.getImportAgentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getImportAgentRetryDelayMultiplier() != null) {
      importAgentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getImportAgentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportAgentRetryDelayMultiplier set to "
                + this.clientProperties.getImportAgentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getImportAgentMaxRetryDelay() != null) {
      importAgentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getImportAgentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportAgentMaxRetryDelay set to "
                + this.clientProperties.getImportAgentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getImportAgentInitialRpcTimeout() != null) {
      importAgentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getImportAgentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportAgentInitialRpcTimeout set to "
                + this.clientProperties.getImportAgentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getImportAgentRpcTimeoutMultiplier() != null) {
      importAgentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getImportAgentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportAgentRpcTimeoutMultiplier set to "
                + this.clientProperties.getImportAgentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getImportAgentMaxRpcTimeout() != null) {
      importAgentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getImportAgentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportAgentMaxRpcTimeout set to "
                + this.clientProperties.getImportAgentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getImportAgentTotalTimeout() != null) {
      importAgentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getImportAgentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportAgentTotalTimeout set to " + this.clientProperties.getImportAgentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .importAgentSettings()
        .setRetrySettings(importAgentRetrySettingBuilder.build());
    RetrySettings.Builder restoreAgentRetrySettingBuilder =
        clientSettingsBuilder.restoreAgentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRestoreAgentInitialRetryDelay() != null) {
      restoreAgentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getRestoreAgentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RestoreAgentInitialRetryDelay set to "
                + this.clientProperties.getRestoreAgentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getRestoreAgentRetryDelayMultiplier() != null) {
      restoreAgentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getRestoreAgentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RestoreAgentRetryDelayMultiplier set to "
                + this.clientProperties.getRestoreAgentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getRestoreAgentMaxRetryDelay() != null) {
      restoreAgentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getRestoreAgentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RestoreAgentMaxRetryDelay set to "
                + this.clientProperties.getRestoreAgentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getRestoreAgentInitialRpcTimeout() != null) {
      restoreAgentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRestoreAgentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RestoreAgentInitialRpcTimeout set to "
                + this.clientProperties.getRestoreAgentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRestoreAgentRpcTimeoutMultiplier() != null) {
      restoreAgentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRestoreAgentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RestoreAgentRpcTimeoutMultiplier set to "
                + this.clientProperties.getRestoreAgentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRestoreAgentMaxRpcTimeout() != null) {
      restoreAgentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRestoreAgentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RestoreAgentMaxRpcTimeout set to "
                + this.clientProperties.getRestoreAgentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRestoreAgentTotalTimeout() != null) {
      restoreAgentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRestoreAgentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RestoreAgentTotalTimeout set to "
                + this.clientProperties.getRestoreAgentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .restoreAgentSettings()
        .setRetrySettings(restoreAgentRetrySettingBuilder.build());
    RetrySettings.Builder getValidationResultRetrySettingBuilder =
        clientSettingsBuilder.getValidationResultSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetValidationResultInitialRetryDelay() != null) {
      getValidationResultRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetValidationResultInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetValidationResultInitialRetryDelay set to "
                + this.clientProperties.getGetValidationResultInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetValidationResultRetryDelayMultiplier() != null) {
      getValidationResultRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetValidationResultRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetValidationResultRetryDelayMultiplier set to "
                + this.clientProperties.getGetValidationResultRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetValidationResultMaxRetryDelay() != null) {
      getValidationResultRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetValidationResultMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetValidationResultMaxRetryDelay set to "
                + this.clientProperties.getGetValidationResultMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetValidationResultInitialRpcTimeout() != null) {
      getValidationResultRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetValidationResultInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetValidationResultInitialRpcTimeout set to "
                + this.clientProperties.getGetValidationResultInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetValidationResultRpcTimeoutMultiplier() != null) {
      getValidationResultRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetValidationResultRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetValidationResultRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetValidationResultRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetValidationResultMaxRpcTimeout() != null) {
      getValidationResultRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetValidationResultMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetValidationResultMaxRpcTimeout set to "
                + this.clientProperties.getGetValidationResultMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetValidationResultTotalTimeout() != null) {
      getValidationResultRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetValidationResultTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetValidationResultTotalTimeout set to "
                + this.clientProperties.getGetValidationResultTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getValidationResultSettings()
        .setRetrySettings(getValidationResultRetrySettingBuilder.build());
    RetrySettings.Builder listLocationsRetrySettingBuilder =
        clientSettingsBuilder.listLocationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListLocationsInitialRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListLocationsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRetryDelay set to "
                + this.clientProperties.getListLocationsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsRetryDelayMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListLocationsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRetryDelayMultiplier set to "
                + this.clientProperties.getListLocationsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListLocationsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRetryDelay set to "
                + this.clientProperties.getListLocationsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsInitialRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListLocationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRpcTimeout set to "
                + this.clientProperties.getListLocationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsRpcTimeoutMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListLocationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRpcTimeout set to "
                + this.clientProperties.getListLocationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsTotalTimeout() != null) {
      listLocationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListLocationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsTotalTimeout set to "
                + this.clientProperties.getListLocationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listLocationsSettings()
        .setRetrySettings(listLocationsRetrySettingBuilder.build());
    RetrySettings.Builder getLocationRetrySettingBuilder =
        clientSettingsBuilder.getLocationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetLocationInitialRetryDelay() != null) {
      getLocationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetLocationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRetryDelay set to "
                + this.clientProperties.getGetLocationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationRetryDelayMultiplier() != null) {
      getLocationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetLocationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRetryDelayMultiplier set to "
                + this.clientProperties.getGetLocationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRetryDelay() != null) {
      getLocationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetLocationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRetryDelay set to "
                + this.clientProperties.getGetLocationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationInitialRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetLocationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRpcTimeout set to "
                + this.clientProperties.getGetLocationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationRpcTimeoutMultiplier() != null) {
      getLocationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetLocationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRpcTimeout set to "
                + this.clientProperties.getGetLocationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationTotalTimeout() != null) {
      getLocationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetLocationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationTotalTimeout set to " + this.clientProperties.getGetLocationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getLocationSettings()
        .setRetrySettings(getLocationRetrySettingBuilder.build());
    return AgentsClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-agents";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
