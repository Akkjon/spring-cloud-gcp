/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dialogflow.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dialogflow.v2.ConversationsClient;
import com.google.cloud.dialogflow.v2.ConversationsSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ConversationsClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ConversationsClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dialogflow.v2.spring.auto.conversations.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({ConversationsSpringProperties.class, GlobalProperties.class})
public class ConversationsSpringAutoConfiguration {
  private final ConversationsSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(ConversationsSpringAutoConfiguration.class);

  protected ConversationsSpringAutoConfiguration(
      ConversationsSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider conversationsCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Conversations-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultConversationsTransportChannelProvider() {
    return ConversationsSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ConversationsClient bean configured to use the default credentials provider
   * (obtained with conversationsCredentials()) and its default transport channel provider
   * (defaultConversationsTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in ConversationsSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public ConversationsClient conversationsClient(
      @Qualifier("conversationsCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultConversationsTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ConversationsSettings.Builder clientSettingsBuilder =
        ConversationsSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ConversationsSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          ConversationsSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createConversationRetrySettingBuilder =
        clientSettingsBuilder.createConversationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateConversationInitialRetryDelay() != null) {
      createConversationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateConversationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationInitialRetryDelay set to "
                + this.clientProperties.getCreateConversationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateConversationRetryDelayMultiplier() != null) {
      createConversationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateConversationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationRetryDelayMultiplier set to "
                + this.clientProperties.getCreateConversationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateConversationMaxRetryDelay() != null) {
      createConversationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateConversationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationMaxRetryDelay set to "
                + this.clientProperties.getCreateConversationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateConversationInitialRpcTimeout() != null) {
      createConversationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateConversationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationInitialRpcTimeout set to "
                + this.clientProperties.getCreateConversationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateConversationRpcTimeoutMultiplier() != null) {
      createConversationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateConversationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateConversationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateConversationMaxRpcTimeout() != null) {
      createConversationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateConversationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationMaxRpcTimeout set to "
                + this.clientProperties.getCreateConversationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateConversationTotalTimeout() != null) {
      createConversationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateConversationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationTotalTimeout set to "
                + this.clientProperties.getCreateConversationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createConversationSettings()
        .setRetrySettings(createConversationRetrySettingBuilder.build());
    RetrySettings.Builder listConversationsRetrySettingBuilder =
        clientSettingsBuilder.listConversationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListConversationsInitialRetryDelay() != null) {
      listConversationsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListConversationsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationsInitialRetryDelay set to "
                + this.clientProperties.getListConversationsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListConversationsRetryDelayMultiplier() != null) {
      listConversationsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListConversationsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationsRetryDelayMultiplier set to "
                + this.clientProperties.getListConversationsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListConversationsMaxRetryDelay() != null) {
      listConversationsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListConversationsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationsMaxRetryDelay set to "
                + this.clientProperties.getListConversationsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListConversationsInitialRpcTimeout() != null) {
      listConversationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListConversationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationsInitialRpcTimeout set to "
                + this.clientProperties.getListConversationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListConversationsRpcTimeoutMultiplier() != null) {
      listConversationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListConversationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListConversationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListConversationsMaxRpcTimeout() != null) {
      listConversationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListConversationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationsMaxRpcTimeout set to "
                + this.clientProperties.getListConversationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListConversationsTotalTimeout() != null) {
      listConversationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListConversationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationsTotalTimeout set to "
                + this.clientProperties.getListConversationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listConversationsSettings()
        .setRetrySettings(listConversationsRetrySettingBuilder.build());
    RetrySettings.Builder getConversationRetrySettingBuilder =
        clientSettingsBuilder.getConversationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetConversationInitialRetryDelay() != null) {
      getConversationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetConversationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationInitialRetryDelay set to "
                + this.clientProperties.getGetConversationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetConversationRetryDelayMultiplier() != null) {
      getConversationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetConversationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationRetryDelayMultiplier set to "
                + this.clientProperties.getGetConversationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetConversationMaxRetryDelay() != null) {
      getConversationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetConversationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationMaxRetryDelay set to "
                + this.clientProperties.getGetConversationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetConversationInitialRpcTimeout() != null) {
      getConversationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetConversationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationInitialRpcTimeout set to "
                + this.clientProperties.getGetConversationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetConversationRpcTimeoutMultiplier() != null) {
      getConversationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetConversationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetConversationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetConversationMaxRpcTimeout() != null) {
      getConversationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetConversationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationMaxRpcTimeout set to "
                + this.clientProperties.getGetConversationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetConversationTotalTimeout() != null) {
      getConversationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetConversationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationTotalTimeout set to "
                + this.clientProperties.getGetConversationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getConversationSettings()
        .setRetrySettings(getConversationRetrySettingBuilder.build());
    RetrySettings.Builder completeConversationRetrySettingBuilder =
        clientSettingsBuilder.completeConversationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCompleteConversationInitialRetryDelay() != null) {
      completeConversationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCompleteConversationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CompleteConversationInitialRetryDelay set to "
                + this.clientProperties.getCompleteConversationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCompleteConversationRetryDelayMultiplier() != null) {
      completeConversationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCompleteConversationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CompleteConversationRetryDelayMultiplier set to "
                + this.clientProperties.getCompleteConversationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCompleteConversationMaxRetryDelay() != null) {
      completeConversationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCompleteConversationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CompleteConversationMaxRetryDelay set to "
                + this.clientProperties.getCompleteConversationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCompleteConversationInitialRpcTimeout() != null) {
      completeConversationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCompleteConversationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CompleteConversationInitialRpcTimeout set to "
                + this.clientProperties.getCompleteConversationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCompleteConversationRpcTimeoutMultiplier() != null) {
      completeConversationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCompleteConversationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CompleteConversationRpcTimeoutMultiplier set to "
                + this.clientProperties.getCompleteConversationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCompleteConversationMaxRpcTimeout() != null) {
      completeConversationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCompleteConversationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CompleteConversationMaxRpcTimeout set to "
                + this.clientProperties.getCompleteConversationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCompleteConversationTotalTimeout() != null) {
      completeConversationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCompleteConversationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CompleteConversationTotalTimeout set to "
                + this.clientProperties.getCompleteConversationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .completeConversationSettings()
        .setRetrySettings(completeConversationRetrySettingBuilder.build());
    RetrySettings.Builder listMessagesRetrySettingBuilder =
        clientSettingsBuilder.listMessagesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListMessagesInitialRetryDelay() != null) {
      listMessagesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListMessagesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMessagesInitialRetryDelay set to "
                + this.clientProperties.getListMessagesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListMessagesRetryDelayMultiplier() != null) {
      listMessagesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListMessagesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMessagesRetryDelayMultiplier set to "
                + this.clientProperties.getListMessagesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListMessagesMaxRetryDelay() != null) {
      listMessagesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListMessagesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMessagesMaxRetryDelay set to "
                + this.clientProperties.getListMessagesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListMessagesInitialRpcTimeout() != null) {
      listMessagesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListMessagesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMessagesInitialRpcTimeout set to "
                + this.clientProperties.getListMessagesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListMessagesRpcTimeoutMultiplier() != null) {
      listMessagesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListMessagesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMessagesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListMessagesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListMessagesMaxRpcTimeout() != null) {
      listMessagesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListMessagesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMessagesMaxRpcTimeout set to "
                + this.clientProperties.getListMessagesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListMessagesTotalTimeout() != null) {
      listMessagesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListMessagesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMessagesTotalTimeout set to "
                + this.clientProperties.getListMessagesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listMessagesSettings()
        .setRetrySettings(listMessagesRetrySettingBuilder.build());
    RetrySettings.Builder listLocationsRetrySettingBuilder =
        clientSettingsBuilder.listLocationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListLocationsInitialRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListLocationsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRetryDelay set to "
                + this.clientProperties.getListLocationsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsRetryDelayMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListLocationsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRetryDelayMultiplier set to "
                + this.clientProperties.getListLocationsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListLocationsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRetryDelay set to "
                + this.clientProperties.getListLocationsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsInitialRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListLocationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRpcTimeout set to "
                + this.clientProperties.getListLocationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsRpcTimeoutMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListLocationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRpcTimeout set to "
                + this.clientProperties.getListLocationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsTotalTimeout() != null) {
      listLocationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListLocationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsTotalTimeout set to "
                + this.clientProperties.getListLocationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listLocationsSettings()
        .setRetrySettings(listLocationsRetrySettingBuilder.build());
    RetrySettings.Builder getLocationRetrySettingBuilder =
        clientSettingsBuilder.getLocationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetLocationInitialRetryDelay() != null) {
      getLocationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetLocationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRetryDelay set to "
                + this.clientProperties.getGetLocationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationRetryDelayMultiplier() != null) {
      getLocationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetLocationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRetryDelayMultiplier set to "
                + this.clientProperties.getGetLocationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRetryDelay() != null) {
      getLocationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetLocationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRetryDelay set to "
                + this.clientProperties.getGetLocationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationInitialRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetLocationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRpcTimeout set to "
                + this.clientProperties.getGetLocationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationRpcTimeoutMultiplier() != null) {
      getLocationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetLocationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRpcTimeout set to "
                + this.clientProperties.getGetLocationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationTotalTimeout() != null) {
      getLocationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetLocationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationTotalTimeout set to " + this.clientProperties.getGetLocationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getLocationSettings()
        .setRetrySettings(getLocationRetrySettingBuilder.build());
    return ConversationsClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-conversations";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
