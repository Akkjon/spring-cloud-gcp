/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dialogflow.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dialogflow.v2.EnvironmentsClient;
import com.google.cloud.dialogflow.v2.EnvironmentsSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link EnvironmentsClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(EnvironmentsClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dialogflow.v2.spring.auto.environments.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({EnvironmentsSpringProperties.class, GlobalProperties.class})
public class EnvironmentsSpringAutoConfiguration {
  private final EnvironmentsSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(EnvironmentsSpringAutoConfiguration.class);

  protected EnvironmentsSpringAutoConfiguration(
      EnvironmentsSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider environmentsCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Environments-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultEnvironmentsTransportChannelProvider() {
    return EnvironmentsSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a EnvironmentsClient bean configured to use the default credentials provider (obtained
   * with environmentsCredentials()) and its default transport channel provider
   * (defaultEnvironmentsTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in EnvironmentsSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public EnvironmentsClient environmentsClient(
      @Qualifier("environmentsCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultEnvironmentsTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    EnvironmentsSettings.Builder clientSettingsBuilder =
        EnvironmentsSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          EnvironmentsSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          EnvironmentsSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listEnvironmentsRetrySettingBuilder =
        clientSettingsBuilder.listEnvironmentsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListEnvironmentsInitialRetryDelay() != null) {
      listEnvironmentsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListEnvironmentsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEnvironmentsInitialRetryDelay set to "
                + this.clientProperties.getListEnvironmentsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListEnvironmentsRetryDelayMultiplier() != null) {
      listEnvironmentsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListEnvironmentsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEnvironmentsRetryDelayMultiplier set to "
                + this.clientProperties.getListEnvironmentsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListEnvironmentsMaxRetryDelay() != null) {
      listEnvironmentsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListEnvironmentsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEnvironmentsMaxRetryDelay set to "
                + this.clientProperties.getListEnvironmentsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListEnvironmentsInitialRpcTimeout() != null) {
      listEnvironmentsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListEnvironmentsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEnvironmentsInitialRpcTimeout set to "
                + this.clientProperties.getListEnvironmentsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListEnvironmentsRpcTimeoutMultiplier() != null) {
      listEnvironmentsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListEnvironmentsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEnvironmentsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListEnvironmentsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListEnvironmentsMaxRpcTimeout() != null) {
      listEnvironmentsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListEnvironmentsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEnvironmentsMaxRpcTimeout set to "
                + this.clientProperties.getListEnvironmentsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListEnvironmentsTotalTimeout() != null) {
      listEnvironmentsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListEnvironmentsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEnvironmentsTotalTimeout set to "
                + this.clientProperties.getListEnvironmentsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listEnvironmentsSettings()
        .setRetrySettings(listEnvironmentsRetrySettingBuilder.build());
    RetrySettings.Builder getEnvironmentRetrySettingBuilder =
        clientSettingsBuilder.getEnvironmentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetEnvironmentInitialRetryDelay() != null) {
      getEnvironmentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetEnvironmentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentInitialRetryDelay set to "
                + this.clientProperties.getGetEnvironmentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetEnvironmentRetryDelayMultiplier() != null) {
      getEnvironmentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetEnvironmentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentRetryDelayMultiplier set to "
                + this.clientProperties.getGetEnvironmentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetEnvironmentMaxRetryDelay() != null) {
      getEnvironmentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetEnvironmentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentMaxRetryDelay set to "
                + this.clientProperties.getGetEnvironmentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetEnvironmentInitialRpcTimeout() != null) {
      getEnvironmentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetEnvironmentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentInitialRpcTimeout set to "
                + this.clientProperties.getGetEnvironmentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEnvironmentRpcTimeoutMultiplier() != null) {
      getEnvironmentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetEnvironmentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetEnvironmentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetEnvironmentMaxRpcTimeout() != null) {
      getEnvironmentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetEnvironmentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentMaxRpcTimeout set to "
                + this.clientProperties.getGetEnvironmentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEnvironmentTotalTimeout() != null) {
      getEnvironmentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetEnvironmentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentTotalTimeout set to "
                + this.clientProperties.getGetEnvironmentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getEnvironmentSettings()
        .setRetrySettings(getEnvironmentRetrySettingBuilder.build());
    RetrySettings.Builder createEnvironmentRetrySettingBuilder =
        clientSettingsBuilder.createEnvironmentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateEnvironmentInitialRetryDelay() != null) {
      createEnvironmentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateEnvironmentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEnvironmentInitialRetryDelay set to "
                + this.clientProperties.getCreateEnvironmentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateEnvironmentRetryDelayMultiplier() != null) {
      createEnvironmentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateEnvironmentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEnvironmentRetryDelayMultiplier set to "
                + this.clientProperties.getCreateEnvironmentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateEnvironmentMaxRetryDelay() != null) {
      createEnvironmentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateEnvironmentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEnvironmentMaxRetryDelay set to "
                + this.clientProperties.getCreateEnvironmentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateEnvironmentInitialRpcTimeout() != null) {
      createEnvironmentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateEnvironmentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEnvironmentInitialRpcTimeout set to "
                + this.clientProperties.getCreateEnvironmentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateEnvironmentRpcTimeoutMultiplier() != null) {
      createEnvironmentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateEnvironmentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEnvironmentRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateEnvironmentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateEnvironmentMaxRpcTimeout() != null) {
      createEnvironmentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateEnvironmentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEnvironmentMaxRpcTimeout set to "
                + this.clientProperties.getCreateEnvironmentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateEnvironmentTotalTimeout() != null) {
      createEnvironmentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateEnvironmentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEnvironmentTotalTimeout set to "
                + this.clientProperties.getCreateEnvironmentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createEnvironmentSettings()
        .setRetrySettings(createEnvironmentRetrySettingBuilder.build());
    RetrySettings.Builder updateEnvironmentRetrySettingBuilder =
        clientSettingsBuilder.updateEnvironmentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateEnvironmentInitialRetryDelay() != null) {
      updateEnvironmentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateEnvironmentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEnvironmentInitialRetryDelay set to "
                + this.clientProperties.getUpdateEnvironmentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateEnvironmentRetryDelayMultiplier() != null) {
      updateEnvironmentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateEnvironmentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEnvironmentRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateEnvironmentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateEnvironmentMaxRetryDelay() != null) {
      updateEnvironmentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateEnvironmentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEnvironmentMaxRetryDelay set to "
                + this.clientProperties.getUpdateEnvironmentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateEnvironmentInitialRpcTimeout() != null) {
      updateEnvironmentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateEnvironmentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEnvironmentInitialRpcTimeout set to "
                + this.clientProperties.getUpdateEnvironmentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateEnvironmentRpcTimeoutMultiplier() != null) {
      updateEnvironmentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateEnvironmentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEnvironmentRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateEnvironmentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateEnvironmentMaxRpcTimeout() != null) {
      updateEnvironmentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateEnvironmentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEnvironmentMaxRpcTimeout set to "
                + this.clientProperties.getUpdateEnvironmentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateEnvironmentTotalTimeout() != null) {
      updateEnvironmentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateEnvironmentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEnvironmentTotalTimeout set to "
                + this.clientProperties.getUpdateEnvironmentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateEnvironmentSettings()
        .setRetrySettings(updateEnvironmentRetrySettingBuilder.build());
    RetrySettings.Builder deleteEnvironmentRetrySettingBuilder =
        clientSettingsBuilder.deleteEnvironmentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteEnvironmentInitialRetryDelay() != null) {
      deleteEnvironmentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteEnvironmentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEnvironmentInitialRetryDelay set to "
                + this.clientProperties.getDeleteEnvironmentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteEnvironmentRetryDelayMultiplier() != null) {
      deleteEnvironmentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteEnvironmentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEnvironmentRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteEnvironmentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteEnvironmentMaxRetryDelay() != null) {
      deleteEnvironmentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteEnvironmentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEnvironmentMaxRetryDelay set to "
                + this.clientProperties.getDeleteEnvironmentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteEnvironmentInitialRpcTimeout() != null) {
      deleteEnvironmentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteEnvironmentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEnvironmentInitialRpcTimeout set to "
                + this.clientProperties.getDeleteEnvironmentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteEnvironmentRpcTimeoutMultiplier() != null) {
      deleteEnvironmentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteEnvironmentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEnvironmentRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteEnvironmentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteEnvironmentMaxRpcTimeout() != null) {
      deleteEnvironmentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteEnvironmentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEnvironmentMaxRpcTimeout set to "
                + this.clientProperties.getDeleteEnvironmentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteEnvironmentTotalTimeout() != null) {
      deleteEnvironmentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteEnvironmentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEnvironmentTotalTimeout set to "
                + this.clientProperties.getDeleteEnvironmentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteEnvironmentSettings()
        .setRetrySettings(deleteEnvironmentRetrySettingBuilder.build());
    RetrySettings.Builder getEnvironmentHistoryRetrySettingBuilder =
        clientSettingsBuilder.getEnvironmentHistorySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetEnvironmentHistoryInitialRetryDelay() != null) {
      getEnvironmentHistoryRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetEnvironmentHistoryInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentHistoryInitialRetryDelay set to "
                + this.clientProperties.getGetEnvironmentHistoryInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetEnvironmentHistoryRetryDelayMultiplier() != null) {
      getEnvironmentHistoryRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetEnvironmentHistoryRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentHistoryRetryDelayMultiplier set to "
                + this.clientProperties.getGetEnvironmentHistoryRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetEnvironmentHistoryMaxRetryDelay() != null) {
      getEnvironmentHistoryRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetEnvironmentHistoryMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentHistoryMaxRetryDelay set to "
                + this.clientProperties.getGetEnvironmentHistoryMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetEnvironmentHistoryInitialRpcTimeout() != null) {
      getEnvironmentHistoryRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetEnvironmentHistoryInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentHistoryInitialRpcTimeout set to "
                + this.clientProperties.getGetEnvironmentHistoryInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEnvironmentHistoryRpcTimeoutMultiplier() != null) {
      getEnvironmentHistoryRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetEnvironmentHistoryRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentHistoryRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetEnvironmentHistoryRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetEnvironmentHistoryMaxRpcTimeout() != null) {
      getEnvironmentHistoryRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetEnvironmentHistoryMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentHistoryMaxRpcTimeout set to "
                + this.clientProperties.getGetEnvironmentHistoryMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEnvironmentHistoryTotalTimeout() != null) {
      getEnvironmentHistoryRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetEnvironmentHistoryTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentHistoryTotalTimeout set to "
                + this.clientProperties.getGetEnvironmentHistoryTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getEnvironmentHistorySettings()
        .setRetrySettings(getEnvironmentHistoryRetrySettingBuilder.build());
    RetrySettings.Builder listLocationsRetrySettingBuilder =
        clientSettingsBuilder.listLocationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListLocationsInitialRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListLocationsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRetryDelay set to "
                + this.clientProperties.getListLocationsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsRetryDelayMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListLocationsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRetryDelayMultiplier set to "
                + this.clientProperties.getListLocationsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListLocationsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRetryDelay set to "
                + this.clientProperties.getListLocationsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsInitialRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListLocationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRpcTimeout set to "
                + this.clientProperties.getListLocationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsRpcTimeoutMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListLocationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRpcTimeout set to "
                + this.clientProperties.getListLocationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsTotalTimeout() != null) {
      listLocationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListLocationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsTotalTimeout set to "
                + this.clientProperties.getListLocationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listLocationsSettings()
        .setRetrySettings(listLocationsRetrySettingBuilder.build());
    RetrySettings.Builder getLocationRetrySettingBuilder =
        clientSettingsBuilder.getLocationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetLocationInitialRetryDelay() != null) {
      getLocationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetLocationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRetryDelay set to "
                + this.clientProperties.getGetLocationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationRetryDelayMultiplier() != null) {
      getLocationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetLocationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRetryDelayMultiplier set to "
                + this.clientProperties.getGetLocationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRetryDelay() != null) {
      getLocationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetLocationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRetryDelay set to "
                + this.clientProperties.getGetLocationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationInitialRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetLocationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRpcTimeout set to "
                + this.clientProperties.getGetLocationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationRpcTimeoutMultiplier() != null) {
      getLocationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetLocationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRpcTimeout set to "
                + this.clientProperties.getGetLocationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationTotalTimeout() != null) {
      getLocationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetLocationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationTotalTimeout set to " + this.clientProperties.getGetLocationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getLocationSettings()
        .setRetrySettings(getLocationRetrySettingBuilder.build());
    return EnvironmentsClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-environments";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
