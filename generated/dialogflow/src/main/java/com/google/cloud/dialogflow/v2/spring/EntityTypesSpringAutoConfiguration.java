/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dialogflow.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dialogflow.v2.EntityTypesClient;
import com.google.cloud.dialogflow.v2.EntityTypesSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link EntityTypesClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(EntityTypesClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dialogflow.v2.spring.auto.entity-types.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({EntityTypesSpringProperties.class, GlobalProperties.class})
public class EntityTypesSpringAutoConfiguration {
  private final EntityTypesSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(EntityTypesSpringAutoConfiguration.class);

  protected EntityTypesSpringAutoConfiguration(
      EntityTypesSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider entityTypesCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from EntityTypes-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultEntityTypesTransportChannelProvider() {
    return EntityTypesSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a EntityTypesClient bean configured to use the default credentials provider (obtained
   * with entityTypesCredentials()) and its default transport channel provider
   * (defaultEntityTypesTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in EntityTypesSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public EntityTypesClient entityTypesClient(
      @Qualifier("entityTypesCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultEntityTypesTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    EntityTypesSettings.Builder clientSettingsBuilder =
        EntityTypesSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          EntityTypesSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          EntityTypesSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listEntityTypesRetrySettingBuilder =
        clientSettingsBuilder.listEntityTypesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListEntityTypesInitialRetryDelay() != null) {
      listEntityTypesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListEntityTypesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntityTypesInitialRetryDelay set to "
                + this.clientProperties.getListEntityTypesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListEntityTypesRetryDelayMultiplier() != null) {
      listEntityTypesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListEntityTypesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntityTypesRetryDelayMultiplier set to "
                + this.clientProperties.getListEntityTypesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListEntityTypesMaxRetryDelay() != null) {
      listEntityTypesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListEntityTypesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntityTypesMaxRetryDelay set to "
                + this.clientProperties.getListEntityTypesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListEntityTypesInitialRpcTimeout() != null) {
      listEntityTypesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListEntityTypesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntityTypesInitialRpcTimeout set to "
                + this.clientProperties.getListEntityTypesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListEntityTypesRpcTimeoutMultiplier() != null) {
      listEntityTypesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListEntityTypesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntityTypesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListEntityTypesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListEntityTypesMaxRpcTimeout() != null) {
      listEntityTypesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListEntityTypesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntityTypesMaxRpcTimeout set to "
                + this.clientProperties.getListEntityTypesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListEntityTypesTotalTimeout() != null) {
      listEntityTypesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListEntityTypesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEntityTypesTotalTimeout set to "
                + this.clientProperties.getListEntityTypesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listEntityTypesSettings()
        .setRetrySettings(listEntityTypesRetrySettingBuilder.build());
    RetrySettings.Builder getEntityTypeRetrySettingBuilder =
        clientSettingsBuilder.getEntityTypeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetEntityTypeInitialRetryDelay() != null) {
      getEntityTypeRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetEntityTypeInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntityTypeInitialRetryDelay set to "
                + this.clientProperties.getGetEntityTypeInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetEntityTypeRetryDelayMultiplier() != null) {
      getEntityTypeRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetEntityTypeRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntityTypeRetryDelayMultiplier set to "
                + this.clientProperties.getGetEntityTypeRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetEntityTypeMaxRetryDelay() != null) {
      getEntityTypeRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetEntityTypeMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntityTypeMaxRetryDelay set to "
                + this.clientProperties.getGetEntityTypeMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetEntityTypeInitialRpcTimeout() != null) {
      getEntityTypeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetEntityTypeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntityTypeInitialRpcTimeout set to "
                + this.clientProperties.getGetEntityTypeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEntityTypeRpcTimeoutMultiplier() != null) {
      getEntityTypeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetEntityTypeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntityTypeRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetEntityTypeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetEntityTypeMaxRpcTimeout() != null) {
      getEntityTypeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetEntityTypeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntityTypeMaxRpcTimeout set to "
                + this.clientProperties.getGetEntityTypeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEntityTypeTotalTimeout() != null) {
      getEntityTypeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetEntityTypeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEntityTypeTotalTimeout set to "
                + this.clientProperties.getGetEntityTypeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getEntityTypeSettings()
        .setRetrySettings(getEntityTypeRetrySettingBuilder.build());
    RetrySettings.Builder createEntityTypeRetrySettingBuilder =
        clientSettingsBuilder.createEntityTypeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateEntityTypeInitialRetryDelay() != null) {
      createEntityTypeRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateEntityTypeInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEntityTypeInitialRetryDelay set to "
                + this.clientProperties.getCreateEntityTypeInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateEntityTypeRetryDelayMultiplier() != null) {
      createEntityTypeRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateEntityTypeRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEntityTypeRetryDelayMultiplier set to "
                + this.clientProperties.getCreateEntityTypeRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateEntityTypeMaxRetryDelay() != null) {
      createEntityTypeRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateEntityTypeMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEntityTypeMaxRetryDelay set to "
                + this.clientProperties.getCreateEntityTypeMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateEntityTypeInitialRpcTimeout() != null) {
      createEntityTypeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateEntityTypeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEntityTypeInitialRpcTimeout set to "
                + this.clientProperties.getCreateEntityTypeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateEntityTypeRpcTimeoutMultiplier() != null) {
      createEntityTypeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateEntityTypeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEntityTypeRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateEntityTypeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateEntityTypeMaxRpcTimeout() != null) {
      createEntityTypeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateEntityTypeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEntityTypeMaxRpcTimeout set to "
                + this.clientProperties.getCreateEntityTypeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateEntityTypeTotalTimeout() != null) {
      createEntityTypeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateEntityTypeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEntityTypeTotalTimeout set to "
                + this.clientProperties.getCreateEntityTypeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createEntityTypeSettings()
        .setRetrySettings(createEntityTypeRetrySettingBuilder.build());
    RetrySettings.Builder updateEntityTypeRetrySettingBuilder =
        clientSettingsBuilder.updateEntityTypeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateEntityTypeInitialRetryDelay() != null) {
      updateEntityTypeRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateEntityTypeInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEntityTypeInitialRetryDelay set to "
                + this.clientProperties.getUpdateEntityTypeInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateEntityTypeRetryDelayMultiplier() != null) {
      updateEntityTypeRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateEntityTypeRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEntityTypeRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateEntityTypeRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateEntityTypeMaxRetryDelay() != null) {
      updateEntityTypeRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateEntityTypeMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEntityTypeMaxRetryDelay set to "
                + this.clientProperties.getUpdateEntityTypeMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateEntityTypeInitialRpcTimeout() != null) {
      updateEntityTypeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateEntityTypeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEntityTypeInitialRpcTimeout set to "
                + this.clientProperties.getUpdateEntityTypeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateEntityTypeRpcTimeoutMultiplier() != null) {
      updateEntityTypeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateEntityTypeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEntityTypeRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateEntityTypeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateEntityTypeMaxRpcTimeout() != null) {
      updateEntityTypeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateEntityTypeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEntityTypeMaxRpcTimeout set to "
                + this.clientProperties.getUpdateEntityTypeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateEntityTypeTotalTimeout() != null) {
      updateEntityTypeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateEntityTypeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateEntityTypeTotalTimeout set to "
                + this.clientProperties.getUpdateEntityTypeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateEntityTypeSettings()
        .setRetrySettings(updateEntityTypeRetrySettingBuilder.build());
    RetrySettings.Builder deleteEntityTypeRetrySettingBuilder =
        clientSettingsBuilder.deleteEntityTypeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteEntityTypeInitialRetryDelay() != null) {
      deleteEntityTypeRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteEntityTypeInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEntityTypeInitialRetryDelay set to "
                + this.clientProperties.getDeleteEntityTypeInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteEntityTypeRetryDelayMultiplier() != null) {
      deleteEntityTypeRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteEntityTypeRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEntityTypeRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteEntityTypeRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteEntityTypeMaxRetryDelay() != null) {
      deleteEntityTypeRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteEntityTypeMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEntityTypeMaxRetryDelay set to "
                + this.clientProperties.getDeleteEntityTypeMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteEntityTypeInitialRpcTimeout() != null) {
      deleteEntityTypeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteEntityTypeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEntityTypeInitialRpcTimeout set to "
                + this.clientProperties.getDeleteEntityTypeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteEntityTypeRpcTimeoutMultiplier() != null) {
      deleteEntityTypeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteEntityTypeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEntityTypeRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteEntityTypeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteEntityTypeMaxRpcTimeout() != null) {
      deleteEntityTypeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteEntityTypeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEntityTypeMaxRpcTimeout set to "
                + this.clientProperties.getDeleteEntityTypeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteEntityTypeTotalTimeout() != null) {
      deleteEntityTypeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteEntityTypeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEntityTypeTotalTimeout set to "
                + this.clientProperties.getDeleteEntityTypeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteEntityTypeSettings()
        .setRetrySettings(deleteEntityTypeRetrySettingBuilder.build());
    RetrySettings.Builder batchUpdateEntityTypesRetrySettingBuilder =
        clientSettingsBuilder.batchUpdateEntityTypesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getBatchUpdateEntityTypesInitialRetryDelay() != null) {
      batchUpdateEntityTypesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getBatchUpdateEntityTypesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchUpdateEntityTypesInitialRetryDelay set to "
                + this.clientProperties.getBatchUpdateEntityTypesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getBatchUpdateEntityTypesRetryDelayMultiplier() != null) {
      batchUpdateEntityTypesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getBatchUpdateEntityTypesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchUpdateEntityTypesRetryDelayMultiplier set to "
                + this.clientProperties.getBatchUpdateEntityTypesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getBatchUpdateEntityTypesMaxRetryDelay() != null) {
      batchUpdateEntityTypesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getBatchUpdateEntityTypesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchUpdateEntityTypesMaxRetryDelay set to "
                + this.clientProperties.getBatchUpdateEntityTypesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getBatchUpdateEntityTypesInitialRpcTimeout() != null) {
      batchUpdateEntityTypesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getBatchUpdateEntityTypesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchUpdateEntityTypesInitialRpcTimeout set to "
                + this.clientProperties.getBatchUpdateEntityTypesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getBatchUpdateEntityTypesRpcTimeoutMultiplier() != null) {
      batchUpdateEntityTypesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getBatchUpdateEntityTypesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchUpdateEntityTypesRpcTimeoutMultiplier set to "
                + this.clientProperties.getBatchUpdateEntityTypesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getBatchUpdateEntityTypesMaxRpcTimeout() != null) {
      batchUpdateEntityTypesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getBatchUpdateEntityTypesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchUpdateEntityTypesMaxRpcTimeout set to "
                + this.clientProperties.getBatchUpdateEntityTypesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getBatchUpdateEntityTypesTotalTimeout() != null) {
      batchUpdateEntityTypesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getBatchUpdateEntityTypesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchUpdateEntityTypesTotalTimeout set to "
                + this.clientProperties.getBatchUpdateEntityTypesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .batchUpdateEntityTypesSettings()
        .setRetrySettings(batchUpdateEntityTypesRetrySettingBuilder.build());
    RetrySettings.Builder batchDeleteEntityTypesRetrySettingBuilder =
        clientSettingsBuilder.batchDeleteEntityTypesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getBatchDeleteEntityTypesInitialRetryDelay() != null) {
      batchDeleteEntityTypesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getBatchDeleteEntityTypesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchDeleteEntityTypesInitialRetryDelay set to "
                + this.clientProperties.getBatchDeleteEntityTypesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getBatchDeleteEntityTypesRetryDelayMultiplier() != null) {
      batchDeleteEntityTypesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getBatchDeleteEntityTypesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchDeleteEntityTypesRetryDelayMultiplier set to "
                + this.clientProperties.getBatchDeleteEntityTypesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getBatchDeleteEntityTypesMaxRetryDelay() != null) {
      batchDeleteEntityTypesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getBatchDeleteEntityTypesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchDeleteEntityTypesMaxRetryDelay set to "
                + this.clientProperties.getBatchDeleteEntityTypesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getBatchDeleteEntityTypesInitialRpcTimeout() != null) {
      batchDeleteEntityTypesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getBatchDeleteEntityTypesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchDeleteEntityTypesInitialRpcTimeout set to "
                + this.clientProperties.getBatchDeleteEntityTypesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getBatchDeleteEntityTypesRpcTimeoutMultiplier() != null) {
      batchDeleteEntityTypesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getBatchDeleteEntityTypesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchDeleteEntityTypesRpcTimeoutMultiplier set to "
                + this.clientProperties.getBatchDeleteEntityTypesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getBatchDeleteEntityTypesMaxRpcTimeout() != null) {
      batchDeleteEntityTypesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getBatchDeleteEntityTypesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchDeleteEntityTypesMaxRpcTimeout set to "
                + this.clientProperties.getBatchDeleteEntityTypesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getBatchDeleteEntityTypesTotalTimeout() != null) {
      batchDeleteEntityTypesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getBatchDeleteEntityTypesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchDeleteEntityTypesTotalTimeout set to "
                + this.clientProperties.getBatchDeleteEntityTypesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .batchDeleteEntityTypesSettings()
        .setRetrySettings(batchDeleteEntityTypesRetrySettingBuilder.build());
    RetrySettings.Builder batchCreateEntitiesRetrySettingBuilder =
        clientSettingsBuilder.batchCreateEntitiesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getBatchCreateEntitiesInitialRetryDelay() != null) {
      batchCreateEntitiesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getBatchCreateEntitiesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchCreateEntitiesInitialRetryDelay set to "
                + this.clientProperties.getBatchCreateEntitiesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getBatchCreateEntitiesRetryDelayMultiplier() != null) {
      batchCreateEntitiesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getBatchCreateEntitiesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchCreateEntitiesRetryDelayMultiplier set to "
                + this.clientProperties.getBatchCreateEntitiesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getBatchCreateEntitiesMaxRetryDelay() != null) {
      batchCreateEntitiesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getBatchCreateEntitiesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchCreateEntitiesMaxRetryDelay set to "
                + this.clientProperties.getBatchCreateEntitiesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getBatchCreateEntitiesInitialRpcTimeout() != null) {
      batchCreateEntitiesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getBatchCreateEntitiesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchCreateEntitiesInitialRpcTimeout set to "
                + this.clientProperties.getBatchCreateEntitiesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getBatchCreateEntitiesRpcTimeoutMultiplier() != null) {
      batchCreateEntitiesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getBatchCreateEntitiesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchCreateEntitiesRpcTimeoutMultiplier set to "
                + this.clientProperties.getBatchCreateEntitiesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getBatchCreateEntitiesMaxRpcTimeout() != null) {
      batchCreateEntitiesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getBatchCreateEntitiesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchCreateEntitiesMaxRpcTimeout set to "
                + this.clientProperties.getBatchCreateEntitiesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getBatchCreateEntitiesTotalTimeout() != null) {
      batchCreateEntitiesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getBatchCreateEntitiesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchCreateEntitiesTotalTimeout set to "
                + this.clientProperties.getBatchCreateEntitiesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .batchCreateEntitiesSettings()
        .setRetrySettings(batchCreateEntitiesRetrySettingBuilder.build());
    RetrySettings.Builder batchUpdateEntitiesRetrySettingBuilder =
        clientSettingsBuilder.batchUpdateEntitiesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getBatchUpdateEntitiesInitialRetryDelay() != null) {
      batchUpdateEntitiesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getBatchUpdateEntitiesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchUpdateEntitiesInitialRetryDelay set to "
                + this.clientProperties.getBatchUpdateEntitiesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getBatchUpdateEntitiesRetryDelayMultiplier() != null) {
      batchUpdateEntitiesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getBatchUpdateEntitiesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchUpdateEntitiesRetryDelayMultiplier set to "
                + this.clientProperties.getBatchUpdateEntitiesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getBatchUpdateEntitiesMaxRetryDelay() != null) {
      batchUpdateEntitiesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getBatchUpdateEntitiesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchUpdateEntitiesMaxRetryDelay set to "
                + this.clientProperties.getBatchUpdateEntitiesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getBatchUpdateEntitiesInitialRpcTimeout() != null) {
      batchUpdateEntitiesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getBatchUpdateEntitiesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchUpdateEntitiesInitialRpcTimeout set to "
                + this.clientProperties.getBatchUpdateEntitiesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getBatchUpdateEntitiesRpcTimeoutMultiplier() != null) {
      batchUpdateEntitiesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getBatchUpdateEntitiesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchUpdateEntitiesRpcTimeoutMultiplier set to "
                + this.clientProperties.getBatchUpdateEntitiesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getBatchUpdateEntitiesMaxRpcTimeout() != null) {
      batchUpdateEntitiesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getBatchUpdateEntitiesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchUpdateEntitiesMaxRpcTimeout set to "
                + this.clientProperties.getBatchUpdateEntitiesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getBatchUpdateEntitiesTotalTimeout() != null) {
      batchUpdateEntitiesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getBatchUpdateEntitiesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchUpdateEntitiesTotalTimeout set to "
                + this.clientProperties.getBatchUpdateEntitiesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .batchUpdateEntitiesSettings()
        .setRetrySettings(batchUpdateEntitiesRetrySettingBuilder.build());
    RetrySettings.Builder batchDeleteEntitiesRetrySettingBuilder =
        clientSettingsBuilder.batchDeleteEntitiesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getBatchDeleteEntitiesInitialRetryDelay() != null) {
      batchDeleteEntitiesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getBatchDeleteEntitiesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchDeleteEntitiesInitialRetryDelay set to "
                + this.clientProperties.getBatchDeleteEntitiesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getBatchDeleteEntitiesRetryDelayMultiplier() != null) {
      batchDeleteEntitiesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getBatchDeleteEntitiesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchDeleteEntitiesRetryDelayMultiplier set to "
                + this.clientProperties.getBatchDeleteEntitiesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getBatchDeleteEntitiesMaxRetryDelay() != null) {
      batchDeleteEntitiesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getBatchDeleteEntitiesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchDeleteEntitiesMaxRetryDelay set to "
                + this.clientProperties.getBatchDeleteEntitiesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getBatchDeleteEntitiesInitialRpcTimeout() != null) {
      batchDeleteEntitiesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getBatchDeleteEntitiesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchDeleteEntitiesInitialRpcTimeout set to "
                + this.clientProperties.getBatchDeleteEntitiesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getBatchDeleteEntitiesRpcTimeoutMultiplier() != null) {
      batchDeleteEntitiesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getBatchDeleteEntitiesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchDeleteEntitiesRpcTimeoutMultiplier set to "
                + this.clientProperties.getBatchDeleteEntitiesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getBatchDeleteEntitiesMaxRpcTimeout() != null) {
      batchDeleteEntitiesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getBatchDeleteEntitiesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchDeleteEntitiesMaxRpcTimeout set to "
                + this.clientProperties.getBatchDeleteEntitiesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getBatchDeleteEntitiesTotalTimeout() != null) {
      batchDeleteEntitiesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getBatchDeleteEntitiesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchDeleteEntitiesTotalTimeout set to "
                + this.clientProperties.getBatchDeleteEntitiesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .batchDeleteEntitiesSettings()
        .setRetrySettings(batchDeleteEntitiesRetrySettingBuilder.build());
    RetrySettings.Builder listLocationsRetrySettingBuilder =
        clientSettingsBuilder.listLocationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListLocationsInitialRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListLocationsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRetryDelay set to "
                + this.clientProperties.getListLocationsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsRetryDelayMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListLocationsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRetryDelayMultiplier set to "
                + this.clientProperties.getListLocationsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListLocationsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRetryDelay set to "
                + this.clientProperties.getListLocationsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsInitialRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListLocationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRpcTimeout set to "
                + this.clientProperties.getListLocationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsRpcTimeoutMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListLocationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRpcTimeout set to "
                + this.clientProperties.getListLocationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsTotalTimeout() != null) {
      listLocationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListLocationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsTotalTimeout set to "
                + this.clientProperties.getListLocationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listLocationsSettings()
        .setRetrySettings(listLocationsRetrySettingBuilder.build());
    RetrySettings.Builder getLocationRetrySettingBuilder =
        clientSettingsBuilder.getLocationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetLocationInitialRetryDelay() != null) {
      getLocationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetLocationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRetryDelay set to "
                + this.clientProperties.getGetLocationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationRetryDelayMultiplier() != null) {
      getLocationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetLocationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRetryDelayMultiplier set to "
                + this.clientProperties.getGetLocationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRetryDelay() != null) {
      getLocationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetLocationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRetryDelay set to "
                + this.clientProperties.getGetLocationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationInitialRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetLocationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRpcTimeout set to "
                + this.clientProperties.getGetLocationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationRpcTimeoutMultiplier() != null) {
      getLocationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetLocationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRpcTimeout set to "
                + this.clientProperties.getGetLocationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationTotalTimeout() != null) {
      getLocationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetLocationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationTotalTimeout set to " + this.clientProperties.getGetLocationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getLocationSettings()
        .setRetrySettings(getLocationRetrySettingBuilder.build());
    return EntityTypesClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-entity-types";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
