/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dialogflow.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dialogflow.v2.ConversationModelsClient;
import com.google.cloud.dialogflow.v2.ConversationModelsSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ConversationModelsClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ConversationModelsClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dialogflow.v2.spring.auto.conversation-models.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({ConversationModelsSpringProperties.class, GlobalProperties.class})
public class ConversationModelsSpringAutoConfiguration {
  private final ConversationModelsSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(ConversationModelsSpringAutoConfiguration.class);

  protected ConversationModelsSpringAutoConfiguration(
      ConversationModelsSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider conversationModelsCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from ConversationModels-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultConversationModelsTransportChannelProvider() {
    return ConversationModelsSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ConversationModelsClient bean configured to use the default credentials provider
   * (obtained with conversationModelsCredentials()) and its default transport channel provider
   * (defaultConversationModelsTransportChannelProvider()). It also configures the quota project ID
   * if provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in ConversationModelsSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public ConversationModelsClient conversationModelsClient(
      @Qualifier("conversationModelsCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultConversationModelsTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ConversationModelsSettings.Builder clientSettingsBuilder =
        ConversationModelsSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ConversationModelsSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          ConversationModelsSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createConversationModelRetrySettingBuilder =
        clientSettingsBuilder.createConversationModelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateConversationModelInitialRetryDelay() != null) {
      createConversationModelRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateConversationModelInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationModelInitialRetryDelay set to "
                + this.clientProperties.getCreateConversationModelInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateConversationModelRetryDelayMultiplier() != null) {
      createConversationModelRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateConversationModelRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationModelRetryDelayMultiplier set to "
                + this.clientProperties.getCreateConversationModelRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateConversationModelMaxRetryDelay() != null) {
      createConversationModelRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateConversationModelMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationModelMaxRetryDelay set to "
                + this.clientProperties.getCreateConversationModelMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateConversationModelInitialRpcTimeout() != null) {
      createConversationModelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateConversationModelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationModelInitialRpcTimeout set to "
                + this.clientProperties.getCreateConversationModelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateConversationModelRpcTimeoutMultiplier() != null) {
      createConversationModelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateConversationModelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationModelRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateConversationModelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateConversationModelMaxRpcTimeout() != null) {
      createConversationModelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateConversationModelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationModelMaxRpcTimeout set to "
                + this.clientProperties.getCreateConversationModelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateConversationModelTotalTimeout() != null) {
      createConversationModelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateConversationModelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationModelTotalTimeout set to "
                + this.clientProperties.getCreateConversationModelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createConversationModelSettings()
        .setRetrySettings(createConversationModelRetrySettingBuilder.build());
    RetrySettings.Builder getConversationModelRetrySettingBuilder =
        clientSettingsBuilder.getConversationModelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetConversationModelInitialRetryDelay() != null) {
      getConversationModelRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetConversationModelInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationModelInitialRetryDelay set to "
                + this.clientProperties.getGetConversationModelInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetConversationModelRetryDelayMultiplier() != null) {
      getConversationModelRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetConversationModelRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationModelRetryDelayMultiplier set to "
                + this.clientProperties.getGetConversationModelRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetConversationModelMaxRetryDelay() != null) {
      getConversationModelRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetConversationModelMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationModelMaxRetryDelay set to "
                + this.clientProperties.getGetConversationModelMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetConversationModelInitialRpcTimeout() != null) {
      getConversationModelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetConversationModelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationModelInitialRpcTimeout set to "
                + this.clientProperties.getGetConversationModelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetConversationModelRpcTimeoutMultiplier() != null) {
      getConversationModelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetConversationModelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationModelRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetConversationModelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetConversationModelMaxRpcTimeout() != null) {
      getConversationModelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetConversationModelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationModelMaxRpcTimeout set to "
                + this.clientProperties.getGetConversationModelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetConversationModelTotalTimeout() != null) {
      getConversationModelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetConversationModelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationModelTotalTimeout set to "
                + this.clientProperties.getGetConversationModelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getConversationModelSettings()
        .setRetrySettings(getConversationModelRetrySettingBuilder.build());
    RetrySettings.Builder listConversationModelsRetrySettingBuilder =
        clientSettingsBuilder.listConversationModelsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListConversationModelsInitialRetryDelay() != null) {
      listConversationModelsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListConversationModelsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationModelsInitialRetryDelay set to "
                + this.clientProperties.getListConversationModelsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListConversationModelsRetryDelayMultiplier() != null) {
      listConversationModelsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListConversationModelsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationModelsRetryDelayMultiplier set to "
                + this.clientProperties.getListConversationModelsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListConversationModelsMaxRetryDelay() != null) {
      listConversationModelsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListConversationModelsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationModelsMaxRetryDelay set to "
                + this.clientProperties.getListConversationModelsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListConversationModelsInitialRpcTimeout() != null) {
      listConversationModelsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListConversationModelsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationModelsInitialRpcTimeout set to "
                + this.clientProperties.getListConversationModelsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListConversationModelsRpcTimeoutMultiplier() != null) {
      listConversationModelsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListConversationModelsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationModelsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListConversationModelsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListConversationModelsMaxRpcTimeout() != null) {
      listConversationModelsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListConversationModelsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationModelsMaxRpcTimeout set to "
                + this.clientProperties.getListConversationModelsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListConversationModelsTotalTimeout() != null) {
      listConversationModelsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListConversationModelsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationModelsTotalTimeout set to "
                + this.clientProperties.getListConversationModelsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listConversationModelsSettings()
        .setRetrySettings(listConversationModelsRetrySettingBuilder.build());
    RetrySettings.Builder deleteConversationModelRetrySettingBuilder =
        clientSettingsBuilder.deleteConversationModelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteConversationModelInitialRetryDelay() != null) {
      deleteConversationModelRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteConversationModelInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationModelInitialRetryDelay set to "
                + this.clientProperties.getDeleteConversationModelInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteConversationModelRetryDelayMultiplier() != null) {
      deleteConversationModelRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteConversationModelRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationModelRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteConversationModelRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteConversationModelMaxRetryDelay() != null) {
      deleteConversationModelRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteConversationModelMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationModelMaxRetryDelay set to "
                + this.clientProperties.getDeleteConversationModelMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteConversationModelInitialRpcTimeout() != null) {
      deleteConversationModelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteConversationModelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationModelInitialRpcTimeout set to "
                + this.clientProperties.getDeleteConversationModelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteConversationModelRpcTimeoutMultiplier() != null) {
      deleteConversationModelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteConversationModelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationModelRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteConversationModelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteConversationModelMaxRpcTimeout() != null) {
      deleteConversationModelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteConversationModelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationModelMaxRpcTimeout set to "
                + this.clientProperties.getDeleteConversationModelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteConversationModelTotalTimeout() != null) {
      deleteConversationModelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteConversationModelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationModelTotalTimeout set to "
                + this.clientProperties.getDeleteConversationModelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteConversationModelSettings()
        .setRetrySettings(deleteConversationModelRetrySettingBuilder.build());
    RetrySettings.Builder deployConversationModelRetrySettingBuilder =
        clientSettingsBuilder.deployConversationModelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeployConversationModelInitialRetryDelay() != null) {
      deployConversationModelRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeployConversationModelInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeployConversationModelInitialRetryDelay set to "
                + this.clientProperties.getDeployConversationModelInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeployConversationModelRetryDelayMultiplier() != null) {
      deployConversationModelRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeployConversationModelRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeployConversationModelRetryDelayMultiplier set to "
                + this.clientProperties.getDeployConversationModelRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeployConversationModelMaxRetryDelay() != null) {
      deployConversationModelRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeployConversationModelMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeployConversationModelMaxRetryDelay set to "
                + this.clientProperties.getDeployConversationModelMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeployConversationModelInitialRpcTimeout() != null) {
      deployConversationModelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeployConversationModelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeployConversationModelInitialRpcTimeout set to "
                + this.clientProperties.getDeployConversationModelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeployConversationModelRpcTimeoutMultiplier() != null) {
      deployConversationModelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeployConversationModelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeployConversationModelRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeployConversationModelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeployConversationModelMaxRpcTimeout() != null) {
      deployConversationModelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeployConversationModelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeployConversationModelMaxRpcTimeout set to "
                + this.clientProperties.getDeployConversationModelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeployConversationModelTotalTimeout() != null) {
      deployConversationModelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeployConversationModelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeployConversationModelTotalTimeout set to "
                + this.clientProperties.getDeployConversationModelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deployConversationModelSettings()
        .setRetrySettings(deployConversationModelRetrySettingBuilder.build());
    RetrySettings.Builder undeployConversationModelRetrySettingBuilder =
        clientSettingsBuilder.undeployConversationModelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUndeployConversationModelInitialRetryDelay() != null) {
      undeployConversationModelRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUndeployConversationModelInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeployConversationModelInitialRetryDelay set to "
                + this.clientProperties.getUndeployConversationModelInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUndeployConversationModelRetryDelayMultiplier() != null) {
      undeployConversationModelRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUndeployConversationModelRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeployConversationModelRetryDelayMultiplier set to "
                + this.clientProperties.getUndeployConversationModelRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUndeployConversationModelMaxRetryDelay() != null) {
      undeployConversationModelRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUndeployConversationModelMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeployConversationModelMaxRetryDelay set to "
                + this.clientProperties.getUndeployConversationModelMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUndeployConversationModelInitialRpcTimeout() != null) {
      undeployConversationModelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUndeployConversationModelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeployConversationModelInitialRpcTimeout set to "
                + this.clientProperties.getUndeployConversationModelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUndeployConversationModelRpcTimeoutMultiplier() != null) {
      undeployConversationModelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUndeployConversationModelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeployConversationModelRpcTimeoutMultiplier set to "
                + this.clientProperties.getUndeployConversationModelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUndeployConversationModelMaxRpcTimeout() != null) {
      undeployConversationModelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUndeployConversationModelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeployConversationModelMaxRpcTimeout set to "
                + this.clientProperties.getUndeployConversationModelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUndeployConversationModelTotalTimeout() != null) {
      undeployConversationModelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUndeployConversationModelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeployConversationModelTotalTimeout set to "
                + this.clientProperties.getUndeployConversationModelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .undeployConversationModelSettings()
        .setRetrySettings(undeployConversationModelRetrySettingBuilder.build());
    RetrySettings.Builder getConversationModelEvaluationRetrySettingBuilder =
        clientSettingsBuilder
            .getConversationModelEvaluationSettings()
            .getRetrySettings()
            .toBuilder();
    if (this.clientProperties.getGetConversationModelEvaluationInitialRetryDelay() != null) {
      getConversationModelEvaluationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetConversationModelEvaluationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationModelEvaluationInitialRetryDelay set to "
                + this.clientProperties.getGetConversationModelEvaluationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetConversationModelEvaluationRetryDelayMultiplier() != null) {
      getConversationModelEvaluationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetConversationModelEvaluationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationModelEvaluationRetryDelayMultiplier set to "
                + this.clientProperties.getGetConversationModelEvaluationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetConversationModelEvaluationMaxRetryDelay() != null) {
      getConversationModelEvaluationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetConversationModelEvaluationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationModelEvaluationMaxRetryDelay set to "
                + this.clientProperties.getGetConversationModelEvaluationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetConversationModelEvaluationInitialRpcTimeout() != null) {
      getConversationModelEvaluationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetConversationModelEvaluationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationModelEvaluationInitialRpcTimeout set to "
                + this.clientProperties.getGetConversationModelEvaluationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetConversationModelEvaluationRpcTimeoutMultiplier() != null) {
      getConversationModelEvaluationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetConversationModelEvaluationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationModelEvaluationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetConversationModelEvaluationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetConversationModelEvaluationMaxRpcTimeout() != null) {
      getConversationModelEvaluationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetConversationModelEvaluationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationModelEvaluationMaxRpcTimeout set to "
                + this.clientProperties.getGetConversationModelEvaluationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetConversationModelEvaluationTotalTimeout() != null) {
      getConversationModelEvaluationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetConversationModelEvaluationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationModelEvaluationTotalTimeout set to "
                + this.clientProperties.getGetConversationModelEvaluationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getConversationModelEvaluationSettings()
        .setRetrySettings(getConversationModelEvaluationRetrySettingBuilder.build());
    RetrySettings.Builder listConversationModelEvaluationsRetrySettingBuilder =
        clientSettingsBuilder
            .listConversationModelEvaluationsSettings()
            .getRetrySettings()
            .toBuilder();
    if (this.clientProperties.getListConversationModelEvaluationsInitialRetryDelay() != null) {
      listConversationModelEvaluationsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListConversationModelEvaluationsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationModelEvaluationsInitialRetryDelay set to "
                + this.clientProperties.getListConversationModelEvaluationsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListConversationModelEvaluationsRetryDelayMultiplier() != null) {
      listConversationModelEvaluationsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListConversationModelEvaluationsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationModelEvaluationsRetryDelayMultiplier set to "
                + this.clientProperties.getListConversationModelEvaluationsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListConversationModelEvaluationsMaxRetryDelay() != null) {
      listConversationModelEvaluationsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListConversationModelEvaluationsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationModelEvaluationsMaxRetryDelay set to "
                + this.clientProperties.getListConversationModelEvaluationsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListConversationModelEvaluationsInitialRpcTimeout() != null) {
      listConversationModelEvaluationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListConversationModelEvaluationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationModelEvaluationsInitialRpcTimeout set to "
                + this.clientProperties.getListConversationModelEvaluationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListConversationModelEvaluationsRpcTimeoutMultiplier() != null) {
      listConversationModelEvaluationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListConversationModelEvaluationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationModelEvaluationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListConversationModelEvaluationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListConversationModelEvaluationsMaxRpcTimeout() != null) {
      listConversationModelEvaluationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListConversationModelEvaluationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationModelEvaluationsMaxRpcTimeout set to "
                + this.clientProperties.getListConversationModelEvaluationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListConversationModelEvaluationsTotalTimeout() != null) {
      listConversationModelEvaluationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListConversationModelEvaluationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationModelEvaluationsTotalTimeout set to "
                + this.clientProperties.getListConversationModelEvaluationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listConversationModelEvaluationsSettings()
        .setRetrySettings(listConversationModelEvaluationsRetrySettingBuilder.build());
    RetrySettings.Builder createConversationModelEvaluationRetrySettingBuilder =
        clientSettingsBuilder
            .createConversationModelEvaluationSettings()
            .getRetrySettings()
            .toBuilder();
    if (this.clientProperties.getCreateConversationModelEvaluationInitialRetryDelay() != null) {
      createConversationModelEvaluationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateConversationModelEvaluationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationModelEvaluationInitialRetryDelay set to "
                + this.clientProperties.getCreateConversationModelEvaluationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateConversationModelEvaluationRetryDelayMultiplier() != null) {
      createConversationModelEvaluationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateConversationModelEvaluationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationModelEvaluationRetryDelayMultiplier set to "
                + this.clientProperties.getCreateConversationModelEvaluationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateConversationModelEvaluationMaxRetryDelay() != null) {
      createConversationModelEvaluationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateConversationModelEvaluationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationModelEvaluationMaxRetryDelay set to "
                + this.clientProperties.getCreateConversationModelEvaluationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateConversationModelEvaluationInitialRpcTimeout() != null) {
      createConversationModelEvaluationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateConversationModelEvaluationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationModelEvaluationInitialRpcTimeout set to "
                + this.clientProperties.getCreateConversationModelEvaluationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateConversationModelEvaluationRpcTimeoutMultiplier() != null) {
      createConversationModelEvaluationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateConversationModelEvaluationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationModelEvaluationRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateConversationModelEvaluationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateConversationModelEvaluationMaxRpcTimeout() != null) {
      createConversationModelEvaluationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateConversationModelEvaluationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationModelEvaluationMaxRpcTimeout set to "
                + this.clientProperties.getCreateConversationModelEvaluationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateConversationModelEvaluationTotalTimeout() != null) {
      createConversationModelEvaluationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateConversationModelEvaluationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationModelEvaluationTotalTimeout set to "
                + this.clientProperties.getCreateConversationModelEvaluationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createConversationModelEvaluationSettings()
        .setRetrySettings(createConversationModelEvaluationRetrySettingBuilder.build());
    RetrySettings.Builder listLocationsRetrySettingBuilder =
        clientSettingsBuilder.listLocationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListLocationsInitialRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListLocationsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRetryDelay set to "
                + this.clientProperties.getListLocationsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsRetryDelayMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListLocationsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRetryDelayMultiplier set to "
                + this.clientProperties.getListLocationsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListLocationsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRetryDelay set to "
                + this.clientProperties.getListLocationsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsInitialRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListLocationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRpcTimeout set to "
                + this.clientProperties.getListLocationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsRpcTimeoutMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListLocationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRpcTimeout set to "
                + this.clientProperties.getListLocationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsTotalTimeout() != null) {
      listLocationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListLocationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsTotalTimeout set to "
                + this.clientProperties.getListLocationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listLocationsSettings()
        .setRetrySettings(listLocationsRetrySettingBuilder.build());
    RetrySettings.Builder getLocationRetrySettingBuilder =
        clientSettingsBuilder.getLocationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetLocationInitialRetryDelay() != null) {
      getLocationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetLocationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRetryDelay set to "
                + this.clientProperties.getGetLocationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationRetryDelayMultiplier() != null) {
      getLocationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetLocationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRetryDelayMultiplier set to "
                + this.clientProperties.getGetLocationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRetryDelay() != null) {
      getLocationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetLocationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRetryDelay set to "
                + this.clientProperties.getGetLocationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationInitialRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetLocationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRpcTimeout set to "
                + this.clientProperties.getGetLocationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationRpcTimeoutMultiplier() != null) {
      getLocationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetLocationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRpcTimeout set to "
                + this.clientProperties.getGetLocationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationTotalTimeout() != null) {
      getLocationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetLocationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationTotalTimeout set to " + this.clientProperties.getGetLocationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getLocationSettings()
        .setRetrySettings(getLocationRetrySettingBuilder.build());
    return ConversationModelsClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-conversation-models";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
