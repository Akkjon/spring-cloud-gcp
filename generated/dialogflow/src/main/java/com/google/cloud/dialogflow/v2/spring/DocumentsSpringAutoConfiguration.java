/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dialogflow.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dialogflow.v2.DocumentsClient;
import com.google.cloud.dialogflow.v2.DocumentsSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link DocumentsClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(DocumentsClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dialogflow.v2.spring.auto.documents.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({DocumentsSpringProperties.class, GlobalProperties.class})
public class DocumentsSpringAutoConfiguration {
  private final DocumentsSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(DocumentsSpringAutoConfiguration.class);

  protected DocumentsSpringAutoConfiguration(
      DocumentsSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider documentsCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Documents-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultDocumentsTransportChannelProvider() {
    return DocumentsSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a DocumentsClient bean configured to use the default credentials provider (obtained
   * with documentsCredentials()) and its default transport channel provider
   * (defaultDocumentsTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in DocumentsSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public DocumentsClient documentsClient(
      @Qualifier("documentsCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultDocumentsTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    DocumentsSettings.Builder clientSettingsBuilder =
        DocumentsSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          DocumentsSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          DocumentsSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listDocumentsRetrySettingBuilder =
        clientSettingsBuilder.listDocumentsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListDocumentsInitialRetryDelay() != null) {
      listDocumentsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListDocumentsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDocumentsInitialRetryDelay set to "
                + this.clientProperties.getListDocumentsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListDocumentsRetryDelayMultiplier() != null) {
      listDocumentsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListDocumentsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDocumentsRetryDelayMultiplier set to "
                + this.clientProperties.getListDocumentsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListDocumentsMaxRetryDelay() != null) {
      listDocumentsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListDocumentsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDocumentsMaxRetryDelay set to "
                + this.clientProperties.getListDocumentsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListDocumentsInitialRpcTimeout() != null) {
      listDocumentsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListDocumentsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDocumentsInitialRpcTimeout set to "
                + this.clientProperties.getListDocumentsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListDocumentsRpcTimeoutMultiplier() != null) {
      listDocumentsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListDocumentsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDocumentsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListDocumentsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListDocumentsMaxRpcTimeout() != null) {
      listDocumentsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListDocumentsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDocumentsMaxRpcTimeout set to "
                + this.clientProperties.getListDocumentsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListDocumentsTotalTimeout() != null) {
      listDocumentsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListDocumentsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDocumentsTotalTimeout set to "
                + this.clientProperties.getListDocumentsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listDocumentsSettings()
        .setRetrySettings(listDocumentsRetrySettingBuilder.build());
    RetrySettings.Builder getDocumentRetrySettingBuilder =
        clientSettingsBuilder.getDocumentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetDocumentInitialRetryDelay() != null) {
      getDocumentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetDocumentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDocumentInitialRetryDelay set to "
                + this.clientProperties.getGetDocumentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetDocumentRetryDelayMultiplier() != null) {
      getDocumentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetDocumentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDocumentRetryDelayMultiplier set to "
                + this.clientProperties.getGetDocumentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetDocumentMaxRetryDelay() != null) {
      getDocumentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetDocumentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDocumentMaxRetryDelay set to "
                + this.clientProperties.getGetDocumentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetDocumentInitialRpcTimeout() != null) {
      getDocumentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetDocumentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDocumentInitialRpcTimeout set to "
                + this.clientProperties.getGetDocumentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDocumentRpcTimeoutMultiplier() != null) {
      getDocumentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetDocumentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDocumentRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetDocumentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetDocumentMaxRpcTimeout() != null) {
      getDocumentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetDocumentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDocumentMaxRpcTimeout set to "
                + this.clientProperties.getGetDocumentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDocumentTotalTimeout() != null) {
      getDocumentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetDocumentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDocumentTotalTimeout set to " + this.clientProperties.getGetDocumentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getDocumentSettings()
        .setRetrySettings(getDocumentRetrySettingBuilder.build());
    RetrySettings.Builder createDocumentRetrySettingBuilder =
        clientSettingsBuilder.createDocumentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateDocumentInitialRetryDelay() != null) {
      createDocumentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateDocumentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDocumentInitialRetryDelay set to "
                + this.clientProperties.getCreateDocumentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateDocumentRetryDelayMultiplier() != null) {
      createDocumentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateDocumentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDocumentRetryDelayMultiplier set to "
                + this.clientProperties.getCreateDocumentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateDocumentMaxRetryDelay() != null) {
      createDocumentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateDocumentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDocumentMaxRetryDelay set to "
                + this.clientProperties.getCreateDocumentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateDocumentInitialRpcTimeout() != null) {
      createDocumentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateDocumentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDocumentInitialRpcTimeout set to "
                + this.clientProperties.getCreateDocumentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateDocumentRpcTimeoutMultiplier() != null) {
      createDocumentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateDocumentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDocumentRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateDocumentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateDocumentMaxRpcTimeout() != null) {
      createDocumentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateDocumentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDocumentMaxRpcTimeout set to "
                + this.clientProperties.getCreateDocumentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateDocumentTotalTimeout() != null) {
      createDocumentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateDocumentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDocumentTotalTimeout set to "
                + this.clientProperties.getCreateDocumentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createDocumentSettings()
        .setRetrySettings(createDocumentRetrySettingBuilder.build());
    RetrySettings.Builder importDocumentsRetrySettingBuilder =
        clientSettingsBuilder.importDocumentsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getImportDocumentsInitialRetryDelay() != null) {
      importDocumentsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getImportDocumentsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportDocumentsInitialRetryDelay set to "
                + this.clientProperties.getImportDocumentsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getImportDocumentsRetryDelayMultiplier() != null) {
      importDocumentsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getImportDocumentsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportDocumentsRetryDelayMultiplier set to "
                + this.clientProperties.getImportDocumentsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getImportDocumentsMaxRetryDelay() != null) {
      importDocumentsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getImportDocumentsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportDocumentsMaxRetryDelay set to "
                + this.clientProperties.getImportDocumentsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getImportDocumentsInitialRpcTimeout() != null) {
      importDocumentsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getImportDocumentsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportDocumentsInitialRpcTimeout set to "
                + this.clientProperties.getImportDocumentsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getImportDocumentsRpcTimeoutMultiplier() != null) {
      importDocumentsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getImportDocumentsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportDocumentsRpcTimeoutMultiplier set to "
                + this.clientProperties.getImportDocumentsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getImportDocumentsMaxRpcTimeout() != null) {
      importDocumentsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getImportDocumentsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportDocumentsMaxRpcTimeout set to "
                + this.clientProperties.getImportDocumentsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getImportDocumentsTotalTimeout() != null) {
      importDocumentsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getImportDocumentsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportDocumentsTotalTimeout set to "
                + this.clientProperties.getImportDocumentsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .importDocumentsSettings()
        .setRetrySettings(importDocumentsRetrySettingBuilder.build());
    RetrySettings.Builder deleteDocumentRetrySettingBuilder =
        clientSettingsBuilder.deleteDocumentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteDocumentInitialRetryDelay() != null) {
      deleteDocumentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteDocumentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDocumentInitialRetryDelay set to "
                + this.clientProperties.getDeleteDocumentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteDocumentRetryDelayMultiplier() != null) {
      deleteDocumentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteDocumentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDocumentRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteDocumentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteDocumentMaxRetryDelay() != null) {
      deleteDocumentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteDocumentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDocumentMaxRetryDelay set to "
                + this.clientProperties.getDeleteDocumentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteDocumentInitialRpcTimeout() != null) {
      deleteDocumentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteDocumentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDocumentInitialRpcTimeout set to "
                + this.clientProperties.getDeleteDocumentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteDocumentRpcTimeoutMultiplier() != null) {
      deleteDocumentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteDocumentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDocumentRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteDocumentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteDocumentMaxRpcTimeout() != null) {
      deleteDocumentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteDocumentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDocumentMaxRpcTimeout set to "
                + this.clientProperties.getDeleteDocumentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteDocumentTotalTimeout() != null) {
      deleteDocumentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteDocumentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDocumentTotalTimeout set to "
                + this.clientProperties.getDeleteDocumentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteDocumentSettings()
        .setRetrySettings(deleteDocumentRetrySettingBuilder.build());
    RetrySettings.Builder updateDocumentRetrySettingBuilder =
        clientSettingsBuilder.updateDocumentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateDocumentInitialRetryDelay() != null) {
      updateDocumentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateDocumentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDocumentInitialRetryDelay set to "
                + this.clientProperties.getUpdateDocumentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateDocumentRetryDelayMultiplier() != null) {
      updateDocumentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateDocumentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDocumentRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateDocumentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateDocumentMaxRetryDelay() != null) {
      updateDocumentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateDocumentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDocumentMaxRetryDelay set to "
                + this.clientProperties.getUpdateDocumentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateDocumentInitialRpcTimeout() != null) {
      updateDocumentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateDocumentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDocumentInitialRpcTimeout set to "
                + this.clientProperties.getUpdateDocumentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateDocumentRpcTimeoutMultiplier() != null) {
      updateDocumentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateDocumentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDocumentRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateDocumentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateDocumentMaxRpcTimeout() != null) {
      updateDocumentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateDocumentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDocumentMaxRpcTimeout set to "
                + this.clientProperties.getUpdateDocumentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateDocumentTotalTimeout() != null) {
      updateDocumentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateDocumentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateDocumentTotalTimeout set to "
                + this.clientProperties.getUpdateDocumentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateDocumentSettings()
        .setRetrySettings(updateDocumentRetrySettingBuilder.build());
    RetrySettings.Builder reloadDocumentRetrySettingBuilder =
        clientSettingsBuilder.reloadDocumentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getReloadDocumentInitialRetryDelay() != null) {
      reloadDocumentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getReloadDocumentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReloadDocumentInitialRetryDelay set to "
                + this.clientProperties.getReloadDocumentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getReloadDocumentRetryDelayMultiplier() != null) {
      reloadDocumentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getReloadDocumentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReloadDocumentRetryDelayMultiplier set to "
                + this.clientProperties.getReloadDocumentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getReloadDocumentMaxRetryDelay() != null) {
      reloadDocumentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getReloadDocumentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReloadDocumentMaxRetryDelay set to "
                + this.clientProperties.getReloadDocumentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getReloadDocumentInitialRpcTimeout() != null) {
      reloadDocumentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getReloadDocumentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReloadDocumentInitialRpcTimeout set to "
                + this.clientProperties.getReloadDocumentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getReloadDocumentRpcTimeoutMultiplier() != null) {
      reloadDocumentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getReloadDocumentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReloadDocumentRpcTimeoutMultiplier set to "
                + this.clientProperties.getReloadDocumentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getReloadDocumentMaxRpcTimeout() != null) {
      reloadDocumentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getReloadDocumentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReloadDocumentMaxRpcTimeout set to "
                + this.clientProperties.getReloadDocumentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getReloadDocumentTotalTimeout() != null) {
      reloadDocumentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getReloadDocumentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReloadDocumentTotalTimeout set to "
                + this.clientProperties.getReloadDocumentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .reloadDocumentSettings()
        .setRetrySettings(reloadDocumentRetrySettingBuilder.build());
    RetrySettings.Builder exportDocumentRetrySettingBuilder =
        clientSettingsBuilder.exportDocumentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getExportDocumentInitialRetryDelay() != null) {
      exportDocumentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getExportDocumentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportDocumentInitialRetryDelay set to "
                + this.clientProperties.getExportDocumentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getExportDocumentRetryDelayMultiplier() != null) {
      exportDocumentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getExportDocumentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportDocumentRetryDelayMultiplier set to "
                + this.clientProperties.getExportDocumentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getExportDocumentMaxRetryDelay() != null) {
      exportDocumentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getExportDocumentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportDocumentMaxRetryDelay set to "
                + this.clientProperties.getExportDocumentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getExportDocumentInitialRpcTimeout() != null) {
      exportDocumentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getExportDocumentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportDocumentInitialRpcTimeout set to "
                + this.clientProperties.getExportDocumentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getExportDocumentRpcTimeoutMultiplier() != null) {
      exportDocumentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getExportDocumentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportDocumentRpcTimeoutMultiplier set to "
                + this.clientProperties.getExportDocumentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getExportDocumentMaxRpcTimeout() != null) {
      exportDocumentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getExportDocumentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportDocumentMaxRpcTimeout set to "
                + this.clientProperties.getExportDocumentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getExportDocumentTotalTimeout() != null) {
      exportDocumentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getExportDocumentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ExportDocumentTotalTimeout set to "
                + this.clientProperties.getExportDocumentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .exportDocumentSettings()
        .setRetrySettings(exportDocumentRetrySettingBuilder.build());
    RetrySettings.Builder listLocationsRetrySettingBuilder =
        clientSettingsBuilder.listLocationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListLocationsInitialRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListLocationsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRetryDelay set to "
                + this.clientProperties.getListLocationsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsRetryDelayMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListLocationsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRetryDelayMultiplier set to "
                + this.clientProperties.getListLocationsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListLocationsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRetryDelay set to "
                + this.clientProperties.getListLocationsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsInitialRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListLocationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRpcTimeout set to "
                + this.clientProperties.getListLocationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsRpcTimeoutMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListLocationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRpcTimeout set to "
                + this.clientProperties.getListLocationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsTotalTimeout() != null) {
      listLocationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListLocationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsTotalTimeout set to "
                + this.clientProperties.getListLocationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listLocationsSettings()
        .setRetrySettings(listLocationsRetrySettingBuilder.build());
    RetrySettings.Builder getLocationRetrySettingBuilder =
        clientSettingsBuilder.getLocationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetLocationInitialRetryDelay() != null) {
      getLocationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetLocationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRetryDelay set to "
                + this.clientProperties.getGetLocationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationRetryDelayMultiplier() != null) {
      getLocationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetLocationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRetryDelayMultiplier set to "
                + this.clientProperties.getGetLocationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRetryDelay() != null) {
      getLocationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetLocationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRetryDelay set to "
                + this.clientProperties.getGetLocationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationInitialRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetLocationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRpcTimeout set to "
                + this.clientProperties.getGetLocationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationRpcTimeoutMultiplier() != null) {
      getLocationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetLocationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRpcTimeout set to "
                + this.clientProperties.getGetLocationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationTotalTimeout() != null) {
      getLocationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetLocationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationTotalTimeout set to " + this.clientProperties.getGetLocationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getLocationSettings()
        .setRetrySettings(getLocationRetrySettingBuilder.build());
    return DocumentsClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-documents";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
