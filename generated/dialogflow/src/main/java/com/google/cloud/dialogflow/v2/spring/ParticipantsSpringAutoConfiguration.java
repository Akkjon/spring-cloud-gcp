/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dialogflow.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dialogflow.v2.ParticipantsClient;
import com.google.cloud.dialogflow.v2.ParticipantsSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ParticipantsClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ParticipantsClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dialogflow.v2.spring.auto.participants.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({ParticipantsSpringProperties.class, GlobalProperties.class})
public class ParticipantsSpringAutoConfiguration {
  private final ParticipantsSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(ParticipantsSpringAutoConfiguration.class);

  protected ParticipantsSpringAutoConfiguration(
      ParticipantsSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider participantsCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Participants-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultParticipantsTransportChannelProvider() {
    return ParticipantsSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ParticipantsClient bean configured to use the default credentials provider (obtained
   * with participantsCredentials()) and its default transport channel provider
   * (defaultParticipantsTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in ParticipantsSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public ParticipantsClient participantsClient(
      @Qualifier("participantsCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultParticipantsTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ParticipantsSettings.Builder clientSettingsBuilder =
        ParticipantsSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ParticipantsSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          ParticipantsSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createParticipantRetrySettingBuilder =
        clientSettingsBuilder.createParticipantSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateParticipantInitialRetryDelay() != null) {
      createParticipantRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateParticipantInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateParticipantInitialRetryDelay set to "
                + this.clientProperties.getCreateParticipantInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateParticipantRetryDelayMultiplier() != null) {
      createParticipantRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateParticipantRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateParticipantRetryDelayMultiplier set to "
                + this.clientProperties.getCreateParticipantRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateParticipantMaxRetryDelay() != null) {
      createParticipantRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateParticipantMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateParticipantMaxRetryDelay set to "
                + this.clientProperties.getCreateParticipantMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateParticipantInitialRpcTimeout() != null) {
      createParticipantRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateParticipantInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateParticipantInitialRpcTimeout set to "
                + this.clientProperties.getCreateParticipantInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateParticipantRpcTimeoutMultiplier() != null) {
      createParticipantRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateParticipantRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateParticipantRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateParticipantRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateParticipantMaxRpcTimeout() != null) {
      createParticipantRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateParticipantMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateParticipantMaxRpcTimeout set to "
                + this.clientProperties.getCreateParticipantMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateParticipantTotalTimeout() != null) {
      createParticipantRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateParticipantTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateParticipantTotalTimeout set to "
                + this.clientProperties.getCreateParticipantTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createParticipantSettings()
        .setRetrySettings(createParticipantRetrySettingBuilder.build());
    RetrySettings.Builder getParticipantRetrySettingBuilder =
        clientSettingsBuilder.getParticipantSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetParticipantInitialRetryDelay() != null) {
      getParticipantRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetParticipantInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetParticipantInitialRetryDelay set to "
                + this.clientProperties.getGetParticipantInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetParticipantRetryDelayMultiplier() != null) {
      getParticipantRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetParticipantRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetParticipantRetryDelayMultiplier set to "
                + this.clientProperties.getGetParticipantRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetParticipantMaxRetryDelay() != null) {
      getParticipantRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetParticipantMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetParticipantMaxRetryDelay set to "
                + this.clientProperties.getGetParticipantMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetParticipantInitialRpcTimeout() != null) {
      getParticipantRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetParticipantInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetParticipantInitialRpcTimeout set to "
                + this.clientProperties.getGetParticipantInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetParticipantRpcTimeoutMultiplier() != null) {
      getParticipantRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetParticipantRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetParticipantRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetParticipantRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetParticipantMaxRpcTimeout() != null) {
      getParticipantRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetParticipantMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetParticipantMaxRpcTimeout set to "
                + this.clientProperties.getGetParticipantMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetParticipantTotalTimeout() != null) {
      getParticipantRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetParticipantTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetParticipantTotalTimeout set to "
                + this.clientProperties.getGetParticipantTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getParticipantSettings()
        .setRetrySettings(getParticipantRetrySettingBuilder.build());
    RetrySettings.Builder listParticipantsRetrySettingBuilder =
        clientSettingsBuilder.listParticipantsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListParticipantsInitialRetryDelay() != null) {
      listParticipantsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListParticipantsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListParticipantsInitialRetryDelay set to "
                + this.clientProperties.getListParticipantsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListParticipantsRetryDelayMultiplier() != null) {
      listParticipantsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListParticipantsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListParticipantsRetryDelayMultiplier set to "
                + this.clientProperties.getListParticipantsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListParticipantsMaxRetryDelay() != null) {
      listParticipantsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListParticipantsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListParticipantsMaxRetryDelay set to "
                + this.clientProperties.getListParticipantsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListParticipantsInitialRpcTimeout() != null) {
      listParticipantsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListParticipantsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListParticipantsInitialRpcTimeout set to "
                + this.clientProperties.getListParticipantsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListParticipantsRpcTimeoutMultiplier() != null) {
      listParticipantsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListParticipantsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListParticipantsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListParticipantsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListParticipantsMaxRpcTimeout() != null) {
      listParticipantsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListParticipantsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListParticipantsMaxRpcTimeout set to "
                + this.clientProperties.getListParticipantsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListParticipantsTotalTimeout() != null) {
      listParticipantsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListParticipantsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListParticipantsTotalTimeout set to "
                + this.clientProperties.getListParticipantsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listParticipantsSettings()
        .setRetrySettings(listParticipantsRetrySettingBuilder.build());
    RetrySettings.Builder updateParticipantRetrySettingBuilder =
        clientSettingsBuilder.updateParticipantSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateParticipantInitialRetryDelay() != null) {
      updateParticipantRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateParticipantInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateParticipantInitialRetryDelay set to "
                + this.clientProperties.getUpdateParticipantInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateParticipantRetryDelayMultiplier() != null) {
      updateParticipantRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateParticipantRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateParticipantRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateParticipantRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateParticipantMaxRetryDelay() != null) {
      updateParticipantRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateParticipantMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateParticipantMaxRetryDelay set to "
                + this.clientProperties.getUpdateParticipantMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateParticipantInitialRpcTimeout() != null) {
      updateParticipantRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateParticipantInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateParticipantInitialRpcTimeout set to "
                + this.clientProperties.getUpdateParticipantInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateParticipantRpcTimeoutMultiplier() != null) {
      updateParticipantRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateParticipantRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateParticipantRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateParticipantRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateParticipantMaxRpcTimeout() != null) {
      updateParticipantRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateParticipantMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateParticipantMaxRpcTimeout set to "
                + this.clientProperties.getUpdateParticipantMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateParticipantTotalTimeout() != null) {
      updateParticipantRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateParticipantTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateParticipantTotalTimeout set to "
                + this.clientProperties.getUpdateParticipantTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateParticipantSettings()
        .setRetrySettings(updateParticipantRetrySettingBuilder.build());
    RetrySettings.Builder analyzeContentRetrySettingBuilder =
        clientSettingsBuilder.analyzeContentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getAnalyzeContentInitialRetryDelay() != null) {
      analyzeContentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getAnalyzeContentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AnalyzeContentInitialRetryDelay set to "
                + this.clientProperties.getAnalyzeContentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getAnalyzeContentRetryDelayMultiplier() != null) {
      analyzeContentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getAnalyzeContentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AnalyzeContentRetryDelayMultiplier set to "
                + this.clientProperties.getAnalyzeContentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getAnalyzeContentMaxRetryDelay() != null) {
      analyzeContentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getAnalyzeContentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AnalyzeContentMaxRetryDelay set to "
                + this.clientProperties.getAnalyzeContentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getAnalyzeContentInitialRpcTimeout() != null) {
      analyzeContentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getAnalyzeContentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AnalyzeContentInitialRpcTimeout set to "
                + this.clientProperties.getAnalyzeContentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getAnalyzeContentRpcTimeoutMultiplier() != null) {
      analyzeContentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getAnalyzeContentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AnalyzeContentRpcTimeoutMultiplier set to "
                + this.clientProperties.getAnalyzeContentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getAnalyzeContentMaxRpcTimeout() != null) {
      analyzeContentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getAnalyzeContentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AnalyzeContentMaxRpcTimeout set to "
                + this.clientProperties.getAnalyzeContentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getAnalyzeContentTotalTimeout() != null) {
      analyzeContentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getAnalyzeContentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AnalyzeContentTotalTimeout set to "
                + this.clientProperties.getAnalyzeContentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .analyzeContentSettings()
        .setRetrySettings(analyzeContentRetrySettingBuilder.build());
    RetrySettings.Builder streamingAnalyzeContentRetrySettingBuilder =
        clientSettingsBuilder.streamingAnalyzeContentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getStreamingAnalyzeContentInitialRpcTimeout() != null) {
      streamingAnalyzeContentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getStreamingAnalyzeContentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StreamingAnalyzeContentInitialRpcTimeout set to "
                + this.clientProperties.getStreamingAnalyzeContentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getStreamingAnalyzeContentRpcTimeoutMultiplier() != null) {
      streamingAnalyzeContentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getStreamingAnalyzeContentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StreamingAnalyzeContentRpcTimeoutMultiplier set to "
                + this.clientProperties.getStreamingAnalyzeContentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getStreamingAnalyzeContentMaxRpcTimeout() != null) {
      streamingAnalyzeContentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getStreamingAnalyzeContentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StreamingAnalyzeContentMaxRpcTimeout set to "
                + this.clientProperties.getStreamingAnalyzeContentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getStreamingAnalyzeContentTotalTimeout() != null) {
      streamingAnalyzeContentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getStreamingAnalyzeContentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StreamingAnalyzeContentTotalTimeout set to "
                + this.clientProperties.getStreamingAnalyzeContentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .streamingAnalyzeContentSettings()
        .setRetrySettings(streamingAnalyzeContentRetrySettingBuilder.build());
    RetrySettings.Builder suggestArticlesRetrySettingBuilder =
        clientSettingsBuilder.suggestArticlesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSuggestArticlesInitialRetryDelay() != null) {
      suggestArticlesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getSuggestArticlesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestArticlesInitialRetryDelay set to "
                + this.clientProperties.getSuggestArticlesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getSuggestArticlesRetryDelayMultiplier() != null) {
      suggestArticlesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getSuggestArticlesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestArticlesRetryDelayMultiplier set to "
                + this.clientProperties.getSuggestArticlesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getSuggestArticlesMaxRetryDelay() != null) {
      suggestArticlesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getSuggestArticlesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestArticlesMaxRetryDelay set to "
                + this.clientProperties.getSuggestArticlesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getSuggestArticlesInitialRpcTimeout() != null) {
      suggestArticlesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSuggestArticlesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestArticlesInitialRpcTimeout set to "
                + this.clientProperties.getSuggestArticlesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSuggestArticlesRpcTimeoutMultiplier() != null) {
      suggestArticlesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSuggestArticlesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestArticlesRpcTimeoutMultiplier set to "
                + this.clientProperties.getSuggestArticlesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSuggestArticlesMaxRpcTimeout() != null) {
      suggestArticlesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSuggestArticlesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestArticlesMaxRpcTimeout set to "
                + this.clientProperties.getSuggestArticlesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSuggestArticlesTotalTimeout() != null) {
      suggestArticlesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSuggestArticlesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestArticlesTotalTimeout set to "
                + this.clientProperties.getSuggestArticlesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .suggestArticlesSettings()
        .setRetrySettings(suggestArticlesRetrySettingBuilder.build());
    RetrySettings.Builder suggestFaqAnswersRetrySettingBuilder =
        clientSettingsBuilder.suggestFaqAnswersSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSuggestFaqAnswersInitialRetryDelay() != null) {
      suggestFaqAnswersRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getSuggestFaqAnswersInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestFaqAnswersInitialRetryDelay set to "
                + this.clientProperties.getSuggestFaqAnswersInitialRetryDelay());
      }
    }
    if (this.clientProperties.getSuggestFaqAnswersRetryDelayMultiplier() != null) {
      suggestFaqAnswersRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getSuggestFaqAnswersRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestFaqAnswersRetryDelayMultiplier set to "
                + this.clientProperties.getSuggestFaqAnswersRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getSuggestFaqAnswersMaxRetryDelay() != null) {
      suggestFaqAnswersRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getSuggestFaqAnswersMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestFaqAnswersMaxRetryDelay set to "
                + this.clientProperties.getSuggestFaqAnswersMaxRetryDelay());
      }
    }
    if (this.clientProperties.getSuggestFaqAnswersInitialRpcTimeout() != null) {
      suggestFaqAnswersRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSuggestFaqAnswersInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestFaqAnswersInitialRpcTimeout set to "
                + this.clientProperties.getSuggestFaqAnswersInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSuggestFaqAnswersRpcTimeoutMultiplier() != null) {
      suggestFaqAnswersRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSuggestFaqAnswersRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestFaqAnswersRpcTimeoutMultiplier set to "
                + this.clientProperties.getSuggestFaqAnswersRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSuggestFaqAnswersMaxRpcTimeout() != null) {
      suggestFaqAnswersRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSuggestFaqAnswersMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestFaqAnswersMaxRpcTimeout set to "
                + this.clientProperties.getSuggestFaqAnswersMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSuggestFaqAnswersTotalTimeout() != null) {
      suggestFaqAnswersRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSuggestFaqAnswersTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestFaqAnswersTotalTimeout set to "
                + this.clientProperties.getSuggestFaqAnswersTotalTimeout());
      }
    }
    clientSettingsBuilder
        .suggestFaqAnswersSettings()
        .setRetrySettings(suggestFaqAnswersRetrySettingBuilder.build());
    RetrySettings.Builder suggestSmartRepliesRetrySettingBuilder =
        clientSettingsBuilder.suggestSmartRepliesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSuggestSmartRepliesInitialRetryDelay() != null) {
      suggestSmartRepliesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getSuggestSmartRepliesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestSmartRepliesInitialRetryDelay set to "
                + this.clientProperties.getSuggestSmartRepliesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getSuggestSmartRepliesRetryDelayMultiplier() != null) {
      suggestSmartRepliesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getSuggestSmartRepliesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestSmartRepliesRetryDelayMultiplier set to "
                + this.clientProperties.getSuggestSmartRepliesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getSuggestSmartRepliesMaxRetryDelay() != null) {
      suggestSmartRepliesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getSuggestSmartRepliesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestSmartRepliesMaxRetryDelay set to "
                + this.clientProperties.getSuggestSmartRepliesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getSuggestSmartRepliesInitialRpcTimeout() != null) {
      suggestSmartRepliesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSuggestSmartRepliesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestSmartRepliesInitialRpcTimeout set to "
                + this.clientProperties.getSuggestSmartRepliesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSuggestSmartRepliesRpcTimeoutMultiplier() != null) {
      suggestSmartRepliesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSuggestSmartRepliesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestSmartRepliesRpcTimeoutMultiplier set to "
                + this.clientProperties.getSuggestSmartRepliesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSuggestSmartRepliesMaxRpcTimeout() != null) {
      suggestSmartRepliesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSuggestSmartRepliesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestSmartRepliesMaxRpcTimeout set to "
                + this.clientProperties.getSuggestSmartRepliesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSuggestSmartRepliesTotalTimeout() != null) {
      suggestSmartRepliesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSuggestSmartRepliesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SuggestSmartRepliesTotalTimeout set to "
                + this.clientProperties.getSuggestSmartRepliesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .suggestSmartRepliesSettings()
        .setRetrySettings(suggestSmartRepliesRetrySettingBuilder.build());
    RetrySettings.Builder listLocationsRetrySettingBuilder =
        clientSettingsBuilder.listLocationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListLocationsInitialRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListLocationsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRetryDelay set to "
                + this.clientProperties.getListLocationsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsRetryDelayMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListLocationsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRetryDelayMultiplier set to "
                + this.clientProperties.getListLocationsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListLocationsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRetryDelay set to "
                + this.clientProperties.getListLocationsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsInitialRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListLocationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRpcTimeout set to "
                + this.clientProperties.getListLocationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsRpcTimeoutMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListLocationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRpcTimeout set to "
                + this.clientProperties.getListLocationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsTotalTimeout() != null) {
      listLocationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListLocationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsTotalTimeout set to "
                + this.clientProperties.getListLocationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listLocationsSettings()
        .setRetrySettings(listLocationsRetrySettingBuilder.build());
    RetrySettings.Builder getLocationRetrySettingBuilder =
        clientSettingsBuilder.getLocationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetLocationInitialRetryDelay() != null) {
      getLocationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetLocationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRetryDelay set to "
                + this.clientProperties.getGetLocationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationRetryDelayMultiplier() != null) {
      getLocationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetLocationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRetryDelayMultiplier set to "
                + this.clientProperties.getGetLocationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRetryDelay() != null) {
      getLocationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetLocationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRetryDelay set to "
                + this.clientProperties.getGetLocationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationInitialRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetLocationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRpcTimeout set to "
                + this.clientProperties.getGetLocationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationRpcTimeoutMultiplier() != null) {
      getLocationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetLocationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRpcTimeout set to "
                + this.clientProperties.getGetLocationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationTotalTimeout() != null) {
      getLocationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetLocationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationTotalTimeout set to " + this.clientProperties.getGetLocationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getLocationSettings()
        .setRetrySettings(getLocationRetrySettingBuilder.build());
    return ParticipantsClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-participants";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
