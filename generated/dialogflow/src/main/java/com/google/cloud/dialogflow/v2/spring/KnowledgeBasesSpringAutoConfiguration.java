/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dialogflow.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dialogflow.v2.KnowledgeBasesClient;
import com.google.cloud.dialogflow.v2.KnowledgeBasesSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link KnowledgeBasesClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(KnowledgeBasesClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dialogflow.v2.spring.auto.knowledge-bases.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({KnowledgeBasesSpringProperties.class, GlobalProperties.class})
public class KnowledgeBasesSpringAutoConfiguration {
  private final KnowledgeBasesSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(KnowledgeBasesSpringAutoConfiguration.class);

  protected KnowledgeBasesSpringAutoConfiguration(
      KnowledgeBasesSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider knowledgeBasesCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from KnowledgeBases-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultKnowledgeBasesTransportChannelProvider() {
    return KnowledgeBasesSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a KnowledgeBasesClient bean configured to use the default credentials provider
   * (obtained with knowledgeBasesCredentials()) and its default transport channel provider
   * (defaultKnowledgeBasesTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in KnowledgeBasesSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public KnowledgeBasesClient knowledgeBasesClient(
      @Qualifier("knowledgeBasesCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultKnowledgeBasesTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    KnowledgeBasesSettings.Builder clientSettingsBuilder =
        KnowledgeBasesSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          KnowledgeBasesSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          KnowledgeBasesSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listKnowledgeBasesRetrySettingBuilder =
        clientSettingsBuilder.listKnowledgeBasesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListKnowledgeBasesInitialRetryDelay() != null) {
      listKnowledgeBasesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListKnowledgeBasesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListKnowledgeBasesInitialRetryDelay set to "
                + this.clientProperties.getListKnowledgeBasesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListKnowledgeBasesRetryDelayMultiplier() != null) {
      listKnowledgeBasesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListKnowledgeBasesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListKnowledgeBasesRetryDelayMultiplier set to "
                + this.clientProperties.getListKnowledgeBasesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListKnowledgeBasesMaxRetryDelay() != null) {
      listKnowledgeBasesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListKnowledgeBasesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListKnowledgeBasesMaxRetryDelay set to "
                + this.clientProperties.getListKnowledgeBasesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListKnowledgeBasesInitialRpcTimeout() != null) {
      listKnowledgeBasesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListKnowledgeBasesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListKnowledgeBasesInitialRpcTimeout set to "
                + this.clientProperties.getListKnowledgeBasesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListKnowledgeBasesRpcTimeoutMultiplier() != null) {
      listKnowledgeBasesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListKnowledgeBasesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListKnowledgeBasesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListKnowledgeBasesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListKnowledgeBasesMaxRpcTimeout() != null) {
      listKnowledgeBasesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListKnowledgeBasesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListKnowledgeBasesMaxRpcTimeout set to "
                + this.clientProperties.getListKnowledgeBasesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListKnowledgeBasesTotalTimeout() != null) {
      listKnowledgeBasesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListKnowledgeBasesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListKnowledgeBasesTotalTimeout set to "
                + this.clientProperties.getListKnowledgeBasesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listKnowledgeBasesSettings()
        .setRetrySettings(listKnowledgeBasesRetrySettingBuilder.build());
    RetrySettings.Builder getKnowledgeBaseRetrySettingBuilder =
        clientSettingsBuilder.getKnowledgeBaseSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetKnowledgeBaseInitialRetryDelay() != null) {
      getKnowledgeBaseRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetKnowledgeBaseInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetKnowledgeBaseInitialRetryDelay set to "
                + this.clientProperties.getGetKnowledgeBaseInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetKnowledgeBaseRetryDelayMultiplier() != null) {
      getKnowledgeBaseRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetKnowledgeBaseRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetKnowledgeBaseRetryDelayMultiplier set to "
                + this.clientProperties.getGetKnowledgeBaseRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetKnowledgeBaseMaxRetryDelay() != null) {
      getKnowledgeBaseRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetKnowledgeBaseMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetKnowledgeBaseMaxRetryDelay set to "
                + this.clientProperties.getGetKnowledgeBaseMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetKnowledgeBaseInitialRpcTimeout() != null) {
      getKnowledgeBaseRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetKnowledgeBaseInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetKnowledgeBaseInitialRpcTimeout set to "
                + this.clientProperties.getGetKnowledgeBaseInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetKnowledgeBaseRpcTimeoutMultiplier() != null) {
      getKnowledgeBaseRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetKnowledgeBaseRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetKnowledgeBaseRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetKnowledgeBaseRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetKnowledgeBaseMaxRpcTimeout() != null) {
      getKnowledgeBaseRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetKnowledgeBaseMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetKnowledgeBaseMaxRpcTimeout set to "
                + this.clientProperties.getGetKnowledgeBaseMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetKnowledgeBaseTotalTimeout() != null) {
      getKnowledgeBaseRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetKnowledgeBaseTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetKnowledgeBaseTotalTimeout set to "
                + this.clientProperties.getGetKnowledgeBaseTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getKnowledgeBaseSettings()
        .setRetrySettings(getKnowledgeBaseRetrySettingBuilder.build());
    RetrySettings.Builder createKnowledgeBaseRetrySettingBuilder =
        clientSettingsBuilder.createKnowledgeBaseSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateKnowledgeBaseInitialRetryDelay() != null) {
      createKnowledgeBaseRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateKnowledgeBaseInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateKnowledgeBaseInitialRetryDelay set to "
                + this.clientProperties.getCreateKnowledgeBaseInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateKnowledgeBaseRetryDelayMultiplier() != null) {
      createKnowledgeBaseRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateKnowledgeBaseRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateKnowledgeBaseRetryDelayMultiplier set to "
                + this.clientProperties.getCreateKnowledgeBaseRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateKnowledgeBaseMaxRetryDelay() != null) {
      createKnowledgeBaseRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateKnowledgeBaseMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateKnowledgeBaseMaxRetryDelay set to "
                + this.clientProperties.getCreateKnowledgeBaseMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateKnowledgeBaseInitialRpcTimeout() != null) {
      createKnowledgeBaseRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateKnowledgeBaseInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateKnowledgeBaseInitialRpcTimeout set to "
                + this.clientProperties.getCreateKnowledgeBaseInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateKnowledgeBaseRpcTimeoutMultiplier() != null) {
      createKnowledgeBaseRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateKnowledgeBaseRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateKnowledgeBaseRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateKnowledgeBaseRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateKnowledgeBaseMaxRpcTimeout() != null) {
      createKnowledgeBaseRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateKnowledgeBaseMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateKnowledgeBaseMaxRpcTimeout set to "
                + this.clientProperties.getCreateKnowledgeBaseMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateKnowledgeBaseTotalTimeout() != null) {
      createKnowledgeBaseRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateKnowledgeBaseTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateKnowledgeBaseTotalTimeout set to "
                + this.clientProperties.getCreateKnowledgeBaseTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createKnowledgeBaseSettings()
        .setRetrySettings(createKnowledgeBaseRetrySettingBuilder.build());
    RetrySettings.Builder deleteKnowledgeBaseRetrySettingBuilder =
        clientSettingsBuilder.deleteKnowledgeBaseSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteKnowledgeBaseInitialRetryDelay() != null) {
      deleteKnowledgeBaseRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteKnowledgeBaseInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteKnowledgeBaseInitialRetryDelay set to "
                + this.clientProperties.getDeleteKnowledgeBaseInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteKnowledgeBaseRetryDelayMultiplier() != null) {
      deleteKnowledgeBaseRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteKnowledgeBaseRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteKnowledgeBaseRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteKnowledgeBaseRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteKnowledgeBaseMaxRetryDelay() != null) {
      deleteKnowledgeBaseRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteKnowledgeBaseMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteKnowledgeBaseMaxRetryDelay set to "
                + this.clientProperties.getDeleteKnowledgeBaseMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteKnowledgeBaseInitialRpcTimeout() != null) {
      deleteKnowledgeBaseRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteKnowledgeBaseInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteKnowledgeBaseInitialRpcTimeout set to "
                + this.clientProperties.getDeleteKnowledgeBaseInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteKnowledgeBaseRpcTimeoutMultiplier() != null) {
      deleteKnowledgeBaseRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteKnowledgeBaseRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteKnowledgeBaseRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteKnowledgeBaseRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteKnowledgeBaseMaxRpcTimeout() != null) {
      deleteKnowledgeBaseRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteKnowledgeBaseMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteKnowledgeBaseMaxRpcTimeout set to "
                + this.clientProperties.getDeleteKnowledgeBaseMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteKnowledgeBaseTotalTimeout() != null) {
      deleteKnowledgeBaseRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteKnowledgeBaseTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteKnowledgeBaseTotalTimeout set to "
                + this.clientProperties.getDeleteKnowledgeBaseTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteKnowledgeBaseSettings()
        .setRetrySettings(deleteKnowledgeBaseRetrySettingBuilder.build());
    RetrySettings.Builder updateKnowledgeBaseRetrySettingBuilder =
        clientSettingsBuilder.updateKnowledgeBaseSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateKnowledgeBaseInitialRetryDelay() != null) {
      updateKnowledgeBaseRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateKnowledgeBaseInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateKnowledgeBaseInitialRetryDelay set to "
                + this.clientProperties.getUpdateKnowledgeBaseInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateKnowledgeBaseRetryDelayMultiplier() != null) {
      updateKnowledgeBaseRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateKnowledgeBaseRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateKnowledgeBaseRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateKnowledgeBaseRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateKnowledgeBaseMaxRetryDelay() != null) {
      updateKnowledgeBaseRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateKnowledgeBaseMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateKnowledgeBaseMaxRetryDelay set to "
                + this.clientProperties.getUpdateKnowledgeBaseMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateKnowledgeBaseInitialRpcTimeout() != null) {
      updateKnowledgeBaseRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateKnowledgeBaseInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateKnowledgeBaseInitialRpcTimeout set to "
                + this.clientProperties.getUpdateKnowledgeBaseInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateKnowledgeBaseRpcTimeoutMultiplier() != null) {
      updateKnowledgeBaseRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateKnowledgeBaseRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateKnowledgeBaseRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateKnowledgeBaseRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateKnowledgeBaseMaxRpcTimeout() != null) {
      updateKnowledgeBaseRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateKnowledgeBaseMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateKnowledgeBaseMaxRpcTimeout set to "
                + this.clientProperties.getUpdateKnowledgeBaseMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateKnowledgeBaseTotalTimeout() != null) {
      updateKnowledgeBaseRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateKnowledgeBaseTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateKnowledgeBaseTotalTimeout set to "
                + this.clientProperties.getUpdateKnowledgeBaseTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateKnowledgeBaseSettings()
        .setRetrySettings(updateKnowledgeBaseRetrySettingBuilder.build());
    RetrySettings.Builder listLocationsRetrySettingBuilder =
        clientSettingsBuilder.listLocationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListLocationsInitialRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListLocationsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRetryDelay set to "
                + this.clientProperties.getListLocationsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsRetryDelayMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListLocationsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRetryDelayMultiplier set to "
                + this.clientProperties.getListLocationsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListLocationsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRetryDelay set to "
                + this.clientProperties.getListLocationsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsInitialRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListLocationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRpcTimeout set to "
                + this.clientProperties.getListLocationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsRpcTimeoutMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListLocationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRpcTimeout set to "
                + this.clientProperties.getListLocationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsTotalTimeout() != null) {
      listLocationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListLocationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsTotalTimeout set to "
                + this.clientProperties.getListLocationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listLocationsSettings()
        .setRetrySettings(listLocationsRetrySettingBuilder.build());
    RetrySettings.Builder getLocationRetrySettingBuilder =
        clientSettingsBuilder.getLocationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetLocationInitialRetryDelay() != null) {
      getLocationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetLocationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRetryDelay set to "
                + this.clientProperties.getGetLocationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationRetryDelayMultiplier() != null) {
      getLocationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetLocationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRetryDelayMultiplier set to "
                + this.clientProperties.getGetLocationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRetryDelay() != null) {
      getLocationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetLocationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRetryDelay set to "
                + this.clientProperties.getGetLocationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationInitialRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetLocationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRpcTimeout set to "
                + this.clientProperties.getGetLocationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationRpcTimeoutMultiplier() != null) {
      getLocationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetLocationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRpcTimeout set to "
                + this.clientProperties.getGetLocationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationTotalTimeout() != null) {
      getLocationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetLocationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationTotalTimeout set to " + this.clientProperties.getGetLocationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getLocationSettings()
        .setRetrySettings(getLocationRetrySettingBuilder.build());
    return KnowledgeBasesClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-knowledge-bases";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
