/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dialogflow.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dialogflow.v2.ContextsClient;
import com.google.cloud.dialogflow.v2.ContextsSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ContextsClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ContextsClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dialogflow.v2.spring.auto.contexts.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({ContextsSpringProperties.class, GlobalProperties.class})
public class ContextsSpringAutoConfiguration {
  private final ContextsSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(ContextsSpringAutoConfiguration.class);

  protected ContextsSpringAutoConfiguration(
      ContextsSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider contextsCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Contexts-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultContextsTransportChannelProvider() {
    return ContextsSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ContextsClient bean configured to use the default credentials provider (obtained
   * with contextsCredentials()) and its default transport channel provider
   * (defaultContextsTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in ContextsSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public ContextsClient contextsClient(
      @Qualifier("contextsCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultContextsTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ContextsSettings.Builder clientSettingsBuilder =
        ContextsSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ContextsSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          ContextsSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listContextsRetrySettingBuilder =
        clientSettingsBuilder.listContextsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListContextsInitialRetryDelay() != null) {
      listContextsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListContextsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContextsInitialRetryDelay set to "
                + this.clientProperties.getListContextsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListContextsRetryDelayMultiplier() != null) {
      listContextsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListContextsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContextsRetryDelayMultiplier set to "
                + this.clientProperties.getListContextsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListContextsMaxRetryDelay() != null) {
      listContextsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListContextsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContextsMaxRetryDelay set to "
                + this.clientProperties.getListContextsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListContextsInitialRpcTimeout() != null) {
      listContextsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListContextsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContextsInitialRpcTimeout set to "
                + this.clientProperties.getListContextsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListContextsRpcTimeoutMultiplier() != null) {
      listContextsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListContextsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContextsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListContextsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListContextsMaxRpcTimeout() != null) {
      listContextsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListContextsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContextsMaxRpcTimeout set to "
                + this.clientProperties.getListContextsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListContextsTotalTimeout() != null) {
      listContextsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListContextsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListContextsTotalTimeout set to "
                + this.clientProperties.getListContextsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listContextsSettings()
        .setRetrySettings(listContextsRetrySettingBuilder.build());
    RetrySettings.Builder getContextRetrySettingBuilder =
        clientSettingsBuilder.getContextSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetContextInitialRetryDelay() != null) {
      getContextRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetContextInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContextInitialRetryDelay set to "
                + this.clientProperties.getGetContextInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetContextRetryDelayMultiplier() != null) {
      getContextRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetContextRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContextRetryDelayMultiplier set to "
                + this.clientProperties.getGetContextRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetContextMaxRetryDelay() != null) {
      getContextRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetContextMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContextMaxRetryDelay set to " + this.clientProperties.getGetContextMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetContextInitialRpcTimeout() != null) {
      getContextRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetContextInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContextInitialRpcTimeout set to "
                + this.clientProperties.getGetContextInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetContextRpcTimeoutMultiplier() != null) {
      getContextRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetContextRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContextRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetContextRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetContextMaxRpcTimeout() != null) {
      getContextRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetContextMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContextMaxRpcTimeout set to " + this.clientProperties.getGetContextMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetContextTotalTimeout() != null) {
      getContextRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetContextTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetContextTotalTimeout set to " + this.clientProperties.getGetContextTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getContextSettings()
        .setRetrySettings(getContextRetrySettingBuilder.build());
    RetrySettings.Builder createContextRetrySettingBuilder =
        clientSettingsBuilder.createContextSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateContextInitialRetryDelay() != null) {
      createContextRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateContextInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateContextInitialRetryDelay set to "
                + this.clientProperties.getCreateContextInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateContextRetryDelayMultiplier() != null) {
      createContextRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateContextRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateContextRetryDelayMultiplier set to "
                + this.clientProperties.getCreateContextRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateContextMaxRetryDelay() != null) {
      createContextRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateContextMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateContextMaxRetryDelay set to "
                + this.clientProperties.getCreateContextMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateContextInitialRpcTimeout() != null) {
      createContextRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateContextInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateContextInitialRpcTimeout set to "
                + this.clientProperties.getCreateContextInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateContextRpcTimeoutMultiplier() != null) {
      createContextRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateContextRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateContextRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateContextRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateContextMaxRpcTimeout() != null) {
      createContextRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateContextMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateContextMaxRpcTimeout set to "
                + this.clientProperties.getCreateContextMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateContextTotalTimeout() != null) {
      createContextRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateContextTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateContextTotalTimeout set to "
                + this.clientProperties.getCreateContextTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createContextSettings()
        .setRetrySettings(createContextRetrySettingBuilder.build());
    RetrySettings.Builder updateContextRetrySettingBuilder =
        clientSettingsBuilder.updateContextSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateContextInitialRetryDelay() != null) {
      updateContextRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateContextInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateContextInitialRetryDelay set to "
                + this.clientProperties.getUpdateContextInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateContextRetryDelayMultiplier() != null) {
      updateContextRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateContextRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateContextRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateContextRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateContextMaxRetryDelay() != null) {
      updateContextRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateContextMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateContextMaxRetryDelay set to "
                + this.clientProperties.getUpdateContextMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateContextInitialRpcTimeout() != null) {
      updateContextRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateContextInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateContextInitialRpcTimeout set to "
                + this.clientProperties.getUpdateContextInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateContextRpcTimeoutMultiplier() != null) {
      updateContextRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateContextRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateContextRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateContextRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateContextMaxRpcTimeout() != null) {
      updateContextRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateContextMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateContextMaxRpcTimeout set to "
                + this.clientProperties.getUpdateContextMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateContextTotalTimeout() != null) {
      updateContextRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateContextTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateContextTotalTimeout set to "
                + this.clientProperties.getUpdateContextTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateContextSettings()
        .setRetrySettings(updateContextRetrySettingBuilder.build());
    RetrySettings.Builder deleteContextRetrySettingBuilder =
        clientSettingsBuilder.deleteContextSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteContextInitialRetryDelay() != null) {
      deleteContextRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteContextInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteContextInitialRetryDelay set to "
                + this.clientProperties.getDeleteContextInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteContextRetryDelayMultiplier() != null) {
      deleteContextRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteContextRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteContextRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteContextRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteContextMaxRetryDelay() != null) {
      deleteContextRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteContextMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteContextMaxRetryDelay set to "
                + this.clientProperties.getDeleteContextMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteContextInitialRpcTimeout() != null) {
      deleteContextRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteContextInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteContextInitialRpcTimeout set to "
                + this.clientProperties.getDeleteContextInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteContextRpcTimeoutMultiplier() != null) {
      deleteContextRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteContextRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteContextRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteContextRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteContextMaxRpcTimeout() != null) {
      deleteContextRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteContextMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteContextMaxRpcTimeout set to "
                + this.clientProperties.getDeleteContextMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteContextTotalTimeout() != null) {
      deleteContextRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteContextTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteContextTotalTimeout set to "
                + this.clientProperties.getDeleteContextTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteContextSettings()
        .setRetrySettings(deleteContextRetrySettingBuilder.build());
    RetrySettings.Builder deleteAllContextsRetrySettingBuilder =
        clientSettingsBuilder.deleteAllContextsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteAllContextsInitialRetryDelay() != null) {
      deleteAllContextsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteAllContextsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAllContextsInitialRetryDelay set to "
                + this.clientProperties.getDeleteAllContextsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteAllContextsRetryDelayMultiplier() != null) {
      deleteAllContextsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteAllContextsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAllContextsRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteAllContextsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteAllContextsMaxRetryDelay() != null) {
      deleteAllContextsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteAllContextsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAllContextsMaxRetryDelay set to "
                + this.clientProperties.getDeleteAllContextsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteAllContextsInitialRpcTimeout() != null) {
      deleteAllContextsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteAllContextsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAllContextsInitialRpcTimeout set to "
                + this.clientProperties.getDeleteAllContextsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAllContextsRpcTimeoutMultiplier() != null) {
      deleteAllContextsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteAllContextsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAllContextsRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteAllContextsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteAllContextsMaxRpcTimeout() != null) {
      deleteAllContextsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteAllContextsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAllContextsMaxRpcTimeout set to "
                + this.clientProperties.getDeleteAllContextsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAllContextsTotalTimeout() != null) {
      deleteAllContextsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteAllContextsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAllContextsTotalTimeout set to "
                + this.clientProperties.getDeleteAllContextsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteAllContextsSettings()
        .setRetrySettings(deleteAllContextsRetrySettingBuilder.build());
    RetrySettings.Builder listLocationsRetrySettingBuilder =
        clientSettingsBuilder.listLocationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListLocationsInitialRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListLocationsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRetryDelay set to "
                + this.clientProperties.getListLocationsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsRetryDelayMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListLocationsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRetryDelayMultiplier set to "
                + this.clientProperties.getListLocationsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListLocationsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRetryDelay set to "
                + this.clientProperties.getListLocationsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsInitialRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListLocationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRpcTimeout set to "
                + this.clientProperties.getListLocationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsRpcTimeoutMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListLocationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRpcTimeout set to "
                + this.clientProperties.getListLocationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsTotalTimeout() != null) {
      listLocationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListLocationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsTotalTimeout set to "
                + this.clientProperties.getListLocationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listLocationsSettings()
        .setRetrySettings(listLocationsRetrySettingBuilder.build());
    RetrySettings.Builder getLocationRetrySettingBuilder =
        clientSettingsBuilder.getLocationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetLocationInitialRetryDelay() != null) {
      getLocationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetLocationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRetryDelay set to "
                + this.clientProperties.getGetLocationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationRetryDelayMultiplier() != null) {
      getLocationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetLocationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRetryDelayMultiplier set to "
                + this.clientProperties.getGetLocationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRetryDelay() != null) {
      getLocationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetLocationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRetryDelay set to "
                + this.clientProperties.getGetLocationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationInitialRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetLocationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRpcTimeout set to "
                + this.clientProperties.getGetLocationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationRpcTimeoutMultiplier() != null) {
      getLocationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetLocationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRpcTimeout set to "
                + this.clientProperties.getGetLocationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationTotalTimeout() != null) {
      getLocationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetLocationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationTotalTimeout set to " + this.clientProperties.getGetLocationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getLocationSettings()
        .setRetrySettings(getLocationRetrySettingBuilder.build());
    return ContextsClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-contexts";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
