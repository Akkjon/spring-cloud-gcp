/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dialogflow.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dialogflow.v2.ConversationProfilesClient;
import com.google.cloud.dialogflow.v2.ConversationProfilesSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ConversationProfilesClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ConversationProfilesClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dialogflow.v2.spring.auto.conversation-profiles.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({ConversationProfilesSpringProperties.class, GlobalProperties.class})
public class ConversationProfilesSpringAutoConfiguration {
  private final ConversationProfilesSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(ConversationProfilesSpringAutoConfiguration.class);

  protected ConversationProfilesSpringAutoConfiguration(
      ConversationProfilesSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider conversationProfilesCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from ConversationProfiles-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultConversationProfilesTransportChannelProvider() {
    return ConversationProfilesSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ConversationProfilesClient bean configured to use the default credentials provider
   * (obtained with conversationProfilesCredentials()) and its default transport channel provider
   * (defaultConversationProfilesTransportChannelProvider()). It also configures the quota project
   * ID if provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in ConversationProfilesSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public ConversationProfilesClient conversationProfilesClient(
      @Qualifier("conversationProfilesCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultConversationProfilesTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ConversationProfilesSettings.Builder clientSettingsBuilder =
        ConversationProfilesSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ConversationProfilesSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          ConversationProfilesSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listConversationProfilesRetrySettingBuilder =
        clientSettingsBuilder.listConversationProfilesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListConversationProfilesInitialRetryDelay() != null) {
      listConversationProfilesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListConversationProfilesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationProfilesInitialRetryDelay set to "
                + this.clientProperties.getListConversationProfilesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListConversationProfilesRetryDelayMultiplier() != null) {
      listConversationProfilesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListConversationProfilesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationProfilesRetryDelayMultiplier set to "
                + this.clientProperties.getListConversationProfilesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListConversationProfilesMaxRetryDelay() != null) {
      listConversationProfilesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListConversationProfilesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationProfilesMaxRetryDelay set to "
                + this.clientProperties.getListConversationProfilesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListConversationProfilesInitialRpcTimeout() != null) {
      listConversationProfilesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListConversationProfilesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationProfilesInitialRpcTimeout set to "
                + this.clientProperties.getListConversationProfilesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListConversationProfilesRpcTimeoutMultiplier() != null) {
      listConversationProfilesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListConversationProfilesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationProfilesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListConversationProfilesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListConversationProfilesMaxRpcTimeout() != null) {
      listConversationProfilesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListConversationProfilesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationProfilesMaxRpcTimeout set to "
                + this.clientProperties.getListConversationProfilesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListConversationProfilesTotalTimeout() != null) {
      listConversationProfilesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListConversationProfilesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConversationProfilesTotalTimeout set to "
                + this.clientProperties.getListConversationProfilesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listConversationProfilesSettings()
        .setRetrySettings(listConversationProfilesRetrySettingBuilder.build());
    RetrySettings.Builder getConversationProfileRetrySettingBuilder =
        clientSettingsBuilder.getConversationProfileSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetConversationProfileInitialRetryDelay() != null) {
      getConversationProfileRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetConversationProfileInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationProfileInitialRetryDelay set to "
                + this.clientProperties.getGetConversationProfileInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetConversationProfileRetryDelayMultiplier() != null) {
      getConversationProfileRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetConversationProfileRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationProfileRetryDelayMultiplier set to "
                + this.clientProperties.getGetConversationProfileRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetConversationProfileMaxRetryDelay() != null) {
      getConversationProfileRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetConversationProfileMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationProfileMaxRetryDelay set to "
                + this.clientProperties.getGetConversationProfileMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetConversationProfileInitialRpcTimeout() != null) {
      getConversationProfileRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetConversationProfileInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationProfileInitialRpcTimeout set to "
                + this.clientProperties.getGetConversationProfileInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetConversationProfileRpcTimeoutMultiplier() != null) {
      getConversationProfileRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetConversationProfileRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationProfileRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetConversationProfileRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetConversationProfileMaxRpcTimeout() != null) {
      getConversationProfileRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetConversationProfileMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationProfileMaxRpcTimeout set to "
                + this.clientProperties.getGetConversationProfileMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetConversationProfileTotalTimeout() != null) {
      getConversationProfileRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetConversationProfileTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConversationProfileTotalTimeout set to "
                + this.clientProperties.getGetConversationProfileTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getConversationProfileSettings()
        .setRetrySettings(getConversationProfileRetrySettingBuilder.build());
    RetrySettings.Builder createConversationProfileRetrySettingBuilder =
        clientSettingsBuilder.createConversationProfileSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateConversationProfileInitialRetryDelay() != null) {
      createConversationProfileRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateConversationProfileInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationProfileInitialRetryDelay set to "
                + this.clientProperties.getCreateConversationProfileInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateConversationProfileRetryDelayMultiplier() != null) {
      createConversationProfileRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateConversationProfileRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationProfileRetryDelayMultiplier set to "
                + this.clientProperties.getCreateConversationProfileRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateConversationProfileMaxRetryDelay() != null) {
      createConversationProfileRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateConversationProfileMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationProfileMaxRetryDelay set to "
                + this.clientProperties.getCreateConversationProfileMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateConversationProfileInitialRpcTimeout() != null) {
      createConversationProfileRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateConversationProfileInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationProfileInitialRpcTimeout set to "
                + this.clientProperties.getCreateConversationProfileInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateConversationProfileRpcTimeoutMultiplier() != null) {
      createConversationProfileRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateConversationProfileRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationProfileRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateConversationProfileRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateConversationProfileMaxRpcTimeout() != null) {
      createConversationProfileRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateConversationProfileMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationProfileMaxRpcTimeout set to "
                + this.clientProperties.getCreateConversationProfileMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateConversationProfileTotalTimeout() != null) {
      createConversationProfileRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateConversationProfileTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateConversationProfileTotalTimeout set to "
                + this.clientProperties.getCreateConversationProfileTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createConversationProfileSettings()
        .setRetrySettings(createConversationProfileRetrySettingBuilder.build());
    RetrySettings.Builder updateConversationProfileRetrySettingBuilder =
        clientSettingsBuilder.updateConversationProfileSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateConversationProfileInitialRetryDelay() != null) {
      updateConversationProfileRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateConversationProfileInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConversationProfileInitialRetryDelay set to "
                + this.clientProperties.getUpdateConversationProfileInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateConversationProfileRetryDelayMultiplier() != null) {
      updateConversationProfileRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateConversationProfileRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConversationProfileRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateConversationProfileRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateConversationProfileMaxRetryDelay() != null) {
      updateConversationProfileRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateConversationProfileMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConversationProfileMaxRetryDelay set to "
                + this.clientProperties.getUpdateConversationProfileMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateConversationProfileInitialRpcTimeout() != null) {
      updateConversationProfileRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateConversationProfileInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConversationProfileInitialRpcTimeout set to "
                + this.clientProperties.getUpdateConversationProfileInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateConversationProfileRpcTimeoutMultiplier() != null) {
      updateConversationProfileRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateConversationProfileRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConversationProfileRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateConversationProfileRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateConversationProfileMaxRpcTimeout() != null) {
      updateConversationProfileRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateConversationProfileMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConversationProfileMaxRpcTimeout set to "
                + this.clientProperties.getUpdateConversationProfileMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateConversationProfileTotalTimeout() != null) {
      updateConversationProfileRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateConversationProfileTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConversationProfileTotalTimeout set to "
                + this.clientProperties.getUpdateConversationProfileTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateConversationProfileSettings()
        .setRetrySettings(updateConversationProfileRetrySettingBuilder.build());
    RetrySettings.Builder deleteConversationProfileRetrySettingBuilder =
        clientSettingsBuilder.deleteConversationProfileSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteConversationProfileInitialRetryDelay() != null) {
      deleteConversationProfileRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteConversationProfileInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationProfileInitialRetryDelay set to "
                + this.clientProperties.getDeleteConversationProfileInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteConversationProfileRetryDelayMultiplier() != null) {
      deleteConversationProfileRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteConversationProfileRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationProfileRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteConversationProfileRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteConversationProfileMaxRetryDelay() != null) {
      deleteConversationProfileRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteConversationProfileMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationProfileMaxRetryDelay set to "
                + this.clientProperties.getDeleteConversationProfileMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteConversationProfileInitialRpcTimeout() != null) {
      deleteConversationProfileRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteConversationProfileInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationProfileInitialRpcTimeout set to "
                + this.clientProperties.getDeleteConversationProfileInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteConversationProfileRpcTimeoutMultiplier() != null) {
      deleteConversationProfileRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteConversationProfileRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationProfileRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteConversationProfileRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteConversationProfileMaxRpcTimeout() != null) {
      deleteConversationProfileRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteConversationProfileMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationProfileMaxRpcTimeout set to "
                + this.clientProperties.getDeleteConversationProfileMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteConversationProfileTotalTimeout() != null) {
      deleteConversationProfileRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteConversationProfileTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteConversationProfileTotalTimeout set to "
                + this.clientProperties.getDeleteConversationProfileTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteConversationProfileSettings()
        .setRetrySettings(deleteConversationProfileRetrySettingBuilder.build());
    RetrySettings.Builder setSuggestionFeatureConfigRetrySettingBuilder =
        clientSettingsBuilder.setSuggestionFeatureConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetSuggestionFeatureConfigInitialRetryDelay() != null) {
      setSuggestionFeatureConfigRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getSetSuggestionFeatureConfigInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetSuggestionFeatureConfigInitialRetryDelay set to "
                + this.clientProperties.getSetSuggestionFeatureConfigInitialRetryDelay());
      }
    }
    if (this.clientProperties.getSetSuggestionFeatureConfigRetryDelayMultiplier() != null) {
      setSuggestionFeatureConfigRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getSetSuggestionFeatureConfigRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetSuggestionFeatureConfigRetryDelayMultiplier set to "
                + this.clientProperties.getSetSuggestionFeatureConfigRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getSetSuggestionFeatureConfigMaxRetryDelay() != null) {
      setSuggestionFeatureConfigRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getSetSuggestionFeatureConfigMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetSuggestionFeatureConfigMaxRetryDelay set to "
                + this.clientProperties.getSetSuggestionFeatureConfigMaxRetryDelay());
      }
    }
    if (this.clientProperties.getSetSuggestionFeatureConfigInitialRpcTimeout() != null) {
      setSuggestionFeatureConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetSuggestionFeatureConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetSuggestionFeatureConfigInitialRpcTimeout set to "
                + this.clientProperties.getSetSuggestionFeatureConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetSuggestionFeatureConfigRpcTimeoutMultiplier() != null) {
      setSuggestionFeatureConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetSuggestionFeatureConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetSuggestionFeatureConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetSuggestionFeatureConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetSuggestionFeatureConfigMaxRpcTimeout() != null) {
      setSuggestionFeatureConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetSuggestionFeatureConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetSuggestionFeatureConfigMaxRpcTimeout set to "
                + this.clientProperties.getSetSuggestionFeatureConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetSuggestionFeatureConfigTotalTimeout() != null) {
      setSuggestionFeatureConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetSuggestionFeatureConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetSuggestionFeatureConfigTotalTimeout set to "
                + this.clientProperties.getSetSuggestionFeatureConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setSuggestionFeatureConfigSettings()
        .setRetrySettings(setSuggestionFeatureConfigRetrySettingBuilder.build());
    RetrySettings.Builder clearSuggestionFeatureConfigRetrySettingBuilder =
        clientSettingsBuilder.clearSuggestionFeatureConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getClearSuggestionFeatureConfigInitialRetryDelay() != null) {
      clearSuggestionFeatureConfigRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getClearSuggestionFeatureConfigInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ClearSuggestionFeatureConfigInitialRetryDelay set to "
                + this.clientProperties.getClearSuggestionFeatureConfigInitialRetryDelay());
      }
    }
    if (this.clientProperties.getClearSuggestionFeatureConfigRetryDelayMultiplier() != null) {
      clearSuggestionFeatureConfigRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getClearSuggestionFeatureConfigRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ClearSuggestionFeatureConfigRetryDelayMultiplier set to "
                + this.clientProperties.getClearSuggestionFeatureConfigRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getClearSuggestionFeatureConfigMaxRetryDelay() != null) {
      clearSuggestionFeatureConfigRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getClearSuggestionFeatureConfigMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ClearSuggestionFeatureConfigMaxRetryDelay set to "
                + this.clientProperties.getClearSuggestionFeatureConfigMaxRetryDelay());
      }
    }
    if (this.clientProperties.getClearSuggestionFeatureConfigInitialRpcTimeout() != null) {
      clearSuggestionFeatureConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getClearSuggestionFeatureConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ClearSuggestionFeatureConfigInitialRpcTimeout set to "
                + this.clientProperties.getClearSuggestionFeatureConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getClearSuggestionFeatureConfigRpcTimeoutMultiplier() != null) {
      clearSuggestionFeatureConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getClearSuggestionFeatureConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ClearSuggestionFeatureConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getClearSuggestionFeatureConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getClearSuggestionFeatureConfigMaxRpcTimeout() != null) {
      clearSuggestionFeatureConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getClearSuggestionFeatureConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ClearSuggestionFeatureConfigMaxRpcTimeout set to "
                + this.clientProperties.getClearSuggestionFeatureConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getClearSuggestionFeatureConfigTotalTimeout() != null) {
      clearSuggestionFeatureConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getClearSuggestionFeatureConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ClearSuggestionFeatureConfigTotalTimeout set to "
                + this.clientProperties.getClearSuggestionFeatureConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .clearSuggestionFeatureConfigSettings()
        .setRetrySettings(clearSuggestionFeatureConfigRetrySettingBuilder.build());
    RetrySettings.Builder listLocationsRetrySettingBuilder =
        clientSettingsBuilder.listLocationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListLocationsInitialRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListLocationsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRetryDelay set to "
                + this.clientProperties.getListLocationsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsRetryDelayMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListLocationsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRetryDelayMultiplier set to "
                + this.clientProperties.getListLocationsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRetryDelay() != null) {
      listLocationsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListLocationsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRetryDelay set to "
                + this.clientProperties.getListLocationsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListLocationsInitialRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListLocationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsInitialRpcTimeout set to "
                + this.clientProperties.getListLocationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsRpcTimeoutMultiplier() != null) {
      listLocationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListLocationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListLocationsMaxRpcTimeout() != null) {
      listLocationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListLocationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsMaxRpcTimeout set to "
                + this.clientProperties.getListLocationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListLocationsTotalTimeout() != null) {
      listLocationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListLocationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListLocationsTotalTimeout set to "
                + this.clientProperties.getListLocationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listLocationsSettings()
        .setRetrySettings(listLocationsRetrySettingBuilder.build());
    RetrySettings.Builder getLocationRetrySettingBuilder =
        clientSettingsBuilder.getLocationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetLocationInitialRetryDelay() != null) {
      getLocationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetLocationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRetryDelay set to "
                + this.clientProperties.getGetLocationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationRetryDelayMultiplier() != null) {
      getLocationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetLocationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRetryDelayMultiplier set to "
                + this.clientProperties.getGetLocationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRetryDelay() != null) {
      getLocationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetLocationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRetryDelay set to "
                + this.clientProperties.getGetLocationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetLocationInitialRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetLocationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationInitialRpcTimeout set to "
                + this.clientProperties.getGetLocationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationRpcTimeoutMultiplier() != null) {
      getLocationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetLocationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetLocationMaxRpcTimeout() != null) {
      getLocationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetLocationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationMaxRpcTimeout set to "
                + this.clientProperties.getGetLocationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetLocationTotalTimeout() != null) {
      getLocationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetLocationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetLocationTotalTimeout set to " + this.clientProperties.getGetLocationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getLocationSettings()
        .setRetrySettings(getLocationRetrySettingBuilder.build());
    return ConversationProfilesClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-conversation-profiles";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
