/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.dataproc.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.dataproc.v1.WorkflowTemplateServiceClient;
import com.google.cloud.dataproc.v1.WorkflowTemplateServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link WorkflowTemplateServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(WorkflowTemplateServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.dataproc.v1.spring.auto.workflow-template-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({
  WorkflowTemplateServiceSpringProperties.class,
  GlobalProperties.class
})
public class WorkflowTemplateServiceSpringAutoConfiguration {
  private final WorkflowTemplateServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(WorkflowTemplateServiceSpringAutoConfiguration.class);

  protected WorkflowTemplateServiceSpringAutoConfiguration(
      WorkflowTemplateServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider workflowTemplateServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from WorkflowTemplateService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultWorkflowTemplateServiceTransportChannelProvider() {
    return WorkflowTemplateServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a WorkflowTemplateServiceClient bean configured to use the default credentials
   * provider (obtained with workflowTemplateServiceCredentials()) and its default transport channel
   * provider (defaultWorkflowTemplateServiceTransportChannelProvider()). It also configures the
   * quota project ID if provided. It will configure an executor provider in case there is more than
   * one thread configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in WorkflowTemplateServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public WorkflowTemplateServiceClient workflowTemplateServiceClient(
      @Qualifier("workflowTemplateServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultWorkflowTemplateServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    WorkflowTemplateServiceSettings.Builder clientSettingsBuilder =
        WorkflowTemplateServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          WorkflowTemplateServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          WorkflowTemplateServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createWorkflowTemplateRetrySettingBuilder =
        clientSettingsBuilder.createWorkflowTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateWorkflowTemplateInitialRetryDelay() != null) {
      createWorkflowTemplateRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateWorkflowTemplateInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateWorkflowTemplateInitialRetryDelay set to "
                + this.clientProperties.getCreateWorkflowTemplateInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateWorkflowTemplateRetryDelayMultiplier() != null) {
      createWorkflowTemplateRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateWorkflowTemplateRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateWorkflowTemplateRetryDelayMultiplier set to "
                + this.clientProperties.getCreateWorkflowTemplateRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateWorkflowTemplateMaxRetryDelay() != null) {
      createWorkflowTemplateRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateWorkflowTemplateMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateWorkflowTemplateMaxRetryDelay set to "
                + this.clientProperties.getCreateWorkflowTemplateMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateWorkflowTemplateInitialRpcTimeout() != null) {
      createWorkflowTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateWorkflowTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateWorkflowTemplateInitialRpcTimeout set to "
                + this.clientProperties.getCreateWorkflowTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateWorkflowTemplateRpcTimeoutMultiplier() != null) {
      createWorkflowTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateWorkflowTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateWorkflowTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateWorkflowTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateWorkflowTemplateMaxRpcTimeout() != null) {
      createWorkflowTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateWorkflowTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateWorkflowTemplateMaxRpcTimeout set to "
                + this.clientProperties.getCreateWorkflowTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateWorkflowTemplateTotalTimeout() != null) {
      createWorkflowTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateWorkflowTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateWorkflowTemplateTotalTimeout set to "
                + this.clientProperties.getCreateWorkflowTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createWorkflowTemplateSettings()
        .setRetrySettings(createWorkflowTemplateRetrySettingBuilder.build());
    RetrySettings.Builder getWorkflowTemplateRetrySettingBuilder =
        clientSettingsBuilder.getWorkflowTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetWorkflowTemplateInitialRetryDelay() != null) {
      getWorkflowTemplateRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetWorkflowTemplateInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetWorkflowTemplateInitialRetryDelay set to "
                + this.clientProperties.getGetWorkflowTemplateInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetWorkflowTemplateRetryDelayMultiplier() != null) {
      getWorkflowTemplateRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetWorkflowTemplateRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetWorkflowTemplateRetryDelayMultiplier set to "
                + this.clientProperties.getGetWorkflowTemplateRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetWorkflowTemplateMaxRetryDelay() != null) {
      getWorkflowTemplateRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetWorkflowTemplateMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetWorkflowTemplateMaxRetryDelay set to "
                + this.clientProperties.getGetWorkflowTemplateMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetWorkflowTemplateInitialRpcTimeout() != null) {
      getWorkflowTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetWorkflowTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetWorkflowTemplateInitialRpcTimeout set to "
                + this.clientProperties.getGetWorkflowTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetWorkflowTemplateRpcTimeoutMultiplier() != null) {
      getWorkflowTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetWorkflowTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetWorkflowTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetWorkflowTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetWorkflowTemplateMaxRpcTimeout() != null) {
      getWorkflowTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetWorkflowTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetWorkflowTemplateMaxRpcTimeout set to "
                + this.clientProperties.getGetWorkflowTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetWorkflowTemplateTotalTimeout() != null) {
      getWorkflowTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetWorkflowTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetWorkflowTemplateTotalTimeout set to "
                + this.clientProperties.getGetWorkflowTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getWorkflowTemplateSettings()
        .setRetrySettings(getWorkflowTemplateRetrySettingBuilder.build());
    RetrySettings.Builder instantiateWorkflowTemplateRetrySettingBuilder =
        clientSettingsBuilder.instantiateWorkflowTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getInstantiateWorkflowTemplateInitialRetryDelay() != null) {
      instantiateWorkflowTemplateRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getInstantiateWorkflowTemplateInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstantiateWorkflowTemplateInitialRetryDelay set to "
                + this.clientProperties.getInstantiateWorkflowTemplateInitialRetryDelay());
      }
    }
    if (this.clientProperties.getInstantiateWorkflowTemplateRetryDelayMultiplier() != null) {
      instantiateWorkflowTemplateRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getInstantiateWorkflowTemplateRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstantiateWorkflowTemplateRetryDelayMultiplier set to "
                + this.clientProperties.getInstantiateWorkflowTemplateRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getInstantiateWorkflowTemplateMaxRetryDelay() != null) {
      instantiateWorkflowTemplateRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getInstantiateWorkflowTemplateMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstantiateWorkflowTemplateMaxRetryDelay set to "
                + this.clientProperties.getInstantiateWorkflowTemplateMaxRetryDelay());
      }
    }
    if (this.clientProperties.getInstantiateWorkflowTemplateInitialRpcTimeout() != null) {
      instantiateWorkflowTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getInstantiateWorkflowTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstantiateWorkflowTemplateInitialRpcTimeout set to "
                + this.clientProperties.getInstantiateWorkflowTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getInstantiateWorkflowTemplateRpcTimeoutMultiplier() != null) {
      instantiateWorkflowTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getInstantiateWorkflowTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstantiateWorkflowTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getInstantiateWorkflowTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getInstantiateWorkflowTemplateMaxRpcTimeout() != null) {
      instantiateWorkflowTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getInstantiateWorkflowTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstantiateWorkflowTemplateMaxRpcTimeout set to "
                + this.clientProperties.getInstantiateWorkflowTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getInstantiateWorkflowTemplateTotalTimeout() != null) {
      instantiateWorkflowTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getInstantiateWorkflowTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstantiateWorkflowTemplateTotalTimeout set to "
                + this.clientProperties.getInstantiateWorkflowTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .instantiateWorkflowTemplateSettings()
        .setRetrySettings(instantiateWorkflowTemplateRetrySettingBuilder.build());
    RetrySettings.Builder instantiateInlineWorkflowTemplateRetrySettingBuilder =
        clientSettingsBuilder
            .instantiateInlineWorkflowTemplateSettings()
            .getRetrySettings()
            .toBuilder();
    if (this.clientProperties.getInstantiateInlineWorkflowTemplateInitialRetryDelay() != null) {
      instantiateInlineWorkflowTemplateRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getInstantiateInlineWorkflowTemplateInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstantiateInlineWorkflowTemplateInitialRetryDelay set to "
                + this.clientProperties.getInstantiateInlineWorkflowTemplateInitialRetryDelay());
      }
    }
    if (this.clientProperties.getInstantiateInlineWorkflowTemplateRetryDelayMultiplier() != null) {
      instantiateInlineWorkflowTemplateRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getInstantiateInlineWorkflowTemplateRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstantiateInlineWorkflowTemplateRetryDelayMultiplier set to "
                + this.clientProperties.getInstantiateInlineWorkflowTemplateRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getInstantiateInlineWorkflowTemplateMaxRetryDelay() != null) {
      instantiateInlineWorkflowTemplateRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getInstantiateInlineWorkflowTemplateMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstantiateInlineWorkflowTemplateMaxRetryDelay set to "
                + this.clientProperties.getInstantiateInlineWorkflowTemplateMaxRetryDelay());
      }
    }
    if (this.clientProperties.getInstantiateInlineWorkflowTemplateInitialRpcTimeout() != null) {
      instantiateInlineWorkflowTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getInstantiateInlineWorkflowTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstantiateInlineWorkflowTemplateInitialRpcTimeout set to "
                + this.clientProperties.getInstantiateInlineWorkflowTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getInstantiateInlineWorkflowTemplateRpcTimeoutMultiplier() != null) {
      instantiateInlineWorkflowTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getInstantiateInlineWorkflowTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstantiateInlineWorkflowTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getInstantiateInlineWorkflowTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getInstantiateInlineWorkflowTemplateMaxRpcTimeout() != null) {
      instantiateInlineWorkflowTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getInstantiateInlineWorkflowTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstantiateInlineWorkflowTemplateMaxRpcTimeout set to "
                + this.clientProperties.getInstantiateInlineWorkflowTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getInstantiateInlineWorkflowTemplateTotalTimeout() != null) {
      instantiateInlineWorkflowTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getInstantiateInlineWorkflowTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstantiateInlineWorkflowTemplateTotalTimeout set to "
                + this.clientProperties.getInstantiateInlineWorkflowTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .instantiateInlineWorkflowTemplateSettings()
        .setRetrySettings(instantiateInlineWorkflowTemplateRetrySettingBuilder.build());
    RetrySettings.Builder updateWorkflowTemplateRetrySettingBuilder =
        clientSettingsBuilder.updateWorkflowTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateWorkflowTemplateInitialRetryDelay() != null) {
      updateWorkflowTemplateRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateWorkflowTemplateInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateWorkflowTemplateInitialRetryDelay set to "
                + this.clientProperties.getUpdateWorkflowTemplateInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateWorkflowTemplateRetryDelayMultiplier() != null) {
      updateWorkflowTemplateRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateWorkflowTemplateRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateWorkflowTemplateRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateWorkflowTemplateRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateWorkflowTemplateMaxRetryDelay() != null) {
      updateWorkflowTemplateRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateWorkflowTemplateMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateWorkflowTemplateMaxRetryDelay set to "
                + this.clientProperties.getUpdateWorkflowTemplateMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateWorkflowTemplateInitialRpcTimeout() != null) {
      updateWorkflowTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateWorkflowTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateWorkflowTemplateInitialRpcTimeout set to "
                + this.clientProperties.getUpdateWorkflowTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateWorkflowTemplateRpcTimeoutMultiplier() != null) {
      updateWorkflowTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateWorkflowTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateWorkflowTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateWorkflowTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateWorkflowTemplateMaxRpcTimeout() != null) {
      updateWorkflowTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateWorkflowTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateWorkflowTemplateMaxRpcTimeout set to "
                + this.clientProperties.getUpdateWorkflowTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateWorkflowTemplateTotalTimeout() != null) {
      updateWorkflowTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateWorkflowTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateWorkflowTemplateTotalTimeout set to "
                + this.clientProperties.getUpdateWorkflowTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateWorkflowTemplateSettings()
        .setRetrySettings(updateWorkflowTemplateRetrySettingBuilder.build());
    RetrySettings.Builder listWorkflowTemplatesRetrySettingBuilder =
        clientSettingsBuilder.listWorkflowTemplatesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListWorkflowTemplatesInitialRetryDelay() != null) {
      listWorkflowTemplatesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListWorkflowTemplatesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListWorkflowTemplatesInitialRetryDelay set to "
                + this.clientProperties.getListWorkflowTemplatesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListWorkflowTemplatesRetryDelayMultiplier() != null) {
      listWorkflowTemplatesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListWorkflowTemplatesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListWorkflowTemplatesRetryDelayMultiplier set to "
                + this.clientProperties.getListWorkflowTemplatesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListWorkflowTemplatesMaxRetryDelay() != null) {
      listWorkflowTemplatesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListWorkflowTemplatesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListWorkflowTemplatesMaxRetryDelay set to "
                + this.clientProperties.getListWorkflowTemplatesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListWorkflowTemplatesInitialRpcTimeout() != null) {
      listWorkflowTemplatesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListWorkflowTemplatesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListWorkflowTemplatesInitialRpcTimeout set to "
                + this.clientProperties.getListWorkflowTemplatesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListWorkflowTemplatesRpcTimeoutMultiplier() != null) {
      listWorkflowTemplatesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListWorkflowTemplatesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListWorkflowTemplatesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListWorkflowTemplatesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListWorkflowTemplatesMaxRpcTimeout() != null) {
      listWorkflowTemplatesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListWorkflowTemplatesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListWorkflowTemplatesMaxRpcTimeout set to "
                + this.clientProperties.getListWorkflowTemplatesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListWorkflowTemplatesTotalTimeout() != null) {
      listWorkflowTemplatesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListWorkflowTemplatesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListWorkflowTemplatesTotalTimeout set to "
                + this.clientProperties.getListWorkflowTemplatesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listWorkflowTemplatesSettings()
        .setRetrySettings(listWorkflowTemplatesRetrySettingBuilder.build());
    RetrySettings.Builder deleteWorkflowTemplateRetrySettingBuilder =
        clientSettingsBuilder.deleteWorkflowTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteWorkflowTemplateInitialRetryDelay() != null) {
      deleteWorkflowTemplateRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteWorkflowTemplateInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteWorkflowTemplateInitialRetryDelay set to "
                + this.clientProperties.getDeleteWorkflowTemplateInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteWorkflowTemplateRetryDelayMultiplier() != null) {
      deleteWorkflowTemplateRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteWorkflowTemplateRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteWorkflowTemplateRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteWorkflowTemplateRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteWorkflowTemplateMaxRetryDelay() != null) {
      deleteWorkflowTemplateRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteWorkflowTemplateMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteWorkflowTemplateMaxRetryDelay set to "
                + this.clientProperties.getDeleteWorkflowTemplateMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteWorkflowTemplateInitialRpcTimeout() != null) {
      deleteWorkflowTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteWorkflowTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteWorkflowTemplateInitialRpcTimeout set to "
                + this.clientProperties.getDeleteWorkflowTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteWorkflowTemplateRpcTimeoutMultiplier() != null) {
      deleteWorkflowTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteWorkflowTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteWorkflowTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteWorkflowTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteWorkflowTemplateMaxRpcTimeout() != null) {
      deleteWorkflowTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteWorkflowTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteWorkflowTemplateMaxRpcTimeout set to "
                + this.clientProperties.getDeleteWorkflowTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteWorkflowTemplateTotalTimeout() != null) {
      deleteWorkflowTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteWorkflowTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteWorkflowTemplateTotalTimeout set to "
                + this.clientProperties.getDeleteWorkflowTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteWorkflowTemplateSettings()
        .setRetrySettings(deleteWorkflowTemplateRetrySettingBuilder.build());
    return WorkflowTemplateServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-workflow-template-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
