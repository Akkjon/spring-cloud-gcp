/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.vmmigration.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import com.google.cloud.vmmigration.v1.VmMigrationClient;
import com.google.cloud.vmmigration.v1.VmMigrationSettings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link VmMigrationClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(VmMigrationClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.vmmigration.v1.spring.auto.vm-migration.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({VmMigrationSpringProperties.class, GlobalProperties.class})
public class VmMigrationSpringAutoConfiguration {
  private final VmMigrationSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(VmMigrationSpringAutoConfiguration.class);

  protected VmMigrationSpringAutoConfiguration(
      VmMigrationSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider vmMigrationCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from VmMigration-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultVmMigrationTransportChannelProvider() {
    return VmMigrationSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a VmMigrationClient bean configured to use the default credentials provider (obtained
   * with vmMigrationCredentials()) and its default transport channel provider
   * (defaultVmMigrationTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in VmMigrationSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public VmMigrationClient vmMigrationClient(
      @Qualifier("vmMigrationCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultVmMigrationTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    VmMigrationSettings.Builder clientSettingsBuilder =
        VmMigrationSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          VmMigrationSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          VmMigrationSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listSourcesRetrySettingBuilder =
        clientSettingsBuilder.listSourcesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListSourcesInitialRpcTimeout() != null) {
      listSourcesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListSourcesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSourcesInitialRpcTimeout set to "
                + this.clientProperties.getListSourcesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListSourcesRpcTimeoutMultiplier() != null) {
      listSourcesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListSourcesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSourcesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListSourcesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListSourcesMaxRpcTimeout() != null) {
      listSourcesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListSourcesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSourcesMaxRpcTimeout set to "
                + this.clientProperties.getListSourcesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListSourcesTotalTimeout() != null) {
      listSourcesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListSourcesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSourcesTotalTimeout set to " + this.clientProperties.getListSourcesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listSourcesSettings()
        .setRetrySettings(listSourcesRetrySettingBuilder.build());
    RetrySettings.Builder getSourceRetrySettingBuilder =
        clientSettingsBuilder.getSourceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetSourceInitialRpcTimeout() != null) {
      getSourceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetSourceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSourceInitialRpcTimeout set to "
                + this.clientProperties.getGetSourceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetSourceRpcTimeoutMultiplier() != null) {
      getSourceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetSourceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSourceRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetSourceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetSourceMaxRpcTimeout() != null) {
      getSourceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetSourceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSourceMaxRpcTimeout set to " + this.clientProperties.getGetSourceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetSourceTotalTimeout() != null) {
      getSourceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetSourceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSourceTotalTimeout set to " + this.clientProperties.getGetSourceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getSourceSettings()
        .setRetrySettings(getSourceRetrySettingBuilder.build());
    RetrySettings.Builder createSourceRetrySettingBuilder =
        clientSettingsBuilder.createSourceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateSourceInitialRpcTimeout() != null) {
      createSourceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateSourceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateSourceInitialRpcTimeout set to "
                + this.clientProperties.getCreateSourceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateSourceRpcTimeoutMultiplier() != null) {
      createSourceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateSourceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateSourceRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateSourceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateSourceMaxRpcTimeout() != null) {
      createSourceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateSourceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateSourceMaxRpcTimeout set to "
                + this.clientProperties.getCreateSourceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateSourceTotalTimeout() != null) {
      createSourceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateSourceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateSourceTotalTimeout set to "
                + this.clientProperties.getCreateSourceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createSourceSettings()
        .setRetrySettings(createSourceRetrySettingBuilder.build());
    RetrySettings.Builder updateSourceRetrySettingBuilder =
        clientSettingsBuilder.updateSourceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateSourceInitialRpcTimeout() != null) {
      updateSourceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateSourceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSourceInitialRpcTimeout set to "
                + this.clientProperties.getUpdateSourceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateSourceRpcTimeoutMultiplier() != null) {
      updateSourceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateSourceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSourceRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateSourceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateSourceMaxRpcTimeout() != null) {
      updateSourceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateSourceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSourceMaxRpcTimeout set to "
                + this.clientProperties.getUpdateSourceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateSourceTotalTimeout() != null) {
      updateSourceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateSourceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSourceTotalTimeout set to "
                + this.clientProperties.getUpdateSourceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateSourceSettings()
        .setRetrySettings(updateSourceRetrySettingBuilder.build());
    RetrySettings.Builder deleteSourceRetrySettingBuilder =
        clientSettingsBuilder.deleteSourceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteSourceInitialRpcTimeout() != null) {
      deleteSourceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteSourceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteSourceInitialRpcTimeout set to "
                + this.clientProperties.getDeleteSourceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteSourceRpcTimeoutMultiplier() != null) {
      deleteSourceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteSourceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteSourceRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteSourceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteSourceMaxRpcTimeout() != null) {
      deleteSourceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteSourceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteSourceMaxRpcTimeout set to "
                + this.clientProperties.getDeleteSourceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteSourceTotalTimeout() != null) {
      deleteSourceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteSourceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteSourceTotalTimeout set to "
                + this.clientProperties.getDeleteSourceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteSourceSettings()
        .setRetrySettings(deleteSourceRetrySettingBuilder.build());
    RetrySettings.Builder fetchInventoryRetrySettingBuilder =
        clientSettingsBuilder.fetchInventorySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getFetchInventoryInitialRpcTimeout() != null) {
      fetchInventoryRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getFetchInventoryInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchInventoryInitialRpcTimeout set to "
                + this.clientProperties.getFetchInventoryInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getFetchInventoryRpcTimeoutMultiplier() != null) {
      fetchInventoryRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getFetchInventoryRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchInventoryRpcTimeoutMultiplier set to "
                + this.clientProperties.getFetchInventoryRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getFetchInventoryMaxRpcTimeout() != null) {
      fetchInventoryRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getFetchInventoryMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchInventoryMaxRpcTimeout set to "
                + this.clientProperties.getFetchInventoryMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getFetchInventoryTotalTimeout() != null) {
      fetchInventoryRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getFetchInventoryTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FetchInventoryTotalTimeout set to "
                + this.clientProperties.getFetchInventoryTotalTimeout());
      }
    }
    clientSettingsBuilder
        .fetchInventorySettings()
        .setRetrySettings(fetchInventoryRetrySettingBuilder.build());
    RetrySettings.Builder listUtilizationReportsRetrySettingBuilder =
        clientSettingsBuilder.listUtilizationReportsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListUtilizationReportsInitialRpcTimeout() != null) {
      listUtilizationReportsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListUtilizationReportsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListUtilizationReportsInitialRpcTimeout set to "
                + this.clientProperties.getListUtilizationReportsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListUtilizationReportsRpcTimeoutMultiplier() != null) {
      listUtilizationReportsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListUtilizationReportsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListUtilizationReportsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListUtilizationReportsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListUtilizationReportsMaxRpcTimeout() != null) {
      listUtilizationReportsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListUtilizationReportsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListUtilizationReportsMaxRpcTimeout set to "
                + this.clientProperties.getListUtilizationReportsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListUtilizationReportsTotalTimeout() != null) {
      listUtilizationReportsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListUtilizationReportsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListUtilizationReportsTotalTimeout set to "
                + this.clientProperties.getListUtilizationReportsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listUtilizationReportsSettings()
        .setRetrySettings(listUtilizationReportsRetrySettingBuilder.build());
    RetrySettings.Builder getUtilizationReportRetrySettingBuilder =
        clientSettingsBuilder.getUtilizationReportSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetUtilizationReportInitialRpcTimeout() != null) {
      getUtilizationReportRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetUtilizationReportInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetUtilizationReportInitialRpcTimeout set to "
                + this.clientProperties.getGetUtilizationReportInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetUtilizationReportRpcTimeoutMultiplier() != null) {
      getUtilizationReportRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetUtilizationReportRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetUtilizationReportRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetUtilizationReportRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetUtilizationReportMaxRpcTimeout() != null) {
      getUtilizationReportRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetUtilizationReportMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetUtilizationReportMaxRpcTimeout set to "
                + this.clientProperties.getGetUtilizationReportMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetUtilizationReportTotalTimeout() != null) {
      getUtilizationReportRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetUtilizationReportTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetUtilizationReportTotalTimeout set to "
                + this.clientProperties.getGetUtilizationReportTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getUtilizationReportSettings()
        .setRetrySettings(getUtilizationReportRetrySettingBuilder.build());
    RetrySettings.Builder createUtilizationReportRetrySettingBuilder =
        clientSettingsBuilder.createUtilizationReportSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateUtilizationReportInitialRpcTimeout() != null) {
      createUtilizationReportRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateUtilizationReportInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateUtilizationReportInitialRpcTimeout set to "
                + this.clientProperties.getCreateUtilizationReportInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateUtilizationReportRpcTimeoutMultiplier() != null) {
      createUtilizationReportRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateUtilizationReportRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateUtilizationReportRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateUtilizationReportRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateUtilizationReportMaxRpcTimeout() != null) {
      createUtilizationReportRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateUtilizationReportMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateUtilizationReportMaxRpcTimeout set to "
                + this.clientProperties.getCreateUtilizationReportMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateUtilizationReportTotalTimeout() != null) {
      createUtilizationReportRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateUtilizationReportTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateUtilizationReportTotalTimeout set to "
                + this.clientProperties.getCreateUtilizationReportTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createUtilizationReportSettings()
        .setRetrySettings(createUtilizationReportRetrySettingBuilder.build());
    RetrySettings.Builder deleteUtilizationReportRetrySettingBuilder =
        clientSettingsBuilder.deleteUtilizationReportSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteUtilizationReportInitialRpcTimeout() != null) {
      deleteUtilizationReportRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteUtilizationReportInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteUtilizationReportInitialRpcTimeout set to "
                + this.clientProperties.getDeleteUtilizationReportInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteUtilizationReportRpcTimeoutMultiplier() != null) {
      deleteUtilizationReportRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteUtilizationReportRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteUtilizationReportRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteUtilizationReportRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteUtilizationReportMaxRpcTimeout() != null) {
      deleteUtilizationReportRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteUtilizationReportMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteUtilizationReportMaxRpcTimeout set to "
                + this.clientProperties.getDeleteUtilizationReportMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteUtilizationReportTotalTimeout() != null) {
      deleteUtilizationReportRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteUtilizationReportTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteUtilizationReportTotalTimeout set to "
                + this.clientProperties.getDeleteUtilizationReportTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteUtilizationReportSettings()
        .setRetrySettings(deleteUtilizationReportRetrySettingBuilder.build());
    RetrySettings.Builder listDatacenterConnectorsRetrySettingBuilder =
        clientSettingsBuilder.listDatacenterConnectorsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListDatacenterConnectorsInitialRpcTimeout() != null) {
      listDatacenterConnectorsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListDatacenterConnectorsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDatacenterConnectorsInitialRpcTimeout set to "
                + this.clientProperties.getListDatacenterConnectorsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListDatacenterConnectorsRpcTimeoutMultiplier() != null) {
      listDatacenterConnectorsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListDatacenterConnectorsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDatacenterConnectorsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListDatacenterConnectorsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListDatacenterConnectorsMaxRpcTimeout() != null) {
      listDatacenterConnectorsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListDatacenterConnectorsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDatacenterConnectorsMaxRpcTimeout set to "
                + this.clientProperties.getListDatacenterConnectorsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListDatacenterConnectorsTotalTimeout() != null) {
      listDatacenterConnectorsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListDatacenterConnectorsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDatacenterConnectorsTotalTimeout set to "
                + this.clientProperties.getListDatacenterConnectorsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listDatacenterConnectorsSettings()
        .setRetrySettings(listDatacenterConnectorsRetrySettingBuilder.build());
    RetrySettings.Builder getDatacenterConnectorRetrySettingBuilder =
        clientSettingsBuilder.getDatacenterConnectorSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetDatacenterConnectorInitialRpcTimeout() != null) {
      getDatacenterConnectorRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetDatacenterConnectorInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDatacenterConnectorInitialRpcTimeout set to "
                + this.clientProperties.getGetDatacenterConnectorInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDatacenterConnectorRpcTimeoutMultiplier() != null) {
      getDatacenterConnectorRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetDatacenterConnectorRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDatacenterConnectorRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetDatacenterConnectorRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetDatacenterConnectorMaxRpcTimeout() != null) {
      getDatacenterConnectorRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetDatacenterConnectorMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDatacenterConnectorMaxRpcTimeout set to "
                + this.clientProperties.getGetDatacenterConnectorMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDatacenterConnectorTotalTimeout() != null) {
      getDatacenterConnectorRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetDatacenterConnectorTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDatacenterConnectorTotalTimeout set to "
                + this.clientProperties.getGetDatacenterConnectorTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getDatacenterConnectorSettings()
        .setRetrySettings(getDatacenterConnectorRetrySettingBuilder.build());
    RetrySettings.Builder createDatacenterConnectorRetrySettingBuilder =
        clientSettingsBuilder.createDatacenterConnectorSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateDatacenterConnectorInitialRpcTimeout() != null) {
      createDatacenterConnectorRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateDatacenterConnectorInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDatacenterConnectorInitialRpcTimeout set to "
                + this.clientProperties.getCreateDatacenterConnectorInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateDatacenterConnectorRpcTimeoutMultiplier() != null) {
      createDatacenterConnectorRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateDatacenterConnectorRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDatacenterConnectorRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateDatacenterConnectorRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateDatacenterConnectorMaxRpcTimeout() != null) {
      createDatacenterConnectorRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateDatacenterConnectorMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDatacenterConnectorMaxRpcTimeout set to "
                + this.clientProperties.getCreateDatacenterConnectorMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateDatacenterConnectorTotalTimeout() != null) {
      createDatacenterConnectorRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateDatacenterConnectorTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDatacenterConnectorTotalTimeout set to "
                + this.clientProperties.getCreateDatacenterConnectorTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createDatacenterConnectorSettings()
        .setRetrySettings(createDatacenterConnectorRetrySettingBuilder.build());
    RetrySettings.Builder deleteDatacenterConnectorRetrySettingBuilder =
        clientSettingsBuilder.deleteDatacenterConnectorSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteDatacenterConnectorInitialRpcTimeout() != null) {
      deleteDatacenterConnectorRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteDatacenterConnectorInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDatacenterConnectorInitialRpcTimeout set to "
                + this.clientProperties.getDeleteDatacenterConnectorInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteDatacenterConnectorRpcTimeoutMultiplier() != null) {
      deleteDatacenterConnectorRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteDatacenterConnectorRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDatacenterConnectorRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteDatacenterConnectorRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteDatacenterConnectorMaxRpcTimeout() != null) {
      deleteDatacenterConnectorRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteDatacenterConnectorMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDatacenterConnectorMaxRpcTimeout set to "
                + this.clientProperties.getDeleteDatacenterConnectorMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteDatacenterConnectorTotalTimeout() != null) {
      deleteDatacenterConnectorRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteDatacenterConnectorTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDatacenterConnectorTotalTimeout set to "
                + this.clientProperties.getDeleteDatacenterConnectorTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteDatacenterConnectorSettings()
        .setRetrySettings(deleteDatacenterConnectorRetrySettingBuilder.build());
    RetrySettings.Builder upgradeApplianceRetrySettingBuilder =
        clientSettingsBuilder.upgradeApplianceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpgradeApplianceInitialRpcTimeout() != null) {
      upgradeApplianceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpgradeApplianceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpgradeApplianceInitialRpcTimeout set to "
                + this.clientProperties.getUpgradeApplianceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpgradeApplianceRpcTimeoutMultiplier() != null) {
      upgradeApplianceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpgradeApplianceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpgradeApplianceRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpgradeApplianceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpgradeApplianceMaxRpcTimeout() != null) {
      upgradeApplianceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpgradeApplianceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpgradeApplianceMaxRpcTimeout set to "
                + this.clientProperties.getUpgradeApplianceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpgradeApplianceTotalTimeout() != null) {
      upgradeApplianceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpgradeApplianceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpgradeApplianceTotalTimeout set to "
                + this.clientProperties.getUpgradeApplianceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .upgradeApplianceSettings()
        .setRetrySettings(upgradeApplianceRetrySettingBuilder.build());
    RetrySettings.Builder createMigratingVmRetrySettingBuilder =
        clientSettingsBuilder.createMigratingVmSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateMigratingVmInitialRpcTimeout() != null) {
      createMigratingVmRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateMigratingVmInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateMigratingVmInitialRpcTimeout set to "
                + this.clientProperties.getCreateMigratingVmInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateMigratingVmRpcTimeoutMultiplier() != null) {
      createMigratingVmRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateMigratingVmRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateMigratingVmRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateMigratingVmRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateMigratingVmMaxRpcTimeout() != null) {
      createMigratingVmRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateMigratingVmMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateMigratingVmMaxRpcTimeout set to "
                + this.clientProperties.getCreateMigratingVmMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateMigratingVmTotalTimeout() != null) {
      createMigratingVmRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateMigratingVmTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateMigratingVmTotalTimeout set to "
                + this.clientProperties.getCreateMigratingVmTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createMigratingVmSettings()
        .setRetrySettings(createMigratingVmRetrySettingBuilder.build());
    RetrySettings.Builder listMigratingVmsRetrySettingBuilder =
        clientSettingsBuilder.listMigratingVmsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListMigratingVmsInitialRpcTimeout() != null) {
      listMigratingVmsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListMigratingVmsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMigratingVmsInitialRpcTimeout set to "
                + this.clientProperties.getListMigratingVmsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListMigratingVmsRpcTimeoutMultiplier() != null) {
      listMigratingVmsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListMigratingVmsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMigratingVmsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListMigratingVmsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListMigratingVmsMaxRpcTimeout() != null) {
      listMigratingVmsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListMigratingVmsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMigratingVmsMaxRpcTimeout set to "
                + this.clientProperties.getListMigratingVmsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListMigratingVmsTotalTimeout() != null) {
      listMigratingVmsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListMigratingVmsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMigratingVmsTotalTimeout set to "
                + this.clientProperties.getListMigratingVmsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listMigratingVmsSettings()
        .setRetrySettings(listMigratingVmsRetrySettingBuilder.build());
    RetrySettings.Builder getMigratingVmRetrySettingBuilder =
        clientSettingsBuilder.getMigratingVmSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetMigratingVmInitialRpcTimeout() != null) {
      getMigratingVmRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetMigratingVmInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMigratingVmInitialRpcTimeout set to "
                + this.clientProperties.getGetMigratingVmInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetMigratingVmRpcTimeoutMultiplier() != null) {
      getMigratingVmRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetMigratingVmRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMigratingVmRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetMigratingVmRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetMigratingVmMaxRpcTimeout() != null) {
      getMigratingVmRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetMigratingVmMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMigratingVmMaxRpcTimeout set to "
                + this.clientProperties.getGetMigratingVmMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetMigratingVmTotalTimeout() != null) {
      getMigratingVmRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetMigratingVmTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMigratingVmTotalTimeout set to "
                + this.clientProperties.getGetMigratingVmTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getMigratingVmSettings()
        .setRetrySettings(getMigratingVmRetrySettingBuilder.build());
    RetrySettings.Builder updateMigratingVmRetrySettingBuilder =
        clientSettingsBuilder.updateMigratingVmSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateMigratingVmInitialRpcTimeout() != null) {
      updateMigratingVmRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateMigratingVmInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateMigratingVmInitialRpcTimeout set to "
                + this.clientProperties.getUpdateMigratingVmInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateMigratingVmRpcTimeoutMultiplier() != null) {
      updateMigratingVmRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateMigratingVmRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateMigratingVmRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateMigratingVmRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateMigratingVmMaxRpcTimeout() != null) {
      updateMigratingVmRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateMigratingVmMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateMigratingVmMaxRpcTimeout set to "
                + this.clientProperties.getUpdateMigratingVmMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateMigratingVmTotalTimeout() != null) {
      updateMigratingVmRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateMigratingVmTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateMigratingVmTotalTimeout set to "
                + this.clientProperties.getUpdateMigratingVmTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateMigratingVmSettings()
        .setRetrySettings(updateMigratingVmRetrySettingBuilder.build());
    RetrySettings.Builder deleteMigratingVmRetrySettingBuilder =
        clientSettingsBuilder.deleteMigratingVmSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteMigratingVmInitialRpcTimeout() != null) {
      deleteMigratingVmRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteMigratingVmInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteMigratingVmInitialRpcTimeout set to "
                + this.clientProperties.getDeleteMigratingVmInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteMigratingVmRpcTimeoutMultiplier() != null) {
      deleteMigratingVmRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteMigratingVmRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteMigratingVmRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteMigratingVmRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteMigratingVmMaxRpcTimeout() != null) {
      deleteMigratingVmRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteMigratingVmMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteMigratingVmMaxRpcTimeout set to "
                + this.clientProperties.getDeleteMigratingVmMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteMigratingVmTotalTimeout() != null) {
      deleteMigratingVmRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteMigratingVmTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteMigratingVmTotalTimeout set to "
                + this.clientProperties.getDeleteMigratingVmTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteMigratingVmSettings()
        .setRetrySettings(deleteMigratingVmRetrySettingBuilder.build());
    RetrySettings.Builder startMigrationRetrySettingBuilder =
        clientSettingsBuilder.startMigrationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getStartMigrationInitialRpcTimeout() != null) {
      startMigrationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getStartMigrationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartMigrationInitialRpcTimeout set to "
                + this.clientProperties.getStartMigrationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getStartMigrationRpcTimeoutMultiplier() != null) {
      startMigrationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getStartMigrationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartMigrationRpcTimeoutMultiplier set to "
                + this.clientProperties.getStartMigrationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getStartMigrationMaxRpcTimeout() != null) {
      startMigrationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getStartMigrationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartMigrationMaxRpcTimeout set to "
                + this.clientProperties.getStartMigrationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getStartMigrationTotalTimeout() != null) {
      startMigrationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getStartMigrationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartMigrationTotalTimeout set to "
                + this.clientProperties.getStartMigrationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .startMigrationSettings()
        .setRetrySettings(startMigrationRetrySettingBuilder.build());
    RetrySettings.Builder resumeMigrationRetrySettingBuilder =
        clientSettingsBuilder.resumeMigrationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getResumeMigrationInitialRpcTimeout() != null) {
      resumeMigrationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getResumeMigrationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResumeMigrationInitialRpcTimeout set to "
                + this.clientProperties.getResumeMigrationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getResumeMigrationRpcTimeoutMultiplier() != null) {
      resumeMigrationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getResumeMigrationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResumeMigrationRpcTimeoutMultiplier set to "
                + this.clientProperties.getResumeMigrationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getResumeMigrationMaxRpcTimeout() != null) {
      resumeMigrationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getResumeMigrationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResumeMigrationMaxRpcTimeout set to "
                + this.clientProperties.getResumeMigrationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getResumeMigrationTotalTimeout() != null) {
      resumeMigrationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getResumeMigrationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResumeMigrationTotalTimeout set to "
                + this.clientProperties.getResumeMigrationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .resumeMigrationSettings()
        .setRetrySettings(resumeMigrationRetrySettingBuilder.build());
    RetrySettings.Builder pauseMigrationRetrySettingBuilder =
        clientSettingsBuilder.pauseMigrationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getPauseMigrationInitialRpcTimeout() != null) {
      pauseMigrationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getPauseMigrationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PauseMigrationInitialRpcTimeout set to "
                + this.clientProperties.getPauseMigrationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getPauseMigrationRpcTimeoutMultiplier() != null) {
      pauseMigrationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getPauseMigrationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PauseMigrationRpcTimeoutMultiplier set to "
                + this.clientProperties.getPauseMigrationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getPauseMigrationMaxRpcTimeout() != null) {
      pauseMigrationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getPauseMigrationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PauseMigrationMaxRpcTimeout set to "
                + this.clientProperties.getPauseMigrationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getPauseMigrationTotalTimeout() != null) {
      pauseMigrationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getPauseMigrationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PauseMigrationTotalTimeout set to "
                + this.clientProperties.getPauseMigrationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .pauseMigrationSettings()
        .setRetrySettings(pauseMigrationRetrySettingBuilder.build());
    RetrySettings.Builder finalizeMigrationRetrySettingBuilder =
        clientSettingsBuilder.finalizeMigrationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getFinalizeMigrationInitialRpcTimeout() != null) {
      finalizeMigrationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getFinalizeMigrationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FinalizeMigrationInitialRpcTimeout set to "
                + this.clientProperties.getFinalizeMigrationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getFinalizeMigrationRpcTimeoutMultiplier() != null) {
      finalizeMigrationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getFinalizeMigrationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FinalizeMigrationRpcTimeoutMultiplier set to "
                + this.clientProperties.getFinalizeMigrationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getFinalizeMigrationMaxRpcTimeout() != null) {
      finalizeMigrationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getFinalizeMigrationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FinalizeMigrationMaxRpcTimeout set to "
                + this.clientProperties.getFinalizeMigrationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getFinalizeMigrationTotalTimeout() != null) {
      finalizeMigrationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getFinalizeMigrationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "FinalizeMigrationTotalTimeout set to "
                + this.clientProperties.getFinalizeMigrationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .finalizeMigrationSettings()
        .setRetrySettings(finalizeMigrationRetrySettingBuilder.build());
    RetrySettings.Builder createCloneJobRetrySettingBuilder =
        clientSettingsBuilder.createCloneJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateCloneJobInitialRpcTimeout() != null) {
      createCloneJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateCloneJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCloneJobInitialRpcTimeout set to "
                + this.clientProperties.getCreateCloneJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateCloneJobRpcTimeoutMultiplier() != null) {
      createCloneJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateCloneJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCloneJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateCloneJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateCloneJobMaxRpcTimeout() != null) {
      createCloneJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateCloneJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCloneJobMaxRpcTimeout set to "
                + this.clientProperties.getCreateCloneJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateCloneJobTotalTimeout() != null) {
      createCloneJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateCloneJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCloneJobTotalTimeout set to "
                + this.clientProperties.getCreateCloneJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createCloneJobSettings()
        .setRetrySettings(createCloneJobRetrySettingBuilder.build());
    RetrySettings.Builder cancelCloneJobRetrySettingBuilder =
        clientSettingsBuilder.cancelCloneJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCancelCloneJobInitialRpcTimeout() != null) {
      cancelCloneJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCancelCloneJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelCloneJobInitialRpcTimeout set to "
                + this.clientProperties.getCancelCloneJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCancelCloneJobRpcTimeoutMultiplier() != null) {
      cancelCloneJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCancelCloneJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelCloneJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getCancelCloneJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCancelCloneJobMaxRpcTimeout() != null) {
      cancelCloneJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCancelCloneJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelCloneJobMaxRpcTimeout set to "
                + this.clientProperties.getCancelCloneJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCancelCloneJobTotalTimeout() != null) {
      cancelCloneJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCancelCloneJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelCloneJobTotalTimeout set to "
                + this.clientProperties.getCancelCloneJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .cancelCloneJobSettings()
        .setRetrySettings(cancelCloneJobRetrySettingBuilder.build());
    RetrySettings.Builder listCloneJobsRetrySettingBuilder =
        clientSettingsBuilder.listCloneJobsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListCloneJobsInitialRpcTimeout() != null) {
      listCloneJobsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListCloneJobsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCloneJobsInitialRpcTimeout set to "
                + this.clientProperties.getListCloneJobsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListCloneJobsRpcTimeoutMultiplier() != null) {
      listCloneJobsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListCloneJobsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCloneJobsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListCloneJobsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListCloneJobsMaxRpcTimeout() != null) {
      listCloneJobsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListCloneJobsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCloneJobsMaxRpcTimeout set to "
                + this.clientProperties.getListCloneJobsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListCloneJobsTotalTimeout() != null) {
      listCloneJobsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListCloneJobsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCloneJobsTotalTimeout set to "
                + this.clientProperties.getListCloneJobsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listCloneJobsSettings()
        .setRetrySettings(listCloneJobsRetrySettingBuilder.build());
    RetrySettings.Builder getCloneJobRetrySettingBuilder =
        clientSettingsBuilder.getCloneJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetCloneJobInitialRpcTimeout() != null) {
      getCloneJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetCloneJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCloneJobInitialRpcTimeout set to "
                + this.clientProperties.getGetCloneJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetCloneJobRpcTimeoutMultiplier() != null) {
      getCloneJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetCloneJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCloneJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetCloneJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetCloneJobMaxRpcTimeout() != null) {
      getCloneJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetCloneJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCloneJobMaxRpcTimeout set to "
                + this.clientProperties.getGetCloneJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetCloneJobTotalTimeout() != null) {
      getCloneJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetCloneJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCloneJobTotalTimeout set to " + this.clientProperties.getGetCloneJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getCloneJobSettings()
        .setRetrySettings(getCloneJobRetrySettingBuilder.build());
    RetrySettings.Builder createCutoverJobRetrySettingBuilder =
        clientSettingsBuilder.createCutoverJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateCutoverJobInitialRpcTimeout() != null) {
      createCutoverJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateCutoverJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCutoverJobInitialRpcTimeout set to "
                + this.clientProperties.getCreateCutoverJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateCutoverJobRpcTimeoutMultiplier() != null) {
      createCutoverJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateCutoverJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCutoverJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateCutoverJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateCutoverJobMaxRpcTimeout() != null) {
      createCutoverJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateCutoverJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCutoverJobMaxRpcTimeout set to "
                + this.clientProperties.getCreateCutoverJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateCutoverJobTotalTimeout() != null) {
      createCutoverJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateCutoverJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCutoverJobTotalTimeout set to "
                + this.clientProperties.getCreateCutoverJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createCutoverJobSettings()
        .setRetrySettings(createCutoverJobRetrySettingBuilder.build());
    RetrySettings.Builder cancelCutoverJobRetrySettingBuilder =
        clientSettingsBuilder.cancelCutoverJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCancelCutoverJobInitialRpcTimeout() != null) {
      cancelCutoverJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCancelCutoverJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelCutoverJobInitialRpcTimeout set to "
                + this.clientProperties.getCancelCutoverJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCancelCutoverJobRpcTimeoutMultiplier() != null) {
      cancelCutoverJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCancelCutoverJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelCutoverJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getCancelCutoverJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCancelCutoverJobMaxRpcTimeout() != null) {
      cancelCutoverJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCancelCutoverJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelCutoverJobMaxRpcTimeout set to "
                + this.clientProperties.getCancelCutoverJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCancelCutoverJobTotalTimeout() != null) {
      cancelCutoverJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCancelCutoverJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelCutoverJobTotalTimeout set to "
                + this.clientProperties.getCancelCutoverJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .cancelCutoverJobSettings()
        .setRetrySettings(cancelCutoverJobRetrySettingBuilder.build());
    RetrySettings.Builder listCutoverJobsRetrySettingBuilder =
        clientSettingsBuilder.listCutoverJobsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListCutoverJobsInitialRpcTimeout() != null) {
      listCutoverJobsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListCutoverJobsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCutoverJobsInitialRpcTimeout set to "
                + this.clientProperties.getListCutoverJobsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListCutoverJobsRpcTimeoutMultiplier() != null) {
      listCutoverJobsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListCutoverJobsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCutoverJobsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListCutoverJobsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListCutoverJobsMaxRpcTimeout() != null) {
      listCutoverJobsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListCutoverJobsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCutoverJobsMaxRpcTimeout set to "
                + this.clientProperties.getListCutoverJobsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListCutoverJobsTotalTimeout() != null) {
      listCutoverJobsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListCutoverJobsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCutoverJobsTotalTimeout set to "
                + this.clientProperties.getListCutoverJobsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listCutoverJobsSettings()
        .setRetrySettings(listCutoverJobsRetrySettingBuilder.build());
    RetrySettings.Builder getCutoverJobRetrySettingBuilder =
        clientSettingsBuilder.getCutoverJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetCutoverJobInitialRpcTimeout() != null) {
      getCutoverJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetCutoverJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCutoverJobInitialRpcTimeout set to "
                + this.clientProperties.getGetCutoverJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetCutoverJobRpcTimeoutMultiplier() != null) {
      getCutoverJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetCutoverJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCutoverJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetCutoverJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetCutoverJobMaxRpcTimeout() != null) {
      getCutoverJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetCutoverJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCutoverJobMaxRpcTimeout set to "
                + this.clientProperties.getGetCutoverJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetCutoverJobTotalTimeout() != null) {
      getCutoverJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetCutoverJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCutoverJobTotalTimeout set to "
                + this.clientProperties.getGetCutoverJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getCutoverJobSettings()
        .setRetrySettings(getCutoverJobRetrySettingBuilder.build());
    RetrySettings.Builder listGroupsRetrySettingBuilder =
        clientSettingsBuilder.listGroupsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListGroupsInitialRpcTimeout() != null) {
      listGroupsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListGroupsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGroupsInitialRpcTimeout set to "
                + this.clientProperties.getListGroupsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListGroupsRpcTimeoutMultiplier() != null) {
      listGroupsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListGroupsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGroupsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListGroupsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListGroupsMaxRpcTimeout() != null) {
      listGroupsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListGroupsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGroupsMaxRpcTimeout set to " + this.clientProperties.getListGroupsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListGroupsTotalTimeout() != null) {
      listGroupsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListGroupsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGroupsTotalTimeout set to " + this.clientProperties.getListGroupsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listGroupsSettings()
        .setRetrySettings(listGroupsRetrySettingBuilder.build());
    RetrySettings.Builder getGroupRetrySettingBuilder =
        clientSettingsBuilder.getGroupSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetGroupInitialRpcTimeout() != null) {
      getGroupRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetGroupInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGroupInitialRpcTimeout set to "
                + this.clientProperties.getGetGroupInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetGroupRpcTimeoutMultiplier() != null) {
      getGroupRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetGroupRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGroupRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetGroupRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetGroupMaxRpcTimeout() != null) {
      getGroupRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetGroupMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGroupMaxRpcTimeout set to " + this.clientProperties.getGetGroupMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetGroupTotalTimeout() != null) {
      getGroupRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetGroupTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGroupTotalTimeout set to " + this.clientProperties.getGetGroupTotalTimeout());
      }
    }
    clientSettingsBuilder.getGroupSettings().setRetrySettings(getGroupRetrySettingBuilder.build());
    RetrySettings.Builder createGroupRetrySettingBuilder =
        clientSettingsBuilder.createGroupSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateGroupInitialRpcTimeout() != null) {
      createGroupRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateGroupInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateGroupInitialRpcTimeout set to "
                + this.clientProperties.getCreateGroupInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateGroupRpcTimeoutMultiplier() != null) {
      createGroupRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateGroupRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateGroupRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateGroupRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateGroupMaxRpcTimeout() != null) {
      createGroupRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateGroupMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateGroupMaxRpcTimeout set to "
                + this.clientProperties.getCreateGroupMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateGroupTotalTimeout() != null) {
      createGroupRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateGroupTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateGroupTotalTimeout set to " + this.clientProperties.getCreateGroupTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createGroupSettings()
        .setRetrySettings(createGroupRetrySettingBuilder.build());
    RetrySettings.Builder updateGroupRetrySettingBuilder =
        clientSettingsBuilder.updateGroupSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateGroupInitialRpcTimeout() != null) {
      updateGroupRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateGroupInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGroupInitialRpcTimeout set to "
                + this.clientProperties.getUpdateGroupInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateGroupRpcTimeoutMultiplier() != null) {
      updateGroupRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateGroupRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGroupRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateGroupRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateGroupMaxRpcTimeout() != null) {
      updateGroupRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateGroupMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGroupMaxRpcTimeout set to "
                + this.clientProperties.getUpdateGroupMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateGroupTotalTimeout() != null) {
      updateGroupRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateGroupTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGroupTotalTimeout set to " + this.clientProperties.getUpdateGroupTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateGroupSettings()
        .setRetrySettings(updateGroupRetrySettingBuilder.build());
    RetrySettings.Builder deleteGroupRetrySettingBuilder =
        clientSettingsBuilder.deleteGroupSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteGroupInitialRpcTimeout() != null) {
      deleteGroupRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteGroupInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGroupInitialRpcTimeout set to "
                + this.clientProperties.getDeleteGroupInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteGroupRpcTimeoutMultiplier() != null) {
      deleteGroupRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteGroupRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGroupRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteGroupRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteGroupMaxRpcTimeout() != null) {
      deleteGroupRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteGroupMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGroupMaxRpcTimeout set to "
                + this.clientProperties.getDeleteGroupMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteGroupTotalTimeout() != null) {
      deleteGroupRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteGroupTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGroupTotalTimeout set to " + this.clientProperties.getDeleteGroupTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteGroupSettings()
        .setRetrySettings(deleteGroupRetrySettingBuilder.build());
    RetrySettings.Builder addGroupMigrationRetrySettingBuilder =
        clientSettingsBuilder.addGroupMigrationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getAddGroupMigrationInitialRpcTimeout() != null) {
      addGroupMigrationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getAddGroupMigrationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddGroupMigrationInitialRpcTimeout set to "
                + this.clientProperties.getAddGroupMigrationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getAddGroupMigrationRpcTimeoutMultiplier() != null) {
      addGroupMigrationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getAddGroupMigrationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddGroupMigrationRpcTimeoutMultiplier set to "
                + this.clientProperties.getAddGroupMigrationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getAddGroupMigrationMaxRpcTimeout() != null) {
      addGroupMigrationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getAddGroupMigrationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddGroupMigrationMaxRpcTimeout set to "
                + this.clientProperties.getAddGroupMigrationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getAddGroupMigrationTotalTimeout() != null) {
      addGroupMigrationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getAddGroupMigrationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddGroupMigrationTotalTimeout set to "
                + this.clientProperties.getAddGroupMigrationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .addGroupMigrationSettings()
        .setRetrySettings(addGroupMigrationRetrySettingBuilder.build());
    RetrySettings.Builder removeGroupMigrationRetrySettingBuilder =
        clientSettingsBuilder.removeGroupMigrationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRemoveGroupMigrationInitialRpcTimeout() != null) {
      removeGroupMigrationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRemoveGroupMigrationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveGroupMigrationInitialRpcTimeout set to "
                + this.clientProperties.getRemoveGroupMigrationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRemoveGroupMigrationRpcTimeoutMultiplier() != null) {
      removeGroupMigrationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRemoveGroupMigrationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveGroupMigrationRpcTimeoutMultiplier set to "
                + this.clientProperties.getRemoveGroupMigrationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRemoveGroupMigrationMaxRpcTimeout() != null) {
      removeGroupMigrationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRemoveGroupMigrationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveGroupMigrationMaxRpcTimeout set to "
                + this.clientProperties.getRemoveGroupMigrationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRemoveGroupMigrationTotalTimeout() != null) {
      removeGroupMigrationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRemoveGroupMigrationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveGroupMigrationTotalTimeout set to "
                + this.clientProperties.getRemoveGroupMigrationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .removeGroupMigrationSettings()
        .setRetrySettings(removeGroupMigrationRetrySettingBuilder.build());
    RetrySettings.Builder listTargetProjectsRetrySettingBuilder =
        clientSettingsBuilder.listTargetProjectsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListTargetProjectsInitialRpcTimeout() != null) {
      listTargetProjectsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListTargetProjectsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTargetProjectsInitialRpcTimeout set to "
                + this.clientProperties.getListTargetProjectsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListTargetProjectsRpcTimeoutMultiplier() != null) {
      listTargetProjectsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListTargetProjectsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTargetProjectsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListTargetProjectsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListTargetProjectsMaxRpcTimeout() != null) {
      listTargetProjectsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListTargetProjectsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTargetProjectsMaxRpcTimeout set to "
                + this.clientProperties.getListTargetProjectsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListTargetProjectsTotalTimeout() != null) {
      listTargetProjectsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListTargetProjectsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTargetProjectsTotalTimeout set to "
                + this.clientProperties.getListTargetProjectsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listTargetProjectsSettings()
        .setRetrySettings(listTargetProjectsRetrySettingBuilder.build());
    RetrySettings.Builder getTargetProjectRetrySettingBuilder =
        clientSettingsBuilder.getTargetProjectSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetTargetProjectInitialRpcTimeout() != null) {
      getTargetProjectRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetTargetProjectInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTargetProjectInitialRpcTimeout set to "
                + this.clientProperties.getGetTargetProjectInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetTargetProjectRpcTimeoutMultiplier() != null) {
      getTargetProjectRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetTargetProjectRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTargetProjectRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetTargetProjectRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetTargetProjectMaxRpcTimeout() != null) {
      getTargetProjectRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetTargetProjectMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTargetProjectMaxRpcTimeout set to "
                + this.clientProperties.getGetTargetProjectMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetTargetProjectTotalTimeout() != null) {
      getTargetProjectRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetTargetProjectTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetTargetProjectTotalTimeout set to "
                + this.clientProperties.getGetTargetProjectTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getTargetProjectSettings()
        .setRetrySettings(getTargetProjectRetrySettingBuilder.build());
    RetrySettings.Builder createTargetProjectRetrySettingBuilder =
        clientSettingsBuilder.createTargetProjectSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateTargetProjectInitialRpcTimeout() != null) {
      createTargetProjectRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateTargetProjectInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTargetProjectInitialRpcTimeout set to "
                + this.clientProperties.getCreateTargetProjectInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateTargetProjectRpcTimeoutMultiplier() != null) {
      createTargetProjectRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateTargetProjectRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTargetProjectRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateTargetProjectRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateTargetProjectMaxRpcTimeout() != null) {
      createTargetProjectRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateTargetProjectMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTargetProjectMaxRpcTimeout set to "
                + this.clientProperties.getCreateTargetProjectMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateTargetProjectTotalTimeout() != null) {
      createTargetProjectRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateTargetProjectTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTargetProjectTotalTimeout set to "
                + this.clientProperties.getCreateTargetProjectTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createTargetProjectSettings()
        .setRetrySettings(createTargetProjectRetrySettingBuilder.build());
    RetrySettings.Builder updateTargetProjectRetrySettingBuilder =
        clientSettingsBuilder.updateTargetProjectSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateTargetProjectInitialRpcTimeout() != null) {
      updateTargetProjectRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateTargetProjectInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTargetProjectInitialRpcTimeout set to "
                + this.clientProperties.getUpdateTargetProjectInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateTargetProjectRpcTimeoutMultiplier() != null) {
      updateTargetProjectRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateTargetProjectRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTargetProjectRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateTargetProjectRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateTargetProjectMaxRpcTimeout() != null) {
      updateTargetProjectRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateTargetProjectMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTargetProjectMaxRpcTimeout set to "
                + this.clientProperties.getUpdateTargetProjectMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateTargetProjectTotalTimeout() != null) {
      updateTargetProjectRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateTargetProjectTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateTargetProjectTotalTimeout set to "
                + this.clientProperties.getUpdateTargetProjectTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateTargetProjectSettings()
        .setRetrySettings(updateTargetProjectRetrySettingBuilder.build());
    RetrySettings.Builder deleteTargetProjectRetrySettingBuilder =
        clientSettingsBuilder.deleteTargetProjectSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteTargetProjectInitialRpcTimeout() != null) {
      deleteTargetProjectRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteTargetProjectInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTargetProjectInitialRpcTimeout set to "
                + this.clientProperties.getDeleteTargetProjectInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteTargetProjectRpcTimeoutMultiplier() != null) {
      deleteTargetProjectRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteTargetProjectRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTargetProjectRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteTargetProjectRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteTargetProjectMaxRpcTimeout() != null) {
      deleteTargetProjectRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteTargetProjectMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTargetProjectMaxRpcTimeout set to "
                + this.clientProperties.getDeleteTargetProjectMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteTargetProjectTotalTimeout() != null) {
      deleteTargetProjectRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteTargetProjectTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteTargetProjectTotalTimeout set to "
                + this.clientProperties.getDeleteTargetProjectTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteTargetProjectSettings()
        .setRetrySettings(deleteTargetProjectRetrySettingBuilder.build());
    return VmMigrationClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-vm-migration";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
