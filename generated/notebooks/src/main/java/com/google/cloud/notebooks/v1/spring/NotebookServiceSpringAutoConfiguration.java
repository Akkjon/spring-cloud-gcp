/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.notebooks.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.notebooks.v1.NotebookServiceClient;
import com.google.cloud.notebooks.v1.NotebookServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link NotebookServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(NotebookServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.notebooks.v1.spring.auto.notebook-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({NotebookServiceSpringProperties.class, GlobalProperties.class})
public class NotebookServiceSpringAutoConfiguration {
  private final NotebookServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(NotebookServiceSpringAutoConfiguration.class);

  protected NotebookServiceSpringAutoConfiguration(
      NotebookServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider notebookServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from NotebookService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultNotebookServiceTransportChannelProvider() {
    return NotebookServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a NotebookServiceClient bean configured to use the default credentials provider
   * (obtained with notebookServiceCredentials()) and its default transport channel provider
   * (defaultNotebookServiceTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in NotebookServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public NotebookServiceClient notebookServiceClient(
      @Qualifier("notebookServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultNotebookServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    NotebookServiceSettings.Builder clientSettingsBuilder =
        NotebookServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          NotebookServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    RetrySettings.Builder listInstancesRetrySettingBuilder =
        clientSettingsBuilder.listInstancesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListInstancesInitialRpcTimeout() != null) {
      listInstancesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListInstancesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInstancesInitialRpcTimeout set to "
                + this.clientProperties.getListInstancesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListInstancesRpcTimeoutMultiplier() != null) {
      listInstancesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListInstancesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInstancesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListInstancesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListInstancesMaxRpcTimeout() != null) {
      listInstancesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListInstancesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInstancesMaxRpcTimeout set to "
                + this.clientProperties.getListInstancesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListInstancesTotalTimeout() != null) {
      listInstancesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListInstancesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListInstancesTotalTimeout set to "
                + this.clientProperties.getListInstancesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listInstancesSettings()
        .setRetrySettings(listInstancesRetrySettingBuilder.build());
    RetrySettings.Builder getInstanceRetrySettingBuilder =
        clientSettingsBuilder.getInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetInstanceInitialRpcTimeout() != null) {
      getInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceInitialRpcTimeout set to "
                + this.clientProperties.getGetInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetInstanceRpcTimeoutMultiplier() != null) {
      getInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetInstanceMaxRpcTimeout() != null) {
      getInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceMaxRpcTimeout set to "
                + this.clientProperties.getGetInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetInstanceTotalTimeout() != null) {
      getInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceTotalTimeout set to " + this.clientProperties.getGetInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getInstanceSettings()
        .setRetrySettings(getInstanceRetrySettingBuilder.build());
    RetrySettings.Builder createInstanceRetrySettingBuilder =
        clientSettingsBuilder.createInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateInstanceInitialRpcTimeout() != null) {
      createInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateInstanceInitialRpcTimeout set to "
                + this.clientProperties.getCreateInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateInstanceRpcTimeoutMultiplier() != null) {
      createInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateInstanceMaxRpcTimeout() != null) {
      createInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateInstanceMaxRpcTimeout set to "
                + this.clientProperties.getCreateInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateInstanceTotalTimeout() != null) {
      createInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateInstanceTotalTimeout set to "
                + this.clientProperties.getCreateInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createInstanceSettings()
        .setRetrySettings(createInstanceRetrySettingBuilder.build());
    RetrySettings.Builder registerInstanceRetrySettingBuilder =
        clientSettingsBuilder.registerInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRegisterInstanceInitialRpcTimeout() != null) {
      registerInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRegisterInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RegisterInstanceInitialRpcTimeout set to "
                + this.clientProperties.getRegisterInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRegisterInstanceRpcTimeoutMultiplier() != null) {
      registerInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRegisterInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RegisterInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getRegisterInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRegisterInstanceMaxRpcTimeout() != null) {
      registerInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRegisterInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RegisterInstanceMaxRpcTimeout set to "
                + this.clientProperties.getRegisterInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRegisterInstanceTotalTimeout() != null) {
      registerInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRegisterInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RegisterInstanceTotalTimeout set to "
                + this.clientProperties.getRegisterInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .registerInstanceSettings()
        .setRetrySettings(registerInstanceRetrySettingBuilder.build());
    RetrySettings.Builder setInstanceAcceleratorRetrySettingBuilder =
        clientSettingsBuilder.setInstanceAcceleratorSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetInstanceAcceleratorInitialRpcTimeout() != null) {
      setInstanceAcceleratorRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetInstanceAcceleratorInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetInstanceAcceleratorInitialRpcTimeout set to "
                + this.clientProperties.getSetInstanceAcceleratorInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetInstanceAcceleratorRpcTimeoutMultiplier() != null) {
      setInstanceAcceleratorRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetInstanceAcceleratorRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetInstanceAcceleratorRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetInstanceAcceleratorRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetInstanceAcceleratorMaxRpcTimeout() != null) {
      setInstanceAcceleratorRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetInstanceAcceleratorMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetInstanceAcceleratorMaxRpcTimeout set to "
                + this.clientProperties.getSetInstanceAcceleratorMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetInstanceAcceleratorTotalTimeout() != null) {
      setInstanceAcceleratorRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetInstanceAcceleratorTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetInstanceAcceleratorTotalTimeout set to "
                + this.clientProperties.getSetInstanceAcceleratorTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setInstanceAcceleratorSettings()
        .setRetrySettings(setInstanceAcceleratorRetrySettingBuilder.build());
    RetrySettings.Builder setInstanceMachineTypeRetrySettingBuilder =
        clientSettingsBuilder.setInstanceMachineTypeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetInstanceMachineTypeInitialRpcTimeout() != null) {
      setInstanceMachineTypeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetInstanceMachineTypeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetInstanceMachineTypeInitialRpcTimeout set to "
                + this.clientProperties.getSetInstanceMachineTypeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetInstanceMachineTypeRpcTimeoutMultiplier() != null) {
      setInstanceMachineTypeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetInstanceMachineTypeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetInstanceMachineTypeRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetInstanceMachineTypeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetInstanceMachineTypeMaxRpcTimeout() != null) {
      setInstanceMachineTypeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetInstanceMachineTypeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetInstanceMachineTypeMaxRpcTimeout set to "
                + this.clientProperties.getSetInstanceMachineTypeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetInstanceMachineTypeTotalTimeout() != null) {
      setInstanceMachineTypeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetInstanceMachineTypeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetInstanceMachineTypeTotalTimeout set to "
                + this.clientProperties.getSetInstanceMachineTypeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setInstanceMachineTypeSettings()
        .setRetrySettings(setInstanceMachineTypeRetrySettingBuilder.build());
    RetrySettings.Builder updateInstanceConfigRetrySettingBuilder =
        clientSettingsBuilder.updateInstanceConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateInstanceConfigInitialRpcTimeout() != null) {
      updateInstanceConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateInstanceConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInstanceConfigInitialRpcTimeout set to "
                + this.clientProperties.getUpdateInstanceConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateInstanceConfigRpcTimeoutMultiplier() != null) {
      updateInstanceConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateInstanceConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInstanceConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateInstanceConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateInstanceConfigMaxRpcTimeout() != null) {
      updateInstanceConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateInstanceConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInstanceConfigMaxRpcTimeout set to "
                + this.clientProperties.getUpdateInstanceConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateInstanceConfigTotalTimeout() != null) {
      updateInstanceConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateInstanceConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInstanceConfigTotalTimeout set to "
                + this.clientProperties.getUpdateInstanceConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateInstanceConfigSettings()
        .setRetrySettings(updateInstanceConfigRetrySettingBuilder.build());
    RetrySettings.Builder updateShieldedInstanceConfigRetrySettingBuilder =
        clientSettingsBuilder.updateShieldedInstanceConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateShieldedInstanceConfigInitialRpcTimeout() != null) {
      updateShieldedInstanceConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateShieldedInstanceConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateShieldedInstanceConfigInitialRpcTimeout set to "
                + this.clientProperties.getUpdateShieldedInstanceConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateShieldedInstanceConfigRpcTimeoutMultiplier() != null) {
      updateShieldedInstanceConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateShieldedInstanceConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateShieldedInstanceConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateShieldedInstanceConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateShieldedInstanceConfigMaxRpcTimeout() != null) {
      updateShieldedInstanceConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateShieldedInstanceConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateShieldedInstanceConfigMaxRpcTimeout set to "
                + this.clientProperties.getUpdateShieldedInstanceConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateShieldedInstanceConfigTotalTimeout() != null) {
      updateShieldedInstanceConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateShieldedInstanceConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateShieldedInstanceConfigTotalTimeout set to "
                + this.clientProperties.getUpdateShieldedInstanceConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateShieldedInstanceConfigSettings()
        .setRetrySettings(updateShieldedInstanceConfigRetrySettingBuilder.build());
    RetrySettings.Builder setInstanceLabelsRetrySettingBuilder =
        clientSettingsBuilder.setInstanceLabelsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetInstanceLabelsInitialRpcTimeout() != null) {
      setInstanceLabelsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetInstanceLabelsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetInstanceLabelsInitialRpcTimeout set to "
                + this.clientProperties.getSetInstanceLabelsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetInstanceLabelsRpcTimeoutMultiplier() != null) {
      setInstanceLabelsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetInstanceLabelsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetInstanceLabelsRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetInstanceLabelsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetInstanceLabelsMaxRpcTimeout() != null) {
      setInstanceLabelsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetInstanceLabelsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetInstanceLabelsMaxRpcTimeout set to "
                + this.clientProperties.getSetInstanceLabelsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetInstanceLabelsTotalTimeout() != null) {
      setInstanceLabelsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetInstanceLabelsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetInstanceLabelsTotalTimeout set to "
                + this.clientProperties.getSetInstanceLabelsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setInstanceLabelsSettings()
        .setRetrySettings(setInstanceLabelsRetrySettingBuilder.build());
    RetrySettings.Builder updateInstanceMetadataItemsRetrySettingBuilder =
        clientSettingsBuilder.updateInstanceMetadataItemsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateInstanceMetadataItemsInitialRetryDelay() != null) {
      updateInstanceMetadataItemsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateInstanceMetadataItemsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInstanceMetadataItemsInitialRetryDelay set to "
                + this.clientProperties.getUpdateInstanceMetadataItemsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateInstanceMetadataItemsRetryDelayMultiplier() != null) {
      updateInstanceMetadataItemsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateInstanceMetadataItemsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInstanceMetadataItemsRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateInstanceMetadataItemsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateInstanceMetadataItemsMaxRetryDelay() != null) {
      updateInstanceMetadataItemsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateInstanceMetadataItemsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInstanceMetadataItemsMaxRetryDelay set to "
                + this.clientProperties.getUpdateInstanceMetadataItemsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateInstanceMetadataItemsInitialRpcTimeout() != null) {
      updateInstanceMetadataItemsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateInstanceMetadataItemsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInstanceMetadataItemsInitialRpcTimeout set to "
                + this.clientProperties.getUpdateInstanceMetadataItemsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateInstanceMetadataItemsRpcTimeoutMultiplier() != null) {
      updateInstanceMetadataItemsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateInstanceMetadataItemsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInstanceMetadataItemsRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateInstanceMetadataItemsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateInstanceMetadataItemsMaxRpcTimeout() != null) {
      updateInstanceMetadataItemsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateInstanceMetadataItemsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInstanceMetadataItemsMaxRpcTimeout set to "
                + this.clientProperties.getUpdateInstanceMetadataItemsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateInstanceMetadataItemsTotalTimeout() != null) {
      updateInstanceMetadataItemsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateInstanceMetadataItemsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateInstanceMetadataItemsTotalTimeout set to "
                + this.clientProperties.getUpdateInstanceMetadataItemsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateInstanceMetadataItemsSettings()
        .setRetrySettings(updateInstanceMetadataItemsRetrySettingBuilder.build());
    RetrySettings.Builder deleteInstanceRetrySettingBuilder =
        clientSettingsBuilder.deleteInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteInstanceInitialRpcTimeout() != null) {
      deleteInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteInstanceInitialRpcTimeout set to "
                + this.clientProperties.getDeleteInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteInstanceRpcTimeoutMultiplier() != null) {
      deleteInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteInstanceMaxRpcTimeout() != null) {
      deleteInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteInstanceMaxRpcTimeout set to "
                + this.clientProperties.getDeleteInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteInstanceTotalTimeout() != null) {
      deleteInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteInstanceTotalTimeout set to "
                + this.clientProperties.getDeleteInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteInstanceSettings()
        .setRetrySettings(deleteInstanceRetrySettingBuilder.build());
    RetrySettings.Builder startInstanceRetrySettingBuilder =
        clientSettingsBuilder.startInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getStartInstanceInitialRpcTimeout() != null) {
      startInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getStartInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartInstanceInitialRpcTimeout set to "
                + this.clientProperties.getStartInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getStartInstanceRpcTimeoutMultiplier() != null) {
      startInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getStartInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getStartInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getStartInstanceMaxRpcTimeout() != null) {
      startInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getStartInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartInstanceMaxRpcTimeout set to "
                + this.clientProperties.getStartInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getStartInstanceTotalTimeout() != null) {
      startInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getStartInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartInstanceTotalTimeout set to "
                + this.clientProperties.getStartInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .startInstanceSettings()
        .setRetrySettings(startInstanceRetrySettingBuilder.build());
    RetrySettings.Builder stopInstanceRetrySettingBuilder =
        clientSettingsBuilder.stopInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getStopInstanceInitialRpcTimeout() != null) {
      stopInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getStopInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopInstanceInitialRpcTimeout set to "
                + this.clientProperties.getStopInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getStopInstanceRpcTimeoutMultiplier() != null) {
      stopInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getStopInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getStopInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getStopInstanceMaxRpcTimeout() != null) {
      stopInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getStopInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopInstanceMaxRpcTimeout set to "
                + this.clientProperties.getStopInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getStopInstanceTotalTimeout() != null) {
      stopInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getStopInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopInstanceTotalTimeout set to "
                + this.clientProperties.getStopInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .stopInstanceSettings()
        .setRetrySettings(stopInstanceRetrySettingBuilder.build());
    RetrySettings.Builder resetInstanceRetrySettingBuilder =
        clientSettingsBuilder.resetInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getResetInstanceInitialRpcTimeout() != null) {
      resetInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getResetInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResetInstanceInitialRpcTimeout set to "
                + this.clientProperties.getResetInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getResetInstanceRpcTimeoutMultiplier() != null) {
      resetInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getResetInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResetInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getResetInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getResetInstanceMaxRpcTimeout() != null) {
      resetInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getResetInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResetInstanceMaxRpcTimeout set to "
                + this.clientProperties.getResetInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getResetInstanceTotalTimeout() != null) {
      resetInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getResetInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResetInstanceTotalTimeout set to "
                + this.clientProperties.getResetInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .resetInstanceSettings()
        .setRetrySettings(resetInstanceRetrySettingBuilder.build());
    RetrySettings.Builder reportInstanceInfoRetrySettingBuilder =
        clientSettingsBuilder.reportInstanceInfoSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getReportInstanceInfoInitialRpcTimeout() != null) {
      reportInstanceInfoRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getReportInstanceInfoInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReportInstanceInfoInitialRpcTimeout set to "
                + this.clientProperties.getReportInstanceInfoInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getReportInstanceInfoRpcTimeoutMultiplier() != null) {
      reportInstanceInfoRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getReportInstanceInfoRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReportInstanceInfoRpcTimeoutMultiplier set to "
                + this.clientProperties.getReportInstanceInfoRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getReportInstanceInfoMaxRpcTimeout() != null) {
      reportInstanceInfoRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getReportInstanceInfoMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReportInstanceInfoMaxRpcTimeout set to "
                + this.clientProperties.getReportInstanceInfoMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getReportInstanceInfoTotalTimeout() != null) {
      reportInstanceInfoRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getReportInstanceInfoTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReportInstanceInfoTotalTimeout set to "
                + this.clientProperties.getReportInstanceInfoTotalTimeout());
      }
    }
    clientSettingsBuilder
        .reportInstanceInfoSettings()
        .setRetrySettings(reportInstanceInfoRetrySettingBuilder.build());
    RetrySettings.Builder isInstanceUpgradeableRetrySettingBuilder =
        clientSettingsBuilder.isInstanceUpgradeableSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getIsInstanceUpgradeableInitialRpcTimeout() != null) {
      isInstanceUpgradeableRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getIsInstanceUpgradeableInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "IsInstanceUpgradeableInitialRpcTimeout set to "
                + this.clientProperties.getIsInstanceUpgradeableInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getIsInstanceUpgradeableRpcTimeoutMultiplier() != null) {
      isInstanceUpgradeableRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getIsInstanceUpgradeableRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "IsInstanceUpgradeableRpcTimeoutMultiplier set to "
                + this.clientProperties.getIsInstanceUpgradeableRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getIsInstanceUpgradeableMaxRpcTimeout() != null) {
      isInstanceUpgradeableRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getIsInstanceUpgradeableMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "IsInstanceUpgradeableMaxRpcTimeout set to "
                + this.clientProperties.getIsInstanceUpgradeableMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getIsInstanceUpgradeableTotalTimeout() != null) {
      isInstanceUpgradeableRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getIsInstanceUpgradeableTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "IsInstanceUpgradeableTotalTimeout set to "
                + this.clientProperties.getIsInstanceUpgradeableTotalTimeout());
      }
    }
    clientSettingsBuilder
        .isInstanceUpgradeableSettings()
        .setRetrySettings(isInstanceUpgradeableRetrySettingBuilder.build());
    RetrySettings.Builder getInstanceHealthRetrySettingBuilder =
        clientSettingsBuilder.getInstanceHealthSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetInstanceHealthInitialRpcTimeout() != null) {
      getInstanceHealthRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetInstanceHealthInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceHealthInitialRpcTimeout set to "
                + this.clientProperties.getGetInstanceHealthInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetInstanceHealthRpcTimeoutMultiplier() != null) {
      getInstanceHealthRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetInstanceHealthRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceHealthRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetInstanceHealthRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetInstanceHealthMaxRpcTimeout() != null) {
      getInstanceHealthRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetInstanceHealthMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceHealthMaxRpcTimeout set to "
                + this.clientProperties.getGetInstanceHealthMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetInstanceHealthTotalTimeout() != null) {
      getInstanceHealthRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetInstanceHealthTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstanceHealthTotalTimeout set to "
                + this.clientProperties.getGetInstanceHealthTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getInstanceHealthSettings()
        .setRetrySettings(getInstanceHealthRetrySettingBuilder.build());
    RetrySettings.Builder upgradeInstanceRetrySettingBuilder =
        clientSettingsBuilder.upgradeInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpgradeInstanceInitialRpcTimeout() != null) {
      upgradeInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpgradeInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpgradeInstanceInitialRpcTimeout set to "
                + this.clientProperties.getUpgradeInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpgradeInstanceRpcTimeoutMultiplier() != null) {
      upgradeInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpgradeInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpgradeInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpgradeInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpgradeInstanceMaxRpcTimeout() != null) {
      upgradeInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpgradeInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpgradeInstanceMaxRpcTimeout set to "
                + this.clientProperties.getUpgradeInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpgradeInstanceTotalTimeout() != null) {
      upgradeInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpgradeInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpgradeInstanceTotalTimeout set to "
                + this.clientProperties.getUpgradeInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .upgradeInstanceSettings()
        .setRetrySettings(upgradeInstanceRetrySettingBuilder.build());
    RetrySettings.Builder rollbackInstanceRetrySettingBuilder =
        clientSettingsBuilder.rollbackInstanceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRollbackInstanceInitialRpcTimeout() != null) {
      rollbackInstanceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRollbackInstanceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RollbackInstanceInitialRpcTimeout set to "
                + this.clientProperties.getRollbackInstanceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRollbackInstanceRpcTimeoutMultiplier() != null) {
      rollbackInstanceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRollbackInstanceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RollbackInstanceRpcTimeoutMultiplier set to "
                + this.clientProperties.getRollbackInstanceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRollbackInstanceMaxRpcTimeout() != null) {
      rollbackInstanceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRollbackInstanceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RollbackInstanceMaxRpcTimeout set to "
                + this.clientProperties.getRollbackInstanceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRollbackInstanceTotalTimeout() != null) {
      rollbackInstanceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRollbackInstanceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RollbackInstanceTotalTimeout set to "
                + this.clientProperties.getRollbackInstanceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .rollbackInstanceSettings()
        .setRetrySettings(rollbackInstanceRetrySettingBuilder.build());
    RetrySettings.Builder upgradeInstanceInternalRetrySettingBuilder =
        clientSettingsBuilder.upgradeInstanceInternalSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpgradeInstanceInternalInitialRpcTimeout() != null) {
      upgradeInstanceInternalRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpgradeInstanceInternalInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpgradeInstanceInternalInitialRpcTimeout set to "
                + this.clientProperties.getUpgradeInstanceInternalInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpgradeInstanceInternalRpcTimeoutMultiplier() != null) {
      upgradeInstanceInternalRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpgradeInstanceInternalRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpgradeInstanceInternalRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpgradeInstanceInternalRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpgradeInstanceInternalMaxRpcTimeout() != null) {
      upgradeInstanceInternalRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpgradeInstanceInternalMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpgradeInstanceInternalMaxRpcTimeout set to "
                + this.clientProperties.getUpgradeInstanceInternalMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpgradeInstanceInternalTotalTimeout() != null) {
      upgradeInstanceInternalRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpgradeInstanceInternalTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpgradeInstanceInternalTotalTimeout set to "
                + this.clientProperties.getUpgradeInstanceInternalTotalTimeout());
      }
    }
    clientSettingsBuilder
        .upgradeInstanceInternalSettings()
        .setRetrySettings(upgradeInstanceInternalRetrySettingBuilder.build());
    RetrySettings.Builder listEnvironmentsRetrySettingBuilder =
        clientSettingsBuilder.listEnvironmentsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListEnvironmentsInitialRpcTimeout() != null) {
      listEnvironmentsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListEnvironmentsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEnvironmentsInitialRpcTimeout set to "
                + this.clientProperties.getListEnvironmentsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListEnvironmentsRpcTimeoutMultiplier() != null) {
      listEnvironmentsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListEnvironmentsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEnvironmentsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListEnvironmentsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListEnvironmentsMaxRpcTimeout() != null) {
      listEnvironmentsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListEnvironmentsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEnvironmentsMaxRpcTimeout set to "
                + this.clientProperties.getListEnvironmentsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListEnvironmentsTotalTimeout() != null) {
      listEnvironmentsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListEnvironmentsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListEnvironmentsTotalTimeout set to "
                + this.clientProperties.getListEnvironmentsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listEnvironmentsSettings()
        .setRetrySettings(listEnvironmentsRetrySettingBuilder.build());
    RetrySettings.Builder getEnvironmentRetrySettingBuilder =
        clientSettingsBuilder.getEnvironmentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetEnvironmentInitialRpcTimeout() != null) {
      getEnvironmentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetEnvironmentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentInitialRpcTimeout set to "
                + this.clientProperties.getGetEnvironmentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEnvironmentRpcTimeoutMultiplier() != null) {
      getEnvironmentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetEnvironmentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetEnvironmentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetEnvironmentMaxRpcTimeout() != null) {
      getEnvironmentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetEnvironmentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentMaxRpcTimeout set to "
                + this.clientProperties.getGetEnvironmentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEnvironmentTotalTimeout() != null) {
      getEnvironmentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetEnvironmentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEnvironmentTotalTimeout set to "
                + this.clientProperties.getGetEnvironmentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getEnvironmentSettings()
        .setRetrySettings(getEnvironmentRetrySettingBuilder.build());
    RetrySettings.Builder createEnvironmentRetrySettingBuilder =
        clientSettingsBuilder.createEnvironmentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateEnvironmentInitialRpcTimeout() != null) {
      createEnvironmentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateEnvironmentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEnvironmentInitialRpcTimeout set to "
                + this.clientProperties.getCreateEnvironmentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateEnvironmentRpcTimeoutMultiplier() != null) {
      createEnvironmentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateEnvironmentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEnvironmentRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateEnvironmentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateEnvironmentMaxRpcTimeout() != null) {
      createEnvironmentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateEnvironmentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEnvironmentMaxRpcTimeout set to "
                + this.clientProperties.getCreateEnvironmentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateEnvironmentTotalTimeout() != null) {
      createEnvironmentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateEnvironmentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateEnvironmentTotalTimeout set to "
                + this.clientProperties.getCreateEnvironmentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createEnvironmentSettings()
        .setRetrySettings(createEnvironmentRetrySettingBuilder.build());
    RetrySettings.Builder deleteEnvironmentRetrySettingBuilder =
        clientSettingsBuilder.deleteEnvironmentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteEnvironmentInitialRpcTimeout() != null) {
      deleteEnvironmentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteEnvironmentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEnvironmentInitialRpcTimeout set to "
                + this.clientProperties.getDeleteEnvironmentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteEnvironmentRpcTimeoutMultiplier() != null) {
      deleteEnvironmentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteEnvironmentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEnvironmentRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteEnvironmentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteEnvironmentMaxRpcTimeout() != null) {
      deleteEnvironmentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteEnvironmentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEnvironmentMaxRpcTimeout set to "
                + this.clientProperties.getDeleteEnvironmentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteEnvironmentTotalTimeout() != null) {
      deleteEnvironmentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteEnvironmentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteEnvironmentTotalTimeout set to "
                + this.clientProperties.getDeleteEnvironmentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteEnvironmentSettings()
        .setRetrySettings(deleteEnvironmentRetrySettingBuilder.build());
    RetrySettings.Builder listSchedulesRetrySettingBuilder =
        clientSettingsBuilder.listSchedulesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListSchedulesInitialRpcTimeout() != null) {
      listSchedulesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListSchedulesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSchedulesInitialRpcTimeout set to "
                + this.clientProperties.getListSchedulesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListSchedulesRpcTimeoutMultiplier() != null) {
      listSchedulesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListSchedulesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSchedulesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListSchedulesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListSchedulesMaxRpcTimeout() != null) {
      listSchedulesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListSchedulesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSchedulesMaxRpcTimeout set to "
                + this.clientProperties.getListSchedulesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListSchedulesTotalTimeout() != null) {
      listSchedulesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListSchedulesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSchedulesTotalTimeout set to "
                + this.clientProperties.getListSchedulesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listSchedulesSettings()
        .setRetrySettings(listSchedulesRetrySettingBuilder.build());
    RetrySettings.Builder getScheduleRetrySettingBuilder =
        clientSettingsBuilder.getScheduleSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetScheduleInitialRpcTimeout() != null) {
      getScheduleRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetScheduleInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetScheduleInitialRpcTimeout set to "
                + this.clientProperties.getGetScheduleInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetScheduleRpcTimeoutMultiplier() != null) {
      getScheduleRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetScheduleRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetScheduleRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetScheduleRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetScheduleMaxRpcTimeout() != null) {
      getScheduleRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetScheduleMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetScheduleMaxRpcTimeout set to "
                + this.clientProperties.getGetScheduleMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetScheduleTotalTimeout() != null) {
      getScheduleRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetScheduleTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetScheduleTotalTimeout set to " + this.clientProperties.getGetScheduleTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getScheduleSettings()
        .setRetrySettings(getScheduleRetrySettingBuilder.build());
    RetrySettings.Builder deleteScheduleRetrySettingBuilder =
        clientSettingsBuilder.deleteScheduleSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteScheduleInitialRpcTimeout() != null) {
      deleteScheduleRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteScheduleInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteScheduleInitialRpcTimeout set to "
                + this.clientProperties.getDeleteScheduleInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteScheduleRpcTimeoutMultiplier() != null) {
      deleteScheduleRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteScheduleRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteScheduleRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteScheduleRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteScheduleMaxRpcTimeout() != null) {
      deleteScheduleRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteScheduleMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteScheduleMaxRpcTimeout set to "
                + this.clientProperties.getDeleteScheduleMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteScheduleTotalTimeout() != null) {
      deleteScheduleRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteScheduleTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteScheduleTotalTimeout set to "
                + this.clientProperties.getDeleteScheduleTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteScheduleSettings()
        .setRetrySettings(deleteScheduleRetrySettingBuilder.build());
    RetrySettings.Builder createScheduleRetrySettingBuilder =
        clientSettingsBuilder.createScheduleSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateScheduleInitialRpcTimeout() != null) {
      createScheduleRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateScheduleInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateScheduleInitialRpcTimeout set to "
                + this.clientProperties.getCreateScheduleInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateScheduleRpcTimeoutMultiplier() != null) {
      createScheduleRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateScheduleRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateScheduleRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateScheduleRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateScheduleMaxRpcTimeout() != null) {
      createScheduleRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateScheduleMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateScheduleMaxRpcTimeout set to "
                + this.clientProperties.getCreateScheduleMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateScheduleTotalTimeout() != null) {
      createScheduleRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateScheduleTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateScheduleTotalTimeout set to "
                + this.clientProperties.getCreateScheduleTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createScheduleSettings()
        .setRetrySettings(createScheduleRetrySettingBuilder.build());
    RetrySettings.Builder triggerScheduleRetrySettingBuilder =
        clientSettingsBuilder.triggerScheduleSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getTriggerScheduleInitialRetryDelay() != null) {
      triggerScheduleRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getTriggerScheduleInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TriggerScheduleInitialRetryDelay set to "
                + this.clientProperties.getTriggerScheduleInitialRetryDelay());
      }
    }
    if (this.clientProperties.getTriggerScheduleRetryDelayMultiplier() != null) {
      triggerScheduleRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getTriggerScheduleRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TriggerScheduleRetryDelayMultiplier set to "
                + this.clientProperties.getTriggerScheduleRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getTriggerScheduleMaxRetryDelay() != null) {
      triggerScheduleRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getTriggerScheduleMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TriggerScheduleMaxRetryDelay set to "
                + this.clientProperties.getTriggerScheduleMaxRetryDelay());
      }
    }
    if (this.clientProperties.getTriggerScheduleInitialRpcTimeout() != null) {
      triggerScheduleRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getTriggerScheduleInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TriggerScheduleInitialRpcTimeout set to "
                + this.clientProperties.getTriggerScheduleInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getTriggerScheduleRpcTimeoutMultiplier() != null) {
      triggerScheduleRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getTriggerScheduleRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TriggerScheduleRpcTimeoutMultiplier set to "
                + this.clientProperties.getTriggerScheduleRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getTriggerScheduleMaxRpcTimeout() != null) {
      triggerScheduleRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getTriggerScheduleMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TriggerScheduleMaxRpcTimeout set to "
                + this.clientProperties.getTriggerScheduleMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getTriggerScheduleTotalTimeout() != null) {
      triggerScheduleRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getTriggerScheduleTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TriggerScheduleTotalTimeout set to "
                + this.clientProperties.getTriggerScheduleTotalTimeout());
      }
    }
    clientSettingsBuilder
        .triggerScheduleSettings()
        .setRetrySettings(triggerScheduleRetrySettingBuilder.build());
    RetrySettings.Builder listExecutionsRetrySettingBuilder =
        clientSettingsBuilder.listExecutionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListExecutionsInitialRpcTimeout() != null) {
      listExecutionsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListExecutionsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListExecutionsInitialRpcTimeout set to "
                + this.clientProperties.getListExecutionsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListExecutionsRpcTimeoutMultiplier() != null) {
      listExecutionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListExecutionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListExecutionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListExecutionsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListExecutionsMaxRpcTimeout() != null) {
      listExecutionsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListExecutionsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListExecutionsMaxRpcTimeout set to "
                + this.clientProperties.getListExecutionsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListExecutionsTotalTimeout() != null) {
      listExecutionsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListExecutionsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListExecutionsTotalTimeout set to "
                + this.clientProperties.getListExecutionsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listExecutionsSettings()
        .setRetrySettings(listExecutionsRetrySettingBuilder.build());
    RetrySettings.Builder getExecutionRetrySettingBuilder =
        clientSettingsBuilder.getExecutionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetExecutionInitialRpcTimeout() != null) {
      getExecutionRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetExecutionInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetExecutionInitialRpcTimeout set to "
                + this.clientProperties.getGetExecutionInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetExecutionRpcTimeoutMultiplier() != null) {
      getExecutionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetExecutionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetExecutionRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetExecutionRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetExecutionMaxRpcTimeout() != null) {
      getExecutionRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetExecutionMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetExecutionMaxRpcTimeout set to "
                + this.clientProperties.getGetExecutionMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetExecutionTotalTimeout() != null) {
      getExecutionRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetExecutionTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetExecutionTotalTimeout set to "
                + this.clientProperties.getGetExecutionTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getExecutionSettings()
        .setRetrySettings(getExecutionRetrySettingBuilder.build());
    RetrySettings.Builder deleteExecutionRetrySettingBuilder =
        clientSettingsBuilder.deleteExecutionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteExecutionInitialRpcTimeout() != null) {
      deleteExecutionRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteExecutionInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteExecutionInitialRpcTimeout set to "
                + this.clientProperties.getDeleteExecutionInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteExecutionRpcTimeoutMultiplier() != null) {
      deleteExecutionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteExecutionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteExecutionRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteExecutionRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteExecutionMaxRpcTimeout() != null) {
      deleteExecutionRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteExecutionMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteExecutionMaxRpcTimeout set to "
                + this.clientProperties.getDeleteExecutionMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteExecutionTotalTimeout() != null) {
      deleteExecutionRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteExecutionTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteExecutionTotalTimeout set to "
                + this.clientProperties.getDeleteExecutionTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteExecutionSettings()
        .setRetrySettings(deleteExecutionRetrySettingBuilder.build());
    RetrySettings.Builder createExecutionRetrySettingBuilder =
        clientSettingsBuilder.createExecutionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateExecutionInitialRpcTimeout() != null) {
      createExecutionRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateExecutionInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateExecutionInitialRpcTimeout set to "
                + this.clientProperties.getCreateExecutionInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateExecutionRpcTimeoutMultiplier() != null) {
      createExecutionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateExecutionRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateExecutionRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateExecutionRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateExecutionMaxRpcTimeout() != null) {
      createExecutionRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateExecutionMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateExecutionMaxRpcTimeout set to "
                + this.clientProperties.getCreateExecutionMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateExecutionTotalTimeout() != null) {
      createExecutionRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateExecutionTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateExecutionTotalTimeout set to "
                + this.clientProperties.getCreateExecutionTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createExecutionSettings()
        .setRetrySettings(createExecutionRetrySettingBuilder.build());
    return NotebookServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-notebook-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
