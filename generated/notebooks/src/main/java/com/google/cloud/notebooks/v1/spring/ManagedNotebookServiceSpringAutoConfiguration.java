/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.notebooks.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.notebooks.v1.ManagedNotebookServiceClient;
import com.google.cloud.notebooks.v1.ManagedNotebookServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ManagedNotebookServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ManagedNotebookServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.notebooks.v1.spring.auto.managed-notebook-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({
  ManagedNotebookServiceSpringProperties.class,
  GlobalProperties.class
})
public class ManagedNotebookServiceSpringAutoConfiguration {
  private final ManagedNotebookServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(ManagedNotebookServiceSpringAutoConfiguration.class);

  protected ManagedNotebookServiceSpringAutoConfiguration(
      ManagedNotebookServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider managedNotebookServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from ManagedNotebookService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultManagedNotebookServiceTransportChannelProvider() {
    return ManagedNotebookServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ManagedNotebookServiceClient bean configured to use the default credentials provider
   * (obtained with managedNotebookServiceCredentials()) and its default transport channel provider
   * (defaultManagedNotebookServiceTransportChannelProvider()). It also configures the quota project
   * ID if provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in ManagedNotebookServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public ManagedNotebookServiceClient managedNotebookServiceClient(
      @Qualifier("managedNotebookServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultManagedNotebookServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ManagedNotebookServiceSettings.Builder clientSettingsBuilder =
        ManagedNotebookServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ManagedNotebookServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    RetrySettings.Builder listRuntimesRetrySettingBuilder =
        clientSettingsBuilder.listRuntimesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListRuntimesInitialRpcTimeout() != null) {
      listRuntimesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListRuntimesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRuntimesInitialRpcTimeout set to "
                + this.clientProperties.getListRuntimesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListRuntimesRpcTimeoutMultiplier() != null) {
      listRuntimesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListRuntimesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRuntimesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListRuntimesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListRuntimesMaxRpcTimeout() != null) {
      listRuntimesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListRuntimesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRuntimesMaxRpcTimeout set to "
                + this.clientProperties.getListRuntimesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListRuntimesTotalTimeout() != null) {
      listRuntimesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListRuntimesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRuntimesTotalTimeout set to "
                + this.clientProperties.getListRuntimesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listRuntimesSettings()
        .setRetrySettings(listRuntimesRetrySettingBuilder.build());
    RetrySettings.Builder getRuntimeRetrySettingBuilder =
        clientSettingsBuilder.getRuntimeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetRuntimeInitialRpcTimeout() != null) {
      getRuntimeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetRuntimeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRuntimeInitialRpcTimeout set to "
                + this.clientProperties.getGetRuntimeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetRuntimeRpcTimeoutMultiplier() != null) {
      getRuntimeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetRuntimeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRuntimeRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetRuntimeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetRuntimeMaxRpcTimeout() != null) {
      getRuntimeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetRuntimeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRuntimeMaxRpcTimeout set to " + this.clientProperties.getGetRuntimeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetRuntimeTotalTimeout() != null) {
      getRuntimeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetRuntimeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRuntimeTotalTimeout set to " + this.clientProperties.getGetRuntimeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getRuntimeSettings()
        .setRetrySettings(getRuntimeRetrySettingBuilder.build());
    RetrySettings.Builder createRuntimeRetrySettingBuilder =
        clientSettingsBuilder.createRuntimeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateRuntimeInitialRpcTimeout() != null) {
      createRuntimeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateRuntimeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateRuntimeInitialRpcTimeout set to "
                + this.clientProperties.getCreateRuntimeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateRuntimeRpcTimeoutMultiplier() != null) {
      createRuntimeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateRuntimeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateRuntimeRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateRuntimeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateRuntimeMaxRpcTimeout() != null) {
      createRuntimeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateRuntimeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateRuntimeMaxRpcTimeout set to "
                + this.clientProperties.getCreateRuntimeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateRuntimeTotalTimeout() != null) {
      createRuntimeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateRuntimeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateRuntimeTotalTimeout set to "
                + this.clientProperties.getCreateRuntimeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createRuntimeSettings()
        .setRetrySettings(createRuntimeRetrySettingBuilder.build());
    RetrySettings.Builder deleteRuntimeRetrySettingBuilder =
        clientSettingsBuilder.deleteRuntimeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteRuntimeInitialRpcTimeout() != null) {
      deleteRuntimeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteRuntimeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRuntimeInitialRpcTimeout set to "
                + this.clientProperties.getDeleteRuntimeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteRuntimeRpcTimeoutMultiplier() != null) {
      deleteRuntimeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteRuntimeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRuntimeRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteRuntimeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteRuntimeMaxRpcTimeout() != null) {
      deleteRuntimeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteRuntimeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRuntimeMaxRpcTimeout set to "
                + this.clientProperties.getDeleteRuntimeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteRuntimeTotalTimeout() != null) {
      deleteRuntimeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteRuntimeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRuntimeTotalTimeout set to "
                + this.clientProperties.getDeleteRuntimeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteRuntimeSettings()
        .setRetrySettings(deleteRuntimeRetrySettingBuilder.build());
    RetrySettings.Builder startRuntimeRetrySettingBuilder =
        clientSettingsBuilder.startRuntimeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getStartRuntimeInitialRpcTimeout() != null) {
      startRuntimeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getStartRuntimeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartRuntimeInitialRpcTimeout set to "
                + this.clientProperties.getStartRuntimeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getStartRuntimeRpcTimeoutMultiplier() != null) {
      startRuntimeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getStartRuntimeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartRuntimeRpcTimeoutMultiplier set to "
                + this.clientProperties.getStartRuntimeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getStartRuntimeMaxRpcTimeout() != null) {
      startRuntimeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getStartRuntimeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartRuntimeMaxRpcTimeout set to "
                + this.clientProperties.getStartRuntimeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getStartRuntimeTotalTimeout() != null) {
      startRuntimeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getStartRuntimeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartRuntimeTotalTimeout set to "
                + this.clientProperties.getStartRuntimeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .startRuntimeSettings()
        .setRetrySettings(startRuntimeRetrySettingBuilder.build());
    RetrySettings.Builder stopRuntimeRetrySettingBuilder =
        clientSettingsBuilder.stopRuntimeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getStopRuntimeInitialRpcTimeout() != null) {
      stopRuntimeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getStopRuntimeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopRuntimeInitialRpcTimeout set to "
                + this.clientProperties.getStopRuntimeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getStopRuntimeRpcTimeoutMultiplier() != null) {
      stopRuntimeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getStopRuntimeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopRuntimeRpcTimeoutMultiplier set to "
                + this.clientProperties.getStopRuntimeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getStopRuntimeMaxRpcTimeout() != null) {
      stopRuntimeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getStopRuntimeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopRuntimeMaxRpcTimeout set to "
                + this.clientProperties.getStopRuntimeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getStopRuntimeTotalTimeout() != null) {
      stopRuntimeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getStopRuntimeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StopRuntimeTotalTimeout set to " + this.clientProperties.getStopRuntimeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .stopRuntimeSettings()
        .setRetrySettings(stopRuntimeRetrySettingBuilder.build());
    RetrySettings.Builder switchRuntimeRetrySettingBuilder =
        clientSettingsBuilder.switchRuntimeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSwitchRuntimeInitialRpcTimeout() != null) {
      switchRuntimeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSwitchRuntimeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SwitchRuntimeInitialRpcTimeout set to "
                + this.clientProperties.getSwitchRuntimeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSwitchRuntimeRpcTimeoutMultiplier() != null) {
      switchRuntimeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSwitchRuntimeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SwitchRuntimeRpcTimeoutMultiplier set to "
                + this.clientProperties.getSwitchRuntimeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSwitchRuntimeMaxRpcTimeout() != null) {
      switchRuntimeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSwitchRuntimeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SwitchRuntimeMaxRpcTimeout set to "
                + this.clientProperties.getSwitchRuntimeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSwitchRuntimeTotalTimeout() != null) {
      switchRuntimeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSwitchRuntimeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SwitchRuntimeTotalTimeout set to "
                + this.clientProperties.getSwitchRuntimeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .switchRuntimeSettings()
        .setRetrySettings(switchRuntimeRetrySettingBuilder.build());
    RetrySettings.Builder resetRuntimeRetrySettingBuilder =
        clientSettingsBuilder.resetRuntimeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getResetRuntimeInitialRetryDelay() != null) {
      resetRuntimeRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getResetRuntimeInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResetRuntimeInitialRetryDelay set to "
                + this.clientProperties.getResetRuntimeInitialRetryDelay());
      }
    }
    if (this.clientProperties.getResetRuntimeRetryDelayMultiplier() != null) {
      resetRuntimeRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getResetRuntimeRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResetRuntimeRetryDelayMultiplier set to "
                + this.clientProperties.getResetRuntimeRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getResetRuntimeMaxRetryDelay() != null) {
      resetRuntimeRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getResetRuntimeMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResetRuntimeMaxRetryDelay set to "
                + this.clientProperties.getResetRuntimeMaxRetryDelay());
      }
    }
    if (this.clientProperties.getResetRuntimeInitialRpcTimeout() != null) {
      resetRuntimeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getResetRuntimeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResetRuntimeInitialRpcTimeout set to "
                + this.clientProperties.getResetRuntimeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getResetRuntimeRpcTimeoutMultiplier() != null) {
      resetRuntimeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getResetRuntimeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResetRuntimeRpcTimeoutMultiplier set to "
                + this.clientProperties.getResetRuntimeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getResetRuntimeMaxRpcTimeout() != null) {
      resetRuntimeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getResetRuntimeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResetRuntimeMaxRpcTimeout set to "
                + this.clientProperties.getResetRuntimeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getResetRuntimeTotalTimeout() != null) {
      resetRuntimeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getResetRuntimeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ResetRuntimeTotalTimeout set to "
                + this.clientProperties.getResetRuntimeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .resetRuntimeSettings()
        .setRetrySettings(resetRuntimeRetrySettingBuilder.build());
    RetrySettings.Builder reportRuntimeEventRetrySettingBuilder =
        clientSettingsBuilder.reportRuntimeEventSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getReportRuntimeEventInitialRpcTimeout() != null) {
      reportRuntimeEventRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getReportRuntimeEventInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReportRuntimeEventInitialRpcTimeout set to "
                + this.clientProperties.getReportRuntimeEventInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getReportRuntimeEventRpcTimeoutMultiplier() != null) {
      reportRuntimeEventRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getReportRuntimeEventRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReportRuntimeEventRpcTimeoutMultiplier set to "
                + this.clientProperties.getReportRuntimeEventRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getReportRuntimeEventMaxRpcTimeout() != null) {
      reportRuntimeEventRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getReportRuntimeEventMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReportRuntimeEventMaxRpcTimeout set to "
                + this.clientProperties.getReportRuntimeEventMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getReportRuntimeEventTotalTimeout() != null) {
      reportRuntimeEventRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getReportRuntimeEventTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReportRuntimeEventTotalTimeout set to "
                + this.clientProperties.getReportRuntimeEventTotalTimeout());
      }
    }
    clientSettingsBuilder
        .reportRuntimeEventSettings()
        .setRetrySettings(reportRuntimeEventRetrySettingBuilder.build());
    RetrySettings.Builder refreshRuntimeTokenInternalRetrySettingBuilder =
        clientSettingsBuilder.refreshRuntimeTokenInternalSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRefreshRuntimeTokenInternalInitialRetryDelay() != null) {
      refreshRuntimeTokenInternalRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getRefreshRuntimeTokenInternalInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RefreshRuntimeTokenInternalInitialRetryDelay set to "
                + this.clientProperties.getRefreshRuntimeTokenInternalInitialRetryDelay());
      }
    }
    if (this.clientProperties.getRefreshRuntimeTokenInternalRetryDelayMultiplier() != null) {
      refreshRuntimeTokenInternalRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getRefreshRuntimeTokenInternalRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RefreshRuntimeTokenInternalRetryDelayMultiplier set to "
                + this.clientProperties.getRefreshRuntimeTokenInternalRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getRefreshRuntimeTokenInternalMaxRetryDelay() != null) {
      refreshRuntimeTokenInternalRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getRefreshRuntimeTokenInternalMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RefreshRuntimeTokenInternalMaxRetryDelay set to "
                + this.clientProperties.getRefreshRuntimeTokenInternalMaxRetryDelay());
      }
    }
    if (this.clientProperties.getRefreshRuntimeTokenInternalInitialRpcTimeout() != null) {
      refreshRuntimeTokenInternalRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRefreshRuntimeTokenInternalInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RefreshRuntimeTokenInternalInitialRpcTimeout set to "
                + this.clientProperties.getRefreshRuntimeTokenInternalInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRefreshRuntimeTokenInternalRpcTimeoutMultiplier() != null) {
      refreshRuntimeTokenInternalRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRefreshRuntimeTokenInternalRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RefreshRuntimeTokenInternalRpcTimeoutMultiplier set to "
                + this.clientProperties.getRefreshRuntimeTokenInternalRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRefreshRuntimeTokenInternalMaxRpcTimeout() != null) {
      refreshRuntimeTokenInternalRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRefreshRuntimeTokenInternalMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RefreshRuntimeTokenInternalMaxRpcTimeout set to "
                + this.clientProperties.getRefreshRuntimeTokenInternalMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRefreshRuntimeTokenInternalTotalTimeout() != null) {
      refreshRuntimeTokenInternalRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRefreshRuntimeTokenInternalTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RefreshRuntimeTokenInternalTotalTimeout set to "
                + this.clientProperties.getRefreshRuntimeTokenInternalTotalTimeout());
      }
    }
    clientSettingsBuilder
        .refreshRuntimeTokenInternalSettings()
        .setRetrySettings(refreshRuntimeTokenInternalRetrySettingBuilder.build());
    return ManagedNotebookServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-managed-notebook-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
