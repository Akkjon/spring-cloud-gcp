/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.debugger.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.debugger.v2.Debugger2Client;
import com.google.cloud.debugger.v2.Debugger2Settings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link Debugger2Client}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(Debugger2Client.class)
@ConditionalOnProperty(
    value = "com.google.cloud.debugger.v2.spring.auto.debugger2.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({Debugger2SpringProperties.class, GlobalProperties.class})
public class Debugger2SpringAutoConfiguration {
  private final Debugger2SpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(Debugger2SpringAutoConfiguration.class);

  protected Debugger2SpringAutoConfiguration(
      Debugger2SpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider debugger2Credentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Debugger2-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultDebugger2TransportChannelProvider() {
    return Debugger2Settings.defaultTransportChannelProvider();
  }

  /**
   * Provides a Debugger2Client bean configured to use the default credentials provider (obtained
   * with debugger2Credentials()) and its default transport channel provider
   * (defaultDebugger2TransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in Debugger2SpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public Debugger2Client debugger2Client(
      @Qualifier("debugger2Credentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultDebugger2TransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    Debugger2Settings.Builder clientSettingsBuilder =
        Debugger2Settings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          Debugger2Settings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          Debugger2Settings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder setBreakpointRetrySettingBuilder =
        clientSettingsBuilder.setBreakpointSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetBreakpointInitialRpcTimeout() != null) {
      setBreakpointRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetBreakpointInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetBreakpointInitialRpcTimeout set to "
                + this.clientProperties.getSetBreakpointInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetBreakpointRpcTimeoutMultiplier() != null) {
      setBreakpointRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetBreakpointRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetBreakpointRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetBreakpointRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetBreakpointMaxRpcTimeout() != null) {
      setBreakpointRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetBreakpointMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetBreakpointMaxRpcTimeout set to "
                + this.clientProperties.getSetBreakpointMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetBreakpointTotalTimeout() != null) {
      setBreakpointRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetBreakpointTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetBreakpointTotalTimeout set to "
                + this.clientProperties.getSetBreakpointTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setBreakpointSettings()
        .setRetrySettings(setBreakpointRetrySettingBuilder.build());
    RetrySettings.Builder getBreakpointRetrySettingBuilder =
        clientSettingsBuilder.getBreakpointSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetBreakpointInitialRetryDelay() != null) {
      getBreakpointRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetBreakpointInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBreakpointInitialRetryDelay set to "
                + this.clientProperties.getGetBreakpointInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetBreakpointRetryDelayMultiplier() != null) {
      getBreakpointRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetBreakpointRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBreakpointRetryDelayMultiplier set to "
                + this.clientProperties.getGetBreakpointRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetBreakpointMaxRetryDelay() != null) {
      getBreakpointRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetBreakpointMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBreakpointMaxRetryDelay set to "
                + this.clientProperties.getGetBreakpointMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetBreakpointInitialRpcTimeout() != null) {
      getBreakpointRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetBreakpointInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBreakpointInitialRpcTimeout set to "
                + this.clientProperties.getGetBreakpointInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetBreakpointRpcTimeoutMultiplier() != null) {
      getBreakpointRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetBreakpointRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBreakpointRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetBreakpointRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetBreakpointMaxRpcTimeout() != null) {
      getBreakpointRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetBreakpointMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBreakpointMaxRpcTimeout set to "
                + this.clientProperties.getGetBreakpointMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetBreakpointTotalTimeout() != null) {
      getBreakpointRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetBreakpointTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBreakpointTotalTimeout set to "
                + this.clientProperties.getGetBreakpointTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getBreakpointSettings()
        .setRetrySettings(getBreakpointRetrySettingBuilder.build());
    RetrySettings.Builder deleteBreakpointRetrySettingBuilder =
        clientSettingsBuilder.deleteBreakpointSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteBreakpointInitialRetryDelay() != null) {
      deleteBreakpointRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteBreakpointInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteBreakpointInitialRetryDelay set to "
                + this.clientProperties.getDeleteBreakpointInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteBreakpointRetryDelayMultiplier() != null) {
      deleteBreakpointRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteBreakpointRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteBreakpointRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteBreakpointRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteBreakpointMaxRetryDelay() != null) {
      deleteBreakpointRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteBreakpointMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteBreakpointMaxRetryDelay set to "
                + this.clientProperties.getDeleteBreakpointMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteBreakpointInitialRpcTimeout() != null) {
      deleteBreakpointRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteBreakpointInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteBreakpointInitialRpcTimeout set to "
                + this.clientProperties.getDeleteBreakpointInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteBreakpointRpcTimeoutMultiplier() != null) {
      deleteBreakpointRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteBreakpointRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteBreakpointRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteBreakpointRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteBreakpointMaxRpcTimeout() != null) {
      deleteBreakpointRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteBreakpointMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteBreakpointMaxRpcTimeout set to "
                + this.clientProperties.getDeleteBreakpointMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteBreakpointTotalTimeout() != null) {
      deleteBreakpointRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteBreakpointTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteBreakpointTotalTimeout set to "
                + this.clientProperties.getDeleteBreakpointTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteBreakpointSettings()
        .setRetrySettings(deleteBreakpointRetrySettingBuilder.build());
    RetrySettings.Builder listBreakpointsRetrySettingBuilder =
        clientSettingsBuilder.listBreakpointsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListBreakpointsInitialRetryDelay() != null) {
      listBreakpointsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListBreakpointsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBreakpointsInitialRetryDelay set to "
                + this.clientProperties.getListBreakpointsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListBreakpointsRetryDelayMultiplier() != null) {
      listBreakpointsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListBreakpointsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBreakpointsRetryDelayMultiplier set to "
                + this.clientProperties.getListBreakpointsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListBreakpointsMaxRetryDelay() != null) {
      listBreakpointsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListBreakpointsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBreakpointsMaxRetryDelay set to "
                + this.clientProperties.getListBreakpointsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListBreakpointsInitialRpcTimeout() != null) {
      listBreakpointsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListBreakpointsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBreakpointsInitialRpcTimeout set to "
                + this.clientProperties.getListBreakpointsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListBreakpointsRpcTimeoutMultiplier() != null) {
      listBreakpointsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListBreakpointsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBreakpointsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListBreakpointsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListBreakpointsMaxRpcTimeout() != null) {
      listBreakpointsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListBreakpointsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBreakpointsMaxRpcTimeout set to "
                + this.clientProperties.getListBreakpointsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListBreakpointsTotalTimeout() != null) {
      listBreakpointsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListBreakpointsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBreakpointsTotalTimeout set to "
                + this.clientProperties.getListBreakpointsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listBreakpointsSettings()
        .setRetrySettings(listBreakpointsRetrySettingBuilder.build());
    RetrySettings.Builder listDebuggeesRetrySettingBuilder =
        clientSettingsBuilder.listDebuggeesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListDebuggeesInitialRetryDelay() != null) {
      listDebuggeesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListDebuggeesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDebuggeesInitialRetryDelay set to "
                + this.clientProperties.getListDebuggeesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListDebuggeesRetryDelayMultiplier() != null) {
      listDebuggeesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListDebuggeesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDebuggeesRetryDelayMultiplier set to "
                + this.clientProperties.getListDebuggeesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListDebuggeesMaxRetryDelay() != null) {
      listDebuggeesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListDebuggeesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDebuggeesMaxRetryDelay set to "
                + this.clientProperties.getListDebuggeesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListDebuggeesInitialRpcTimeout() != null) {
      listDebuggeesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListDebuggeesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDebuggeesInitialRpcTimeout set to "
                + this.clientProperties.getListDebuggeesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListDebuggeesRpcTimeoutMultiplier() != null) {
      listDebuggeesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListDebuggeesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDebuggeesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListDebuggeesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListDebuggeesMaxRpcTimeout() != null) {
      listDebuggeesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListDebuggeesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDebuggeesMaxRpcTimeout set to "
                + this.clientProperties.getListDebuggeesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListDebuggeesTotalTimeout() != null) {
      listDebuggeesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListDebuggeesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDebuggeesTotalTimeout set to "
                + this.clientProperties.getListDebuggeesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listDebuggeesSettings()
        .setRetrySettings(listDebuggeesRetrySettingBuilder.build());
    return Debugger2Client.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-debugger2";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
