/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.vision.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import com.google.cloud.vision.v1.ProductSearchClient;
import com.google.cloud.vision.v1.ProductSearchSettings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ProductSearchClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ProductSearchClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.vision.v1.spring.auto.product-search.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({ProductSearchSpringProperties.class, GlobalProperties.class})
public class ProductSearchSpringAutoConfiguration {
  private final ProductSearchSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(ProductSearchSpringAutoConfiguration.class);

  protected ProductSearchSpringAutoConfiguration(
      ProductSearchSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider productSearchCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from ProductSearch-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultProductSearchTransportChannelProvider() {
    return ProductSearchSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ProductSearchClient bean configured to use the default credentials provider
   * (obtained with productSearchCredentials()) and its default transport channel provider
   * (defaultProductSearchTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in ProductSearchSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public ProductSearchClient productSearchClient(
      @Qualifier("productSearchCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultProductSearchTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ProductSearchSettings.Builder clientSettingsBuilder =
        ProductSearchSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ProductSearchSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          ProductSearchSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createProductSetRetrySettingBuilder =
        clientSettingsBuilder.createProductSetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateProductSetInitialRetryDelay() != null) {
      createProductSetRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateProductSetInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductSetInitialRetryDelay set to "
                + this.clientProperties.getCreateProductSetInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateProductSetRetryDelayMultiplier() != null) {
      createProductSetRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateProductSetRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductSetRetryDelayMultiplier set to "
                + this.clientProperties.getCreateProductSetRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateProductSetMaxRetryDelay() != null) {
      createProductSetRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateProductSetMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductSetMaxRetryDelay set to "
                + this.clientProperties.getCreateProductSetMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateProductSetInitialRpcTimeout() != null) {
      createProductSetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateProductSetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductSetInitialRpcTimeout set to "
                + this.clientProperties.getCreateProductSetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateProductSetRpcTimeoutMultiplier() != null) {
      createProductSetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateProductSetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductSetRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateProductSetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateProductSetMaxRpcTimeout() != null) {
      createProductSetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateProductSetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductSetMaxRpcTimeout set to "
                + this.clientProperties.getCreateProductSetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateProductSetTotalTimeout() != null) {
      createProductSetRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateProductSetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductSetTotalTimeout set to "
                + this.clientProperties.getCreateProductSetTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createProductSetSettings()
        .setRetrySettings(createProductSetRetrySettingBuilder.build());
    RetrySettings.Builder listProductSetsRetrySettingBuilder =
        clientSettingsBuilder.listProductSetsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListProductSetsInitialRetryDelay() != null) {
      listProductSetsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListProductSetsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductSetsInitialRetryDelay set to "
                + this.clientProperties.getListProductSetsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListProductSetsRetryDelayMultiplier() != null) {
      listProductSetsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListProductSetsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductSetsRetryDelayMultiplier set to "
                + this.clientProperties.getListProductSetsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListProductSetsMaxRetryDelay() != null) {
      listProductSetsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListProductSetsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductSetsMaxRetryDelay set to "
                + this.clientProperties.getListProductSetsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListProductSetsInitialRpcTimeout() != null) {
      listProductSetsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListProductSetsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductSetsInitialRpcTimeout set to "
                + this.clientProperties.getListProductSetsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListProductSetsRpcTimeoutMultiplier() != null) {
      listProductSetsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListProductSetsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductSetsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListProductSetsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListProductSetsMaxRpcTimeout() != null) {
      listProductSetsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListProductSetsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductSetsMaxRpcTimeout set to "
                + this.clientProperties.getListProductSetsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListProductSetsTotalTimeout() != null) {
      listProductSetsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListProductSetsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductSetsTotalTimeout set to "
                + this.clientProperties.getListProductSetsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listProductSetsSettings()
        .setRetrySettings(listProductSetsRetrySettingBuilder.build());
    RetrySettings.Builder getProductSetRetrySettingBuilder =
        clientSettingsBuilder.getProductSetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetProductSetInitialRetryDelay() != null) {
      getProductSetRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetProductSetInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductSetInitialRetryDelay set to "
                + this.clientProperties.getGetProductSetInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetProductSetRetryDelayMultiplier() != null) {
      getProductSetRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetProductSetRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductSetRetryDelayMultiplier set to "
                + this.clientProperties.getGetProductSetRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetProductSetMaxRetryDelay() != null) {
      getProductSetRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetProductSetMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductSetMaxRetryDelay set to "
                + this.clientProperties.getGetProductSetMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetProductSetInitialRpcTimeout() != null) {
      getProductSetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetProductSetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductSetInitialRpcTimeout set to "
                + this.clientProperties.getGetProductSetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetProductSetRpcTimeoutMultiplier() != null) {
      getProductSetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetProductSetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductSetRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetProductSetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetProductSetMaxRpcTimeout() != null) {
      getProductSetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetProductSetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductSetMaxRpcTimeout set to "
                + this.clientProperties.getGetProductSetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetProductSetTotalTimeout() != null) {
      getProductSetRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetProductSetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductSetTotalTimeout set to "
                + this.clientProperties.getGetProductSetTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getProductSetSettings()
        .setRetrySettings(getProductSetRetrySettingBuilder.build());
    RetrySettings.Builder updateProductSetRetrySettingBuilder =
        clientSettingsBuilder.updateProductSetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateProductSetInitialRetryDelay() != null) {
      updateProductSetRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateProductSetInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductSetInitialRetryDelay set to "
                + this.clientProperties.getUpdateProductSetInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateProductSetRetryDelayMultiplier() != null) {
      updateProductSetRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateProductSetRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductSetRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateProductSetRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateProductSetMaxRetryDelay() != null) {
      updateProductSetRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateProductSetMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductSetMaxRetryDelay set to "
                + this.clientProperties.getUpdateProductSetMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateProductSetInitialRpcTimeout() != null) {
      updateProductSetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateProductSetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductSetInitialRpcTimeout set to "
                + this.clientProperties.getUpdateProductSetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateProductSetRpcTimeoutMultiplier() != null) {
      updateProductSetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateProductSetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductSetRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateProductSetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateProductSetMaxRpcTimeout() != null) {
      updateProductSetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateProductSetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductSetMaxRpcTimeout set to "
                + this.clientProperties.getUpdateProductSetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateProductSetTotalTimeout() != null) {
      updateProductSetRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateProductSetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductSetTotalTimeout set to "
                + this.clientProperties.getUpdateProductSetTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateProductSetSettings()
        .setRetrySettings(updateProductSetRetrySettingBuilder.build());
    RetrySettings.Builder deleteProductSetRetrySettingBuilder =
        clientSettingsBuilder.deleteProductSetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteProductSetInitialRetryDelay() != null) {
      deleteProductSetRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteProductSetInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductSetInitialRetryDelay set to "
                + this.clientProperties.getDeleteProductSetInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteProductSetRetryDelayMultiplier() != null) {
      deleteProductSetRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteProductSetRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductSetRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteProductSetRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteProductSetMaxRetryDelay() != null) {
      deleteProductSetRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteProductSetMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductSetMaxRetryDelay set to "
                + this.clientProperties.getDeleteProductSetMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteProductSetInitialRpcTimeout() != null) {
      deleteProductSetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteProductSetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductSetInitialRpcTimeout set to "
                + this.clientProperties.getDeleteProductSetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteProductSetRpcTimeoutMultiplier() != null) {
      deleteProductSetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteProductSetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductSetRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteProductSetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteProductSetMaxRpcTimeout() != null) {
      deleteProductSetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteProductSetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductSetMaxRpcTimeout set to "
                + this.clientProperties.getDeleteProductSetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteProductSetTotalTimeout() != null) {
      deleteProductSetRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteProductSetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductSetTotalTimeout set to "
                + this.clientProperties.getDeleteProductSetTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteProductSetSettings()
        .setRetrySettings(deleteProductSetRetrySettingBuilder.build());
    RetrySettings.Builder createProductRetrySettingBuilder =
        clientSettingsBuilder.createProductSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateProductInitialRetryDelay() != null) {
      createProductRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateProductInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductInitialRetryDelay set to "
                + this.clientProperties.getCreateProductInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateProductRetryDelayMultiplier() != null) {
      createProductRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateProductRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductRetryDelayMultiplier set to "
                + this.clientProperties.getCreateProductRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateProductMaxRetryDelay() != null) {
      createProductRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateProductMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductMaxRetryDelay set to "
                + this.clientProperties.getCreateProductMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateProductInitialRpcTimeout() != null) {
      createProductRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateProductInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductInitialRpcTimeout set to "
                + this.clientProperties.getCreateProductInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateProductRpcTimeoutMultiplier() != null) {
      createProductRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateProductRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateProductRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateProductMaxRpcTimeout() != null) {
      createProductRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateProductMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductMaxRpcTimeout set to "
                + this.clientProperties.getCreateProductMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateProductTotalTimeout() != null) {
      createProductRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateProductTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductTotalTimeout set to "
                + this.clientProperties.getCreateProductTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createProductSettings()
        .setRetrySettings(createProductRetrySettingBuilder.build());
    RetrySettings.Builder listProductsRetrySettingBuilder =
        clientSettingsBuilder.listProductsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListProductsInitialRetryDelay() != null) {
      listProductsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListProductsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsInitialRetryDelay set to "
                + this.clientProperties.getListProductsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListProductsRetryDelayMultiplier() != null) {
      listProductsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListProductsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsRetryDelayMultiplier set to "
                + this.clientProperties.getListProductsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListProductsMaxRetryDelay() != null) {
      listProductsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListProductsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsMaxRetryDelay set to "
                + this.clientProperties.getListProductsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListProductsInitialRpcTimeout() != null) {
      listProductsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListProductsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsInitialRpcTimeout set to "
                + this.clientProperties.getListProductsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListProductsRpcTimeoutMultiplier() != null) {
      listProductsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListProductsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListProductsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListProductsMaxRpcTimeout() != null) {
      listProductsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListProductsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsMaxRpcTimeout set to "
                + this.clientProperties.getListProductsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListProductsTotalTimeout() != null) {
      listProductsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListProductsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsTotalTimeout set to "
                + this.clientProperties.getListProductsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listProductsSettings()
        .setRetrySettings(listProductsRetrySettingBuilder.build());
    RetrySettings.Builder getProductRetrySettingBuilder =
        clientSettingsBuilder.getProductSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetProductInitialRetryDelay() != null) {
      getProductRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetProductInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductInitialRetryDelay set to "
                + this.clientProperties.getGetProductInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetProductRetryDelayMultiplier() != null) {
      getProductRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetProductRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductRetryDelayMultiplier set to "
                + this.clientProperties.getGetProductRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetProductMaxRetryDelay() != null) {
      getProductRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetProductMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductMaxRetryDelay set to " + this.clientProperties.getGetProductMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetProductInitialRpcTimeout() != null) {
      getProductRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetProductInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductInitialRpcTimeout set to "
                + this.clientProperties.getGetProductInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetProductRpcTimeoutMultiplier() != null) {
      getProductRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetProductRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetProductRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetProductMaxRpcTimeout() != null) {
      getProductRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetProductMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductMaxRpcTimeout set to " + this.clientProperties.getGetProductMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetProductTotalTimeout() != null) {
      getProductRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetProductTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductTotalTimeout set to " + this.clientProperties.getGetProductTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getProductSettings()
        .setRetrySettings(getProductRetrySettingBuilder.build());
    RetrySettings.Builder updateProductRetrySettingBuilder =
        clientSettingsBuilder.updateProductSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateProductInitialRetryDelay() != null) {
      updateProductRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateProductInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductInitialRetryDelay set to "
                + this.clientProperties.getUpdateProductInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateProductRetryDelayMultiplier() != null) {
      updateProductRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateProductRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateProductRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateProductMaxRetryDelay() != null) {
      updateProductRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateProductMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductMaxRetryDelay set to "
                + this.clientProperties.getUpdateProductMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateProductInitialRpcTimeout() != null) {
      updateProductRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateProductInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductInitialRpcTimeout set to "
                + this.clientProperties.getUpdateProductInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateProductRpcTimeoutMultiplier() != null) {
      updateProductRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateProductRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateProductRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateProductMaxRpcTimeout() != null) {
      updateProductRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateProductMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductMaxRpcTimeout set to "
                + this.clientProperties.getUpdateProductMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateProductTotalTimeout() != null) {
      updateProductRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateProductTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductTotalTimeout set to "
                + this.clientProperties.getUpdateProductTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateProductSettings()
        .setRetrySettings(updateProductRetrySettingBuilder.build());
    RetrySettings.Builder deleteProductRetrySettingBuilder =
        clientSettingsBuilder.deleteProductSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteProductInitialRetryDelay() != null) {
      deleteProductRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteProductInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductInitialRetryDelay set to "
                + this.clientProperties.getDeleteProductInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteProductRetryDelayMultiplier() != null) {
      deleteProductRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteProductRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteProductRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteProductMaxRetryDelay() != null) {
      deleteProductRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteProductMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductMaxRetryDelay set to "
                + this.clientProperties.getDeleteProductMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteProductInitialRpcTimeout() != null) {
      deleteProductRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteProductInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductInitialRpcTimeout set to "
                + this.clientProperties.getDeleteProductInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteProductRpcTimeoutMultiplier() != null) {
      deleteProductRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteProductRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteProductRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteProductMaxRpcTimeout() != null) {
      deleteProductRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteProductMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductMaxRpcTimeout set to "
                + this.clientProperties.getDeleteProductMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteProductTotalTimeout() != null) {
      deleteProductRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteProductTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductTotalTimeout set to "
                + this.clientProperties.getDeleteProductTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteProductSettings()
        .setRetrySettings(deleteProductRetrySettingBuilder.build());
    RetrySettings.Builder createReferenceImageRetrySettingBuilder =
        clientSettingsBuilder.createReferenceImageSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateReferenceImageInitialRetryDelay() != null) {
      createReferenceImageRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateReferenceImageInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateReferenceImageInitialRetryDelay set to "
                + this.clientProperties.getCreateReferenceImageInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateReferenceImageRetryDelayMultiplier() != null) {
      createReferenceImageRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateReferenceImageRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateReferenceImageRetryDelayMultiplier set to "
                + this.clientProperties.getCreateReferenceImageRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateReferenceImageMaxRetryDelay() != null) {
      createReferenceImageRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateReferenceImageMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateReferenceImageMaxRetryDelay set to "
                + this.clientProperties.getCreateReferenceImageMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateReferenceImageInitialRpcTimeout() != null) {
      createReferenceImageRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateReferenceImageInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateReferenceImageInitialRpcTimeout set to "
                + this.clientProperties.getCreateReferenceImageInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateReferenceImageRpcTimeoutMultiplier() != null) {
      createReferenceImageRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateReferenceImageRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateReferenceImageRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateReferenceImageRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateReferenceImageMaxRpcTimeout() != null) {
      createReferenceImageRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateReferenceImageMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateReferenceImageMaxRpcTimeout set to "
                + this.clientProperties.getCreateReferenceImageMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateReferenceImageTotalTimeout() != null) {
      createReferenceImageRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateReferenceImageTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateReferenceImageTotalTimeout set to "
                + this.clientProperties.getCreateReferenceImageTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createReferenceImageSettings()
        .setRetrySettings(createReferenceImageRetrySettingBuilder.build());
    RetrySettings.Builder deleteReferenceImageRetrySettingBuilder =
        clientSettingsBuilder.deleteReferenceImageSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteReferenceImageInitialRetryDelay() != null) {
      deleteReferenceImageRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteReferenceImageInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteReferenceImageInitialRetryDelay set to "
                + this.clientProperties.getDeleteReferenceImageInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteReferenceImageRetryDelayMultiplier() != null) {
      deleteReferenceImageRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteReferenceImageRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteReferenceImageRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteReferenceImageRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteReferenceImageMaxRetryDelay() != null) {
      deleteReferenceImageRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteReferenceImageMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteReferenceImageMaxRetryDelay set to "
                + this.clientProperties.getDeleteReferenceImageMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteReferenceImageInitialRpcTimeout() != null) {
      deleteReferenceImageRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteReferenceImageInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteReferenceImageInitialRpcTimeout set to "
                + this.clientProperties.getDeleteReferenceImageInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteReferenceImageRpcTimeoutMultiplier() != null) {
      deleteReferenceImageRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteReferenceImageRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteReferenceImageRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteReferenceImageRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteReferenceImageMaxRpcTimeout() != null) {
      deleteReferenceImageRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteReferenceImageMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteReferenceImageMaxRpcTimeout set to "
                + this.clientProperties.getDeleteReferenceImageMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteReferenceImageTotalTimeout() != null) {
      deleteReferenceImageRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteReferenceImageTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteReferenceImageTotalTimeout set to "
                + this.clientProperties.getDeleteReferenceImageTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteReferenceImageSettings()
        .setRetrySettings(deleteReferenceImageRetrySettingBuilder.build());
    RetrySettings.Builder listReferenceImagesRetrySettingBuilder =
        clientSettingsBuilder.listReferenceImagesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListReferenceImagesInitialRetryDelay() != null) {
      listReferenceImagesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListReferenceImagesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListReferenceImagesInitialRetryDelay set to "
                + this.clientProperties.getListReferenceImagesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListReferenceImagesRetryDelayMultiplier() != null) {
      listReferenceImagesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListReferenceImagesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListReferenceImagesRetryDelayMultiplier set to "
                + this.clientProperties.getListReferenceImagesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListReferenceImagesMaxRetryDelay() != null) {
      listReferenceImagesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListReferenceImagesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListReferenceImagesMaxRetryDelay set to "
                + this.clientProperties.getListReferenceImagesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListReferenceImagesInitialRpcTimeout() != null) {
      listReferenceImagesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListReferenceImagesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListReferenceImagesInitialRpcTimeout set to "
                + this.clientProperties.getListReferenceImagesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListReferenceImagesRpcTimeoutMultiplier() != null) {
      listReferenceImagesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListReferenceImagesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListReferenceImagesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListReferenceImagesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListReferenceImagesMaxRpcTimeout() != null) {
      listReferenceImagesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListReferenceImagesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListReferenceImagesMaxRpcTimeout set to "
                + this.clientProperties.getListReferenceImagesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListReferenceImagesTotalTimeout() != null) {
      listReferenceImagesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListReferenceImagesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListReferenceImagesTotalTimeout set to "
                + this.clientProperties.getListReferenceImagesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listReferenceImagesSettings()
        .setRetrySettings(listReferenceImagesRetrySettingBuilder.build());
    RetrySettings.Builder getReferenceImageRetrySettingBuilder =
        clientSettingsBuilder.getReferenceImageSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetReferenceImageInitialRetryDelay() != null) {
      getReferenceImageRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetReferenceImageInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetReferenceImageInitialRetryDelay set to "
                + this.clientProperties.getGetReferenceImageInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetReferenceImageRetryDelayMultiplier() != null) {
      getReferenceImageRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetReferenceImageRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetReferenceImageRetryDelayMultiplier set to "
                + this.clientProperties.getGetReferenceImageRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetReferenceImageMaxRetryDelay() != null) {
      getReferenceImageRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetReferenceImageMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetReferenceImageMaxRetryDelay set to "
                + this.clientProperties.getGetReferenceImageMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetReferenceImageInitialRpcTimeout() != null) {
      getReferenceImageRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetReferenceImageInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetReferenceImageInitialRpcTimeout set to "
                + this.clientProperties.getGetReferenceImageInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetReferenceImageRpcTimeoutMultiplier() != null) {
      getReferenceImageRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetReferenceImageRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetReferenceImageRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetReferenceImageRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetReferenceImageMaxRpcTimeout() != null) {
      getReferenceImageRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetReferenceImageMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetReferenceImageMaxRpcTimeout set to "
                + this.clientProperties.getGetReferenceImageMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetReferenceImageTotalTimeout() != null) {
      getReferenceImageRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetReferenceImageTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetReferenceImageTotalTimeout set to "
                + this.clientProperties.getGetReferenceImageTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getReferenceImageSettings()
        .setRetrySettings(getReferenceImageRetrySettingBuilder.build());
    RetrySettings.Builder addProductToProductSetRetrySettingBuilder =
        clientSettingsBuilder.addProductToProductSetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getAddProductToProductSetInitialRetryDelay() != null) {
      addProductToProductSetRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getAddProductToProductSetInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddProductToProductSetInitialRetryDelay set to "
                + this.clientProperties.getAddProductToProductSetInitialRetryDelay());
      }
    }
    if (this.clientProperties.getAddProductToProductSetRetryDelayMultiplier() != null) {
      addProductToProductSetRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getAddProductToProductSetRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddProductToProductSetRetryDelayMultiplier set to "
                + this.clientProperties.getAddProductToProductSetRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getAddProductToProductSetMaxRetryDelay() != null) {
      addProductToProductSetRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getAddProductToProductSetMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddProductToProductSetMaxRetryDelay set to "
                + this.clientProperties.getAddProductToProductSetMaxRetryDelay());
      }
    }
    if (this.clientProperties.getAddProductToProductSetInitialRpcTimeout() != null) {
      addProductToProductSetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getAddProductToProductSetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddProductToProductSetInitialRpcTimeout set to "
                + this.clientProperties.getAddProductToProductSetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getAddProductToProductSetRpcTimeoutMultiplier() != null) {
      addProductToProductSetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getAddProductToProductSetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddProductToProductSetRpcTimeoutMultiplier set to "
                + this.clientProperties.getAddProductToProductSetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getAddProductToProductSetMaxRpcTimeout() != null) {
      addProductToProductSetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getAddProductToProductSetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddProductToProductSetMaxRpcTimeout set to "
                + this.clientProperties.getAddProductToProductSetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getAddProductToProductSetTotalTimeout() != null) {
      addProductToProductSetRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getAddProductToProductSetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddProductToProductSetTotalTimeout set to "
                + this.clientProperties.getAddProductToProductSetTotalTimeout());
      }
    }
    clientSettingsBuilder
        .addProductToProductSetSettings()
        .setRetrySettings(addProductToProductSetRetrySettingBuilder.build());
    RetrySettings.Builder removeProductFromProductSetRetrySettingBuilder =
        clientSettingsBuilder.removeProductFromProductSetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRemoveProductFromProductSetInitialRetryDelay() != null) {
      removeProductFromProductSetRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getRemoveProductFromProductSetInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveProductFromProductSetInitialRetryDelay set to "
                + this.clientProperties.getRemoveProductFromProductSetInitialRetryDelay());
      }
    }
    if (this.clientProperties.getRemoveProductFromProductSetRetryDelayMultiplier() != null) {
      removeProductFromProductSetRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getRemoveProductFromProductSetRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveProductFromProductSetRetryDelayMultiplier set to "
                + this.clientProperties.getRemoveProductFromProductSetRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getRemoveProductFromProductSetMaxRetryDelay() != null) {
      removeProductFromProductSetRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getRemoveProductFromProductSetMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveProductFromProductSetMaxRetryDelay set to "
                + this.clientProperties.getRemoveProductFromProductSetMaxRetryDelay());
      }
    }
    if (this.clientProperties.getRemoveProductFromProductSetInitialRpcTimeout() != null) {
      removeProductFromProductSetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRemoveProductFromProductSetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveProductFromProductSetInitialRpcTimeout set to "
                + this.clientProperties.getRemoveProductFromProductSetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRemoveProductFromProductSetRpcTimeoutMultiplier() != null) {
      removeProductFromProductSetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRemoveProductFromProductSetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveProductFromProductSetRpcTimeoutMultiplier set to "
                + this.clientProperties.getRemoveProductFromProductSetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRemoveProductFromProductSetMaxRpcTimeout() != null) {
      removeProductFromProductSetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRemoveProductFromProductSetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveProductFromProductSetMaxRpcTimeout set to "
                + this.clientProperties.getRemoveProductFromProductSetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRemoveProductFromProductSetTotalTimeout() != null) {
      removeProductFromProductSetRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRemoveProductFromProductSetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveProductFromProductSetTotalTimeout set to "
                + this.clientProperties.getRemoveProductFromProductSetTotalTimeout());
      }
    }
    clientSettingsBuilder
        .removeProductFromProductSetSettings()
        .setRetrySettings(removeProductFromProductSetRetrySettingBuilder.build());
    RetrySettings.Builder listProductsInProductSetRetrySettingBuilder =
        clientSettingsBuilder.listProductsInProductSetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListProductsInProductSetInitialRetryDelay() != null) {
      listProductsInProductSetRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListProductsInProductSetInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsInProductSetInitialRetryDelay set to "
                + this.clientProperties.getListProductsInProductSetInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListProductsInProductSetRetryDelayMultiplier() != null) {
      listProductsInProductSetRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListProductsInProductSetRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsInProductSetRetryDelayMultiplier set to "
                + this.clientProperties.getListProductsInProductSetRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListProductsInProductSetMaxRetryDelay() != null) {
      listProductsInProductSetRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListProductsInProductSetMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsInProductSetMaxRetryDelay set to "
                + this.clientProperties.getListProductsInProductSetMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListProductsInProductSetInitialRpcTimeout() != null) {
      listProductsInProductSetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListProductsInProductSetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsInProductSetInitialRpcTimeout set to "
                + this.clientProperties.getListProductsInProductSetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListProductsInProductSetRpcTimeoutMultiplier() != null) {
      listProductsInProductSetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListProductsInProductSetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsInProductSetRpcTimeoutMultiplier set to "
                + this.clientProperties.getListProductsInProductSetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListProductsInProductSetMaxRpcTimeout() != null) {
      listProductsInProductSetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListProductsInProductSetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsInProductSetMaxRpcTimeout set to "
                + this.clientProperties.getListProductsInProductSetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListProductsInProductSetTotalTimeout() != null) {
      listProductsInProductSetRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListProductsInProductSetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsInProductSetTotalTimeout set to "
                + this.clientProperties.getListProductsInProductSetTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listProductsInProductSetSettings()
        .setRetrySettings(listProductsInProductSetRetrySettingBuilder.build());
    RetrySettings.Builder importProductSetsRetrySettingBuilder =
        clientSettingsBuilder.importProductSetsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getImportProductSetsInitialRetryDelay() != null) {
      importProductSetsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getImportProductSetsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportProductSetsInitialRetryDelay set to "
                + this.clientProperties.getImportProductSetsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getImportProductSetsRetryDelayMultiplier() != null) {
      importProductSetsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getImportProductSetsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportProductSetsRetryDelayMultiplier set to "
                + this.clientProperties.getImportProductSetsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getImportProductSetsMaxRetryDelay() != null) {
      importProductSetsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getImportProductSetsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportProductSetsMaxRetryDelay set to "
                + this.clientProperties.getImportProductSetsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getImportProductSetsInitialRpcTimeout() != null) {
      importProductSetsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getImportProductSetsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportProductSetsInitialRpcTimeout set to "
                + this.clientProperties.getImportProductSetsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getImportProductSetsRpcTimeoutMultiplier() != null) {
      importProductSetsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getImportProductSetsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportProductSetsRpcTimeoutMultiplier set to "
                + this.clientProperties.getImportProductSetsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getImportProductSetsMaxRpcTimeout() != null) {
      importProductSetsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getImportProductSetsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportProductSetsMaxRpcTimeout set to "
                + this.clientProperties.getImportProductSetsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getImportProductSetsTotalTimeout() != null) {
      importProductSetsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getImportProductSetsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportProductSetsTotalTimeout set to "
                + this.clientProperties.getImportProductSetsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .importProductSetsSettings()
        .setRetrySettings(importProductSetsRetrySettingBuilder.build());
    RetrySettings.Builder purgeProductsRetrySettingBuilder =
        clientSettingsBuilder.purgeProductsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getPurgeProductsInitialRetryDelay() != null) {
      purgeProductsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getPurgeProductsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PurgeProductsInitialRetryDelay set to "
                + this.clientProperties.getPurgeProductsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getPurgeProductsRetryDelayMultiplier() != null) {
      purgeProductsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getPurgeProductsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PurgeProductsRetryDelayMultiplier set to "
                + this.clientProperties.getPurgeProductsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getPurgeProductsMaxRetryDelay() != null) {
      purgeProductsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getPurgeProductsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PurgeProductsMaxRetryDelay set to "
                + this.clientProperties.getPurgeProductsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getPurgeProductsInitialRpcTimeout() != null) {
      purgeProductsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getPurgeProductsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PurgeProductsInitialRpcTimeout set to "
                + this.clientProperties.getPurgeProductsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getPurgeProductsRpcTimeoutMultiplier() != null) {
      purgeProductsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getPurgeProductsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PurgeProductsRpcTimeoutMultiplier set to "
                + this.clientProperties.getPurgeProductsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getPurgeProductsMaxRpcTimeout() != null) {
      purgeProductsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getPurgeProductsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PurgeProductsMaxRpcTimeout set to "
                + this.clientProperties.getPurgeProductsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getPurgeProductsTotalTimeout() != null) {
      purgeProductsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getPurgeProductsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PurgeProductsTotalTimeout set to "
                + this.clientProperties.getPurgeProductsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .purgeProductsSettings()
        .setRetrySettings(purgeProductsRetrySettingBuilder.build());
    return ProductSearchClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-product-search";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
