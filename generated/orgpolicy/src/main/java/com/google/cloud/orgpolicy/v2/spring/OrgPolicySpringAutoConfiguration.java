/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.orgpolicy.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.orgpolicy.v2.OrgPolicyClient;
import com.google.cloud.orgpolicy.v2.OrgPolicySettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link OrgPolicyClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(OrgPolicyClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.orgpolicy.v2.spring.auto.org-policy.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({OrgPolicySpringProperties.class, GlobalProperties.class})
public class OrgPolicySpringAutoConfiguration {
  private final OrgPolicySpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(OrgPolicySpringAutoConfiguration.class);

  protected OrgPolicySpringAutoConfiguration(
      OrgPolicySpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider orgPolicyCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from OrgPolicy-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultOrgPolicyTransportChannelProvider() {
    return OrgPolicySettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a OrgPolicyClient bean configured to use the default credentials provider (obtained
   * with orgPolicyCredentials()) and its default transport channel provider
   * (defaultOrgPolicyTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in OrgPolicySpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public OrgPolicyClient orgPolicyClient(
      @Qualifier("orgPolicyCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultOrgPolicyTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    OrgPolicySettings.Builder clientSettingsBuilder =
        OrgPolicySettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          OrgPolicySettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          OrgPolicySettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listConstraintsRetrySettingBuilder =
        clientSettingsBuilder.listConstraintsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListConstraintsInitialRetryDelay() != null) {
      listConstraintsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListConstraintsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConstraintsInitialRetryDelay set to "
                + this.clientProperties.getListConstraintsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListConstraintsRetryDelayMultiplier() != null) {
      listConstraintsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListConstraintsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConstraintsRetryDelayMultiplier set to "
                + this.clientProperties.getListConstraintsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListConstraintsMaxRetryDelay() != null) {
      listConstraintsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListConstraintsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConstraintsMaxRetryDelay set to "
                + this.clientProperties.getListConstraintsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListConstraintsInitialRpcTimeout() != null) {
      listConstraintsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListConstraintsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConstraintsInitialRpcTimeout set to "
                + this.clientProperties.getListConstraintsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListConstraintsRpcTimeoutMultiplier() != null) {
      listConstraintsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListConstraintsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConstraintsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListConstraintsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListConstraintsMaxRpcTimeout() != null) {
      listConstraintsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListConstraintsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConstraintsMaxRpcTimeout set to "
                + this.clientProperties.getListConstraintsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListConstraintsTotalTimeout() != null) {
      listConstraintsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListConstraintsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListConstraintsTotalTimeout set to "
                + this.clientProperties.getListConstraintsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listConstraintsSettings()
        .setRetrySettings(listConstraintsRetrySettingBuilder.build());
    RetrySettings.Builder listPoliciesRetrySettingBuilder =
        clientSettingsBuilder.listPoliciesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListPoliciesInitialRetryDelay() != null) {
      listPoliciesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListPoliciesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPoliciesInitialRetryDelay set to "
                + this.clientProperties.getListPoliciesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListPoliciesRetryDelayMultiplier() != null) {
      listPoliciesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListPoliciesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPoliciesRetryDelayMultiplier set to "
                + this.clientProperties.getListPoliciesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListPoliciesMaxRetryDelay() != null) {
      listPoliciesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListPoliciesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPoliciesMaxRetryDelay set to "
                + this.clientProperties.getListPoliciesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListPoliciesInitialRpcTimeout() != null) {
      listPoliciesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListPoliciesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPoliciesInitialRpcTimeout set to "
                + this.clientProperties.getListPoliciesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListPoliciesRpcTimeoutMultiplier() != null) {
      listPoliciesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListPoliciesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPoliciesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListPoliciesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListPoliciesMaxRpcTimeout() != null) {
      listPoliciesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListPoliciesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPoliciesMaxRpcTimeout set to "
                + this.clientProperties.getListPoliciesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListPoliciesTotalTimeout() != null) {
      listPoliciesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListPoliciesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPoliciesTotalTimeout set to "
                + this.clientProperties.getListPoliciesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listPoliciesSettings()
        .setRetrySettings(listPoliciesRetrySettingBuilder.build());
    RetrySettings.Builder getPolicyRetrySettingBuilder =
        clientSettingsBuilder.getPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetPolicyInitialRetryDelay() != null) {
      getPolicyRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetPolicyInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPolicyInitialRetryDelay set to "
                + this.clientProperties.getGetPolicyInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetPolicyRetryDelayMultiplier() != null) {
      getPolicyRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetPolicyRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPolicyRetryDelayMultiplier set to "
                + this.clientProperties.getGetPolicyRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetPolicyMaxRetryDelay() != null) {
      getPolicyRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetPolicyMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPolicyMaxRetryDelay set to " + this.clientProperties.getGetPolicyMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetPolicyInitialRpcTimeout() != null) {
      getPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPolicyInitialRpcTimeout set to "
                + this.clientProperties.getGetPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetPolicyRpcTimeoutMultiplier() != null) {
      getPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetPolicyMaxRpcTimeout() != null) {
      getPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPolicyMaxRpcTimeout set to " + this.clientProperties.getGetPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetPolicyTotalTimeout() != null) {
      getPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPolicyTotalTimeout set to " + this.clientProperties.getGetPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getPolicySettings()
        .setRetrySettings(getPolicyRetrySettingBuilder.build());
    RetrySettings.Builder getEffectivePolicyRetrySettingBuilder =
        clientSettingsBuilder.getEffectivePolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetEffectivePolicyInitialRetryDelay() != null) {
      getEffectivePolicyRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetEffectivePolicyInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEffectivePolicyInitialRetryDelay set to "
                + this.clientProperties.getGetEffectivePolicyInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetEffectivePolicyRetryDelayMultiplier() != null) {
      getEffectivePolicyRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetEffectivePolicyRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEffectivePolicyRetryDelayMultiplier set to "
                + this.clientProperties.getGetEffectivePolicyRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetEffectivePolicyMaxRetryDelay() != null) {
      getEffectivePolicyRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetEffectivePolicyMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEffectivePolicyMaxRetryDelay set to "
                + this.clientProperties.getGetEffectivePolicyMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetEffectivePolicyInitialRpcTimeout() != null) {
      getEffectivePolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetEffectivePolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEffectivePolicyInitialRpcTimeout set to "
                + this.clientProperties.getGetEffectivePolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEffectivePolicyRpcTimeoutMultiplier() != null) {
      getEffectivePolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetEffectivePolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEffectivePolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetEffectivePolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetEffectivePolicyMaxRpcTimeout() != null) {
      getEffectivePolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetEffectivePolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEffectivePolicyMaxRpcTimeout set to "
                + this.clientProperties.getGetEffectivePolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetEffectivePolicyTotalTimeout() != null) {
      getEffectivePolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetEffectivePolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetEffectivePolicyTotalTimeout set to "
                + this.clientProperties.getGetEffectivePolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getEffectivePolicySettings()
        .setRetrySettings(getEffectivePolicyRetrySettingBuilder.build());
    RetrySettings.Builder createPolicyRetrySettingBuilder =
        clientSettingsBuilder.createPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreatePolicyInitialRetryDelay() != null) {
      createPolicyRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreatePolicyInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePolicyInitialRetryDelay set to "
                + this.clientProperties.getCreatePolicyInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreatePolicyRetryDelayMultiplier() != null) {
      createPolicyRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreatePolicyRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePolicyRetryDelayMultiplier set to "
                + this.clientProperties.getCreatePolicyRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreatePolicyMaxRetryDelay() != null) {
      createPolicyRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreatePolicyMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePolicyMaxRetryDelay set to "
                + this.clientProperties.getCreatePolicyMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreatePolicyInitialRpcTimeout() != null) {
      createPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreatePolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePolicyInitialRpcTimeout set to "
                + this.clientProperties.getCreatePolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreatePolicyRpcTimeoutMultiplier() != null) {
      createPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreatePolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreatePolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreatePolicyMaxRpcTimeout() != null) {
      createPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreatePolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePolicyMaxRpcTimeout set to "
                + this.clientProperties.getCreatePolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreatePolicyTotalTimeout() != null) {
      createPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreatePolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePolicyTotalTimeout set to "
                + this.clientProperties.getCreatePolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createPolicySettings()
        .setRetrySettings(createPolicyRetrySettingBuilder.build());
    RetrySettings.Builder updatePolicyRetrySettingBuilder =
        clientSettingsBuilder.updatePolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdatePolicyInitialRetryDelay() != null) {
      updatePolicyRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdatePolicyInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePolicyInitialRetryDelay set to "
                + this.clientProperties.getUpdatePolicyInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdatePolicyRetryDelayMultiplier() != null) {
      updatePolicyRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdatePolicyRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePolicyRetryDelayMultiplier set to "
                + this.clientProperties.getUpdatePolicyRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdatePolicyMaxRetryDelay() != null) {
      updatePolicyRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdatePolicyMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePolicyMaxRetryDelay set to "
                + this.clientProperties.getUpdatePolicyMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdatePolicyInitialRpcTimeout() != null) {
      updatePolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdatePolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePolicyInitialRpcTimeout set to "
                + this.clientProperties.getUpdatePolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdatePolicyRpcTimeoutMultiplier() != null) {
      updatePolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdatePolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdatePolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdatePolicyMaxRpcTimeout() != null) {
      updatePolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdatePolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePolicyMaxRpcTimeout set to "
                + this.clientProperties.getUpdatePolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdatePolicyTotalTimeout() != null) {
      updatePolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdatePolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePolicyTotalTimeout set to "
                + this.clientProperties.getUpdatePolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updatePolicySettings()
        .setRetrySettings(updatePolicyRetrySettingBuilder.build());
    RetrySettings.Builder deletePolicyRetrySettingBuilder =
        clientSettingsBuilder.deletePolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeletePolicyInitialRetryDelay() != null) {
      deletePolicyRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeletePolicyInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePolicyInitialRetryDelay set to "
                + this.clientProperties.getDeletePolicyInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeletePolicyRetryDelayMultiplier() != null) {
      deletePolicyRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeletePolicyRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePolicyRetryDelayMultiplier set to "
                + this.clientProperties.getDeletePolicyRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeletePolicyMaxRetryDelay() != null) {
      deletePolicyRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeletePolicyMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePolicyMaxRetryDelay set to "
                + this.clientProperties.getDeletePolicyMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeletePolicyInitialRpcTimeout() != null) {
      deletePolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeletePolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePolicyInitialRpcTimeout set to "
                + this.clientProperties.getDeletePolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeletePolicyRpcTimeoutMultiplier() != null) {
      deletePolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeletePolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeletePolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeletePolicyMaxRpcTimeout() != null) {
      deletePolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeletePolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePolicyMaxRpcTimeout set to "
                + this.clientProperties.getDeletePolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeletePolicyTotalTimeout() != null) {
      deletePolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeletePolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePolicyTotalTimeout set to "
                + this.clientProperties.getDeletePolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deletePolicySettings()
        .setRetrySettings(deletePolicyRetrySettingBuilder.build());
    return OrgPolicyClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-org-policy";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
