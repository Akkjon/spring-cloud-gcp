/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.securitycenter.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.securitycenter.v1.SecurityCenterClient;
import com.google.cloud.securitycenter.v1.SecurityCenterSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link SecurityCenterClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(SecurityCenterClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.securitycenter.v1.spring.auto.security-center.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({SecurityCenterSpringProperties.class, GlobalProperties.class})
public class SecurityCenterSpringAutoConfiguration {
  private final SecurityCenterSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(SecurityCenterSpringAutoConfiguration.class);

  protected SecurityCenterSpringAutoConfiguration(
      SecurityCenterSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider securityCenterCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from SecurityCenter-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultSecurityCenterTransportChannelProvider() {
    return SecurityCenterSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a SecurityCenterClient bean configured to use the default credentials provider
   * (obtained with securityCenterCredentials()) and its default transport channel provider
   * (defaultSecurityCenterTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in SecurityCenterSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public SecurityCenterClient securityCenterClient(
      @Qualifier("securityCenterCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultSecurityCenterTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    SecurityCenterSettings.Builder clientSettingsBuilder =
        SecurityCenterSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          SecurityCenterSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          SecurityCenterSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder bulkMuteFindingsRetrySettingBuilder =
        clientSettingsBuilder.bulkMuteFindingsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getBulkMuteFindingsRpcTimeoutMultiplier() != null) {
      bulkMuteFindingsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getBulkMuteFindingsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BulkMuteFindingsRpcTimeoutMultiplier set to "
                + this.clientProperties.getBulkMuteFindingsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .bulkMuteFindingsSettings()
        .setRetrySettings(bulkMuteFindingsRetrySettingBuilder.build());
    RetrySettings.Builder createSourceRetrySettingBuilder =
        clientSettingsBuilder.createSourceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateSourceInitialRpcTimeout() != null) {
      createSourceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateSourceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateSourceInitialRpcTimeout set to "
                + this.clientProperties.getCreateSourceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateSourceRpcTimeoutMultiplier() != null) {
      createSourceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateSourceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateSourceRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateSourceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateSourceMaxRpcTimeout() != null) {
      createSourceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateSourceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateSourceMaxRpcTimeout set to "
                + this.clientProperties.getCreateSourceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateSourceTotalTimeout() != null) {
      createSourceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateSourceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateSourceTotalTimeout set to "
                + this.clientProperties.getCreateSourceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createSourceSettings()
        .setRetrySettings(createSourceRetrySettingBuilder.build());
    RetrySettings.Builder createFindingRetrySettingBuilder =
        clientSettingsBuilder.createFindingSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateFindingInitialRpcTimeout() != null) {
      createFindingRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateFindingInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateFindingInitialRpcTimeout set to "
                + this.clientProperties.getCreateFindingInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateFindingRpcTimeoutMultiplier() != null) {
      createFindingRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateFindingRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateFindingRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateFindingRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateFindingMaxRpcTimeout() != null) {
      createFindingRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateFindingMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateFindingMaxRpcTimeout set to "
                + this.clientProperties.getCreateFindingMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateFindingTotalTimeout() != null) {
      createFindingRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateFindingTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateFindingTotalTimeout set to "
                + this.clientProperties.getCreateFindingTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createFindingSettings()
        .setRetrySettings(createFindingRetrySettingBuilder.build());
    RetrySettings.Builder createMuteConfigRetrySettingBuilder =
        clientSettingsBuilder.createMuteConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateMuteConfigRpcTimeoutMultiplier() != null) {
      createMuteConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateMuteConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateMuteConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateMuteConfigRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .createMuteConfigSettings()
        .setRetrySettings(createMuteConfigRetrySettingBuilder.build());
    RetrySettings.Builder createNotificationConfigRetrySettingBuilder =
        clientSettingsBuilder.createNotificationConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateNotificationConfigInitialRpcTimeout() != null) {
      createNotificationConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateNotificationConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNotificationConfigInitialRpcTimeout set to "
                + this.clientProperties.getCreateNotificationConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateNotificationConfigRpcTimeoutMultiplier() != null) {
      createNotificationConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateNotificationConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNotificationConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateNotificationConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateNotificationConfigMaxRpcTimeout() != null) {
      createNotificationConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateNotificationConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNotificationConfigMaxRpcTimeout set to "
                + this.clientProperties.getCreateNotificationConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateNotificationConfigTotalTimeout() != null) {
      createNotificationConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateNotificationConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNotificationConfigTotalTimeout set to "
                + this.clientProperties.getCreateNotificationConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createNotificationConfigSettings()
        .setRetrySettings(createNotificationConfigRetrySettingBuilder.build());
    RetrySettings.Builder deleteMuteConfigRetrySettingBuilder =
        clientSettingsBuilder.deleteMuteConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteMuteConfigRpcTimeoutMultiplier() != null) {
      deleteMuteConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteMuteConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteMuteConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteMuteConfigRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .deleteMuteConfigSettings()
        .setRetrySettings(deleteMuteConfigRetrySettingBuilder.build());
    RetrySettings.Builder deleteNotificationConfigRetrySettingBuilder =
        clientSettingsBuilder.deleteNotificationConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteNotificationConfigInitialRpcTimeout() != null) {
      deleteNotificationConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteNotificationConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNotificationConfigInitialRpcTimeout set to "
                + this.clientProperties.getDeleteNotificationConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteNotificationConfigRpcTimeoutMultiplier() != null) {
      deleteNotificationConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteNotificationConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNotificationConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteNotificationConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteNotificationConfigMaxRpcTimeout() != null) {
      deleteNotificationConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteNotificationConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNotificationConfigMaxRpcTimeout set to "
                + this.clientProperties.getDeleteNotificationConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteNotificationConfigTotalTimeout() != null) {
      deleteNotificationConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteNotificationConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNotificationConfigTotalTimeout set to "
                + this.clientProperties.getDeleteNotificationConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteNotificationConfigSettings()
        .setRetrySettings(deleteNotificationConfigRetrySettingBuilder.build());
    RetrySettings.Builder getBigQueryExportRetrySettingBuilder =
        clientSettingsBuilder.getBigQueryExportSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetBigQueryExportRpcTimeoutMultiplier() != null) {
      getBigQueryExportRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetBigQueryExportRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetBigQueryExportRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetBigQueryExportRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getBigQueryExportSettings()
        .setRetrySettings(getBigQueryExportRetrySettingBuilder.build());
    RetrySettings.Builder getIamPolicyRetrySettingBuilder =
        clientSettingsBuilder.getIamPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetIamPolicyInitialRetryDelay() != null) {
      getIamPolicyRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetIamPolicyInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyInitialRetryDelay set to "
                + this.clientProperties.getGetIamPolicyInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetIamPolicyRetryDelayMultiplier() != null) {
      getIamPolicyRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetIamPolicyRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyRetryDelayMultiplier set to "
                + this.clientProperties.getGetIamPolicyRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetIamPolicyMaxRetryDelay() != null) {
      getIamPolicyRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetIamPolicyMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyMaxRetryDelay set to "
                + this.clientProperties.getGetIamPolicyMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetIamPolicyInitialRpcTimeout() != null) {
      getIamPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetIamPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyInitialRpcTimeout set to "
                + this.clientProperties.getGetIamPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetIamPolicyRpcTimeoutMultiplier() != null) {
      getIamPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetIamPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetIamPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetIamPolicyMaxRpcTimeout() != null) {
      getIamPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetIamPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyMaxRpcTimeout set to "
                + this.clientProperties.getGetIamPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetIamPolicyTotalTimeout() != null) {
      getIamPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetIamPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetIamPolicyTotalTimeout set to "
                + this.clientProperties.getGetIamPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getIamPolicySettings()
        .setRetrySettings(getIamPolicyRetrySettingBuilder.build());
    RetrySettings.Builder getMuteConfigRetrySettingBuilder =
        clientSettingsBuilder.getMuteConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetMuteConfigRpcTimeoutMultiplier() != null) {
      getMuteConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetMuteConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMuteConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetMuteConfigRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getMuteConfigSettings()
        .setRetrySettings(getMuteConfigRetrySettingBuilder.build());
    RetrySettings.Builder getNotificationConfigRetrySettingBuilder =
        clientSettingsBuilder.getNotificationConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetNotificationConfigInitialRetryDelay() != null) {
      getNotificationConfigRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetNotificationConfigInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationConfigInitialRetryDelay set to "
                + this.clientProperties.getGetNotificationConfigInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetNotificationConfigRetryDelayMultiplier() != null) {
      getNotificationConfigRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetNotificationConfigRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationConfigRetryDelayMultiplier set to "
                + this.clientProperties.getGetNotificationConfigRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetNotificationConfigMaxRetryDelay() != null) {
      getNotificationConfigRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetNotificationConfigMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationConfigMaxRetryDelay set to "
                + this.clientProperties.getGetNotificationConfigMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetNotificationConfigInitialRpcTimeout() != null) {
      getNotificationConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetNotificationConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationConfigInitialRpcTimeout set to "
                + this.clientProperties.getGetNotificationConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetNotificationConfigRpcTimeoutMultiplier() != null) {
      getNotificationConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetNotificationConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetNotificationConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetNotificationConfigMaxRpcTimeout() != null) {
      getNotificationConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetNotificationConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationConfigMaxRpcTimeout set to "
                + this.clientProperties.getGetNotificationConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetNotificationConfigTotalTimeout() != null) {
      getNotificationConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetNotificationConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationConfigTotalTimeout set to "
                + this.clientProperties.getGetNotificationConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getNotificationConfigSettings()
        .setRetrySettings(getNotificationConfigRetrySettingBuilder.build());
    RetrySettings.Builder getOrganizationSettingsRetrySettingBuilder =
        clientSettingsBuilder.getOrganizationSettingsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetOrganizationSettingsInitialRetryDelay() != null) {
      getOrganizationSettingsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetOrganizationSettingsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOrganizationSettingsInitialRetryDelay set to "
                + this.clientProperties.getGetOrganizationSettingsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetOrganizationSettingsRetryDelayMultiplier() != null) {
      getOrganizationSettingsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetOrganizationSettingsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOrganizationSettingsRetryDelayMultiplier set to "
                + this.clientProperties.getGetOrganizationSettingsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetOrganizationSettingsMaxRetryDelay() != null) {
      getOrganizationSettingsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetOrganizationSettingsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOrganizationSettingsMaxRetryDelay set to "
                + this.clientProperties.getGetOrganizationSettingsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetOrganizationSettingsInitialRpcTimeout() != null) {
      getOrganizationSettingsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetOrganizationSettingsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOrganizationSettingsInitialRpcTimeout set to "
                + this.clientProperties.getGetOrganizationSettingsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetOrganizationSettingsRpcTimeoutMultiplier() != null) {
      getOrganizationSettingsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetOrganizationSettingsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOrganizationSettingsRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetOrganizationSettingsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetOrganizationSettingsMaxRpcTimeout() != null) {
      getOrganizationSettingsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetOrganizationSettingsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOrganizationSettingsMaxRpcTimeout set to "
                + this.clientProperties.getGetOrganizationSettingsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetOrganizationSettingsTotalTimeout() != null) {
      getOrganizationSettingsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetOrganizationSettingsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOrganizationSettingsTotalTimeout set to "
                + this.clientProperties.getGetOrganizationSettingsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getOrganizationSettingsSettings()
        .setRetrySettings(getOrganizationSettingsRetrySettingBuilder.build());
    RetrySettings.Builder getSourceRetrySettingBuilder =
        clientSettingsBuilder.getSourceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetSourceInitialRetryDelay() != null) {
      getSourceRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetSourceInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSourceInitialRetryDelay set to "
                + this.clientProperties.getGetSourceInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetSourceRetryDelayMultiplier() != null) {
      getSourceRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetSourceRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSourceRetryDelayMultiplier set to "
                + this.clientProperties.getGetSourceRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetSourceMaxRetryDelay() != null) {
      getSourceRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetSourceMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSourceMaxRetryDelay set to " + this.clientProperties.getGetSourceMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetSourceInitialRpcTimeout() != null) {
      getSourceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetSourceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSourceInitialRpcTimeout set to "
                + this.clientProperties.getGetSourceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetSourceRpcTimeoutMultiplier() != null) {
      getSourceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetSourceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSourceRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetSourceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetSourceMaxRpcTimeout() != null) {
      getSourceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetSourceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSourceMaxRpcTimeout set to " + this.clientProperties.getGetSourceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetSourceTotalTimeout() != null) {
      getSourceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetSourceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetSourceTotalTimeout set to " + this.clientProperties.getGetSourceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getSourceSettings()
        .setRetrySettings(getSourceRetrySettingBuilder.build());
    RetrySettings.Builder groupAssetsRetrySettingBuilder =
        clientSettingsBuilder.groupAssetsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGroupAssetsInitialRetryDelay() != null) {
      groupAssetsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGroupAssetsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GroupAssetsInitialRetryDelay set to "
                + this.clientProperties.getGroupAssetsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGroupAssetsRetryDelayMultiplier() != null) {
      groupAssetsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGroupAssetsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GroupAssetsRetryDelayMultiplier set to "
                + this.clientProperties.getGroupAssetsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGroupAssetsMaxRetryDelay() != null) {
      groupAssetsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGroupAssetsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GroupAssetsMaxRetryDelay set to "
                + this.clientProperties.getGroupAssetsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGroupAssetsInitialRpcTimeout() != null) {
      groupAssetsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGroupAssetsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GroupAssetsInitialRpcTimeout set to "
                + this.clientProperties.getGroupAssetsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGroupAssetsRpcTimeoutMultiplier() != null) {
      groupAssetsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGroupAssetsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GroupAssetsRpcTimeoutMultiplier set to "
                + this.clientProperties.getGroupAssetsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGroupAssetsMaxRpcTimeout() != null) {
      groupAssetsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGroupAssetsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GroupAssetsMaxRpcTimeout set to "
                + this.clientProperties.getGroupAssetsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGroupAssetsTotalTimeout() != null) {
      groupAssetsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGroupAssetsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GroupAssetsTotalTimeout set to " + this.clientProperties.getGroupAssetsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .groupAssetsSettings()
        .setRetrySettings(groupAssetsRetrySettingBuilder.build());
    RetrySettings.Builder groupFindingsRetrySettingBuilder =
        clientSettingsBuilder.groupFindingsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGroupFindingsInitialRetryDelay() != null) {
      groupFindingsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGroupFindingsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GroupFindingsInitialRetryDelay set to "
                + this.clientProperties.getGroupFindingsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGroupFindingsRetryDelayMultiplier() != null) {
      groupFindingsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGroupFindingsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GroupFindingsRetryDelayMultiplier set to "
                + this.clientProperties.getGroupFindingsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGroupFindingsMaxRetryDelay() != null) {
      groupFindingsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGroupFindingsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GroupFindingsMaxRetryDelay set to "
                + this.clientProperties.getGroupFindingsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGroupFindingsInitialRpcTimeout() != null) {
      groupFindingsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGroupFindingsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GroupFindingsInitialRpcTimeout set to "
                + this.clientProperties.getGroupFindingsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGroupFindingsRpcTimeoutMultiplier() != null) {
      groupFindingsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGroupFindingsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GroupFindingsRpcTimeoutMultiplier set to "
                + this.clientProperties.getGroupFindingsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGroupFindingsMaxRpcTimeout() != null) {
      groupFindingsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGroupFindingsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GroupFindingsMaxRpcTimeout set to "
                + this.clientProperties.getGroupFindingsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGroupFindingsTotalTimeout() != null) {
      groupFindingsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGroupFindingsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GroupFindingsTotalTimeout set to "
                + this.clientProperties.getGroupFindingsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .groupFindingsSettings()
        .setRetrySettings(groupFindingsRetrySettingBuilder.build());
    RetrySettings.Builder listAssetsRetrySettingBuilder =
        clientSettingsBuilder.listAssetsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListAssetsInitialRetryDelay() != null) {
      listAssetsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListAssetsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetsInitialRetryDelay set to "
                + this.clientProperties.getListAssetsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListAssetsRetryDelayMultiplier() != null) {
      listAssetsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListAssetsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetsRetryDelayMultiplier set to "
                + this.clientProperties.getListAssetsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListAssetsMaxRetryDelay() != null) {
      listAssetsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListAssetsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetsMaxRetryDelay set to " + this.clientProperties.getListAssetsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListAssetsInitialRpcTimeout() != null) {
      listAssetsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListAssetsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetsInitialRpcTimeout set to "
                + this.clientProperties.getListAssetsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListAssetsRpcTimeoutMultiplier() != null) {
      listAssetsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListAssetsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListAssetsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListAssetsMaxRpcTimeout() != null) {
      listAssetsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListAssetsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetsMaxRpcTimeout set to " + this.clientProperties.getListAssetsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListAssetsTotalTimeout() != null) {
      listAssetsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListAssetsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAssetsTotalTimeout set to " + this.clientProperties.getListAssetsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listAssetsSettings()
        .setRetrySettings(listAssetsRetrySettingBuilder.build());
    RetrySettings.Builder listFindingsRetrySettingBuilder =
        clientSettingsBuilder.listFindingsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListFindingsInitialRetryDelay() != null) {
      listFindingsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListFindingsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingsInitialRetryDelay set to "
                + this.clientProperties.getListFindingsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListFindingsRetryDelayMultiplier() != null) {
      listFindingsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListFindingsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingsRetryDelayMultiplier set to "
                + this.clientProperties.getListFindingsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListFindingsMaxRetryDelay() != null) {
      listFindingsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListFindingsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingsMaxRetryDelay set to "
                + this.clientProperties.getListFindingsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListFindingsInitialRpcTimeout() != null) {
      listFindingsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListFindingsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingsInitialRpcTimeout set to "
                + this.clientProperties.getListFindingsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListFindingsRpcTimeoutMultiplier() != null) {
      listFindingsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListFindingsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListFindingsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListFindingsMaxRpcTimeout() != null) {
      listFindingsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListFindingsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingsMaxRpcTimeout set to "
                + this.clientProperties.getListFindingsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListFindingsTotalTimeout() != null) {
      listFindingsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListFindingsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListFindingsTotalTimeout set to "
                + this.clientProperties.getListFindingsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listFindingsSettings()
        .setRetrySettings(listFindingsRetrySettingBuilder.build());
    RetrySettings.Builder listMuteConfigsRetrySettingBuilder =
        clientSettingsBuilder.listMuteConfigsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListMuteConfigsRpcTimeoutMultiplier() != null) {
      listMuteConfigsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListMuteConfigsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMuteConfigsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListMuteConfigsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listMuteConfigsSettings()
        .setRetrySettings(listMuteConfigsRetrySettingBuilder.build());
    RetrySettings.Builder listNotificationConfigsRetrySettingBuilder =
        clientSettingsBuilder.listNotificationConfigsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListNotificationConfigsInitialRetryDelay() != null) {
      listNotificationConfigsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListNotificationConfigsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationConfigsInitialRetryDelay set to "
                + this.clientProperties.getListNotificationConfigsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListNotificationConfigsRetryDelayMultiplier() != null) {
      listNotificationConfigsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListNotificationConfigsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationConfigsRetryDelayMultiplier set to "
                + this.clientProperties.getListNotificationConfigsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListNotificationConfigsMaxRetryDelay() != null) {
      listNotificationConfigsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListNotificationConfigsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationConfigsMaxRetryDelay set to "
                + this.clientProperties.getListNotificationConfigsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListNotificationConfigsInitialRpcTimeout() != null) {
      listNotificationConfigsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListNotificationConfigsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationConfigsInitialRpcTimeout set to "
                + this.clientProperties.getListNotificationConfigsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListNotificationConfigsRpcTimeoutMultiplier() != null) {
      listNotificationConfigsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListNotificationConfigsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationConfigsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListNotificationConfigsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListNotificationConfigsMaxRpcTimeout() != null) {
      listNotificationConfigsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListNotificationConfigsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationConfigsMaxRpcTimeout set to "
                + this.clientProperties.getListNotificationConfigsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListNotificationConfigsTotalTimeout() != null) {
      listNotificationConfigsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListNotificationConfigsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationConfigsTotalTimeout set to "
                + this.clientProperties.getListNotificationConfigsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listNotificationConfigsSettings()
        .setRetrySettings(listNotificationConfigsRetrySettingBuilder.build());
    RetrySettings.Builder listSourcesRetrySettingBuilder =
        clientSettingsBuilder.listSourcesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListSourcesInitialRetryDelay() != null) {
      listSourcesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListSourcesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSourcesInitialRetryDelay set to "
                + this.clientProperties.getListSourcesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListSourcesRetryDelayMultiplier() != null) {
      listSourcesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListSourcesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSourcesRetryDelayMultiplier set to "
                + this.clientProperties.getListSourcesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListSourcesMaxRetryDelay() != null) {
      listSourcesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListSourcesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSourcesMaxRetryDelay set to "
                + this.clientProperties.getListSourcesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListSourcesInitialRpcTimeout() != null) {
      listSourcesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListSourcesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSourcesInitialRpcTimeout set to "
                + this.clientProperties.getListSourcesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListSourcesRpcTimeoutMultiplier() != null) {
      listSourcesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListSourcesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSourcesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListSourcesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListSourcesMaxRpcTimeout() != null) {
      listSourcesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListSourcesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSourcesMaxRpcTimeout set to "
                + this.clientProperties.getListSourcesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListSourcesTotalTimeout() != null) {
      listSourcesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListSourcesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListSourcesTotalTimeout set to " + this.clientProperties.getListSourcesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listSourcesSettings()
        .setRetrySettings(listSourcesRetrySettingBuilder.build());
    RetrySettings.Builder runAssetDiscoveryRetrySettingBuilder =
        clientSettingsBuilder.runAssetDiscoverySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRunAssetDiscoveryInitialRpcTimeout() != null) {
      runAssetDiscoveryRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRunAssetDiscoveryInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RunAssetDiscoveryInitialRpcTimeout set to "
                + this.clientProperties.getRunAssetDiscoveryInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRunAssetDiscoveryRpcTimeoutMultiplier() != null) {
      runAssetDiscoveryRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRunAssetDiscoveryRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RunAssetDiscoveryRpcTimeoutMultiplier set to "
                + this.clientProperties.getRunAssetDiscoveryRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRunAssetDiscoveryMaxRpcTimeout() != null) {
      runAssetDiscoveryRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRunAssetDiscoveryMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RunAssetDiscoveryMaxRpcTimeout set to "
                + this.clientProperties.getRunAssetDiscoveryMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRunAssetDiscoveryTotalTimeout() != null) {
      runAssetDiscoveryRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRunAssetDiscoveryTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RunAssetDiscoveryTotalTimeout set to "
                + this.clientProperties.getRunAssetDiscoveryTotalTimeout());
      }
    }
    clientSettingsBuilder
        .runAssetDiscoverySettings()
        .setRetrySettings(runAssetDiscoveryRetrySettingBuilder.build());
    RetrySettings.Builder setFindingStateRetrySettingBuilder =
        clientSettingsBuilder.setFindingStateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetFindingStateInitialRpcTimeout() != null) {
      setFindingStateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetFindingStateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetFindingStateInitialRpcTimeout set to "
                + this.clientProperties.getSetFindingStateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetFindingStateRpcTimeoutMultiplier() != null) {
      setFindingStateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetFindingStateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetFindingStateRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetFindingStateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetFindingStateMaxRpcTimeout() != null) {
      setFindingStateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetFindingStateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetFindingStateMaxRpcTimeout set to "
                + this.clientProperties.getSetFindingStateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetFindingStateTotalTimeout() != null) {
      setFindingStateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetFindingStateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetFindingStateTotalTimeout set to "
                + this.clientProperties.getSetFindingStateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setFindingStateSettings()
        .setRetrySettings(setFindingStateRetrySettingBuilder.build());
    RetrySettings.Builder setMuteRetrySettingBuilder =
        clientSettingsBuilder.setMuteSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetMuteRpcTimeoutMultiplier() != null) {
      setMuteRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetMuteRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetMuteRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetMuteRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder.setMuteSettings().setRetrySettings(setMuteRetrySettingBuilder.build());
    RetrySettings.Builder setIamPolicyRetrySettingBuilder =
        clientSettingsBuilder.setIamPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetIamPolicyInitialRpcTimeout() != null) {
      setIamPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetIamPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyInitialRpcTimeout set to "
                + this.clientProperties.getSetIamPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetIamPolicyRpcTimeoutMultiplier() != null) {
      setIamPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetIamPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetIamPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetIamPolicyMaxRpcTimeout() != null) {
      setIamPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetIamPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyMaxRpcTimeout set to "
                + this.clientProperties.getSetIamPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetIamPolicyTotalTimeout() != null) {
      setIamPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetIamPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetIamPolicyTotalTimeout set to "
                + this.clientProperties.getSetIamPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setIamPolicySettings()
        .setRetrySettings(setIamPolicyRetrySettingBuilder.build());
    RetrySettings.Builder testIamPermissionsRetrySettingBuilder =
        clientSettingsBuilder.testIamPermissionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getTestIamPermissionsInitialRetryDelay() != null) {
      testIamPermissionsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getTestIamPermissionsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsInitialRetryDelay set to "
                + this.clientProperties.getTestIamPermissionsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getTestIamPermissionsRetryDelayMultiplier() != null) {
      testIamPermissionsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getTestIamPermissionsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsRetryDelayMultiplier set to "
                + this.clientProperties.getTestIamPermissionsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getTestIamPermissionsMaxRetryDelay() != null) {
      testIamPermissionsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getTestIamPermissionsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsMaxRetryDelay set to "
                + this.clientProperties.getTestIamPermissionsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getTestIamPermissionsInitialRpcTimeout() != null) {
      testIamPermissionsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getTestIamPermissionsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsInitialRpcTimeout set to "
                + this.clientProperties.getTestIamPermissionsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getTestIamPermissionsRpcTimeoutMultiplier() != null) {
      testIamPermissionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getTestIamPermissionsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsRpcTimeoutMultiplier set to "
                + this.clientProperties.getTestIamPermissionsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getTestIamPermissionsMaxRpcTimeout() != null) {
      testIamPermissionsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getTestIamPermissionsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsMaxRpcTimeout set to "
                + this.clientProperties.getTestIamPermissionsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getTestIamPermissionsTotalTimeout() != null) {
      testIamPermissionsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getTestIamPermissionsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "TestIamPermissionsTotalTimeout set to "
                + this.clientProperties.getTestIamPermissionsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .testIamPermissionsSettings()
        .setRetrySettings(testIamPermissionsRetrySettingBuilder.build());
    RetrySettings.Builder updateExternalSystemRetrySettingBuilder =
        clientSettingsBuilder.updateExternalSystemSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateExternalSystemRpcTimeoutMultiplier() != null) {
      updateExternalSystemRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateExternalSystemRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateExternalSystemRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateExternalSystemRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .updateExternalSystemSettings()
        .setRetrySettings(updateExternalSystemRetrySettingBuilder.build());
    RetrySettings.Builder updateFindingRetrySettingBuilder =
        clientSettingsBuilder.updateFindingSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateFindingInitialRpcTimeout() != null) {
      updateFindingRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateFindingInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateFindingInitialRpcTimeout set to "
                + this.clientProperties.getUpdateFindingInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateFindingRpcTimeoutMultiplier() != null) {
      updateFindingRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateFindingRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateFindingRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateFindingRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateFindingMaxRpcTimeout() != null) {
      updateFindingRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateFindingMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateFindingMaxRpcTimeout set to "
                + this.clientProperties.getUpdateFindingMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateFindingTotalTimeout() != null) {
      updateFindingRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateFindingTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateFindingTotalTimeout set to "
                + this.clientProperties.getUpdateFindingTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateFindingSettings()
        .setRetrySettings(updateFindingRetrySettingBuilder.build());
    RetrySettings.Builder updateMuteConfigRetrySettingBuilder =
        clientSettingsBuilder.updateMuteConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateMuteConfigRpcTimeoutMultiplier() != null) {
      updateMuteConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateMuteConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateMuteConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateMuteConfigRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .updateMuteConfigSettings()
        .setRetrySettings(updateMuteConfigRetrySettingBuilder.build());
    RetrySettings.Builder updateNotificationConfigRetrySettingBuilder =
        clientSettingsBuilder.updateNotificationConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateNotificationConfigInitialRpcTimeout() != null) {
      updateNotificationConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateNotificationConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateNotificationConfigInitialRpcTimeout set to "
                + this.clientProperties.getUpdateNotificationConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateNotificationConfigRpcTimeoutMultiplier() != null) {
      updateNotificationConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateNotificationConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateNotificationConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateNotificationConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateNotificationConfigMaxRpcTimeout() != null) {
      updateNotificationConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateNotificationConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateNotificationConfigMaxRpcTimeout set to "
                + this.clientProperties.getUpdateNotificationConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateNotificationConfigTotalTimeout() != null) {
      updateNotificationConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateNotificationConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateNotificationConfigTotalTimeout set to "
                + this.clientProperties.getUpdateNotificationConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateNotificationConfigSettings()
        .setRetrySettings(updateNotificationConfigRetrySettingBuilder.build());
    RetrySettings.Builder updateOrganizationSettingsRetrySettingBuilder =
        clientSettingsBuilder.updateOrganizationSettingsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateOrganizationSettingsInitialRpcTimeout() != null) {
      updateOrganizationSettingsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateOrganizationSettingsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateOrganizationSettingsInitialRpcTimeout set to "
                + this.clientProperties.getUpdateOrganizationSettingsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateOrganizationSettingsRpcTimeoutMultiplier() != null) {
      updateOrganizationSettingsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateOrganizationSettingsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateOrganizationSettingsRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateOrganizationSettingsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateOrganizationSettingsMaxRpcTimeout() != null) {
      updateOrganizationSettingsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateOrganizationSettingsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateOrganizationSettingsMaxRpcTimeout set to "
                + this.clientProperties.getUpdateOrganizationSettingsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateOrganizationSettingsTotalTimeout() != null) {
      updateOrganizationSettingsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateOrganizationSettingsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateOrganizationSettingsTotalTimeout set to "
                + this.clientProperties.getUpdateOrganizationSettingsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateOrganizationSettingsSettings()
        .setRetrySettings(updateOrganizationSettingsRetrySettingBuilder.build());
    RetrySettings.Builder updateSourceRetrySettingBuilder =
        clientSettingsBuilder.updateSourceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateSourceInitialRpcTimeout() != null) {
      updateSourceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateSourceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSourceInitialRpcTimeout set to "
                + this.clientProperties.getUpdateSourceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateSourceRpcTimeoutMultiplier() != null) {
      updateSourceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateSourceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSourceRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateSourceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateSourceMaxRpcTimeout() != null) {
      updateSourceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateSourceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSourceMaxRpcTimeout set to "
                + this.clientProperties.getUpdateSourceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateSourceTotalTimeout() != null) {
      updateSourceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateSourceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSourceTotalTimeout set to "
                + this.clientProperties.getUpdateSourceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateSourceSettings()
        .setRetrySettings(updateSourceRetrySettingBuilder.build());
    RetrySettings.Builder updateSecurityMarksRetrySettingBuilder =
        clientSettingsBuilder.updateSecurityMarksSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateSecurityMarksInitialRpcTimeout() != null) {
      updateSecurityMarksRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateSecurityMarksInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSecurityMarksInitialRpcTimeout set to "
                + this.clientProperties.getUpdateSecurityMarksInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateSecurityMarksRpcTimeoutMultiplier() != null) {
      updateSecurityMarksRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateSecurityMarksRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSecurityMarksRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateSecurityMarksRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateSecurityMarksMaxRpcTimeout() != null) {
      updateSecurityMarksRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateSecurityMarksMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSecurityMarksMaxRpcTimeout set to "
                + this.clientProperties.getUpdateSecurityMarksMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateSecurityMarksTotalTimeout() != null) {
      updateSecurityMarksRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateSecurityMarksTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateSecurityMarksTotalTimeout set to "
                + this.clientProperties.getUpdateSecurityMarksTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateSecurityMarksSettings()
        .setRetrySettings(updateSecurityMarksRetrySettingBuilder.build());
    RetrySettings.Builder createBigQueryExportRetrySettingBuilder =
        clientSettingsBuilder.createBigQueryExportSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateBigQueryExportRpcTimeoutMultiplier() != null) {
      createBigQueryExportRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateBigQueryExportRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateBigQueryExportRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateBigQueryExportRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .createBigQueryExportSettings()
        .setRetrySettings(createBigQueryExportRetrySettingBuilder.build());
    RetrySettings.Builder deleteBigQueryExportRetrySettingBuilder =
        clientSettingsBuilder.deleteBigQueryExportSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteBigQueryExportRpcTimeoutMultiplier() != null) {
      deleteBigQueryExportRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteBigQueryExportRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteBigQueryExportRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteBigQueryExportRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .deleteBigQueryExportSettings()
        .setRetrySettings(deleteBigQueryExportRetrySettingBuilder.build());
    RetrySettings.Builder updateBigQueryExportRetrySettingBuilder =
        clientSettingsBuilder.updateBigQueryExportSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateBigQueryExportRpcTimeoutMultiplier() != null) {
      updateBigQueryExportRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateBigQueryExportRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateBigQueryExportRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateBigQueryExportRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .updateBigQueryExportSettings()
        .setRetrySettings(updateBigQueryExportRetrySettingBuilder.build());
    RetrySettings.Builder listBigQueryExportsRetrySettingBuilder =
        clientSettingsBuilder.listBigQueryExportsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListBigQueryExportsRpcTimeoutMultiplier() != null) {
      listBigQueryExportsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListBigQueryExportsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListBigQueryExportsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListBigQueryExportsRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listBigQueryExportsSettings()
        .setRetrySettings(listBigQueryExportsRetrySettingBuilder.build());
    return SecurityCenterClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-security-center";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
