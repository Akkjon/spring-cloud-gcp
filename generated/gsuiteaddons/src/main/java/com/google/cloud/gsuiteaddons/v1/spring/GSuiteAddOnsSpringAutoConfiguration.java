/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.gsuiteaddons.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.gsuiteaddons.v1.GSuiteAddOnsClient;
import com.google.cloud.gsuiteaddons.v1.GSuiteAddOnsSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link GSuiteAddOnsClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(GSuiteAddOnsClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.gsuiteaddons.v1.spring.auto.g-suite-add-ons.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({GSuiteAddOnsSpringProperties.class, GlobalProperties.class})
public class GSuiteAddOnsSpringAutoConfiguration {
  private final GSuiteAddOnsSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(GSuiteAddOnsSpringAutoConfiguration.class);

  protected GSuiteAddOnsSpringAutoConfiguration(
      GSuiteAddOnsSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider gSuiteAddOnsCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from GSuiteAddOns-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultGSuiteAddOnsTransportChannelProvider() {
    return GSuiteAddOnsSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a GSuiteAddOnsClient bean configured to use the default credentials provider (obtained
   * with gSuiteAddOnsCredentials()) and its default transport channel provider
   * (defaultGSuiteAddOnsTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in GSuiteAddOnsSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public GSuiteAddOnsClient gSuiteAddOnsClient(
      @Qualifier("gSuiteAddOnsCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultGSuiteAddOnsTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    GSuiteAddOnsSettings.Builder clientSettingsBuilder =
        GSuiteAddOnsSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          GSuiteAddOnsSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          GSuiteAddOnsSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder getAuthorizationRetrySettingBuilder =
        clientSettingsBuilder.getAuthorizationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetAuthorizationInitialRpcTimeout() != null) {
      getAuthorizationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetAuthorizationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAuthorizationInitialRpcTimeout set to "
                + this.clientProperties.getGetAuthorizationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAuthorizationRpcTimeoutMultiplier() != null) {
      getAuthorizationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetAuthorizationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAuthorizationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetAuthorizationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetAuthorizationMaxRpcTimeout() != null) {
      getAuthorizationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetAuthorizationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAuthorizationMaxRpcTimeout set to "
                + this.clientProperties.getGetAuthorizationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAuthorizationTotalTimeout() != null) {
      getAuthorizationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetAuthorizationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAuthorizationTotalTimeout set to "
                + this.clientProperties.getGetAuthorizationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getAuthorizationSettings()
        .setRetrySettings(getAuthorizationRetrySettingBuilder.build());
    RetrySettings.Builder createDeploymentRetrySettingBuilder =
        clientSettingsBuilder.createDeploymentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateDeploymentInitialRpcTimeout() != null) {
      createDeploymentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateDeploymentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDeploymentInitialRpcTimeout set to "
                + this.clientProperties.getCreateDeploymentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateDeploymentRpcTimeoutMultiplier() != null) {
      createDeploymentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateDeploymentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDeploymentRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateDeploymentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateDeploymentMaxRpcTimeout() != null) {
      createDeploymentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateDeploymentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDeploymentMaxRpcTimeout set to "
                + this.clientProperties.getCreateDeploymentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateDeploymentTotalTimeout() != null) {
      createDeploymentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateDeploymentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateDeploymentTotalTimeout set to "
                + this.clientProperties.getCreateDeploymentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createDeploymentSettings()
        .setRetrySettings(createDeploymentRetrySettingBuilder.build());
    RetrySettings.Builder replaceDeploymentRetrySettingBuilder =
        clientSettingsBuilder.replaceDeploymentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getReplaceDeploymentInitialRetryDelay() != null) {
      replaceDeploymentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getReplaceDeploymentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceDeploymentInitialRetryDelay set to "
                + this.clientProperties.getReplaceDeploymentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getReplaceDeploymentRetryDelayMultiplier() != null) {
      replaceDeploymentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getReplaceDeploymentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceDeploymentRetryDelayMultiplier set to "
                + this.clientProperties.getReplaceDeploymentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getReplaceDeploymentMaxRetryDelay() != null) {
      replaceDeploymentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getReplaceDeploymentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceDeploymentMaxRetryDelay set to "
                + this.clientProperties.getReplaceDeploymentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getReplaceDeploymentInitialRpcTimeout() != null) {
      replaceDeploymentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getReplaceDeploymentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceDeploymentInitialRpcTimeout set to "
                + this.clientProperties.getReplaceDeploymentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getReplaceDeploymentRpcTimeoutMultiplier() != null) {
      replaceDeploymentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getReplaceDeploymentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceDeploymentRpcTimeoutMultiplier set to "
                + this.clientProperties.getReplaceDeploymentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getReplaceDeploymentMaxRpcTimeout() != null) {
      replaceDeploymentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getReplaceDeploymentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceDeploymentMaxRpcTimeout set to "
                + this.clientProperties.getReplaceDeploymentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getReplaceDeploymentTotalTimeout() != null) {
      replaceDeploymentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getReplaceDeploymentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceDeploymentTotalTimeout set to "
                + this.clientProperties.getReplaceDeploymentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .replaceDeploymentSettings()
        .setRetrySettings(replaceDeploymentRetrySettingBuilder.build());
    RetrySettings.Builder getDeploymentRetrySettingBuilder =
        clientSettingsBuilder.getDeploymentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetDeploymentInitialRetryDelay() != null) {
      getDeploymentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetDeploymentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDeploymentInitialRetryDelay set to "
                + this.clientProperties.getGetDeploymentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetDeploymentRetryDelayMultiplier() != null) {
      getDeploymentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetDeploymentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDeploymentRetryDelayMultiplier set to "
                + this.clientProperties.getGetDeploymentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetDeploymentMaxRetryDelay() != null) {
      getDeploymentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetDeploymentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDeploymentMaxRetryDelay set to "
                + this.clientProperties.getGetDeploymentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetDeploymentInitialRpcTimeout() != null) {
      getDeploymentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetDeploymentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDeploymentInitialRpcTimeout set to "
                + this.clientProperties.getGetDeploymentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDeploymentRpcTimeoutMultiplier() != null) {
      getDeploymentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetDeploymentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDeploymentRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetDeploymentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetDeploymentMaxRpcTimeout() != null) {
      getDeploymentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetDeploymentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDeploymentMaxRpcTimeout set to "
                + this.clientProperties.getGetDeploymentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDeploymentTotalTimeout() != null) {
      getDeploymentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetDeploymentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDeploymentTotalTimeout set to "
                + this.clientProperties.getGetDeploymentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getDeploymentSettings()
        .setRetrySettings(getDeploymentRetrySettingBuilder.build());
    RetrySettings.Builder listDeploymentsRetrySettingBuilder =
        clientSettingsBuilder.listDeploymentsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListDeploymentsInitialRetryDelay() != null) {
      listDeploymentsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListDeploymentsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDeploymentsInitialRetryDelay set to "
                + this.clientProperties.getListDeploymentsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListDeploymentsRetryDelayMultiplier() != null) {
      listDeploymentsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListDeploymentsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDeploymentsRetryDelayMultiplier set to "
                + this.clientProperties.getListDeploymentsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListDeploymentsMaxRetryDelay() != null) {
      listDeploymentsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListDeploymentsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDeploymentsMaxRetryDelay set to "
                + this.clientProperties.getListDeploymentsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListDeploymentsInitialRpcTimeout() != null) {
      listDeploymentsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListDeploymentsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDeploymentsInitialRpcTimeout set to "
                + this.clientProperties.getListDeploymentsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListDeploymentsRpcTimeoutMultiplier() != null) {
      listDeploymentsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListDeploymentsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDeploymentsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListDeploymentsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListDeploymentsMaxRpcTimeout() != null) {
      listDeploymentsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListDeploymentsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDeploymentsMaxRpcTimeout set to "
                + this.clientProperties.getListDeploymentsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListDeploymentsTotalTimeout() != null) {
      listDeploymentsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListDeploymentsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListDeploymentsTotalTimeout set to "
                + this.clientProperties.getListDeploymentsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listDeploymentsSettings()
        .setRetrySettings(listDeploymentsRetrySettingBuilder.build());
    RetrySettings.Builder deleteDeploymentRetrySettingBuilder =
        clientSettingsBuilder.deleteDeploymentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteDeploymentInitialRpcTimeout() != null) {
      deleteDeploymentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteDeploymentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDeploymentInitialRpcTimeout set to "
                + this.clientProperties.getDeleteDeploymentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteDeploymentRpcTimeoutMultiplier() != null) {
      deleteDeploymentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteDeploymentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDeploymentRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteDeploymentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteDeploymentMaxRpcTimeout() != null) {
      deleteDeploymentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteDeploymentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDeploymentMaxRpcTimeout set to "
                + this.clientProperties.getDeleteDeploymentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteDeploymentTotalTimeout() != null) {
      deleteDeploymentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteDeploymentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteDeploymentTotalTimeout set to "
                + this.clientProperties.getDeleteDeploymentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteDeploymentSettings()
        .setRetrySettings(deleteDeploymentRetrySettingBuilder.build());
    RetrySettings.Builder installDeploymentRetrySettingBuilder =
        clientSettingsBuilder.installDeploymentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getInstallDeploymentInitialRetryDelay() != null) {
      installDeploymentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getInstallDeploymentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstallDeploymentInitialRetryDelay set to "
                + this.clientProperties.getInstallDeploymentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getInstallDeploymentRetryDelayMultiplier() != null) {
      installDeploymentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getInstallDeploymentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstallDeploymentRetryDelayMultiplier set to "
                + this.clientProperties.getInstallDeploymentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getInstallDeploymentMaxRetryDelay() != null) {
      installDeploymentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getInstallDeploymentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstallDeploymentMaxRetryDelay set to "
                + this.clientProperties.getInstallDeploymentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getInstallDeploymentInitialRpcTimeout() != null) {
      installDeploymentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getInstallDeploymentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstallDeploymentInitialRpcTimeout set to "
                + this.clientProperties.getInstallDeploymentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getInstallDeploymentRpcTimeoutMultiplier() != null) {
      installDeploymentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getInstallDeploymentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstallDeploymentRpcTimeoutMultiplier set to "
                + this.clientProperties.getInstallDeploymentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getInstallDeploymentMaxRpcTimeout() != null) {
      installDeploymentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getInstallDeploymentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstallDeploymentMaxRpcTimeout set to "
                + this.clientProperties.getInstallDeploymentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getInstallDeploymentTotalTimeout() != null) {
      installDeploymentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getInstallDeploymentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "InstallDeploymentTotalTimeout set to "
                + this.clientProperties.getInstallDeploymentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .installDeploymentSettings()
        .setRetrySettings(installDeploymentRetrySettingBuilder.build());
    RetrySettings.Builder uninstallDeploymentRetrySettingBuilder =
        clientSettingsBuilder.uninstallDeploymentSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUninstallDeploymentInitialRetryDelay() != null) {
      uninstallDeploymentRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUninstallDeploymentInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UninstallDeploymentInitialRetryDelay set to "
                + this.clientProperties.getUninstallDeploymentInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUninstallDeploymentRetryDelayMultiplier() != null) {
      uninstallDeploymentRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUninstallDeploymentRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UninstallDeploymentRetryDelayMultiplier set to "
                + this.clientProperties.getUninstallDeploymentRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUninstallDeploymentMaxRetryDelay() != null) {
      uninstallDeploymentRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUninstallDeploymentMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UninstallDeploymentMaxRetryDelay set to "
                + this.clientProperties.getUninstallDeploymentMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUninstallDeploymentInitialRpcTimeout() != null) {
      uninstallDeploymentRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUninstallDeploymentInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UninstallDeploymentInitialRpcTimeout set to "
                + this.clientProperties.getUninstallDeploymentInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUninstallDeploymentRpcTimeoutMultiplier() != null) {
      uninstallDeploymentRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUninstallDeploymentRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UninstallDeploymentRpcTimeoutMultiplier set to "
                + this.clientProperties.getUninstallDeploymentRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUninstallDeploymentMaxRpcTimeout() != null) {
      uninstallDeploymentRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUninstallDeploymentMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UninstallDeploymentMaxRpcTimeout set to "
                + this.clientProperties.getUninstallDeploymentMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUninstallDeploymentTotalTimeout() != null) {
      uninstallDeploymentRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUninstallDeploymentTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UninstallDeploymentTotalTimeout set to "
                + this.clientProperties.getUninstallDeploymentTotalTimeout());
      }
    }
    clientSettingsBuilder
        .uninstallDeploymentSettings()
        .setRetrySettings(uninstallDeploymentRetrySettingBuilder.build());
    RetrySettings.Builder getInstallStatusRetrySettingBuilder =
        clientSettingsBuilder.getInstallStatusSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetInstallStatusInitialRetryDelay() != null) {
      getInstallStatusRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetInstallStatusInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstallStatusInitialRetryDelay set to "
                + this.clientProperties.getGetInstallStatusInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetInstallStatusRetryDelayMultiplier() != null) {
      getInstallStatusRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetInstallStatusRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstallStatusRetryDelayMultiplier set to "
                + this.clientProperties.getGetInstallStatusRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetInstallStatusMaxRetryDelay() != null) {
      getInstallStatusRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetInstallStatusMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstallStatusMaxRetryDelay set to "
                + this.clientProperties.getGetInstallStatusMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetInstallStatusInitialRpcTimeout() != null) {
      getInstallStatusRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetInstallStatusInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstallStatusInitialRpcTimeout set to "
                + this.clientProperties.getGetInstallStatusInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetInstallStatusRpcTimeoutMultiplier() != null) {
      getInstallStatusRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetInstallStatusRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstallStatusRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetInstallStatusRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetInstallStatusMaxRpcTimeout() != null) {
      getInstallStatusRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetInstallStatusMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstallStatusMaxRpcTimeout set to "
                + this.clientProperties.getGetInstallStatusMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetInstallStatusTotalTimeout() != null) {
      getInstallStatusRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetInstallStatusTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetInstallStatusTotalTimeout set to "
                + this.clientProperties.getGetInstallStatusTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getInstallStatusSettings()
        .setRetrySettings(getInstallStatusRetrySettingBuilder.build());
    return GSuiteAddOnsClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-g-suite-add-ons";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
