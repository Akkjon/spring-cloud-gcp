/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.identity.accesscontextmanager.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import com.google.identity.accesscontextmanager.v1.AccessContextManagerClient;
import com.google.identity.accesscontextmanager.v1.AccessContextManagerSettings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link AccessContextManagerClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(AccessContextManagerClient.class)
@ConditionalOnProperty(
    value =
        "com.google.identity.accesscontextmanager.v1.spring.auto.access-context-manager.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({AccessContextManagerSpringProperties.class, GlobalProperties.class})
public class AccessContextManagerSpringAutoConfiguration {
  private final AccessContextManagerSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(AccessContextManagerSpringAutoConfiguration.class);

  protected AccessContextManagerSpringAutoConfiguration(
      AccessContextManagerSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider accessContextManagerCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from AccessContextManager-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultAccessContextManagerTransportChannelProvider() {
    return AccessContextManagerSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a AccessContextManagerClient bean configured to use the default credentials provider
   * (obtained with accessContextManagerCredentials()) and its default transport channel provider
   * (defaultAccessContextManagerTransportChannelProvider()). It also configures the quota project
   * ID if provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in AccessContextManagerSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public AccessContextManagerClient accessContextManagerClient(
      @Qualifier("accessContextManagerCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultAccessContextManagerTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    AccessContextManagerSettings.Builder clientSettingsBuilder =
        AccessContextManagerSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          AccessContextManagerSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          AccessContextManagerSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listAccessPoliciesRetrySettingBuilder =
        clientSettingsBuilder.listAccessPoliciesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListAccessPoliciesInitialRpcTimeout() != null) {
      listAccessPoliciesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListAccessPoliciesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAccessPoliciesInitialRpcTimeout set to "
                + this.clientProperties.getListAccessPoliciesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListAccessPoliciesRpcTimeoutMultiplier() != null) {
      listAccessPoliciesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListAccessPoliciesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAccessPoliciesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListAccessPoliciesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListAccessPoliciesMaxRpcTimeout() != null) {
      listAccessPoliciesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListAccessPoliciesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAccessPoliciesMaxRpcTimeout set to "
                + this.clientProperties.getListAccessPoliciesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListAccessPoliciesTotalTimeout() != null) {
      listAccessPoliciesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListAccessPoliciesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAccessPoliciesTotalTimeout set to "
                + this.clientProperties.getListAccessPoliciesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listAccessPoliciesSettings()
        .setRetrySettings(listAccessPoliciesRetrySettingBuilder.build());
    RetrySettings.Builder getAccessPolicyRetrySettingBuilder =
        clientSettingsBuilder.getAccessPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetAccessPolicyInitialRpcTimeout() != null) {
      getAccessPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetAccessPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAccessPolicyInitialRpcTimeout set to "
                + this.clientProperties.getGetAccessPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAccessPolicyRpcTimeoutMultiplier() != null) {
      getAccessPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetAccessPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAccessPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetAccessPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetAccessPolicyMaxRpcTimeout() != null) {
      getAccessPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetAccessPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAccessPolicyMaxRpcTimeout set to "
                + this.clientProperties.getGetAccessPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAccessPolicyTotalTimeout() != null) {
      getAccessPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetAccessPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAccessPolicyTotalTimeout set to "
                + this.clientProperties.getGetAccessPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getAccessPolicySettings()
        .setRetrySettings(getAccessPolicyRetrySettingBuilder.build());
    RetrySettings.Builder createAccessPolicyRetrySettingBuilder =
        clientSettingsBuilder.createAccessPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateAccessPolicyInitialRpcTimeout() != null) {
      createAccessPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateAccessPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAccessPolicyInitialRpcTimeout set to "
                + this.clientProperties.getCreateAccessPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateAccessPolicyRpcTimeoutMultiplier() != null) {
      createAccessPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateAccessPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAccessPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateAccessPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateAccessPolicyMaxRpcTimeout() != null) {
      createAccessPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateAccessPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAccessPolicyMaxRpcTimeout set to "
                + this.clientProperties.getCreateAccessPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateAccessPolicyTotalTimeout() != null) {
      createAccessPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateAccessPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAccessPolicyTotalTimeout set to "
                + this.clientProperties.getCreateAccessPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createAccessPolicySettings()
        .setRetrySettings(createAccessPolicyRetrySettingBuilder.build());
    RetrySettings.Builder updateAccessPolicyRetrySettingBuilder =
        clientSettingsBuilder.updateAccessPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateAccessPolicyInitialRpcTimeout() != null) {
      updateAccessPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateAccessPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAccessPolicyInitialRpcTimeout set to "
                + this.clientProperties.getUpdateAccessPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateAccessPolicyRpcTimeoutMultiplier() != null) {
      updateAccessPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateAccessPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAccessPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateAccessPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateAccessPolicyMaxRpcTimeout() != null) {
      updateAccessPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateAccessPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAccessPolicyMaxRpcTimeout set to "
                + this.clientProperties.getUpdateAccessPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateAccessPolicyTotalTimeout() != null) {
      updateAccessPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateAccessPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAccessPolicyTotalTimeout set to "
                + this.clientProperties.getUpdateAccessPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateAccessPolicySettings()
        .setRetrySettings(updateAccessPolicyRetrySettingBuilder.build());
    RetrySettings.Builder deleteAccessPolicyRetrySettingBuilder =
        clientSettingsBuilder.deleteAccessPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteAccessPolicyInitialRpcTimeout() != null) {
      deleteAccessPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteAccessPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAccessPolicyInitialRpcTimeout set to "
                + this.clientProperties.getDeleteAccessPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAccessPolicyRpcTimeoutMultiplier() != null) {
      deleteAccessPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteAccessPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAccessPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteAccessPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteAccessPolicyMaxRpcTimeout() != null) {
      deleteAccessPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteAccessPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAccessPolicyMaxRpcTimeout set to "
                + this.clientProperties.getDeleteAccessPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAccessPolicyTotalTimeout() != null) {
      deleteAccessPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteAccessPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAccessPolicyTotalTimeout set to "
                + this.clientProperties.getDeleteAccessPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteAccessPolicySettings()
        .setRetrySettings(deleteAccessPolicyRetrySettingBuilder.build());
    RetrySettings.Builder listAccessLevelsRetrySettingBuilder =
        clientSettingsBuilder.listAccessLevelsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListAccessLevelsInitialRpcTimeout() != null) {
      listAccessLevelsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListAccessLevelsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAccessLevelsInitialRpcTimeout set to "
                + this.clientProperties.getListAccessLevelsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListAccessLevelsRpcTimeoutMultiplier() != null) {
      listAccessLevelsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListAccessLevelsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAccessLevelsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListAccessLevelsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListAccessLevelsMaxRpcTimeout() != null) {
      listAccessLevelsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListAccessLevelsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAccessLevelsMaxRpcTimeout set to "
                + this.clientProperties.getListAccessLevelsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListAccessLevelsTotalTimeout() != null) {
      listAccessLevelsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListAccessLevelsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListAccessLevelsTotalTimeout set to "
                + this.clientProperties.getListAccessLevelsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listAccessLevelsSettings()
        .setRetrySettings(listAccessLevelsRetrySettingBuilder.build());
    RetrySettings.Builder getAccessLevelRetrySettingBuilder =
        clientSettingsBuilder.getAccessLevelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetAccessLevelInitialRpcTimeout() != null) {
      getAccessLevelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetAccessLevelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAccessLevelInitialRpcTimeout set to "
                + this.clientProperties.getGetAccessLevelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAccessLevelRpcTimeoutMultiplier() != null) {
      getAccessLevelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetAccessLevelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAccessLevelRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetAccessLevelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetAccessLevelMaxRpcTimeout() != null) {
      getAccessLevelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetAccessLevelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAccessLevelMaxRpcTimeout set to "
                + this.clientProperties.getGetAccessLevelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAccessLevelTotalTimeout() != null) {
      getAccessLevelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetAccessLevelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAccessLevelTotalTimeout set to "
                + this.clientProperties.getGetAccessLevelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getAccessLevelSettings()
        .setRetrySettings(getAccessLevelRetrySettingBuilder.build());
    RetrySettings.Builder createAccessLevelRetrySettingBuilder =
        clientSettingsBuilder.createAccessLevelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateAccessLevelInitialRpcTimeout() != null) {
      createAccessLevelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateAccessLevelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAccessLevelInitialRpcTimeout set to "
                + this.clientProperties.getCreateAccessLevelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateAccessLevelRpcTimeoutMultiplier() != null) {
      createAccessLevelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateAccessLevelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAccessLevelRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateAccessLevelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateAccessLevelMaxRpcTimeout() != null) {
      createAccessLevelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateAccessLevelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAccessLevelMaxRpcTimeout set to "
                + this.clientProperties.getCreateAccessLevelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateAccessLevelTotalTimeout() != null) {
      createAccessLevelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateAccessLevelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateAccessLevelTotalTimeout set to "
                + this.clientProperties.getCreateAccessLevelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createAccessLevelSettings()
        .setRetrySettings(createAccessLevelRetrySettingBuilder.build());
    RetrySettings.Builder updateAccessLevelRetrySettingBuilder =
        clientSettingsBuilder.updateAccessLevelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateAccessLevelInitialRpcTimeout() != null) {
      updateAccessLevelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateAccessLevelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAccessLevelInitialRpcTimeout set to "
                + this.clientProperties.getUpdateAccessLevelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateAccessLevelRpcTimeoutMultiplier() != null) {
      updateAccessLevelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateAccessLevelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAccessLevelRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateAccessLevelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateAccessLevelMaxRpcTimeout() != null) {
      updateAccessLevelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateAccessLevelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAccessLevelMaxRpcTimeout set to "
                + this.clientProperties.getUpdateAccessLevelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateAccessLevelTotalTimeout() != null) {
      updateAccessLevelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateAccessLevelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAccessLevelTotalTimeout set to "
                + this.clientProperties.getUpdateAccessLevelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateAccessLevelSettings()
        .setRetrySettings(updateAccessLevelRetrySettingBuilder.build());
    RetrySettings.Builder deleteAccessLevelRetrySettingBuilder =
        clientSettingsBuilder.deleteAccessLevelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteAccessLevelInitialRpcTimeout() != null) {
      deleteAccessLevelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteAccessLevelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAccessLevelInitialRpcTimeout set to "
                + this.clientProperties.getDeleteAccessLevelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAccessLevelRpcTimeoutMultiplier() != null) {
      deleteAccessLevelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteAccessLevelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAccessLevelRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteAccessLevelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteAccessLevelMaxRpcTimeout() != null) {
      deleteAccessLevelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteAccessLevelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAccessLevelMaxRpcTimeout set to "
                + this.clientProperties.getDeleteAccessLevelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteAccessLevelTotalTimeout() != null) {
      deleteAccessLevelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteAccessLevelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteAccessLevelTotalTimeout set to "
                + this.clientProperties.getDeleteAccessLevelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteAccessLevelSettings()
        .setRetrySettings(deleteAccessLevelRetrySettingBuilder.build());
    RetrySettings.Builder replaceAccessLevelsRetrySettingBuilder =
        clientSettingsBuilder.replaceAccessLevelsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getReplaceAccessLevelsInitialRpcTimeout() != null) {
      replaceAccessLevelsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getReplaceAccessLevelsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceAccessLevelsInitialRpcTimeout set to "
                + this.clientProperties.getReplaceAccessLevelsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getReplaceAccessLevelsRpcTimeoutMultiplier() != null) {
      replaceAccessLevelsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getReplaceAccessLevelsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceAccessLevelsRpcTimeoutMultiplier set to "
                + this.clientProperties.getReplaceAccessLevelsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getReplaceAccessLevelsMaxRpcTimeout() != null) {
      replaceAccessLevelsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getReplaceAccessLevelsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceAccessLevelsMaxRpcTimeout set to "
                + this.clientProperties.getReplaceAccessLevelsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getReplaceAccessLevelsTotalTimeout() != null) {
      replaceAccessLevelsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getReplaceAccessLevelsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceAccessLevelsTotalTimeout set to "
                + this.clientProperties.getReplaceAccessLevelsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .replaceAccessLevelsSettings()
        .setRetrySettings(replaceAccessLevelsRetrySettingBuilder.build());
    RetrySettings.Builder listServicePerimetersRetrySettingBuilder =
        clientSettingsBuilder.listServicePerimetersSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListServicePerimetersInitialRpcTimeout() != null) {
      listServicePerimetersRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListServicePerimetersInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicePerimetersInitialRpcTimeout set to "
                + this.clientProperties.getListServicePerimetersInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListServicePerimetersRpcTimeoutMultiplier() != null) {
      listServicePerimetersRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListServicePerimetersRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicePerimetersRpcTimeoutMultiplier set to "
                + this.clientProperties.getListServicePerimetersRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListServicePerimetersMaxRpcTimeout() != null) {
      listServicePerimetersRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListServicePerimetersMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicePerimetersMaxRpcTimeout set to "
                + this.clientProperties.getListServicePerimetersMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListServicePerimetersTotalTimeout() != null) {
      listServicePerimetersRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListServicePerimetersTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicePerimetersTotalTimeout set to "
                + this.clientProperties.getListServicePerimetersTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listServicePerimetersSettings()
        .setRetrySettings(listServicePerimetersRetrySettingBuilder.build());
    RetrySettings.Builder getServicePerimeterRetrySettingBuilder =
        clientSettingsBuilder.getServicePerimeterSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetServicePerimeterInitialRpcTimeout() != null) {
      getServicePerimeterRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetServicePerimeterInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServicePerimeterInitialRpcTimeout set to "
                + this.clientProperties.getGetServicePerimeterInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetServicePerimeterRpcTimeoutMultiplier() != null) {
      getServicePerimeterRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetServicePerimeterRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServicePerimeterRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetServicePerimeterRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetServicePerimeterMaxRpcTimeout() != null) {
      getServicePerimeterRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetServicePerimeterMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServicePerimeterMaxRpcTimeout set to "
                + this.clientProperties.getGetServicePerimeterMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetServicePerimeterTotalTimeout() != null) {
      getServicePerimeterRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetServicePerimeterTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServicePerimeterTotalTimeout set to "
                + this.clientProperties.getGetServicePerimeterTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getServicePerimeterSettings()
        .setRetrySettings(getServicePerimeterRetrySettingBuilder.build());
    RetrySettings.Builder createServicePerimeterRetrySettingBuilder =
        clientSettingsBuilder.createServicePerimeterSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateServicePerimeterInitialRpcTimeout() != null) {
      createServicePerimeterRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateServicePerimeterInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServicePerimeterInitialRpcTimeout set to "
                + this.clientProperties.getCreateServicePerimeterInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateServicePerimeterRpcTimeoutMultiplier() != null) {
      createServicePerimeterRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateServicePerimeterRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServicePerimeterRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateServicePerimeterRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateServicePerimeterMaxRpcTimeout() != null) {
      createServicePerimeterRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateServicePerimeterMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServicePerimeterMaxRpcTimeout set to "
                + this.clientProperties.getCreateServicePerimeterMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateServicePerimeterTotalTimeout() != null) {
      createServicePerimeterRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateServicePerimeterTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServicePerimeterTotalTimeout set to "
                + this.clientProperties.getCreateServicePerimeterTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createServicePerimeterSettings()
        .setRetrySettings(createServicePerimeterRetrySettingBuilder.build());
    RetrySettings.Builder updateServicePerimeterRetrySettingBuilder =
        clientSettingsBuilder.updateServicePerimeterSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateServicePerimeterInitialRpcTimeout() != null) {
      updateServicePerimeterRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateServicePerimeterInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServicePerimeterInitialRpcTimeout set to "
                + this.clientProperties.getUpdateServicePerimeterInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateServicePerimeterRpcTimeoutMultiplier() != null) {
      updateServicePerimeterRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateServicePerimeterRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServicePerimeterRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateServicePerimeterRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateServicePerimeterMaxRpcTimeout() != null) {
      updateServicePerimeterRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateServicePerimeterMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServicePerimeterMaxRpcTimeout set to "
                + this.clientProperties.getUpdateServicePerimeterMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateServicePerimeterTotalTimeout() != null) {
      updateServicePerimeterRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateServicePerimeterTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServicePerimeterTotalTimeout set to "
                + this.clientProperties.getUpdateServicePerimeterTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateServicePerimeterSettings()
        .setRetrySettings(updateServicePerimeterRetrySettingBuilder.build());
    RetrySettings.Builder deleteServicePerimeterRetrySettingBuilder =
        clientSettingsBuilder.deleteServicePerimeterSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteServicePerimeterInitialRpcTimeout() != null) {
      deleteServicePerimeterRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteServicePerimeterInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServicePerimeterInitialRpcTimeout set to "
                + this.clientProperties.getDeleteServicePerimeterInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteServicePerimeterRpcTimeoutMultiplier() != null) {
      deleteServicePerimeterRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteServicePerimeterRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServicePerimeterRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteServicePerimeterRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteServicePerimeterMaxRpcTimeout() != null) {
      deleteServicePerimeterRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteServicePerimeterMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServicePerimeterMaxRpcTimeout set to "
                + this.clientProperties.getDeleteServicePerimeterMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteServicePerimeterTotalTimeout() != null) {
      deleteServicePerimeterRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteServicePerimeterTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServicePerimeterTotalTimeout set to "
                + this.clientProperties.getDeleteServicePerimeterTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteServicePerimeterSettings()
        .setRetrySettings(deleteServicePerimeterRetrySettingBuilder.build());
    RetrySettings.Builder replaceServicePerimetersRetrySettingBuilder =
        clientSettingsBuilder.replaceServicePerimetersSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getReplaceServicePerimetersInitialRpcTimeout() != null) {
      replaceServicePerimetersRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getReplaceServicePerimetersInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceServicePerimetersInitialRpcTimeout set to "
                + this.clientProperties.getReplaceServicePerimetersInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getReplaceServicePerimetersRpcTimeoutMultiplier() != null) {
      replaceServicePerimetersRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getReplaceServicePerimetersRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceServicePerimetersRpcTimeoutMultiplier set to "
                + this.clientProperties.getReplaceServicePerimetersRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getReplaceServicePerimetersMaxRpcTimeout() != null) {
      replaceServicePerimetersRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getReplaceServicePerimetersMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceServicePerimetersMaxRpcTimeout set to "
                + this.clientProperties.getReplaceServicePerimetersMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getReplaceServicePerimetersTotalTimeout() != null) {
      replaceServicePerimetersRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getReplaceServicePerimetersTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceServicePerimetersTotalTimeout set to "
                + this.clientProperties.getReplaceServicePerimetersTotalTimeout());
      }
    }
    clientSettingsBuilder
        .replaceServicePerimetersSettings()
        .setRetrySettings(replaceServicePerimetersRetrySettingBuilder.build());
    RetrySettings.Builder commitServicePerimetersRetrySettingBuilder =
        clientSettingsBuilder.commitServicePerimetersSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCommitServicePerimetersInitialRpcTimeout() != null) {
      commitServicePerimetersRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCommitServicePerimetersInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CommitServicePerimetersInitialRpcTimeout set to "
                + this.clientProperties.getCommitServicePerimetersInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCommitServicePerimetersRpcTimeoutMultiplier() != null) {
      commitServicePerimetersRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCommitServicePerimetersRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CommitServicePerimetersRpcTimeoutMultiplier set to "
                + this.clientProperties.getCommitServicePerimetersRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCommitServicePerimetersMaxRpcTimeout() != null) {
      commitServicePerimetersRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCommitServicePerimetersMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CommitServicePerimetersMaxRpcTimeout set to "
                + this.clientProperties.getCommitServicePerimetersMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCommitServicePerimetersTotalTimeout() != null) {
      commitServicePerimetersRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCommitServicePerimetersTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CommitServicePerimetersTotalTimeout set to "
                + this.clientProperties.getCommitServicePerimetersTotalTimeout());
      }
    }
    clientSettingsBuilder
        .commitServicePerimetersSettings()
        .setRetrySettings(commitServicePerimetersRetrySettingBuilder.build());
    RetrySettings.Builder listGcpUserAccessBindingsRetrySettingBuilder =
        clientSettingsBuilder.listGcpUserAccessBindingsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListGcpUserAccessBindingsInitialRpcTimeout() != null) {
      listGcpUserAccessBindingsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListGcpUserAccessBindingsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGcpUserAccessBindingsInitialRpcTimeout set to "
                + this.clientProperties.getListGcpUserAccessBindingsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListGcpUserAccessBindingsRpcTimeoutMultiplier() != null) {
      listGcpUserAccessBindingsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListGcpUserAccessBindingsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGcpUserAccessBindingsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListGcpUserAccessBindingsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListGcpUserAccessBindingsMaxRpcTimeout() != null) {
      listGcpUserAccessBindingsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListGcpUserAccessBindingsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGcpUserAccessBindingsMaxRpcTimeout set to "
                + this.clientProperties.getListGcpUserAccessBindingsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListGcpUserAccessBindingsTotalTimeout() != null) {
      listGcpUserAccessBindingsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListGcpUserAccessBindingsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGcpUserAccessBindingsTotalTimeout set to "
                + this.clientProperties.getListGcpUserAccessBindingsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listGcpUserAccessBindingsSettings()
        .setRetrySettings(listGcpUserAccessBindingsRetrySettingBuilder.build());
    RetrySettings.Builder getGcpUserAccessBindingRetrySettingBuilder =
        clientSettingsBuilder.getGcpUserAccessBindingSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetGcpUserAccessBindingInitialRpcTimeout() != null) {
      getGcpUserAccessBindingRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetGcpUserAccessBindingInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGcpUserAccessBindingInitialRpcTimeout set to "
                + this.clientProperties.getGetGcpUserAccessBindingInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetGcpUserAccessBindingRpcTimeoutMultiplier() != null) {
      getGcpUserAccessBindingRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetGcpUserAccessBindingRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGcpUserAccessBindingRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetGcpUserAccessBindingRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetGcpUserAccessBindingMaxRpcTimeout() != null) {
      getGcpUserAccessBindingRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetGcpUserAccessBindingMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGcpUserAccessBindingMaxRpcTimeout set to "
                + this.clientProperties.getGetGcpUserAccessBindingMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetGcpUserAccessBindingTotalTimeout() != null) {
      getGcpUserAccessBindingRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetGcpUserAccessBindingTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGcpUserAccessBindingTotalTimeout set to "
                + this.clientProperties.getGetGcpUserAccessBindingTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getGcpUserAccessBindingSettings()
        .setRetrySettings(getGcpUserAccessBindingRetrySettingBuilder.build());
    RetrySettings.Builder createGcpUserAccessBindingRetrySettingBuilder =
        clientSettingsBuilder.createGcpUserAccessBindingSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateGcpUserAccessBindingInitialRpcTimeout() != null) {
      createGcpUserAccessBindingRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateGcpUserAccessBindingInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateGcpUserAccessBindingInitialRpcTimeout set to "
                + this.clientProperties.getCreateGcpUserAccessBindingInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateGcpUserAccessBindingRpcTimeoutMultiplier() != null) {
      createGcpUserAccessBindingRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateGcpUserAccessBindingRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateGcpUserAccessBindingRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateGcpUserAccessBindingRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateGcpUserAccessBindingMaxRpcTimeout() != null) {
      createGcpUserAccessBindingRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateGcpUserAccessBindingMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateGcpUserAccessBindingMaxRpcTimeout set to "
                + this.clientProperties.getCreateGcpUserAccessBindingMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateGcpUserAccessBindingTotalTimeout() != null) {
      createGcpUserAccessBindingRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateGcpUserAccessBindingTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateGcpUserAccessBindingTotalTimeout set to "
                + this.clientProperties.getCreateGcpUserAccessBindingTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createGcpUserAccessBindingSettings()
        .setRetrySettings(createGcpUserAccessBindingRetrySettingBuilder.build());
    RetrySettings.Builder updateGcpUserAccessBindingRetrySettingBuilder =
        clientSettingsBuilder.updateGcpUserAccessBindingSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateGcpUserAccessBindingInitialRpcTimeout() != null) {
      updateGcpUserAccessBindingRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateGcpUserAccessBindingInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGcpUserAccessBindingInitialRpcTimeout set to "
                + this.clientProperties.getUpdateGcpUserAccessBindingInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateGcpUserAccessBindingRpcTimeoutMultiplier() != null) {
      updateGcpUserAccessBindingRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateGcpUserAccessBindingRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGcpUserAccessBindingRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateGcpUserAccessBindingRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateGcpUserAccessBindingMaxRpcTimeout() != null) {
      updateGcpUserAccessBindingRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateGcpUserAccessBindingMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGcpUserAccessBindingMaxRpcTimeout set to "
                + this.clientProperties.getUpdateGcpUserAccessBindingMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateGcpUserAccessBindingTotalTimeout() != null) {
      updateGcpUserAccessBindingRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateGcpUserAccessBindingTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGcpUserAccessBindingTotalTimeout set to "
                + this.clientProperties.getUpdateGcpUserAccessBindingTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateGcpUserAccessBindingSettings()
        .setRetrySettings(updateGcpUserAccessBindingRetrySettingBuilder.build());
    RetrySettings.Builder deleteGcpUserAccessBindingRetrySettingBuilder =
        clientSettingsBuilder.deleteGcpUserAccessBindingSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteGcpUserAccessBindingInitialRpcTimeout() != null) {
      deleteGcpUserAccessBindingRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteGcpUserAccessBindingInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGcpUserAccessBindingInitialRpcTimeout set to "
                + this.clientProperties.getDeleteGcpUserAccessBindingInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteGcpUserAccessBindingRpcTimeoutMultiplier() != null) {
      deleteGcpUserAccessBindingRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteGcpUserAccessBindingRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGcpUserAccessBindingRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteGcpUserAccessBindingRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteGcpUserAccessBindingMaxRpcTimeout() != null) {
      deleteGcpUserAccessBindingRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteGcpUserAccessBindingMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGcpUserAccessBindingMaxRpcTimeout set to "
                + this.clientProperties.getDeleteGcpUserAccessBindingMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteGcpUserAccessBindingTotalTimeout() != null) {
      deleteGcpUserAccessBindingRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteGcpUserAccessBindingTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGcpUserAccessBindingTotalTimeout set to "
                + this.clientProperties.getDeleteGcpUserAccessBindingTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteGcpUserAccessBindingSettings()
        .setRetrySettings(deleteGcpUserAccessBindingRetrySettingBuilder.build());
    return AccessContextManagerClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-access-context-manager";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
