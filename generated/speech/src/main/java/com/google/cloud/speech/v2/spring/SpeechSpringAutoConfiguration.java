/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.speech.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.speech.v2.SpeechClient;
import com.google.cloud.speech.v2.SpeechSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link SpeechClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(SpeechClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.speech.v2.spring.auto.speech.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({SpeechSpringProperties.class, GlobalProperties.class})
public class SpeechSpringAutoConfiguration {
  private final SpeechSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(SpeechSpringAutoConfiguration.class);

  protected SpeechSpringAutoConfiguration(
      SpeechSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider speechCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Speech-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultSpeechTransportChannelProvider() {
    return SpeechSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a SpeechClient bean configured to use the default credentials provider (obtained with
   * speechCredentials()) and its default transport channel provider
   * (defaultSpeechTransportChannelProvider()). It also configures the quota project ID if provided.
   * It will configure an executor provider in case there is more than one thread configured in the
   * client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in SpeechSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public SpeechClient speechClient(
      @Qualifier("speechCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultSpeechTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    SpeechSettings.Builder clientSettingsBuilder =
        SpeechSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          SpeechSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          SpeechSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createRecognizerRetrySettingBuilder =
        clientSettingsBuilder.createRecognizerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateRecognizerInitialRetryDelay() != null) {
      createRecognizerRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateRecognizerInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateRecognizerInitialRetryDelay set to "
                + this.clientProperties.getCreateRecognizerInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateRecognizerRetryDelayMultiplier() != null) {
      createRecognizerRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateRecognizerRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateRecognizerRetryDelayMultiplier set to "
                + this.clientProperties.getCreateRecognizerRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateRecognizerMaxRetryDelay() != null) {
      createRecognizerRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateRecognizerMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateRecognizerMaxRetryDelay set to "
                + this.clientProperties.getCreateRecognizerMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateRecognizerInitialRpcTimeout() != null) {
      createRecognizerRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateRecognizerInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateRecognizerInitialRpcTimeout set to "
                + this.clientProperties.getCreateRecognizerInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateRecognizerRpcTimeoutMultiplier() != null) {
      createRecognizerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateRecognizerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateRecognizerRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateRecognizerRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateRecognizerMaxRpcTimeout() != null) {
      createRecognizerRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateRecognizerMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateRecognizerMaxRpcTimeout set to "
                + this.clientProperties.getCreateRecognizerMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateRecognizerTotalTimeout() != null) {
      createRecognizerRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateRecognizerTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateRecognizerTotalTimeout set to "
                + this.clientProperties.getCreateRecognizerTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createRecognizerSettings()
        .setRetrySettings(createRecognizerRetrySettingBuilder.build());
    RetrySettings.Builder listRecognizersRetrySettingBuilder =
        clientSettingsBuilder.listRecognizersSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListRecognizersInitialRetryDelay() != null) {
      listRecognizersRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListRecognizersInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRecognizersInitialRetryDelay set to "
                + this.clientProperties.getListRecognizersInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListRecognizersRetryDelayMultiplier() != null) {
      listRecognizersRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListRecognizersRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRecognizersRetryDelayMultiplier set to "
                + this.clientProperties.getListRecognizersRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListRecognizersMaxRetryDelay() != null) {
      listRecognizersRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListRecognizersMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRecognizersMaxRetryDelay set to "
                + this.clientProperties.getListRecognizersMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListRecognizersInitialRpcTimeout() != null) {
      listRecognizersRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListRecognizersInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRecognizersInitialRpcTimeout set to "
                + this.clientProperties.getListRecognizersInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListRecognizersRpcTimeoutMultiplier() != null) {
      listRecognizersRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListRecognizersRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRecognizersRpcTimeoutMultiplier set to "
                + this.clientProperties.getListRecognizersRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListRecognizersMaxRpcTimeout() != null) {
      listRecognizersRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListRecognizersMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRecognizersMaxRpcTimeout set to "
                + this.clientProperties.getListRecognizersMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListRecognizersTotalTimeout() != null) {
      listRecognizersRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListRecognizersTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListRecognizersTotalTimeout set to "
                + this.clientProperties.getListRecognizersTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listRecognizersSettings()
        .setRetrySettings(listRecognizersRetrySettingBuilder.build());
    RetrySettings.Builder getRecognizerRetrySettingBuilder =
        clientSettingsBuilder.getRecognizerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetRecognizerInitialRetryDelay() != null) {
      getRecognizerRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetRecognizerInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRecognizerInitialRetryDelay set to "
                + this.clientProperties.getGetRecognizerInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetRecognizerRetryDelayMultiplier() != null) {
      getRecognizerRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetRecognizerRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRecognizerRetryDelayMultiplier set to "
                + this.clientProperties.getGetRecognizerRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetRecognizerMaxRetryDelay() != null) {
      getRecognizerRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetRecognizerMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRecognizerMaxRetryDelay set to "
                + this.clientProperties.getGetRecognizerMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetRecognizerInitialRpcTimeout() != null) {
      getRecognizerRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetRecognizerInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRecognizerInitialRpcTimeout set to "
                + this.clientProperties.getGetRecognizerInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetRecognizerRpcTimeoutMultiplier() != null) {
      getRecognizerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetRecognizerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRecognizerRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetRecognizerRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetRecognizerMaxRpcTimeout() != null) {
      getRecognizerRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetRecognizerMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRecognizerMaxRpcTimeout set to "
                + this.clientProperties.getGetRecognizerMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetRecognizerTotalTimeout() != null) {
      getRecognizerRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetRecognizerTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetRecognizerTotalTimeout set to "
                + this.clientProperties.getGetRecognizerTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getRecognizerSettings()
        .setRetrySettings(getRecognizerRetrySettingBuilder.build());
    RetrySettings.Builder updateRecognizerRetrySettingBuilder =
        clientSettingsBuilder.updateRecognizerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateRecognizerInitialRetryDelay() != null) {
      updateRecognizerRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateRecognizerInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateRecognizerInitialRetryDelay set to "
                + this.clientProperties.getUpdateRecognizerInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateRecognizerRetryDelayMultiplier() != null) {
      updateRecognizerRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateRecognizerRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateRecognizerRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateRecognizerRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateRecognizerMaxRetryDelay() != null) {
      updateRecognizerRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateRecognizerMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateRecognizerMaxRetryDelay set to "
                + this.clientProperties.getUpdateRecognizerMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateRecognizerInitialRpcTimeout() != null) {
      updateRecognizerRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateRecognizerInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateRecognizerInitialRpcTimeout set to "
                + this.clientProperties.getUpdateRecognizerInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateRecognizerRpcTimeoutMultiplier() != null) {
      updateRecognizerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateRecognizerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateRecognizerRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateRecognizerRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateRecognizerMaxRpcTimeout() != null) {
      updateRecognizerRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateRecognizerMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateRecognizerMaxRpcTimeout set to "
                + this.clientProperties.getUpdateRecognizerMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateRecognizerTotalTimeout() != null) {
      updateRecognizerRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateRecognizerTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateRecognizerTotalTimeout set to "
                + this.clientProperties.getUpdateRecognizerTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateRecognizerSettings()
        .setRetrySettings(updateRecognizerRetrySettingBuilder.build());
    RetrySettings.Builder deleteRecognizerRetrySettingBuilder =
        clientSettingsBuilder.deleteRecognizerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteRecognizerInitialRetryDelay() != null) {
      deleteRecognizerRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteRecognizerInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRecognizerInitialRetryDelay set to "
                + this.clientProperties.getDeleteRecognizerInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteRecognizerRetryDelayMultiplier() != null) {
      deleteRecognizerRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteRecognizerRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRecognizerRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteRecognizerRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteRecognizerMaxRetryDelay() != null) {
      deleteRecognizerRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteRecognizerMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRecognizerMaxRetryDelay set to "
                + this.clientProperties.getDeleteRecognizerMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteRecognizerInitialRpcTimeout() != null) {
      deleteRecognizerRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteRecognizerInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRecognizerInitialRpcTimeout set to "
                + this.clientProperties.getDeleteRecognizerInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteRecognizerRpcTimeoutMultiplier() != null) {
      deleteRecognizerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteRecognizerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRecognizerRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteRecognizerRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteRecognizerMaxRpcTimeout() != null) {
      deleteRecognizerRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteRecognizerMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRecognizerMaxRpcTimeout set to "
                + this.clientProperties.getDeleteRecognizerMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteRecognizerTotalTimeout() != null) {
      deleteRecognizerRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteRecognizerTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteRecognizerTotalTimeout set to "
                + this.clientProperties.getDeleteRecognizerTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteRecognizerSettings()
        .setRetrySettings(deleteRecognizerRetrySettingBuilder.build());
    RetrySettings.Builder undeleteRecognizerRetrySettingBuilder =
        clientSettingsBuilder.undeleteRecognizerSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUndeleteRecognizerInitialRetryDelay() != null) {
      undeleteRecognizerRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUndeleteRecognizerInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteRecognizerInitialRetryDelay set to "
                + this.clientProperties.getUndeleteRecognizerInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUndeleteRecognizerRetryDelayMultiplier() != null) {
      undeleteRecognizerRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUndeleteRecognizerRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteRecognizerRetryDelayMultiplier set to "
                + this.clientProperties.getUndeleteRecognizerRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUndeleteRecognizerMaxRetryDelay() != null) {
      undeleteRecognizerRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUndeleteRecognizerMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteRecognizerMaxRetryDelay set to "
                + this.clientProperties.getUndeleteRecognizerMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUndeleteRecognizerInitialRpcTimeout() != null) {
      undeleteRecognizerRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUndeleteRecognizerInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteRecognizerInitialRpcTimeout set to "
                + this.clientProperties.getUndeleteRecognizerInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUndeleteRecognizerRpcTimeoutMultiplier() != null) {
      undeleteRecognizerRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUndeleteRecognizerRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteRecognizerRpcTimeoutMultiplier set to "
                + this.clientProperties.getUndeleteRecognizerRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUndeleteRecognizerMaxRpcTimeout() != null) {
      undeleteRecognizerRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUndeleteRecognizerMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteRecognizerMaxRpcTimeout set to "
                + this.clientProperties.getUndeleteRecognizerMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUndeleteRecognizerTotalTimeout() != null) {
      undeleteRecognizerRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUndeleteRecognizerTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteRecognizerTotalTimeout set to "
                + this.clientProperties.getUndeleteRecognizerTotalTimeout());
      }
    }
    clientSettingsBuilder
        .undeleteRecognizerSettings()
        .setRetrySettings(undeleteRecognizerRetrySettingBuilder.build());
    RetrySettings.Builder recognizeRetrySettingBuilder =
        clientSettingsBuilder.recognizeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRecognizeInitialRetryDelay() != null) {
      recognizeRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getRecognizeInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RecognizeInitialRetryDelay set to "
                + this.clientProperties.getRecognizeInitialRetryDelay());
      }
    }
    if (this.clientProperties.getRecognizeRetryDelayMultiplier() != null) {
      recognizeRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getRecognizeRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RecognizeRetryDelayMultiplier set to "
                + this.clientProperties.getRecognizeRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getRecognizeMaxRetryDelay() != null) {
      recognizeRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getRecognizeMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RecognizeMaxRetryDelay set to " + this.clientProperties.getRecognizeMaxRetryDelay());
      }
    }
    if (this.clientProperties.getRecognizeInitialRpcTimeout() != null) {
      recognizeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRecognizeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RecognizeInitialRpcTimeout set to "
                + this.clientProperties.getRecognizeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRecognizeRpcTimeoutMultiplier() != null) {
      recognizeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRecognizeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RecognizeRpcTimeoutMultiplier set to "
                + this.clientProperties.getRecognizeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRecognizeMaxRpcTimeout() != null) {
      recognizeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRecognizeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RecognizeMaxRpcTimeout set to " + this.clientProperties.getRecognizeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRecognizeTotalTimeout() != null) {
      recognizeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRecognizeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RecognizeTotalTimeout set to " + this.clientProperties.getRecognizeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .recognizeSettings()
        .setRetrySettings(recognizeRetrySettingBuilder.build());
    RetrySettings.Builder streamingRecognizeRetrySettingBuilder =
        clientSettingsBuilder.streamingRecognizeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getStreamingRecognizeInitialRetryDelay() != null) {
      streamingRecognizeRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getStreamingRecognizeInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StreamingRecognizeInitialRetryDelay set to "
                + this.clientProperties.getStreamingRecognizeInitialRetryDelay());
      }
    }
    if (this.clientProperties.getStreamingRecognizeRetryDelayMultiplier() != null) {
      streamingRecognizeRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getStreamingRecognizeRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StreamingRecognizeRetryDelayMultiplier set to "
                + this.clientProperties.getStreamingRecognizeRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getStreamingRecognizeMaxRetryDelay() != null) {
      streamingRecognizeRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getStreamingRecognizeMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StreamingRecognizeMaxRetryDelay set to "
                + this.clientProperties.getStreamingRecognizeMaxRetryDelay());
      }
    }
    if (this.clientProperties.getStreamingRecognizeInitialRpcTimeout() != null) {
      streamingRecognizeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getStreamingRecognizeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StreamingRecognizeInitialRpcTimeout set to "
                + this.clientProperties.getStreamingRecognizeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getStreamingRecognizeRpcTimeoutMultiplier() != null) {
      streamingRecognizeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getStreamingRecognizeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StreamingRecognizeRpcTimeoutMultiplier set to "
                + this.clientProperties.getStreamingRecognizeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getStreamingRecognizeMaxRpcTimeout() != null) {
      streamingRecognizeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getStreamingRecognizeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StreamingRecognizeMaxRpcTimeout set to "
                + this.clientProperties.getStreamingRecognizeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getStreamingRecognizeTotalTimeout() != null) {
      streamingRecognizeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getStreamingRecognizeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StreamingRecognizeTotalTimeout set to "
                + this.clientProperties.getStreamingRecognizeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .streamingRecognizeSettings()
        .setRetrySettings(streamingRecognizeRetrySettingBuilder.build());
    RetrySettings.Builder batchRecognizeRetrySettingBuilder =
        clientSettingsBuilder.batchRecognizeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getBatchRecognizeInitialRetryDelay() != null) {
      batchRecognizeRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getBatchRecognizeInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchRecognizeInitialRetryDelay set to "
                + this.clientProperties.getBatchRecognizeInitialRetryDelay());
      }
    }
    if (this.clientProperties.getBatchRecognizeRetryDelayMultiplier() != null) {
      batchRecognizeRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getBatchRecognizeRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchRecognizeRetryDelayMultiplier set to "
                + this.clientProperties.getBatchRecognizeRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getBatchRecognizeMaxRetryDelay() != null) {
      batchRecognizeRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getBatchRecognizeMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchRecognizeMaxRetryDelay set to "
                + this.clientProperties.getBatchRecognizeMaxRetryDelay());
      }
    }
    if (this.clientProperties.getBatchRecognizeInitialRpcTimeout() != null) {
      batchRecognizeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getBatchRecognizeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchRecognizeInitialRpcTimeout set to "
                + this.clientProperties.getBatchRecognizeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getBatchRecognizeRpcTimeoutMultiplier() != null) {
      batchRecognizeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getBatchRecognizeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchRecognizeRpcTimeoutMultiplier set to "
                + this.clientProperties.getBatchRecognizeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getBatchRecognizeMaxRpcTimeout() != null) {
      batchRecognizeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getBatchRecognizeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchRecognizeMaxRpcTimeout set to "
                + this.clientProperties.getBatchRecognizeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getBatchRecognizeTotalTimeout() != null) {
      batchRecognizeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getBatchRecognizeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchRecognizeTotalTimeout set to "
                + this.clientProperties.getBatchRecognizeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .batchRecognizeSettings()
        .setRetrySettings(batchRecognizeRetrySettingBuilder.build());
    RetrySettings.Builder getConfigRetrySettingBuilder =
        clientSettingsBuilder.getConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetConfigInitialRetryDelay() != null) {
      getConfigRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetConfigInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConfigInitialRetryDelay set to "
                + this.clientProperties.getGetConfigInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetConfigRetryDelayMultiplier() != null) {
      getConfigRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetConfigRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConfigRetryDelayMultiplier set to "
                + this.clientProperties.getGetConfigRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetConfigMaxRetryDelay() != null) {
      getConfigRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetConfigMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConfigMaxRetryDelay set to " + this.clientProperties.getGetConfigMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetConfigInitialRpcTimeout() != null) {
      getConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConfigInitialRpcTimeout set to "
                + this.clientProperties.getGetConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetConfigRpcTimeoutMultiplier() != null) {
      getConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetConfigMaxRpcTimeout() != null) {
      getConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConfigMaxRpcTimeout set to " + this.clientProperties.getGetConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetConfigTotalTimeout() != null) {
      getConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetConfigTotalTimeout set to " + this.clientProperties.getGetConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getConfigSettings()
        .setRetrySettings(getConfigRetrySettingBuilder.build());
    RetrySettings.Builder updateConfigRetrySettingBuilder =
        clientSettingsBuilder.updateConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateConfigInitialRetryDelay() != null) {
      updateConfigRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateConfigInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConfigInitialRetryDelay set to "
                + this.clientProperties.getUpdateConfigInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateConfigRetryDelayMultiplier() != null) {
      updateConfigRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateConfigRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConfigRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateConfigRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateConfigMaxRetryDelay() != null) {
      updateConfigRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateConfigMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConfigMaxRetryDelay set to "
                + this.clientProperties.getUpdateConfigMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateConfigInitialRpcTimeout() != null) {
      updateConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConfigInitialRpcTimeout set to "
                + this.clientProperties.getUpdateConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateConfigRpcTimeoutMultiplier() != null) {
      updateConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateConfigMaxRpcTimeout() != null) {
      updateConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConfigMaxRpcTimeout set to "
                + this.clientProperties.getUpdateConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateConfigTotalTimeout() != null) {
      updateConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateConfigTotalTimeout set to "
                + this.clientProperties.getUpdateConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateConfigSettings()
        .setRetrySettings(updateConfigRetrySettingBuilder.build());
    RetrySettings.Builder createCustomClassRetrySettingBuilder =
        clientSettingsBuilder.createCustomClassSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateCustomClassInitialRetryDelay() != null) {
      createCustomClassRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateCustomClassInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCustomClassInitialRetryDelay set to "
                + this.clientProperties.getCreateCustomClassInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateCustomClassRetryDelayMultiplier() != null) {
      createCustomClassRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateCustomClassRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCustomClassRetryDelayMultiplier set to "
                + this.clientProperties.getCreateCustomClassRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateCustomClassMaxRetryDelay() != null) {
      createCustomClassRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateCustomClassMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCustomClassMaxRetryDelay set to "
                + this.clientProperties.getCreateCustomClassMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateCustomClassInitialRpcTimeout() != null) {
      createCustomClassRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateCustomClassInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCustomClassInitialRpcTimeout set to "
                + this.clientProperties.getCreateCustomClassInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateCustomClassRpcTimeoutMultiplier() != null) {
      createCustomClassRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateCustomClassRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCustomClassRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateCustomClassRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateCustomClassMaxRpcTimeout() != null) {
      createCustomClassRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateCustomClassMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCustomClassMaxRpcTimeout set to "
                + this.clientProperties.getCreateCustomClassMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateCustomClassTotalTimeout() != null) {
      createCustomClassRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateCustomClassTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateCustomClassTotalTimeout set to "
                + this.clientProperties.getCreateCustomClassTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createCustomClassSettings()
        .setRetrySettings(createCustomClassRetrySettingBuilder.build());
    RetrySettings.Builder listCustomClassesRetrySettingBuilder =
        clientSettingsBuilder.listCustomClassesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListCustomClassesInitialRetryDelay() != null) {
      listCustomClassesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListCustomClassesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCustomClassesInitialRetryDelay set to "
                + this.clientProperties.getListCustomClassesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListCustomClassesRetryDelayMultiplier() != null) {
      listCustomClassesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListCustomClassesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCustomClassesRetryDelayMultiplier set to "
                + this.clientProperties.getListCustomClassesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListCustomClassesMaxRetryDelay() != null) {
      listCustomClassesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListCustomClassesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCustomClassesMaxRetryDelay set to "
                + this.clientProperties.getListCustomClassesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListCustomClassesInitialRpcTimeout() != null) {
      listCustomClassesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListCustomClassesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCustomClassesInitialRpcTimeout set to "
                + this.clientProperties.getListCustomClassesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListCustomClassesRpcTimeoutMultiplier() != null) {
      listCustomClassesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListCustomClassesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCustomClassesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListCustomClassesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListCustomClassesMaxRpcTimeout() != null) {
      listCustomClassesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListCustomClassesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCustomClassesMaxRpcTimeout set to "
                + this.clientProperties.getListCustomClassesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListCustomClassesTotalTimeout() != null) {
      listCustomClassesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListCustomClassesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCustomClassesTotalTimeout set to "
                + this.clientProperties.getListCustomClassesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listCustomClassesSettings()
        .setRetrySettings(listCustomClassesRetrySettingBuilder.build());
    RetrySettings.Builder getCustomClassRetrySettingBuilder =
        clientSettingsBuilder.getCustomClassSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetCustomClassInitialRetryDelay() != null) {
      getCustomClassRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetCustomClassInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCustomClassInitialRetryDelay set to "
                + this.clientProperties.getGetCustomClassInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetCustomClassRetryDelayMultiplier() != null) {
      getCustomClassRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetCustomClassRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCustomClassRetryDelayMultiplier set to "
                + this.clientProperties.getGetCustomClassRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetCustomClassMaxRetryDelay() != null) {
      getCustomClassRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetCustomClassMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCustomClassMaxRetryDelay set to "
                + this.clientProperties.getGetCustomClassMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetCustomClassInitialRpcTimeout() != null) {
      getCustomClassRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetCustomClassInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCustomClassInitialRpcTimeout set to "
                + this.clientProperties.getGetCustomClassInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetCustomClassRpcTimeoutMultiplier() != null) {
      getCustomClassRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetCustomClassRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCustomClassRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetCustomClassRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetCustomClassMaxRpcTimeout() != null) {
      getCustomClassRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetCustomClassMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCustomClassMaxRpcTimeout set to "
                + this.clientProperties.getGetCustomClassMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetCustomClassTotalTimeout() != null) {
      getCustomClassRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetCustomClassTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCustomClassTotalTimeout set to "
                + this.clientProperties.getGetCustomClassTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getCustomClassSettings()
        .setRetrySettings(getCustomClassRetrySettingBuilder.build());
    RetrySettings.Builder updateCustomClassRetrySettingBuilder =
        clientSettingsBuilder.updateCustomClassSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateCustomClassInitialRetryDelay() != null) {
      updateCustomClassRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateCustomClassInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCustomClassInitialRetryDelay set to "
                + this.clientProperties.getUpdateCustomClassInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateCustomClassRetryDelayMultiplier() != null) {
      updateCustomClassRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateCustomClassRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCustomClassRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateCustomClassRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateCustomClassMaxRetryDelay() != null) {
      updateCustomClassRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateCustomClassMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCustomClassMaxRetryDelay set to "
                + this.clientProperties.getUpdateCustomClassMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateCustomClassInitialRpcTimeout() != null) {
      updateCustomClassRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateCustomClassInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCustomClassInitialRpcTimeout set to "
                + this.clientProperties.getUpdateCustomClassInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateCustomClassRpcTimeoutMultiplier() != null) {
      updateCustomClassRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateCustomClassRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCustomClassRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateCustomClassRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateCustomClassMaxRpcTimeout() != null) {
      updateCustomClassRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateCustomClassMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCustomClassMaxRpcTimeout set to "
                + this.clientProperties.getUpdateCustomClassMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateCustomClassTotalTimeout() != null) {
      updateCustomClassRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateCustomClassTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCustomClassTotalTimeout set to "
                + this.clientProperties.getUpdateCustomClassTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateCustomClassSettings()
        .setRetrySettings(updateCustomClassRetrySettingBuilder.build());
    RetrySettings.Builder deleteCustomClassRetrySettingBuilder =
        clientSettingsBuilder.deleteCustomClassSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteCustomClassInitialRetryDelay() != null) {
      deleteCustomClassRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteCustomClassInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCustomClassInitialRetryDelay set to "
                + this.clientProperties.getDeleteCustomClassInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteCustomClassRetryDelayMultiplier() != null) {
      deleteCustomClassRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteCustomClassRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCustomClassRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteCustomClassRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteCustomClassMaxRetryDelay() != null) {
      deleteCustomClassRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteCustomClassMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCustomClassMaxRetryDelay set to "
                + this.clientProperties.getDeleteCustomClassMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteCustomClassInitialRpcTimeout() != null) {
      deleteCustomClassRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteCustomClassInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCustomClassInitialRpcTimeout set to "
                + this.clientProperties.getDeleteCustomClassInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteCustomClassRpcTimeoutMultiplier() != null) {
      deleteCustomClassRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteCustomClassRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCustomClassRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteCustomClassRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteCustomClassMaxRpcTimeout() != null) {
      deleteCustomClassRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteCustomClassMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCustomClassMaxRpcTimeout set to "
                + this.clientProperties.getDeleteCustomClassMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteCustomClassTotalTimeout() != null) {
      deleteCustomClassRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteCustomClassTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteCustomClassTotalTimeout set to "
                + this.clientProperties.getDeleteCustomClassTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteCustomClassSettings()
        .setRetrySettings(deleteCustomClassRetrySettingBuilder.build());
    RetrySettings.Builder undeleteCustomClassRetrySettingBuilder =
        clientSettingsBuilder.undeleteCustomClassSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUndeleteCustomClassInitialRetryDelay() != null) {
      undeleteCustomClassRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUndeleteCustomClassInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteCustomClassInitialRetryDelay set to "
                + this.clientProperties.getUndeleteCustomClassInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUndeleteCustomClassRetryDelayMultiplier() != null) {
      undeleteCustomClassRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUndeleteCustomClassRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteCustomClassRetryDelayMultiplier set to "
                + this.clientProperties.getUndeleteCustomClassRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUndeleteCustomClassMaxRetryDelay() != null) {
      undeleteCustomClassRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUndeleteCustomClassMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteCustomClassMaxRetryDelay set to "
                + this.clientProperties.getUndeleteCustomClassMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUndeleteCustomClassInitialRpcTimeout() != null) {
      undeleteCustomClassRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUndeleteCustomClassInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteCustomClassInitialRpcTimeout set to "
                + this.clientProperties.getUndeleteCustomClassInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUndeleteCustomClassRpcTimeoutMultiplier() != null) {
      undeleteCustomClassRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUndeleteCustomClassRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteCustomClassRpcTimeoutMultiplier set to "
                + this.clientProperties.getUndeleteCustomClassRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUndeleteCustomClassMaxRpcTimeout() != null) {
      undeleteCustomClassRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUndeleteCustomClassMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteCustomClassMaxRpcTimeout set to "
                + this.clientProperties.getUndeleteCustomClassMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUndeleteCustomClassTotalTimeout() != null) {
      undeleteCustomClassRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUndeleteCustomClassTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeleteCustomClassTotalTimeout set to "
                + this.clientProperties.getUndeleteCustomClassTotalTimeout());
      }
    }
    clientSettingsBuilder
        .undeleteCustomClassSettings()
        .setRetrySettings(undeleteCustomClassRetrySettingBuilder.build());
    RetrySettings.Builder createPhraseSetRetrySettingBuilder =
        clientSettingsBuilder.createPhraseSetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreatePhraseSetInitialRetryDelay() != null) {
      createPhraseSetRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreatePhraseSetInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePhraseSetInitialRetryDelay set to "
                + this.clientProperties.getCreatePhraseSetInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreatePhraseSetRetryDelayMultiplier() != null) {
      createPhraseSetRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreatePhraseSetRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePhraseSetRetryDelayMultiplier set to "
                + this.clientProperties.getCreatePhraseSetRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreatePhraseSetMaxRetryDelay() != null) {
      createPhraseSetRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreatePhraseSetMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePhraseSetMaxRetryDelay set to "
                + this.clientProperties.getCreatePhraseSetMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreatePhraseSetInitialRpcTimeout() != null) {
      createPhraseSetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreatePhraseSetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePhraseSetInitialRpcTimeout set to "
                + this.clientProperties.getCreatePhraseSetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreatePhraseSetRpcTimeoutMultiplier() != null) {
      createPhraseSetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreatePhraseSetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePhraseSetRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreatePhraseSetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreatePhraseSetMaxRpcTimeout() != null) {
      createPhraseSetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreatePhraseSetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePhraseSetMaxRpcTimeout set to "
                + this.clientProperties.getCreatePhraseSetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreatePhraseSetTotalTimeout() != null) {
      createPhraseSetRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreatePhraseSetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreatePhraseSetTotalTimeout set to "
                + this.clientProperties.getCreatePhraseSetTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createPhraseSetSettings()
        .setRetrySettings(createPhraseSetRetrySettingBuilder.build());
    RetrySettings.Builder listPhraseSetsRetrySettingBuilder =
        clientSettingsBuilder.listPhraseSetsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListPhraseSetsInitialRetryDelay() != null) {
      listPhraseSetsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListPhraseSetsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPhraseSetsInitialRetryDelay set to "
                + this.clientProperties.getListPhraseSetsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListPhraseSetsRetryDelayMultiplier() != null) {
      listPhraseSetsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListPhraseSetsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPhraseSetsRetryDelayMultiplier set to "
                + this.clientProperties.getListPhraseSetsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListPhraseSetsMaxRetryDelay() != null) {
      listPhraseSetsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListPhraseSetsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPhraseSetsMaxRetryDelay set to "
                + this.clientProperties.getListPhraseSetsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListPhraseSetsInitialRpcTimeout() != null) {
      listPhraseSetsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListPhraseSetsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPhraseSetsInitialRpcTimeout set to "
                + this.clientProperties.getListPhraseSetsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListPhraseSetsRpcTimeoutMultiplier() != null) {
      listPhraseSetsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListPhraseSetsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPhraseSetsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListPhraseSetsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListPhraseSetsMaxRpcTimeout() != null) {
      listPhraseSetsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListPhraseSetsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPhraseSetsMaxRpcTimeout set to "
                + this.clientProperties.getListPhraseSetsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListPhraseSetsTotalTimeout() != null) {
      listPhraseSetsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListPhraseSetsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListPhraseSetsTotalTimeout set to "
                + this.clientProperties.getListPhraseSetsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listPhraseSetsSettings()
        .setRetrySettings(listPhraseSetsRetrySettingBuilder.build());
    RetrySettings.Builder getPhraseSetRetrySettingBuilder =
        clientSettingsBuilder.getPhraseSetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetPhraseSetInitialRetryDelay() != null) {
      getPhraseSetRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetPhraseSetInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPhraseSetInitialRetryDelay set to "
                + this.clientProperties.getGetPhraseSetInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetPhraseSetRetryDelayMultiplier() != null) {
      getPhraseSetRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetPhraseSetRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPhraseSetRetryDelayMultiplier set to "
                + this.clientProperties.getGetPhraseSetRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetPhraseSetMaxRetryDelay() != null) {
      getPhraseSetRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetPhraseSetMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPhraseSetMaxRetryDelay set to "
                + this.clientProperties.getGetPhraseSetMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetPhraseSetInitialRpcTimeout() != null) {
      getPhraseSetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetPhraseSetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPhraseSetInitialRpcTimeout set to "
                + this.clientProperties.getGetPhraseSetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetPhraseSetRpcTimeoutMultiplier() != null) {
      getPhraseSetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetPhraseSetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPhraseSetRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetPhraseSetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetPhraseSetMaxRpcTimeout() != null) {
      getPhraseSetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetPhraseSetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPhraseSetMaxRpcTimeout set to "
                + this.clientProperties.getGetPhraseSetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetPhraseSetTotalTimeout() != null) {
      getPhraseSetRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetPhraseSetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetPhraseSetTotalTimeout set to "
                + this.clientProperties.getGetPhraseSetTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getPhraseSetSettings()
        .setRetrySettings(getPhraseSetRetrySettingBuilder.build());
    RetrySettings.Builder updatePhraseSetRetrySettingBuilder =
        clientSettingsBuilder.updatePhraseSetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdatePhraseSetInitialRetryDelay() != null) {
      updatePhraseSetRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdatePhraseSetInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePhraseSetInitialRetryDelay set to "
                + this.clientProperties.getUpdatePhraseSetInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdatePhraseSetRetryDelayMultiplier() != null) {
      updatePhraseSetRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdatePhraseSetRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePhraseSetRetryDelayMultiplier set to "
                + this.clientProperties.getUpdatePhraseSetRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdatePhraseSetMaxRetryDelay() != null) {
      updatePhraseSetRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdatePhraseSetMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePhraseSetMaxRetryDelay set to "
                + this.clientProperties.getUpdatePhraseSetMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdatePhraseSetInitialRpcTimeout() != null) {
      updatePhraseSetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdatePhraseSetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePhraseSetInitialRpcTimeout set to "
                + this.clientProperties.getUpdatePhraseSetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdatePhraseSetRpcTimeoutMultiplier() != null) {
      updatePhraseSetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdatePhraseSetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePhraseSetRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdatePhraseSetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdatePhraseSetMaxRpcTimeout() != null) {
      updatePhraseSetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdatePhraseSetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePhraseSetMaxRpcTimeout set to "
                + this.clientProperties.getUpdatePhraseSetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdatePhraseSetTotalTimeout() != null) {
      updatePhraseSetRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdatePhraseSetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdatePhraseSetTotalTimeout set to "
                + this.clientProperties.getUpdatePhraseSetTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updatePhraseSetSettings()
        .setRetrySettings(updatePhraseSetRetrySettingBuilder.build());
    RetrySettings.Builder deletePhraseSetRetrySettingBuilder =
        clientSettingsBuilder.deletePhraseSetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeletePhraseSetInitialRetryDelay() != null) {
      deletePhraseSetRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeletePhraseSetInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePhraseSetInitialRetryDelay set to "
                + this.clientProperties.getDeletePhraseSetInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeletePhraseSetRetryDelayMultiplier() != null) {
      deletePhraseSetRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeletePhraseSetRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePhraseSetRetryDelayMultiplier set to "
                + this.clientProperties.getDeletePhraseSetRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeletePhraseSetMaxRetryDelay() != null) {
      deletePhraseSetRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeletePhraseSetMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePhraseSetMaxRetryDelay set to "
                + this.clientProperties.getDeletePhraseSetMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeletePhraseSetInitialRpcTimeout() != null) {
      deletePhraseSetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeletePhraseSetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePhraseSetInitialRpcTimeout set to "
                + this.clientProperties.getDeletePhraseSetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeletePhraseSetRpcTimeoutMultiplier() != null) {
      deletePhraseSetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeletePhraseSetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePhraseSetRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeletePhraseSetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeletePhraseSetMaxRpcTimeout() != null) {
      deletePhraseSetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeletePhraseSetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePhraseSetMaxRpcTimeout set to "
                + this.clientProperties.getDeletePhraseSetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeletePhraseSetTotalTimeout() != null) {
      deletePhraseSetRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeletePhraseSetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeletePhraseSetTotalTimeout set to "
                + this.clientProperties.getDeletePhraseSetTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deletePhraseSetSettings()
        .setRetrySettings(deletePhraseSetRetrySettingBuilder.build());
    RetrySettings.Builder undeletePhraseSetRetrySettingBuilder =
        clientSettingsBuilder.undeletePhraseSetSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUndeletePhraseSetInitialRetryDelay() != null) {
      undeletePhraseSetRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUndeletePhraseSetInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeletePhraseSetInitialRetryDelay set to "
                + this.clientProperties.getUndeletePhraseSetInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUndeletePhraseSetRetryDelayMultiplier() != null) {
      undeletePhraseSetRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUndeletePhraseSetRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeletePhraseSetRetryDelayMultiplier set to "
                + this.clientProperties.getUndeletePhraseSetRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUndeletePhraseSetMaxRetryDelay() != null) {
      undeletePhraseSetRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUndeletePhraseSetMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeletePhraseSetMaxRetryDelay set to "
                + this.clientProperties.getUndeletePhraseSetMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUndeletePhraseSetInitialRpcTimeout() != null) {
      undeletePhraseSetRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUndeletePhraseSetInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeletePhraseSetInitialRpcTimeout set to "
                + this.clientProperties.getUndeletePhraseSetInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUndeletePhraseSetRpcTimeoutMultiplier() != null) {
      undeletePhraseSetRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUndeletePhraseSetRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeletePhraseSetRpcTimeoutMultiplier set to "
                + this.clientProperties.getUndeletePhraseSetRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUndeletePhraseSetMaxRpcTimeout() != null) {
      undeletePhraseSetRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUndeletePhraseSetMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeletePhraseSetMaxRpcTimeout set to "
                + this.clientProperties.getUndeletePhraseSetMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUndeletePhraseSetTotalTimeout() != null) {
      undeletePhraseSetRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUndeletePhraseSetTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UndeletePhraseSetTotalTimeout set to "
                + this.clientProperties.getUndeletePhraseSetTotalTimeout());
      }
    }
    clientSettingsBuilder
        .undeletePhraseSetSettings()
        .setRetrySettings(undeletePhraseSetRetrySettingBuilder.build());
    return SpeechClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-speech";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
