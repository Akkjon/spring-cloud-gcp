/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.video.transcoder.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import com.google.cloud.video.transcoder.v1.TranscoderServiceClient;
import com.google.cloud.video.transcoder.v1.TranscoderServiceSettings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link TranscoderServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(TranscoderServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.video.transcoder.v1.spring.auto.transcoder-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({TranscoderServiceSpringProperties.class, GlobalProperties.class})
public class TranscoderServiceSpringAutoConfiguration {
  private final TranscoderServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(TranscoderServiceSpringAutoConfiguration.class);

  protected TranscoderServiceSpringAutoConfiguration(
      TranscoderServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider transcoderServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from TranscoderService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultTranscoderServiceTransportChannelProvider() {
    return TranscoderServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a TranscoderServiceClient bean configured to use the default credentials provider
   * (obtained with transcoderServiceCredentials()) and its default transport channel provider
   * (defaultTranscoderServiceTransportChannelProvider()). It also configures the quota project ID
   * if provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in TranscoderServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public TranscoderServiceClient transcoderServiceClient(
      @Qualifier("transcoderServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultTranscoderServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    TranscoderServiceSettings.Builder clientSettingsBuilder =
        TranscoderServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          TranscoderServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          TranscoderServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createJobRetrySettingBuilder =
        clientSettingsBuilder.createJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateJobInitialRpcTimeout() != null) {
      createJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateJobInitialRpcTimeout set to "
                + this.clientProperties.getCreateJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateJobRpcTimeoutMultiplier() != null) {
      createJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateJobMaxRpcTimeout() != null) {
      createJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateJobMaxRpcTimeout set to " + this.clientProperties.getCreateJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateJobTotalTimeout() != null) {
      createJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateJobTotalTimeout set to " + this.clientProperties.getCreateJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createJobSettings()
        .setRetrySettings(createJobRetrySettingBuilder.build());
    RetrySettings.Builder listJobsRetrySettingBuilder =
        clientSettingsBuilder.listJobsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListJobsInitialRpcTimeout() != null) {
      listJobsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListJobsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobsInitialRpcTimeout set to "
                + this.clientProperties.getListJobsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListJobsRpcTimeoutMultiplier() != null) {
      listJobsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListJobsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListJobsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListJobsMaxRpcTimeout() != null) {
      listJobsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListJobsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobsMaxRpcTimeout set to " + this.clientProperties.getListJobsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListJobsTotalTimeout() != null) {
      listJobsRetrySettingBuilder.setTotalTimeout(this.clientProperties.getListJobsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobsTotalTimeout set to " + this.clientProperties.getListJobsTotalTimeout());
      }
    }
    clientSettingsBuilder.listJobsSettings().setRetrySettings(listJobsRetrySettingBuilder.build());
    RetrySettings.Builder getJobRetrySettingBuilder =
        clientSettingsBuilder.getJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetJobInitialRpcTimeout() != null) {
      getJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobInitialRpcTimeout set to " + this.clientProperties.getGetJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetJobRpcTimeoutMultiplier() != null) {
      getJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetJobMaxRpcTimeout() != null) {
      getJobRetrySettingBuilder.setMaxRpcTimeout(this.clientProperties.getGetJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobMaxRpcTimeout set to " + this.clientProperties.getGetJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetJobTotalTimeout() != null) {
      getJobRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("GetJobTotalTimeout set to " + this.clientProperties.getGetJobTotalTimeout());
      }
    }
    clientSettingsBuilder.getJobSettings().setRetrySettings(getJobRetrySettingBuilder.build());
    RetrySettings.Builder deleteJobRetrySettingBuilder =
        clientSettingsBuilder.deleteJobSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteJobInitialRpcTimeout() != null) {
      deleteJobRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteJobInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobInitialRpcTimeout set to "
                + this.clientProperties.getDeleteJobInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteJobRpcTimeoutMultiplier() != null) {
      deleteJobRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteJobRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteJobRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteJobMaxRpcTimeout() != null) {
      deleteJobRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteJobMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobMaxRpcTimeout set to " + this.clientProperties.getDeleteJobMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteJobTotalTimeout() != null) {
      deleteJobRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteJobTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobTotalTimeout set to " + this.clientProperties.getDeleteJobTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteJobSettings()
        .setRetrySettings(deleteJobRetrySettingBuilder.build());
    RetrySettings.Builder createJobTemplateRetrySettingBuilder =
        clientSettingsBuilder.createJobTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateJobTemplateInitialRpcTimeout() != null) {
      createJobTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateJobTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateJobTemplateInitialRpcTimeout set to "
                + this.clientProperties.getCreateJobTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateJobTemplateRpcTimeoutMultiplier() != null) {
      createJobTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateJobTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateJobTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateJobTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateJobTemplateMaxRpcTimeout() != null) {
      createJobTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateJobTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateJobTemplateMaxRpcTimeout set to "
                + this.clientProperties.getCreateJobTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateJobTemplateTotalTimeout() != null) {
      createJobTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateJobTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateJobTemplateTotalTimeout set to "
                + this.clientProperties.getCreateJobTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createJobTemplateSettings()
        .setRetrySettings(createJobTemplateRetrySettingBuilder.build());
    RetrySettings.Builder listJobTemplatesRetrySettingBuilder =
        clientSettingsBuilder.listJobTemplatesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListJobTemplatesInitialRpcTimeout() != null) {
      listJobTemplatesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListJobTemplatesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobTemplatesInitialRpcTimeout set to "
                + this.clientProperties.getListJobTemplatesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListJobTemplatesRpcTimeoutMultiplier() != null) {
      listJobTemplatesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListJobTemplatesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobTemplatesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListJobTemplatesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListJobTemplatesMaxRpcTimeout() != null) {
      listJobTemplatesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListJobTemplatesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobTemplatesMaxRpcTimeout set to "
                + this.clientProperties.getListJobTemplatesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListJobTemplatesTotalTimeout() != null) {
      listJobTemplatesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListJobTemplatesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListJobTemplatesTotalTimeout set to "
                + this.clientProperties.getListJobTemplatesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listJobTemplatesSettings()
        .setRetrySettings(listJobTemplatesRetrySettingBuilder.build());
    RetrySettings.Builder getJobTemplateRetrySettingBuilder =
        clientSettingsBuilder.getJobTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetJobTemplateInitialRpcTimeout() != null) {
      getJobTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetJobTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobTemplateInitialRpcTimeout set to "
                + this.clientProperties.getGetJobTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetJobTemplateRpcTimeoutMultiplier() != null) {
      getJobTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetJobTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetJobTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetJobTemplateMaxRpcTimeout() != null) {
      getJobTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetJobTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobTemplateMaxRpcTimeout set to "
                + this.clientProperties.getGetJobTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetJobTemplateTotalTimeout() != null) {
      getJobTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetJobTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJobTemplateTotalTimeout set to "
                + this.clientProperties.getGetJobTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getJobTemplateSettings()
        .setRetrySettings(getJobTemplateRetrySettingBuilder.build());
    RetrySettings.Builder deleteJobTemplateRetrySettingBuilder =
        clientSettingsBuilder.deleteJobTemplateSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteJobTemplateInitialRpcTimeout() != null) {
      deleteJobTemplateRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteJobTemplateInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobTemplateInitialRpcTimeout set to "
                + this.clientProperties.getDeleteJobTemplateInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteJobTemplateRpcTimeoutMultiplier() != null) {
      deleteJobTemplateRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteJobTemplateRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobTemplateRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteJobTemplateRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteJobTemplateMaxRpcTimeout() != null) {
      deleteJobTemplateRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteJobTemplateMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobTemplateMaxRpcTimeout set to "
                + this.clientProperties.getDeleteJobTemplateMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteJobTemplateTotalTimeout() != null) {
      deleteJobTemplateRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteJobTemplateTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteJobTemplateTotalTimeout set to "
                + this.clientProperties.getDeleteJobTemplateTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteJobTemplateSettings()
        .setRetrySettings(deleteJobTemplateRetrySettingBuilder.build());
    return TranscoderServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-transcoder-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
