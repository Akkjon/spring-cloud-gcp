/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.container.v1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.container.v1.ClusterManagerClient;
import com.google.cloud.container.v1.ClusterManagerSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ClusterManagerClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ClusterManagerClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.container.v1.spring.auto.cluster-manager.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({ClusterManagerSpringProperties.class, GlobalProperties.class})
public class ClusterManagerSpringAutoConfiguration {
  private final ClusterManagerSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(ClusterManagerSpringAutoConfiguration.class);

  protected ClusterManagerSpringAutoConfiguration(
      ClusterManagerSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider clusterManagerCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from ClusterManager-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultClusterManagerTransportChannelProvider() {
    return ClusterManagerSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ClusterManagerClient bean configured to use the default credentials provider
   * (obtained with clusterManagerCredentials()) and its default transport channel provider
   * (defaultClusterManagerTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in ClusterManagerSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public ClusterManagerClient clusterManagerClient(
      @Qualifier("clusterManagerCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultClusterManagerTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ClusterManagerSettings.Builder clientSettingsBuilder =
        ClusterManagerSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ClusterManagerSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    RetrySettings.Builder listClustersRetrySettingBuilder =
        clientSettingsBuilder.listClustersSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListClustersInitialRetryDelay() != null) {
      listClustersRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListClustersInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListClustersInitialRetryDelay set to "
                + this.clientProperties.getListClustersInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListClustersRetryDelayMultiplier() != null) {
      listClustersRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListClustersRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListClustersRetryDelayMultiplier set to "
                + this.clientProperties.getListClustersRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListClustersMaxRetryDelay() != null) {
      listClustersRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListClustersMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListClustersMaxRetryDelay set to "
                + this.clientProperties.getListClustersMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListClustersInitialRpcTimeout() != null) {
      listClustersRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListClustersInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListClustersInitialRpcTimeout set to "
                + this.clientProperties.getListClustersInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListClustersRpcTimeoutMultiplier() != null) {
      listClustersRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListClustersRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListClustersRpcTimeoutMultiplier set to "
                + this.clientProperties.getListClustersRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListClustersMaxRpcTimeout() != null) {
      listClustersRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListClustersMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListClustersMaxRpcTimeout set to "
                + this.clientProperties.getListClustersMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListClustersTotalTimeout() != null) {
      listClustersRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListClustersTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListClustersTotalTimeout set to "
                + this.clientProperties.getListClustersTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listClustersSettings()
        .setRetrySettings(listClustersRetrySettingBuilder.build());
    RetrySettings.Builder getClusterRetrySettingBuilder =
        clientSettingsBuilder.getClusterSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetClusterInitialRetryDelay() != null) {
      getClusterRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetClusterInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetClusterInitialRetryDelay set to "
                + this.clientProperties.getGetClusterInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetClusterRetryDelayMultiplier() != null) {
      getClusterRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetClusterRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetClusterRetryDelayMultiplier set to "
                + this.clientProperties.getGetClusterRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetClusterMaxRetryDelay() != null) {
      getClusterRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetClusterMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetClusterMaxRetryDelay set to " + this.clientProperties.getGetClusterMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetClusterInitialRpcTimeout() != null) {
      getClusterRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetClusterInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetClusterInitialRpcTimeout set to "
                + this.clientProperties.getGetClusterInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetClusterRpcTimeoutMultiplier() != null) {
      getClusterRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetClusterRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetClusterRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetClusterRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetClusterMaxRpcTimeout() != null) {
      getClusterRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetClusterMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetClusterMaxRpcTimeout set to " + this.clientProperties.getGetClusterMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetClusterTotalTimeout() != null) {
      getClusterRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetClusterTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetClusterTotalTimeout set to " + this.clientProperties.getGetClusterTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getClusterSettings()
        .setRetrySettings(getClusterRetrySettingBuilder.build());
    RetrySettings.Builder createClusterRetrySettingBuilder =
        clientSettingsBuilder.createClusterSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateClusterInitialRpcTimeout() != null) {
      createClusterRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateClusterInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateClusterInitialRpcTimeout set to "
                + this.clientProperties.getCreateClusterInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateClusterRpcTimeoutMultiplier() != null) {
      createClusterRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateClusterRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateClusterRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateClusterRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateClusterMaxRpcTimeout() != null) {
      createClusterRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateClusterMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateClusterMaxRpcTimeout set to "
                + this.clientProperties.getCreateClusterMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateClusterTotalTimeout() != null) {
      createClusterRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateClusterTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateClusterTotalTimeout set to "
                + this.clientProperties.getCreateClusterTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createClusterSettings()
        .setRetrySettings(createClusterRetrySettingBuilder.build());
    RetrySettings.Builder updateClusterRetrySettingBuilder =
        clientSettingsBuilder.updateClusterSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateClusterInitialRpcTimeout() != null) {
      updateClusterRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateClusterInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateClusterInitialRpcTimeout set to "
                + this.clientProperties.getUpdateClusterInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateClusterRpcTimeoutMultiplier() != null) {
      updateClusterRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateClusterRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateClusterRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateClusterRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateClusterMaxRpcTimeout() != null) {
      updateClusterRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateClusterMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateClusterMaxRpcTimeout set to "
                + this.clientProperties.getUpdateClusterMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateClusterTotalTimeout() != null) {
      updateClusterRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateClusterTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateClusterTotalTimeout set to "
                + this.clientProperties.getUpdateClusterTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateClusterSettings()
        .setRetrySettings(updateClusterRetrySettingBuilder.build());
    RetrySettings.Builder updateNodePoolRetrySettingBuilder =
        clientSettingsBuilder.updateNodePoolSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateNodePoolInitialRpcTimeout() != null) {
      updateNodePoolRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateNodePoolInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateNodePoolInitialRpcTimeout set to "
                + this.clientProperties.getUpdateNodePoolInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateNodePoolRpcTimeoutMultiplier() != null) {
      updateNodePoolRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateNodePoolRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateNodePoolRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateNodePoolRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateNodePoolMaxRpcTimeout() != null) {
      updateNodePoolRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateNodePoolMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateNodePoolMaxRpcTimeout set to "
                + this.clientProperties.getUpdateNodePoolMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateNodePoolTotalTimeout() != null) {
      updateNodePoolRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateNodePoolTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateNodePoolTotalTimeout set to "
                + this.clientProperties.getUpdateNodePoolTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateNodePoolSettings()
        .setRetrySettings(updateNodePoolRetrySettingBuilder.build());
    RetrySettings.Builder setNodePoolAutoscalingRetrySettingBuilder =
        clientSettingsBuilder.setNodePoolAutoscalingSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetNodePoolAutoscalingInitialRpcTimeout() != null) {
      setNodePoolAutoscalingRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetNodePoolAutoscalingInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetNodePoolAutoscalingInitialRpcTimeout set to "
                + this.clientProperties.getSetNodePoolAutoscalingInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetNodePoolAutoscalingRpcTimeoutMultiplier() != null) {
      setNodePoolAutoscalingRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetNodePoolAutoscalingRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetNodePoolAutoscalingRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetNodePoolAutoscalingRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetNodePoolAutoscalingMaxRpcTimeout() != null) {
      setNodePoolAutoscalingRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetNodePoolAutoscalingMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetNodePoolAutoscalingMaxRpcTimeout set to "
                + this.clientProperties.getSetNodePoolAutoscalingMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetNodePoolAutoscalingTotalTimeout() != null) {
      setNodePoolAutoscalingRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetNodePoolAutoscalingTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetNodePoolAutoscalingTotalTimeout set to "
                + this.clientProperties.getSetNodePoolAutoscalingTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setNodePoolAutoscalingSettings()
        .setRetrySettings(setNodePoolAutoscalingRetrySettingBuilder.build());
    RetrySettings.Builder setLoggingServiceRetrySettingBuilder =
        clientSettingsBuilder.setLoggingServiceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetLoggingServiceInitialRpcTimeout() != null) {
      setLoggingServiceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetLoggingServiceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetLoggingServiceInitialRpcTimeout set to "
                + this.clientProperties.getSetLoggingServiceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetLoggingServiceRpcTimeoutMultiplier() != null) {
      setLoggingServiceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetLoggingServiceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetLoggingServiceRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetLoggingServiceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetLoggingServiceMaxRpcTimeout() != null) {
      setLoggingServiceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetLoggingServiceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetLoggingServiceMaxRpcTimeout set to "
                + this.clientProperties.getSetLoggingServiceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetLoggingServiceTotalTimeout() != null) {
      setLoggingServiceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetLoggingServiceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetLoggingServiceTotalTimeout set to "
                + this.clientProperties.getSetLoggingServiceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setLoggingServiceSettings()
        .setRetrySettings(setLoggingServiceRetrySettingBuilder.build());
    RetrySettings.Builder setMonitoringServiceRetrySettingBuilder =
        clientSettingsBuilder.setMonitoringServiceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetMonitoringServiceInitialRpcTimeout() != null) {
      setMonitoringServiceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetMonitoringServiceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetMonitoringServiceInitialRpcTimeout set to "
                + this.clientProperties.getSetMonitoringServiceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetMonitoringServiceRpcTimeoutMultiplier() != null) {
      setMonitoringServiceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetMonitoringServiceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetMonitoringServiceRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetMonitoringServiceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetMonitoringServiceMaxRpcTimeout() != null) {
      setMonitoringServiceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetMonitoringServiceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetMonitoringServiceMaxRpcTimeout set to "
                + this.clientProperties.getSetMonitoringServiceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetMonitoringServiceTotalTimeout() != null) {
      setMonitoringServiceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetMonitoringServiceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetMonitoringServiceTotalTimeout set to "
                + this.clientProperties.getSetMonitoringServiceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setMonitoringServiceSettings()
        .setRetrySettings(setMonitoringServiceRetrySettingBuilder.build());
    RetrySettings.Builder setAddonsConfigRetrySettingBuilder =
        clientSettingsBuilder.setAddonsConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetAddonsConfigInitialRpcTimeout() != null) {
      setAddonsConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetAddonsConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetAddonsConfigInitialRpcTimeout set to "
                + this.clientProperties.getSetAddonsConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetAddonsConfigRpcTimeoutMultiplier() != null) {
      setAddonsConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetAddonsConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetAddonsConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetAddonsConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetAddonsConfigMaxRpcTimeout() != null) {
      setAddonsConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetAddonsConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetAddonsConfigMaxRpcTimeout set to "
                + this.clientProperties.getSetAddonsConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetAddonsConfigTotalTimeout() != null) {
      setAddonsConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetAddonsConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetAddonsConfigTotalTimeout set to "
                + this.clientProperties.getSetAddonsConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setAddonsConfigSettings()
        .setRetrySettings(setAddonsConfigRetrySettingBuilder.build());
    RetrySettings.Builder setLocationsRetrySettingBuilder =
        clientSettingsBuilder.setLocationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetLocationsInitialRpcTimeout() != null) {
      setLocationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetLocationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetLocationsInitialRpcTimeout set to "
                + this.clientProperties.getSetLocationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetLocationsRpcTimeoutMultiplier() != null) {
      setLocationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetLocationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetLocationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetLocationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetLocationsMaxRpcTimeout() != null) {
      setLocationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetLocationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetLocationsMaxRpcTimeout set to "
                + this.clientProperties.getSetLocationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetLocationsTotalTimeout() != null) {
      setLocationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetLocationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetLocationsTotalTimeout set to "
                + this.clientProperties.getSetLocationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setLocationsSettings()
        .setRetrySettings(setLocationsRetrySettingBuilder.build());
    RetrySettings.Builder updateMasterRetrySettingBuilder =
        clientSettingsBuilder.updateMasterSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateMasterInitialRpcTimeout() != null) {
      updateMasterRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateMasterInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateMasterInitialRpcTimeout set to "
                + this.clientProperties.getUpdateMasterInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateMasterRpcTimeoutMultiplier() != null) {
      updateMasterRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateMasterRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateMasterRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateMasterRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateMasterMaxRpcTimeout() != null) {
      updateMasterRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateMasterMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateMasterMaxRpcTimeout set to "
                + this.clientProperties.getUpdateMasterMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateMasterTotalTimeout() != null) {
      updateMasterRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateMasterTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateMasterTotalTimeout set to "
                + this.clientProperties.getUpdateMasterTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateMasterSettings()
        .setRetrySettings(updateMasterRetrySettingBuilder.build());
    RetrySettings.Builder setMasterAuthRetrySettingBuilder =
        clientSettingsBuilder.setMasterAuthSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetMasterAuthInitialRpcTimeout() != null) {
      setMasterAuthRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetMasterAuthInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetMasterAuthInitialRpcTimeout set to "
                + this.clientProperties.getSetMasterAuthInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetMasterAuthRpcTimeoutMultiplier() != null) {
      setMasterAuthRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetMasterAuthRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetMasterAuthRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetMasterAuthRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetMasterAuthMaxRpcTimeout() != null) {
      setMasterAuthRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetMasterAuthMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetMasterAuthMaxRpcTimeout set to "
                + this.clientProperties.getSetMasterAuthMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetMasterAuthTotalTimeout() != null) {
      setMasterAuthRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetMasterAuthTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetMasterAuthTotalTimeout set to "
                + this.clientProperties.getSetMasterAuthTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setMasterAuthSettings()
        .setRetrySettings(setMasterAuthRetrySettingBuilder.build());
    RetrySettings.Builder deleteClusterRetrySettingBuilder =
        clientSettingsBuilder.deleteClusterSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteClusterInitialRetryDelay() != null) {
      deleteClusterRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteClusterInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteClusterInitialRetryDelay set to "
                + this.clientProperties.getDeleteClusterInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteClusterRetryDelayMultiplier() != null) {
      deleteClusterRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteClusterRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteClusterRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteClusterRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteClusterMaxRetryDelay() != null) {
      deleteClusterRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteClusterMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteClusterMaxRetryDelay set to "
                + this.clientProperties.getDeleteClusterMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteClusterInitialRpcTimeout() != null) {
      deleteClusterRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteClusterInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteClusterInitialRpcTimeout set to "
                + this.clientProperties.getDeleteClusterInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteClusterRpcTimeoutMultiplier() != null) {
      deleteClusterRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteClusterRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteClusterRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteClusterRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteClusterMaxRpcTimeout() != null) {
      deleteClusterRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteClusterMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteClusterMaxRpcTimeout set to "
                + this.clientProperties.getDeleteClusterMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteClusterTotalTimeout() != null) {
      deleteClusterRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteClusterTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteClusterTotalTimeout set to "
                + this.clientProperties.getDeleteClusterTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteClusterSettings()
        .setRetrySettings(deleteClusterRetrySettingBuilder.build());
    RetrySettings.Builder listOperationsRetrySettingBuilder =
        clientSettingsBuilder.listOperationsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListOperationsInitialRetryDelay() != null) {
      listOperationsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListOperationsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOperationsInitialRetryDelay set to "
                + this.clientProperties.getListOperationsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListOperationsRetryDelayMultiplier() != null) {
      listOperationsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListOperationsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOperationsRetryDelayMultiplier set to "
                + this.clientProperties.getListOperationsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListOperationsMaxRetryDelay() != null) {
      listOperationsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListOperationsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOperationsMaxRetryDelay set to "
                + this.clientProperties.getListOperationsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListOperationsInitialRpcTimeout() != null) {
      listOperationsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListOperationsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOperationsInitialRpcTimeout set to "
                + this.clientProperties.getListOperationsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListOperationsRpcTimeoutMultiplier() != null) {
      listOperationsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListOperationsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOperationsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListOperationsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListOperationsMaxRpcTimeout() != null) {
      listOperationsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListOperationsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOperationsMaxRpcTimeout set to "
                + this.clientProperties.getListOperationsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListOperationsTotalTimeout() != null) {
      listOperationsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListOperationsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListOperationsTotalTimeout set to "
                + this.clientProperties.getListOperationsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listOperationsSettings()
        .setRetrySettings(listOperationsRetrySettingBuilder.build());
    RetrySettings.Builder getOperationRetrySettingBuilder =
        clientSettingsBuilder.getOperationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetOperationInitialRetryDelay() != null) {
      getOperationRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetOperationInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOperationInitialRetryDelay set to "
                + this.clientProperties.getGetOperationInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetOperationRetryDelayMultiplier() != null) {
      getOperationRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetOperationRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOperationRetryDelayMultiplier set to "
                + this.clientProperties.getGetOperationRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetOperationMaxRetryDelay() != null) {
      getOperationRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetOperationMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOperationMaxRetryDelay set to "
                + this.clientProperties.getGetOperationMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetOperationInitialRpcTimeout() != null) {
      getOperationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetOperationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOperationInitialRpcTimeout set to "
                + this.clientProperties.getGetOperationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetOperationRpcTimeoutMultiplier() != null) {
      getOperationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetOperationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOperationRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetOperationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetOperationMaxRpcTimeout() != null) {
      getOperationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetOperationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOperationMaxRpcTimeout set to "
                + this.clientProperties.getGetOperationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetOperationTotalTimeout() != null) {
      getOperationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetOperationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetOperationTotalTimeout set to "
                + this.clientProperties.getGetOperationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getOperationSettings()
        .setRetrySettings(getOperationRetrySettingBuilder.build());
    RetrySettings.Builder cancelOperationRetrySettingBuilder =
        clientSettingsBuilder.cancelOperationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCancelOperationInitialRpcTimeout() != null) {
      cancelOperationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCancelOperationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelOperationInitialRpcTimeout set to "
                + this.clientProperties.getCancelOperationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCancelOperationRpcTimeoutMultiplier() != null) {
      cancelOperationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCancelOperationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelOperationRpcTimeoutMultiplier set to "
                + this.clientProperties.getCancelOperationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCancelOperationMaxRpcTimeout() != null) {
      cancelOperationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCancelOperationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelOperationMaxRpcTimeout set to "
                + this.clientProperties.getCancelOperationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCancelOperationTotalTimeout() != null) {
      cancelOperationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCancelOperationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CancelOperationTotalTimeout set to "
                + this.clientProperties.getCancelOperationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .cancelOperationSettings()
        .setRetrySettings(cancelOperationRetrySettingBuilder.build());
    RetrySettings.Builder getServerConfigRetrySettingBuilder =
        clientSettingsBuilder.getServerConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetServerConfigInitialRetryDelay() != null) {
      getServerConfigRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetServerConfigInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServerConfigInitialRetryDelay set to "
                + this.clientProperties.getGetServerConfigInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetServerConfigRetryDelayMultiplier() != null) {
      getServerConfigRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetServerConfigRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServerConfigRetryDelayMultiplier set to "
                + this.clientProperties.getGetServerConfigRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetServerConfigMaxRetryDelay() != null) {
      getServerConfigRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetServerConfigMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServerConfigMaxRetryDelay set to "
                + this.clientProperties.getGetServerConfigMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetServerConfigInitialRpcTimeout() != null) {
      getServerConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetServerConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServerConfigInitialRpcTimeout set to "
                + this.clientProperties.getGetServerConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetServerConfigRpcTimeoutMultiplier() != null) {
      getServerConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetServerConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServerConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetServerConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetServerConfigMaxRpcTimeout() != null) {
      getServerConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetServerConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServerConfigMaxRpcTimeout set to "
                + this.clientProperties.getGetServerConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetServerConfigTotalTimeout() != null) {
      getServerConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetServerConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServerConfigTotalTimeout set to "
                + this.clientProperties.getGetServerConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getServerConfigSettings()
        .setRetrySettings(getServerConfigRetrySettingBuilder.build());
    RetrySettings.Builder getJSONWebKeysRetrySettingBuilder =
        clientSettingsBuilder.getJSONWebKeysSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetJSONWebKeysRpcTimeoutMultiplier() != null) {
      getJSONWebKeysRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetJSONWebKeysRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetJSONWebKeysRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetJSONWebKeysRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .getJSONWebKeysSettings()
        .setRetrySettings(getJSONWebKeysRetrySettingBuilder.build());
    RetrySettings.Builder listNodePoolsRetrySettingBuilder =
        clientSettingsBuilder.listNodePoolsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListNodePoolsInitialRetryDelay() != null) {
      listNodePoolsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListNodePoolsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNodePoolsInitialRetryDelay set to "
                + this.clientProperties.getListNodePoolsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListNodePoolsRetryDelayMultiplier() != null) {
      listNodePoolsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListNodePoolsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNodePoolsRetryDelayMultiplier set to "
                + this.clientProperties.getListNodePoolsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListNodePoolsMaxRetryDelay() != null) {
      listNodePoolsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListNodePoolsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNodePoolsMaxRetryDelay set to "
                + this.clientProperties.getListNodePoolsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListNodePoolsInitialRpcTimeout() != null) {
      listNodePoolsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListNodePoolsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNodePoolsInitialRpcTimeout set to "
                + this.clientProperties.getListNodePoolsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListNodePoolsRpcTimeoutMultiplier() != null) {
      listNodePoolsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListNodePoolsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNodePoolsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListNodePoolsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListNodePoolsMaxRpcTimeout() != null) {
      listNodePoolsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListNodePoolsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNodePoolsMaxRpcTimeout set to "
                + this.clientProperties.getListNodePoolsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListNodePoolsTotalTimeout() != null) {
      listNodePoolsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListNodePoolsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNodePoolsTotalTimeout set to "
                + this.clientProperties.getListNodePoolsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listNodePoolsSettings()
        .setRetrySettings(listNodePoolsRetrySettingBuilder.build());
    RetrySettings.Builder getNodePoolRetrySettingBuilder =
        clientSettingsBuilder.getNodePoolSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetNodePoolInitialRetryDelay() != null) {
      getNodePoolRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetNodePoolInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNodePoolInitialRetryDelay set to "
                + this.clientProperties.getGetNodePoolInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetNodePoolRetryDelayMultiplier() != null) {
      getNodePoolRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetNodePoolRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNodePoolRetryDelayMultiplier set to "
                + this.clientProperties.getGetNodePoolRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetNodePoolMaxRetryDelay() != null) {
      getNodePoolRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetNodePoolMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNodePoolMaxRetryDelay set to "
                + this.clientProperties.getGetNodePoolMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetNodePoolInitialRpcTimeout() != null) {
      getNodePoolRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetNodePoolInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNodePoolInitialRpcTimeout set to "
                + this.clientProperties.getGetNodePoolInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetNodePoolRpcTimeoutMultiplier() != null) {
      getNodePoolRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetNodePoolRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNodePoolRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetNodePoolRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetNodePoolMaxRpcTimeout() != null) {
      getNodePoolRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetNodePoolMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNodePoolMaxRpcTimeout set to "
                + this.clientProperties.getGetNodePoolMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetNodePoolTotalTimeout() != null) {
      getNodePoolRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetNodePoolTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNodePoolTotalTimeout set to " + this.clientProperties.getGetNodePoolTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getNodePoolSettings()
        .setRetrySettings(getNodePoolRetrySettingBuilder.build());
    RetrySettings.Builder createNodePoolRetrySettingBuilder =
        clientSettingsBuilder.createNodePoolSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateNodePoolInitialRpcTimeout() != null) {
      createNodePoolRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateNodePoolInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNodePoolInitialRpcTimeout set to "
                + this.clientProperties.getCreateNodePoolInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateNodePoolRpcTimeoutMultiplier() != null) {
      createNodePoolRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateNodePoolRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNodePoolRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateNodePoolRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateNodePoolMaxRpcTimeout() != null) {
      createNodePoolRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateNodePoolMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNodePoolMaxRpcTimeout set to "
                + this.clientProperties.getCreateNodePoolMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateNodePoolTotalTimeout() != null) {
      createNodePoolRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateNodePoolTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNodePoolTotalTimeout set to "
                + this.clientProperties.getCreateNodePoolTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createNodePoolSettings()
        .setRetrySettings(createNodePoolRetrySettingBuilder.build());
    RetrySettings.Builder deleteNodePoolRetrySettingBuilder =
        clientSettingsBuilder.deleteNodePoolSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteNodePoolInitialRetryDelay() != null) {
      deleteNodePoolRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteNodePoolInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNodePoolInitialRetryDelay set to "
                + this.clientProperties.getDeleteNodePoolInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteNodePoolRetryDelayMultiplier() != null) {
      deleteNodePoolRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteNodePoolRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNodePoolRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteNodePoolRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteNodePoolMaxRetryDelay() != null) {
      deleteNodePoolRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteNodePoolMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNodePoolMaxRetryDelay set to "
                + this.clientProperties.getDeleteNodePoolMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteNodePoolInitialRpcTimeout() != null) {
      deleteNodePoolRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteNodePoolInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNodePoolInitialRpcTimeout set to "
                + this.clientProperties.getDeleteNodePoolInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteNodePoolRpcTimeoutMultiplier() != null) {
      deleteNodePoolRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteNodePoolRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNodePoolRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteNodePoolRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteNodePoolMaxRpcTimeout() != null) {
      deleteNodePoolRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteNodePoolMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNodePoolMaxRpcTimeout set to "
                + this.clientProperties.getDeleteNodePoolMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteNodePoolTotalTimeout() != null) {
      deleteNodePoolRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteNodePoolTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNodePoolTotalTimeout set to "
                + this.clientProperties.getDeleteNodePoolTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteNodePoolSettings()
        .setRetrySettings(deleteNodePoolRetrySettingBuilder.build());
    RetrySettings.Builder completeNodePoolUpgradeRetrySettingBuilder =
        clientSettingsBuilder.completeNodePoolUpgradeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCompleteNodePoolUpgradeRpcTimeoutMultiplier() != null) {
      completeNodePoolUpgradeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCompleteNodePoolUpgradeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CompleteNodePoolUpgradeRpcTimeoutMultiplier set to "
                + this.clientProperties.getCompleteNodePoolUpgradeRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .completeNodePoolUpgradeSettings()
        .setRetrySettings(completeNodePoolUpgradeRetrySettingBuilder.build());
    RetrySettings.Builder rollbackNodePoolUpgradeRetrySettingBuilder =
        clientSettingsBuilder.rollbackNodePoolUpgradeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRollbackNodePoolUpgradeInitialRpcTimeout() != null) {
      rollbackNodePoolUpgradeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRollbackNodePoolUpgradeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RollbackNodePoolUpgradeInitialRpcTimeout set to "
                + this.clientProperties.getRollbackNodePoolUpgradeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRollbackNodePoolUpgradeRpcTimeoutMultiplier() != null) {
      rollbackNodePoolUpgradeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRollbackNodePoolUpgradeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RollbackNodePoolUpgradeRpcTimeoutMultiplier set to "
                + this.clientProperties.getRollbackNodePoolUpgradeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRollbackNodePoolUpgradeMaxRpcTimeout() != null) {
      rollbackNodePoolUpgradeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRollbackNodePoolUpgradeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RollbackNodePoolUpgradeMaxRpcTimeout set to "
                + this.clientProperties.getRollbackNodePoolUpgradeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRollbackNodePoolUpgradeTotalTimeout() != null) {
      rollbackNodePoolUpgradeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRollbackNodePoolUpgradeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RollbackNodePoolUpgradeTotalTimeout set to "
                + this.clientProperties.getRollbackNodePoolUpgradeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .rollbackNodePoolUpgradeSettings()
        .setRetrySettings(rollbackNodePoolUpgradeRetrySettingBuilder.build());
    RetrySettings.Builder setNodePoolManagementRetrySettingBuilder =
        clientSettingsBuilder.setNodePoolManagementSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetNodePoolManagementInitialRpcTimeout() != null) {
      setNodePoolManagementRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetNodePoolManagementInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetNodePoolManagementInitialRpcTimeout set to "
                + this.clientProperties.getSetNodePoolManagementInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetNodePoolManagementRpcTimeoutMultiplier() != null) {
      setNodePoolManagementRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetNodePoolManagementRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetNodePoolManagementRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetNodePoolManagementRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetNodePoolManagementMaxRpcTimeout() != null) {
      setNodePoolManagementRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetNodePoolManagementMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetNodePoolManagementMaxRpcTimeout set to "
                + this.clientProperties.getSetNodePoolManagementMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetNodePoolManagementTotalTimeout() != null) {
      setNodePoolManagementRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetNodePoolManagementTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetNodePoolManagementTotalTimeout set to "
                + this.clientProperties.getSetNodePoolManagementTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setNodePoolManagementSettings()
        .setRetrySettings(setNodePoolManagementRetrySettingBuilder.build());
    RetrySettings.Builder setLabelsRetrySettingBuilder =
        clientSettingsBuilder.setLabelsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetLabelsInitialRpcTimeout() != null) {
      setLabelsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetLabelsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetLabelsInitialRpcTimeout set to "
                + this.clientProperties.getSetLabelsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetLabelsRpcTimeoutMultiplier() != null) {
      setLabelsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetLabelsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetLabelsRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetLabelsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetLabelsMaxRpcTimeout() != null) {
      setLabelsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetLabelsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetLabelsMaxRpcTimeout set to " + this.clientProperties.getSetLabelsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetLabelsTotalTimeout() != null) {
      setLabelsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetLabelsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetLabelsTotalTimeout set to " + this.clientProperties.getSetLabelsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setLabelsSettings()
        .setRetrySettings(setLabelsRetrySettingBuilder.build());
    RetrySettings.Builder setLegacyAbacRetrySettingBuilder =
        clientSettingsBuilder.setLegacyAbacSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetLegacyAbacInitialRpcTimeout() != null) {
      setLegacyAbacRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetLegacyAbacInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetLegacyAbacInitialRpcTimeout set to "
                + this.clientProperties.getSetLegacyAbacInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetLegacyAbacRpcTimeoutMultiplier() != null) {
      setLegacyAbacRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetLegacyAbacRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetLegacyAbacRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetLegacyAbacRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetLegacyAbacMaxRpcTimeout() != null) {
      setLegacyAbacRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetLegacyAbacMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetLegacyAbacMaxRpcTimeout set to "
                + this.clientProperties.getSetLegacyAbacMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetLegacyAbacTotalTimeout() != null) {
      setLegacyAbacRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetLegacyAbacTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetLegacyAbacTotalTimeout set to "
                + this.clientProperties.getSetLegacyAbacTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setLegacyAbacSettings()
        .setRetrySettings(setLegacyAbacRetrySettingBuilder.build());
    RetrySettings.Builder startIPRotationRetrySettingBuilder =
        clientSettingsBuilder.startIPRotationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getStartIPRotationInitialRpcTimeout() != null) {
      startIPRotationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getStartIPRotationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartIPRotationInitialRpcTimeout set to "
                + this.clientProperties.getStartIPRotationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getStartIPRotationRpcTimeoutMultiplier() != null) {
      startIPRotationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getStartIPRotationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartIPRotationRpcTimeoutMultiplier set to "
                + this.clientProperties.getStartIPRotationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getStartIPRotationMaxRpcTimeout() != null) {
      startIPRotationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getStartIPRotationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartIPRotationMaxRpcTimeout set to "
                + this.clientProperties.getStartIPRotationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getStartIPRotationTotalTimeout() != null) {
      startIPRotationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getStartIPRotationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "StartIPRotationTotalTimeout set to "
                + this.clientProperties.getStartIPRotationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .startIPRotationSettings()
        .setRetrySettings(startIPRotationRetrySettingBuilder.build());
    RetrySettings.Builder completeIPRotationRetrySettingBuilder =
        clientSettingsBuilder.completeIPRotationSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCompleteIPRotationInitialRpcTimeout() != null) {
      completeIPRotationRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCompleteIPRotationInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CompleteIPRotationInitialRpcTimeout set to "
                + this.clientProperties.getCompleteIPRotationInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCompleteIPRotationRpcTimeoutMultiplier() != null) {
      completeIPRotationRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCompleteIPRotationRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CompleteIPRotationRpcTimeoutMultiplier set to "
                + this.clientProperties.getCompleteIPRotationRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCompleteIPRotationMaxRpcTimeout() != null) {
      completeIPRotationRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCompleteIPRotationMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CompleteIPRotationMaxRpcTimeout set to "
                + this.clientProperties.getCompleteIPRotationMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCompleteIPRotationTotalTimeout() != null) {
      completeIPRotationRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCompleteIPRotationTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CompleteIPRotationTotalTimeout set to "
                + this.clientProperties.getCompleteIPRotationTotalTimeout());
      }
    }
    clientSettingsBuilder
        .completeIPRotationSettings()
        .setRetrySettings(completeIPRotationRetrySettingBuilder.build());
    RetrySettings.Builder setNodePoolSizeRetrySettingBuilder =
        clientSettingsBuilder.setNodePoolSizeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetNodePoolSizeInitialRpcTimeout() != null) {
      setNodePoolSizeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetNodePoolSizeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetNodePoolSizeInitialRpcTimeout set to "
                + this.clientProperties.getSetNodePoolSizeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetNodePoolSizeRpcTimeoutMultiplier() != null) {
      setNodePoolSizeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetNodePoolSizeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetNodePoolSizeRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetNodePoolSizeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetNodePoolSizeMaxRpcTimeout() != null) {
      setNodePoolSizeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetNodePoolSizeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetNodePoolSizeMaxRpcTimeout set to "
                + this.clientProperties.getSetNodePoolSizeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetNodePoolSizeTotalTimeout() != null) {
      setNodePoolSizeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetNodePoolSizeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetNodePoolSizeTotalTimeout set to "
                + this.clientProperties.getSetNodePoolSizeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setNodePoolSizeSettings()
        .setRetrySettings(setNodePoolSizeRetrySettingBuilder.build());
    RetrySettings.Builder setNetworkPolicyRetrySettingBuilder =
        clientSettingsBuilder.setNetworkPolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetNetworkPolicyInitialRpcTimeout() != null) {
      setNetworkPolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetNetworkPolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetNetworkPolicyInitialRpcTimeout set to "
                + this.clientProperties.getSetNetworkPolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetNetworkPolicyRpcTimeoutMultiplier() != null) {
      setNetworkPolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetNetworkPolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetNetworkPolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetNetworkPolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetNetworkPolicyMaxRpcTimeout() != null) {
      setNetworkPolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetNetworkPolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetNetworkPolicyMaxRpcTimeout set to "
                + this.clientProperties.getSetNetworkPolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetNetworkPolicyTotalTimeout() != null) {
      setNetworkPolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetNetworkPolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetNetworkPolicyTotalTimeout set to "
                + this.clientProperties.getSetNetworkPolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setNetworkPolicySettings()
        .setRetrySettings(setNetworkPolicyRetrySettingBuilder.build());
    RetrySettings.Builder setMaintenancePolicyRetrySettingBuilder =
        clientSettingsBuilder.setMaintenancePolicySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetMaintenancePolicyInitialRpcTimeout() != null) {
      setMaintenancePolicyRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetMaintenancePolicyInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetMaintenancePolicyInitialRpcTimeout set to "
                + this.clientProperties.getSetMaintenancePolicyInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetMaintenancePolicyRpcTimeoutMultiplier() != null) {
      setMaintenancePolicyRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetMaintenancePolicyRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetMaintenancePolicyRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetMaintenancePolicyRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetMaintenancePolicyMaxRpcTimeout() != null) {
      setMaintenancePolicyRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetMaintenancePolicyMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetMaintenancePolicyMaxRpcTimeout set to "
                + this.clientProperties.getSetMaintenancePolicyMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetMaintenancePolicyTotalTimeout() != null) {
      setMaintenancePolicyRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetMaintenancePolicyTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetMaintenancePolicyTotalTimeout set to "
                + this.clientProperties.getSetMaintenancePolicyTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setMaintenancePolicySettings()
        .setRetrySettings(setMaintenancePolicyRetrySettingBuilder.build());
    RetrySettings.Builder listUsableSubnetworksRetrySettingBuilder =
        clientSettingsBuilder.listUsableSubnetworksSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListUsableSubnetworksRpcTimeoutMultiplier() != null) {
      listUsableSubnetworksRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListUsableSubnetworksRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListUsableSubnetworksRpcTimeoutMultiplier set to "
                + this.clientProperties.getListUsableSubnetworksRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .listUsableSubnetworksSettings()
        .setRetrySettings(listUsableSubnetworksRetrySettingBuilder.build());
    return ClusterManagerClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-cluster-manager";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
