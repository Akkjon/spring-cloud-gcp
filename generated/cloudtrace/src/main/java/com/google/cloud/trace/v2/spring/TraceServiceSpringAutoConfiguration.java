/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.trace.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import com.google.cloud.trace.v2.TraceServiceClient;
import com.google.cloud.trace.v2.TraceServiceSettings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link TraceServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(TraceServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.trace.v2.spring.auto.trace-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({TraceServiceSpringProperties.class, GlobalProperties.class})
public class TraceServiceSpringAutoConfiguration {
  private final TraceServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(TraceServiceSpringAutoConfiguration.class);

  protected TraceServiceSpringAutoConfiguration(
      TraceServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider traceServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from TraceService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultTraceServiceTransportChannelProvider() {
    return TraceServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a TraceServiceClient bean configured to use the default credentials provider (obtained
   * with traceServiceCredentials()) and its default transport channel provider
   * (defaultTraceServiceTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in TraceServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public TraceServiceClient traceServiceClient(
      @Qualifier("traceServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultTraceServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    TraceServiceSettings.Builder clientSettingsBuilder =
        TraceServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          TraceServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          TraceServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder batchWriteSpansRetrySettingBuilder =
        clientSettingsBuilder.batchWriteSpansSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getBatchWriteSpansInitialRpcTimeout() != null) {
      batchWriteSpansRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getBatchWriteSpansInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchWriteSpansInitialRpcTimeout set to "
                + this.clientProperties.getBatchWriteSpansInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getBatchWriteSpansRpcTimeoutMultiplier() != null) {
      batchWriteSpansRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getBatchWriteSpansRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchWriteSpansRpcTimeoutMultiplier set to "
                + this.clientProperties.getBatchWriteSpansRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getBatchWriteSpansMaxRpcTimeout() != null) {
      batchWriteSpansRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getBatchWriteSpansMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchWriteSpansMaxRpcTimeout set to "
                + this.clientProperties.getBatchWriteSpansMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getBatchWriteSpansTotalTimeout() != null) {
      batchWriteSpansRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getBatchWriteSpansTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "BatchWriteSpansTotalTimeout set to "
                + this.clientProperties.getBatchWriteSpansTotalTimeout());
      }
    }
    clientSettingsBuilder
        .batchWriteSpansSettings()
        .setRetrySettings(batchWriteSpansRetrySettingBuilder.build());
    RetrySettings.Builder createSpanRetrySettingBuilder =
        clientSettingsBuilder.createSpanSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateSpanInitialRetryDelay() != null) {
      createSpanRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateSpanInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateSpanInitialRetryDelay set to "
                + this.clientProperties.getCreateSpanInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateSpanRetryDelayMultiplier() != null) {
      createSpanRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateSpanRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateSpanRetryDelayMultiplier set to "
                + this.clientProperties.getCreateSpanRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateSpanMaxRetryDelay() != null) {
      createSpanRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateSpanMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateSpanMaxRetryDelay set to " + this.clientProperties.getCreateSpanMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateSpanInitialRpcTimeout() != null) {
      createSpanRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateSpanInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateSpanInitialRpcTimeout set to "
                + this.clientProperties.getCreateSpanInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateSpanRpcTimeoutMultiplier() != null) {
      createSpanRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateSpanRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateSpanRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateSpanRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateSpanMaxRpcTimeout() != null) {
      createSpanRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateSpanMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateSpanMaxRpcTimeout set to " + this.clientProperties.getCreateSpanMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateSpanTotalTimeout() != null) {
      createSpanRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateSpanTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateSpanTotalTimeout set to " + this.clientProperties.getCreateSpanTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createSpanSettings()
        .setRetrySettings(createSpanRetrySettingBuilder.build());
    return TraceServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-trace-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
