/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.trace.v2.spring;

import com.google.api.core.BetaApi;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.CredentialsSupplier;
import javax.annotation.Generated;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.NestedConfigurationProperty;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/** Provides default property values for TraceService client bean */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@ConfigurationProperties("com.google.cloud.trace.v2.spring.auto.trace-service")
public class TraceServiceSpringProperties implements CredentialsSupplier {
  @NestedConfigurationProperty
  private final Credentials credentials =
      new Credentials(
          "https://www.googleapis.com/auth/cloud-platform",
          "https://www.googleapis.com/auth/trace.append");

  private String quotaProjectId;
  private Integer executorThreadCount;
  private boolean useRest = false;
  private Duration batchWriteSpansInitialRpcTimeout;
  private Double batchWriteSpansRpcTimeoutMultiplier;
  private Duration batchWriteSpansMaxRpcTimeout;
  private Duration batchWriteSpansTotalTimeout;
  private Duration createSpanInitialRetryDelay;
  private Double createSpanRetryDelayMultiplier;
  private Duration createSpanMaxRetryDelay;
  private Duration createSpanInitialRpcTimeout;
  private Double createSpanRpcTimeoutMultiplier;
  private Duration createSpanMaxRpcTimeout;
  private Duration createSpanTotalTimeout;

  @Override
  public Credentials getCredentials() {
    return this.credentials;
  }

  public String getQuotaProjectId() {
    return this.quotaProjectId;
  }

  public void setQuotaProjectId(String quotaProjectId) {
    this.quotaProjectId = quotaProjectId;
  }

  public boolean getUseRest() {
    return this.useRest;
  }

  public void setUseRest(boolean useRest) {
    this.useRest = useRest;
  }

  public Integer getExecutorThreadCount() {
    return this.executorThreadCount;
  }

  public void setExecutorThreadCount(Integer executorThreadCount) {
    this.executorThreadCount = executorThreadCount;
  }

  public Duration getBatchWriteSpansInitialRpcTimeout() {
    return this.batchWriteSpansInitialRpcTimeout;
  }

  public void setBatchWriteSpansInitialRpcTimeout(
      java.time.Duration batchWriteSpansInitialRpcTimeout) {
    this.batchWriteSpansInitialRpcTimeout =
        Duration.parse(batchWriteSpansInitialRpcTimeout.toString());
  }

  public Double getBatchWriteSpansRpcTimeoutMultiplier() {
    return this.batchWriteSpansRpcTimeoutMultiplier;
  }

  public void setBatchWriteSpansRpcTimeoutMultiplier(Double batchWriteSpansRpcTimeoutMultiplier) {
    this.batchWriteSpansRpcTimeoutMultiplier = batchWriteSpansRpcTimeoutMultiplier;
  }

  public Duration getBatchWriteSpansMaxRpcTimeout() {
    return this.batchWriteSpansMaxRpcTimeout;
  }

  public void setBatchWriteSpansMaxRpcTimeout(java.time.Duration batchWriteSpansMaxRpcTimeout) {
    this.batchWriteSpansMaxRpcTimeout = Duration.parse(batchWriteSpansMaxRpcTimeout.toString());
  }

  public Duration getBatchWriteSpansTotalTimeout() {
    return this.batchWriteSpansTotalTimeout;
  }

  public void setBatchWriteSpansTotalTimeout(java.time.Duration batchWriteSpansTotalTimeout) {
    this.batchWriteSpansTotalTimeout = Duration.parse(batchWriteSpansTotalTimeout.toString());
  }

  public Duration getCreateSpanInitialRetryDelay() {
    return this.createSpanInitialRetryDelay;
  }

  public void setCreateSpanInitialRetryDelay(java.time.Duration createSpanInitialRetryDelay) {
    this.createSpanInitialRetryDelay = Duration.parse(createSpanInitialRetryDelay.toString());
  }

  public Double getCreateSpanRetryDelayMultiplier() {
    return this.createSpanRetryDelayMultiplier;
  }

  public void setCreateSpanRetryDelayMultiplier(Double createSpanRetryDelayMultiplier) {
    this.createSpanRetryDelayMultiplier = createSpanRetryDelayMultiplier;
  }

  public Duration getCreateSpanMaxRetryDelay() {
    return this.createSpanMaxRetryDelay;
  }

  public void setCreateSpanMaxRetryDelay(java.time.Duration createSpanMaxRetryDelay) {
    this.createSpanMaxRetryDelay = Duration.parse(createSpanMaxRetryDelay.toString());
  }

  public Duration getCreateSpanInitialRpcTimeout() {
    return this.createSpanInitialRpcTimeout;
  }

  public void setCreateSpanInitialRpcTimeout(java.time.Duration createSpanInitialRpcTimeout) {
    this.createSpanInitialRpcTimeout = Duration.parse(createSpanInitialRpcTimeout.toString());
  }

  public Double getCreateSpanRpcTimeoutMultiplier() {
    return this.createSpanRpcTimeoutMultiplier;
  }

  public void setCreateSpanRpcTimeoutMultiplier(Double createSpanRpcTimeoutMultiplier) {
    this.createSpanRpcTimeoutMultiplier = createSpanRpcTimeoutMultiplier;
  }

  public Duration getCreateSpanMaxRpcTimeout() {
    return this.createSpanMaxRpcTimeout;
  }

  public void setCreateSpanMaxRpcTimeout(java.time.Duration createSpanMaxRpcTimeout) {
    this.createSpanMaxRpcTimeout = Duration.parse(createSpanMaxRpcTimeout.toString());
  }

  public Duration getCreateSpanTotalTimeout() {
    return this.createSpanTotalTimeout;
  }

  public void setCreateSpanTotalTimeout(java.time.Duration createSpanTotalTimeout) {
    this.createSpanTotalTimeout = Duration.parse(createSpanTotalTimeout.toString());
  }
}
