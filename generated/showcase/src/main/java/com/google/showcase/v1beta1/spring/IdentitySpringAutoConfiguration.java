/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.showcase.v1beta1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.showcase.v1beta1.IdentityClient;
import com.google.showcase.v1beta1.IdentitySettings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link IdentityClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by gapic-generator-java")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(IdentityClient.class)
@ConditionalOnProperty(
    value = "com.google.showcase.v1beta1.spring.auto.identity.enabled",
    matchIfMissing = false)
@EnableConfigurationProperties(IdentitySpringProperties.class)
public class IdentitySpringAutoConfiguration {
  private final IdentitySpringProperties clientProperties;
  private static final Log LOGGER = LogFactory.getLog(IdentitySpringAutoConfig.class);

  protected IdentitySpringAutoConfiguration(IdentitySpringProperties clientProperties) {
    this.clientProperties = clientProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider identityCredentials() throws IOException {
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultIdentityTransportChannelProvider() {
    return IdentitySettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a IdentityClient bean configured to use the default credentials provider (obtained
   * with identityCredentials()) and its default transport channel provider
   * (defaultIdentityTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in IdentityProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public IdentityClient identityClient(
      @Qualifier("identityCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultIdentityTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    IdentitySettings.Builder clientSettingsBuilder =
        IdentitySettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      LOGGER.info(
          "Quota project id set to "
              + this.clientProperties.getQuotaProjectId()
              + ", this overrides project id from credentials.");
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          IdentitySettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      LOGGER.info(
          "Background executor thread count is " + this.clientProperties.getExecutorThreadCount());
    }
    RetrySettings.Builder createUserRetrySettingBuilder =
        clientSettingsBuilder.createUserSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateUserRpcTimeoutMultiplier() != null) {
      createUserRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateUserRpcTimeoutMultiplier());
      LOGGER.info(
          "CreateUserRpcTimeoutMultiplier set to "
              + this.clientProperties.getCreateUserRpcTimeoutMultiplier());
    }
    clientSettingsBuilder
        .createUserSettings()
        .setRetrySettings(createUserRetrySettingBuilder.build());
    RetrySettings.Builder getUserRetrySettingBuilder =
        clientSettingsBuilder.getUserSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetUserInitialRetryDelay() != null) {
      getUserRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetUserInitialRetryDelay());
      LOGGER.info(
          "GetUserInitialRetryDelay set to " + this.clientProperties.getGetUserInitialRetryDelay());
    }
    if (this.clientProperties.getGetUserRetryDelayMultiplier() != null) {
      getUserRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetUserRetryDelayMultiplier());
      LOGGER.info(
          "GetUserRetryDelayMultiplier set to "
              + this.clientProperties.getGetUserRetryDelayMultiplier());
    }
    if (this.clientProperties.getGetUserMaxRetryDelay() != null) {
      getUserRetrySettingBuilder.setMaxRetryDelay(this.clientProperties.getGetUserMaxRetryDelay());
      LOGGER.info("GetUserMaxRetryDelay set to " + this.clientProperties.getGetUserMaxRetryDelay());
    }
    if (this.clientProperties.getGetUserInitialRpcTimeout() != null) {
      getUserRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetUserInitialRpcTimeout());
      LOGGER.info(
          "GetUserInitialRpcTimeout set to " + this.clientProperties.getGetUserInitialRpcTimeout());
    }
    if (this.clientProperties.getGetUserRpcTimeoutMultiplier() != null) {
      getUserRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetUserRpcTimeoutMultiplier());
      LOGGER.info(
          "GetUserRpcTimeoutMultiplier set to "
              + this.clientProperties.getGetUserRpcTimeoutMultiplier());
    }
    if (this.clientProperties.getGetUserMaxRpcTimeout() != null) {
      getUserRetrySettingBuilder.setMaxRpcTimeout(this.clientProperties.getGetUserMaxRpcTimeout());
      LOGGER.info("GetUserMaxRpcTimeout set to " + this.clientProperties.getGetUserMaxRpcTimeout());
    }
    if (this.clientProperties.getGetUserTotalTimeout() != null) {
      getUserRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetUserTotalTimeout());
      LOGGER.info("GetUserTotalTimeout set to " + this.clientProperties.getGetUserTotalTimeout());
    }
    clientSettingsBuilder.getUserSettings().setRetrySettings(getUserRetrySettingBuilder.build());
    RetrySettings.Builder updateUserRetrySettingBuilder =
        clientSettingsBuilder.updateUserSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateUserRpcTimeoutMultiplier() != null) {
      updateUserRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateUserRpcTimeoutMultiplier());
      LOGGER.info(
          "UpdateUserRpcTimeoutMultiplier set to "
              + this.clientProperties.getUpdateUserRpcTimeoutMultiplier());
    }
    clientSettingsBuilder
        .updateUserSettings()
        .setRetrySettings(updateUserRetrySettingBuilder.build());
    RetrySettings.Builder deleteUserRetrySettingBuilder =
        clientSettingsBuilder.deleteUserSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteUserRpcTimeoutMultiplier() != null) {
      deleteUserRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteUserRpcTimeoutMultiplier());
      LOGGER.info(
          "DeleteUserRpcTimeoutMultiplier set to "
              + this.clientProperties.getDeleteUserRpcTimeoutMultiplier());
    }
    clientSettingsBuilder
        .deleteUserSettings()
        .setRetrySettings(deleteUserRetrySettingBuilder.build());
    RetrySettings.Builder listUsersRetrySettingBuilder =
        clientSettingsBuilder.listUsersSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListUsersInitialRetryDelay() != null) {
      listUsersRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListUsersInitialRetryDelay());
      LOGGER.info(
          "ListUsersInitialRetryDelay set to "
              + this.clientProperties.getListUsersInitialRetryDelay());
    }
    if (this.clientProperties.getListUsersRetryDelayMultiplier() != null) {
      listUsersRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListUsersRetryDelayMultiplier());
      LOGGER.info(
          "ListUsersRetryDelayMultiplier set to "
              + this.clientProperties.getListUsersRetryDelayMultiplier());
    }
    if (this.clientProperties.getListUsersMaxRetryDelay() != null) {
      listUsersRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListUsersMaxRetryDelay());
      LOGGER.info(
          "ListUsersMaxRetryDelay set to " + this.clientProperties.getListUsersMaxRetryDelay());
    }
    if (this.clientProperties.getListUsersInitialRpcTimeout() != null) {
      listUsersRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListUsersInitialRpcTimeout());
      LOGGER.info(
          "ListUsersInitialRpcTimeout set to "
              + this.clientProperties.getListUsersInitialRpcTimeout());
    }
    if (this.clientProperties.getListUsersRpcTimeoutMultiplier() != null) {
      listUsersRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListUsersRpcTimeoutMultiplier());
      LOGGER.info(
          "ListUsersRpcTimeoutMultiplier set to "
              + this.clientProperties.getListUsersRpcTimeoutMultiplier());
    }
    if (this.clientProperties.getListUsersMaxRpcTimeout() != null) {
      listUsersRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListUsersMaxRpcTimeout());
      LOGGER.info(
          "ListUsersMaxRpcTimeout set to " + this.clientProperties.getListUsersMaxRpcTimeout());
    }
    if (this.clientProperties.getListUsersTotalTimeout() != null) {
      listUsersRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListUsersTotalTimeout());
      LOGGER.info(
          "ListUsersTotalTimeout set to " + this.clientProperties.getListUsersTotalTimeout());
    }
    clientSettingsBuilder
        .listUsersSettings()
        .setRetrySettings(listUsersRetrySettingBuilder.build());
    return IdentityClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-identity";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
