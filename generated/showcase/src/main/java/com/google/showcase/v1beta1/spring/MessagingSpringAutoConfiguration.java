/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.showcase.v1beta1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.showcase.v1beta1.MessagingClient;
import com.google.showcase.v1beta1.MessagingSettings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link MessagingClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by gapic-generator-java")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(MessagingClient.class)
@ConditionalOnProperty(
    value = "com.google.showcase.v1beta1.spring.auto.messaging.enabled",
    matchIfMissing = false)
@EnableConfigurationProperties(MessagingSpringProperties.class)
public class MessagingSpringAutoConfiguration {
  private final MessagingSpringProperties clientProperties;
  private static final Log LOGGER = LogFactory.getLog(MessagingSpringAutoConfig.class);

  protected MessagingSpringAutoConfiguration(MessagingSpringProperties clientProperties) {
    this.clientProperties = clientProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider messagingCredentials() throws IOException {
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultMessagingTransportChannelProvider() {
    return MessagingSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a MessagingClient bean configured to use the default credentials provider (obtained
   * with messagingCredentials()) and its default transport channel provider
   * (defaultMessagingTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in MessagingProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public MessagingClient messagingClient(
      @Qualifier("messagingCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultMessagingTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    MessagingSettings.Builder clientSettingsBuilder =
        MessagingSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      LOGGER.info(
          "Quota project id set to "
              + this.clientProperties.getQuotaProjectId()
              + ", this overrides project id from credentials.");
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          MessagingSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      LOGGER.info(
          "Background executor thread count is " + this.clientProperties.getExecutorThreadCount());
    }
    RetrySettings.Builder createRoomRetrySettingBuilder =
        clientSettingsBuilder.createRoomSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateRoomInitialRpcTimeout() != null) {
      createRoomRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateRoomInitialRpcTimeout());
      LOGGER.info(
          "CreateRoomInitialRpcTimeout set to "
              + this.clientProperties.getCreateRoomInitialRpcTimeout());
    }
    if (this.clientProperties.getCreateRoomRpcTimeoutMultiplier() != null) {
      createRoomRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateRoomRpcTimeoutMultiplier());
      LOGGER.info(
          "CreateRoomRpcTimeoutMultiplier set to "
              + this.clientProperties.getCreateRoomRpcTimeoutMultiplier());
    }
    if (this.clientProperties.getCreateRoomMaxRpcTimeout() != null) {
      createRoomRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateRoomMaxRpcTimeout());
      LOGGER.info(
          "CreateRoomMaxRpcTimeout set to " + this.clientProperties.getCreateRoomMaxRpcTimeout());
    }
    if (this.clientProperties.getCreateRoomTotalTimeout() != null) {
      createRoomRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateRoomTotalTimeout());
      LOGGER.info(
          "CreateRoomTotalTimeout set to " + this.clientProperties.getCreateRoomTotalTimeout());
    }
    clientSettingsBuilder
        .createRoomSettings()
        .setRetrySettings(createRoomRetrySettingBuilder.build());
    RetrySettings.Builder getRoomRetrySettingBuilder =
        clientSettingsBuilder.getRoomSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetRoomInitialRetryDelay() != null) {
      getRoomRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetRoomInitialRetryDelay());
      LOGGER.info(
          "GetRoomInitialRetryDelay set to " + this.clientProperties.getGetRoomInitialRetryDelay());
    }
    if (this.clientProperties.getGetRoomRetryDelayMultiplier() != null) {
      getRoomRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetRoomRetryDelayMultiplier());
      LOGGER.info(
          "GetRoomRetryDelayMultiplier set to "
              + this.clientProperties.getGetRoomRetryDelayMultiplier());
    }
    if (this.clientProperties.getGetRoomMaxRetryDelay() != null) {
      getRoomRetrySettingBuilder.setMaxRetryDelay(this.clientProperties.getGetRoomMaxRetryDelay());
      LOGGER.info("GetRoomMaxRetryDelay set to " + this.clientProperties.getGetRoomMaxRetryDelay());
    }
    if (this.clientProperties.getGetRoomInitialRpcTimeout() != null) {
      getRoomRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetRoomInitialRpcTimeout());
      LOGGER.info(
          "GetRoomInitialRpcTimeout set to " + this.clientProperties.getGetRoomInitialRpcTimeout());
    }
    if (this.clientProperties.getGetRoomRpcTimeoutMultiplier() != null) {
      getRoomRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetRoomRpcTimeoutMultiplier());
      LOGGER.info(
          "GetRoomRpcTimeoutMultiplier set to "
              + this.clientProperties.getGetRoomRpcTimeoutMultiplier());
    }
    if (this.clientProperties.getGetRoomMaxRpcTimeout() != null) {
      getRoomRetrySettingBuilder.setMaxRpcTimeout(this.clientProperties.getGetRoomMaxRpcTimeout());
      LOGGER.info("GetRoomMaxRpcTimeout set to " + this.clientProperties.getGetRoomMaxRpcTimeout());
    }
    if (this.clientProperties.getGetRoomTotalTimeout() != null) {
      getRoomRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetRoomTotalTimeout());
      LOGGER.info("GetRoomTotalTimeout set to " + this.clientProperties.getGetRoomTotalTimeout());
    }
    clientSettingsBuilder.getRoomSettings().setRetrySettings(getRoomRetrySettingBuilder.build());
    RetrySettings.Builder updateRoomRetrySettingBuilder =
        clientSettingsBuilder.updateRoomSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateRoomInitialRpcTimeout() != null) {
      updateRoomRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateRoomInitialRpcTimeout());
      LOGGER.info(
          "UpdateRoomInitialRpcTimeout set to "
              + this.clientProperties.getUpdateRoomInitialRpcTimeout());
    }
    if (this.clientProperties.getUpdateRoomRpcTimeoutMultiplier() != null) {
      updateRoomRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateRoomRpcTimeoutMultiplier());
      LOGGER.info(
          "UpdateRoomRpcTimeoutMultiplier set to "
              + this.clientProperties.getUpdateRoomRpcTimeoutMultiplier());
    }
    if (this.clientProperties.getUpdateRoomMaxRpcTimeout() != null) {
      updateRoomRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateRoomMaxRpcTimeout());
      LOGGER.info(
          "UpdateRoomMaxRpcTimeout set to " + this.clientProperties.getUpdateRoomMaxRpcTimeout());
    }
    if (this.clientProperties.getUpdateRoomTotalTimeout() != null) {
      updateRoomRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateRoomTotalTimeout());
      LOGGER.info(
          "UpdateRoomTotalTimeout set to " + this.clientProperties.getUpdateRoomTotalTimeout());
    }
    clientSettingsBuilder
        .updateRoomSettings()
        .setRetrySettings(updateRoomRetrySettingBuilder.build());
    RetrySettings.Builder deleteRoomRetrySettingBuilder =
        clientSettingsBuilder.deleteRoomSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteRoomInitialRpcTimeout() != null) {
      deleteRoomRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteRoomInitialRpcTimeout());
      LOGGER.info(
          "DeleteRoomInitialRpcTimeout set to "
              + this.clientProperties.getDeleteRoomInitialRpcTimeout());
    }
    if (this.clientProperties.getDeleteRoomRpcTimeoutMultiplier() != null) {
      deleteRoomRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteRoomRpcTimeoutMultiplier());
      LOGGER.info(
          "DeleteRoomRpcTimeoutMultiplier set to "
              + this.clientProperties.getDeleteRoomRpcTimeoutMultiplier());
    }
    if (this.clientProperties.getDeleteRoomMaxRpcTimeout() != null) {
      deleteRoomRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteRoomMaxRpcTimeout());
      LOGGER.info(
          "DeleteRoomMaxRpcTimeout set to " + this.clientProperties.getDeleteRoomMaxRpcTimeout());
    }
    if (this.clientProperties.getDeleteRoomTotalTimeout() != null) {
      deleteRoomRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteRoomTotalTimeout());
      LOGGER.info(
          "DeleteRoomTotalTimeout set to " + this.clientProperties.getDeleteRoomTotalTimeout());
    }
    clientSettingsBuilder
        .deleteRoomSettings()
        .setRetrySettings(deleteRoomRetrySettingBuilder.build());
    RetrySettings.Builder listRoomsRetrySettingBuilder =
        clientSettingsBuilder.listRoomsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListRoomsInitialRetryDelay() != null) {
      listRoomsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListRoomsInitialRetryDelay());
      LOGGER.info(
          "ListRoomsInitialRetryDelay set to "
              + this.clientProperties.getListRoomsInitialRetryDelay());
    }
    if (this.clientProperties.getListRoomsRetryDelayMultiplier() != null) {
      listRoomsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListRoomsRetryDelayMultiplier());
      LOGGER.info(
          "ListRoomsRetryDelayMultiplier set to "
              + this.clientProperties.getListRoomsRetryDelayMultiplier());
    }
    if (this.clientProperties.getListRoomsMaxRetryDelay() != null) {
      listRoomsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListRoomsMaxRetryDelay());
      LOGGER.info(
          "ListRoomsMaxRetryDelay set to " + this.clientProperties.getListRoomsMaxRetryDelay());
    }
    if (this.clientProperties.getListRoomsInitialRpcTimeout() != null) {
      listRoomsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListRoomsInitialRpcTimeout());
      LOGGER.info(
          "ListRoomsInitialRpcTimeout set to "
              + this.clientProperties.getListRoomsInitialRpcTimeout());
    }
    if (this.clientProperties.getListRoomsRpcTimeoutMultiplier() != null) {
      listRoomsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListRoomsRpcTimeoutMultiplier());
      LOGGER.info(
          "ListRoomsRpcTimeoutMultiplier set to "
              + this.clientProperties.getListRoomsRpcTimeoutMultiplier());
    }
    if (this.clientProperties.getListRoomsMaxRpcTimeout() != null) {
      listRoomsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListRoomsMaxRpcTimeout());
      LOGGER.info(
          "ListRoomsMaxRpcTimeout set to " + this.clientProperties.getListRoomsMaxRpcTimeout());
    }
    if (this.clientProperties.getListRoomsTotalTimeout() != null) {
      listRoomsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListRoomsTotalTimeout());
      LOGGER.info(
          "ListRoomsTotalTimeout set to " + this.clientProperties.getListRoomsTotalTimeout());
    }
    clientSettingsBuilder
        .listRoomsSettings()
        .setRetrySettings(listRoomsRetrySettingBuilder.build());
    RetrySettings.Builder createBlurbRetrySettingBuilder =
        clientSettingsBuilder.createBlurbSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateBlurbInitialRpcTimeout() != null) {
      createBlurbRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateBlurbInitialRpcTimeout());
      LOGGER.info(
          "CreateBlurbInitialRpcTimeout set to "
              + this.clientProperties.getCreateBlurbInitialRpcTimeout());
    }
    if (this.clientProperties.getCreateBlurbRpcTimeoutMultiplier() != null) {
      createBlurbRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateBlurbRpcTimeoutMultiplier());
      LOGGER.info(
          "CreateBlurbRpcTimeoutMultiplier set to "
              + this.clientProperties.getCreateBlurbRpcTimeoutMultiplier());
    }
    if (this.clientProperties.getCreateBlurbMaxRpcTimeout() != null) {
      createBlurbRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateBlurbMaxRpcTimeout());
      LOGGER.info(
          "CreateBlurbMaxRpcTimeout set to " + this.clientProperties.getCreateBlurbMaxRpcTimeout());
    }
    if (this.clientProperties.getCreateBlurbTotalTimeout() != null) {
      createBlurbRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateBlurbTotalTimeout());
      LOGGER.info(
          "CreateBlurbTotalTimeout set to " + this.clientProperties.getCreateBlurbTotalTimeout());
    }
    clientSettingsBuilder
        .createBlurbSettings()
        .setRetrySettings(createBlurbRetrySettingBuilder.build());
    RetrySettings.Builder getBlurbRetrySettingBuilder =
        clientSettingsBuilder.getBlurbSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetBlurbInitialRetryDelay() != null) {
      getBlurbRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetBlurbInitialRetryDelay());
      LOGGER.info(
          "GetBlurbInitialRetryDelay set to "
              + this.clientProperties.getGetBlurbInitialRetryDelay());
    }
    if (this.clientProperties.getGetBlurbRetryDelayMultiplier() != null) {
      getBlurbRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetBlurbRetryDelayMultiplier());
      LOGGER.info(
          "GetBlurbRetryDelayMultiplier set to "
              + this.clientProperties.getGetBlurbRetryDelayMultiplier());
    }
    if (this.clientProperties.getGetBlurbMaxRetryDelay() != null) {
      getBlurbRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetBlurbMaxRetryDelay());
      LOGGER.info(
          "GetBlurbMaxRetryDelay set to " + this.clientProperties.getGetBlurbMaxRetryDelay());
    }
    if (this.clientProperties.getGetBlurbInitialRpcTimeout() != null) {
      getBlurbRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetBlurbInitialRpcTimeout());
      LOGGER.info(
          "GetBlurbInitialRpcTimeout set to "
              + this.clientProperties.getGetBlurbInitialRpcTimeout());
    }
    if (this.clientProperties.getGetBlurbRpcTimeoutMultiplier() != null) {
      getBlurbRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetBlurbRpcTimeoutMultiplier());
      LOGGER.info(
          "GetBlurbRpcTimeoutMultiplier set to "
              + this.clientProperties.getGetBlurbRpcTimeoutMultiplier());
    }
    if (this.clientProperties.getGetBlurbMaxRpcTimeout() != null) {
      getBlurbRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetBlurbMaxRpcTimeout());
      LOGGER.info(
          "GetBlurbMaxRpcTimeout set to " + this.clientProperties.getGetBlurbMaxRpcTimeout());
    }
    if (this.clientProperties.getGetBlurbTotalTimeout() != null) {
      getBlurbRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetBlurbTotalTimeout());
      LOGGER.info("GetBlurbTotalTimeout set to " + this.clientProperties.getGetBlurbTotalTimeout());
    }
    clientSettingsBuilder.getBlurbSettings().setRetrySettings(getBlurbRetrySettingBuilder.build());
    RetrySettings.Builder updateBlurbRetrySettingBuilder =
        clientSettingsBuilder.updateBlurbSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateBlurbInitialRpcTimeout() != null) {
      updateBlurbRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateBlurbInitialRpcTimeout());
      LOGGER.info(
          "UpdateBlurbInitialRpcTimeout set to "
              + this.clientProperties.getUpdateBlurbInitialRpcTimeout());
    }
    if (this.clientProperties.getUpdateBlurbRpcTimeoutMultiplier() != null) {
      updateBlurbRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateBlurbRpcTimeoutMultiplier());
      LOGGER.info(
          "UpdateBlurbRpcTimeoutMultiplier set to "
              + this.clientProperties.getUpdateBlurbRpcTimeoutMultiplier());
    }
    if (this.clientProperties.getUpdateBlurbMaxRpcTimeout() != null) {
      updateBlurbRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateBlurbMaxRpcTimeout());
      LOGGER.info(
          "UpdateBlurbMaxRpcTimeout set to " + this.clientProperties.getUpdateBlurbMaxRpcTimeout());
    }
    if (this.clientProperties.getUpdateBlurbTotalTimeout() != null) {
      updateBlurbRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateBlurbTotalTimeout());
      LOGGER.info(
          "UpdateBlurbTotalTimeout set to " + this.clientProperties.getUpdateBlurbTotalTimeout());
    }
    clientSettingsBuilder
        .updateBlurbSettings()
        .setRetrySettings(updateBlurbRetrySettingBuilder.build());
    RetrySettings.Builder deleteBlurbRetrySettingBuilder =
        clientSettingsBuilder.deleteBlurbSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteBlurbInitialRpcTimeout() != null) {
      deleteBlurbRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteBlurbInitialRpcTimeout());
      LOGGER.info(
          "DeleteBlurbInitialRpcTimeout set to "
              + this.clientProperties.getDeleteBlurbInitialRpcTimeout());
    }
    if (this.clientProperties.getDeleteBlurbRpcTimeoutMultiplier() != null) {
      deleteBlurbRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteBlurbRpcTimeoutMultiplier());
      LOGGER.info(
          "DeleteBlurbRpcTimeoutMultiplier set to "
              + this.clientProperties.getDeleteBlurbRpcTimeoutMultiplier());
    }
    if (this.clientProperties.getDeleteBlurbMaxRpcTimeout() != null) {
      deleteBlurbRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteBlurbMaxRpcTimeout());
      LOGGER.info(
          "DeleteBlurbMaxRpcTimeout set to " + this.clientProperties.getDeleteBlurbMaxRpcTimeout());
    }
    if (this.clientProperties.getDeleteBlurbTotalTimeout() != null) {
      deleteBlurbRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteBlurbTotalTimeout());
      LOGGER.info(
          "DeleteBlurbTotalTimeout set to " + this.clientProperties.getDeleteBlurbTotalTimeout());
    }
    clientSettingsBuilder
        .deleteBlurbSettings()
        .setRetrySettings(deleteBlurbRetrySettingBuilder.build());
    RetrySettings.Builder listBlurbsRetrySettingBuilder =
        clientSettingsBuilder.listBlurbsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListBlurbsInitialRetryDelay() != null) {
      listBlurbsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListBlurbsInitialRetryDelay());
      LOGGER.info(
          "ListBlurbsInitialRetryDelay set to "
              + this.clientProperties.getListBlurbsInitialRetryDelay());
    }
    if (this.clientProperties.getListBlurbsRetryDelayMultiplier() != null) {
      listBlurbsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListBlurbsRetryDelayMultiplier());
      LOGGER.info(
          "ListBlurbsRetryDelayMultiplier set to "
              + this.clientProperties.getListBlurbsRetryDelayMultiplier());
    }
    if (this.clientProperties.getListBlurbsMaxRetryDelay() != null) {
      listBlurbsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListBlurbsMaxRetryDelay());
      LOGGER.info(
          "ListBlurbsMaxRetryDelay set to " + this.clientProperties.getListBlurbsMaxRetryDelay());
    }
    if (this.clientProperties.getListBlurbsInitialRpcTimeout() != null) {
      listBlurbsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListBlurbsInitialRpcTimeout());
      LOGGER.info(
          "ListBlurbsInitialRpcTimeout set to "
              + this.clientProperties.getListBlurbsInitialRpcTimeout());
    }
    if (this.clientProperties.getListBlurbsRpcTimeoutMultiplier() != null) {
      listBlurbsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListBlurbsRpcTimeoutMultiplier());
      LOGGER.info(
          "ListBlurbsRpcTimeoutMultiplier set to "
              + this.clientProperties.getListBlurbsRpcTimeoutMultiplier());
    }
    if (this.clientProperties.getListBlurbsMaxRpcTimeout() != null) {
      listBlurbsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListBlurbsMaxRpcTimeout());
      LOGGER.info(
          "ListBlurbsMaxRpcTimeout set to " + this.clientProperties.getListBlurbsMaxRpcTimeout());
    }
    if (this.clientProperties.getListBlurbsTotalTimeout() != null) {
      listBlurbsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListBlurbsTotalTimeout());
      LOGGER.info(
          "ListBlurbsTotalTimeout set to " + this.clientProperties.getListBlurbsTotalTimeout());
    }
    clientSettingsBuilder
        .listBlurbsSettings()
        .setRetrySettings(listBlurbsRetrySettingBuilder.build());
    RetrySettings.Builder searchBlurbsRetrySettingBuilder =
        clientSettingsBuilder.searchBlurbsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSearchBlurbsInitialRetryDelay() != null) {
      searchBlurbsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getSearchBlurbsInitialRetryDelay());
      LOGGER.info(
          "SearchBlurbsInitialRetryDelay set to "
              + this.clientProperties.getSearchBlurbsInitialRetryDelay());
    }
    if (this.clientProperties.getSearchBlurbsRetryDelayMultiplier() != null) {
      searchBlurbsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getSearchBlurbsRetryDelayMultiplier());
      LOGGER.info(
          "SearchBlurbsRetryDelayMultiplier set to "
              + this.clientProperties.getSearchBlurbsRetryDelayMultiplier());
    }
    if (this.clientProperties.getSearchBlurbsMaxRetryDelay() != null) {
      searchBlurbsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getSearchBlurbsMaxRetryDelay());
      LOGGER.info(
          "SearchBlurbsMaxRetryDelay set to "
              + this.clientProperties.getSearchBlurbsMaxRetryDelay());
    }
    if (this.clientProperties.getSearchBlurbsInitialRpcTimeout() != null) {
      searchBlurbsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSearchBlurbsInitialRpcTimeout());
      LOGGER.info(
          "SearchBlurbsInitialRpcTimeout set to "
              + this.clientProperties.getSearchBlurbsInitialRpcTimeout());
    }
    if (this.clientProperties.getSearchBlurbsRpcTimeoutMultiplier() != null) {
      searchBlurbsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSearchBlurbsRpcTimeoutMultiplier());
      LOGGER.info(
          "SearchBlurbsRpcTimeoutMultiplier set to "
              + this.clientProperties.getSearchBlurbsRpcTimeoutMultiplier());
    }
    if (this.clientProperties.getSearchBlurbsMaxRpcTimeout() != null) {
      searchBlurbsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSearchBlurbsMaxRpcTimeout());
      LOGGER.info(
          "SearchBlurbsMaxRpcTimeout set to "
              + this.clientProperties.getSearchBlurbsMaxRpcTimeout());
    }
    if (this.clientProperties.getSearchBlurbsTotalTimeout() != null) {
      searchBlurbsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSearchBlurbsTotalTimeout());
      LOGGER.info(
          "SearchBlurbsTotalTimeout set to " + this.clientProperties.getSearchBlurbsTotalTimeout());
    }
    clientSettingsBuilder
        .searchBlurbsSettings()
        .setRetrySettings(searchBlurbsRetrySettingBuilder.build());
    RetrySettings.Builder streamBlurbsRetrySettingBuilder =
        clientSettingsBuilder.streamBlurbsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getStreamBlurbsInitialRpcTimeout() != null) {
      streamBlurbsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getStreamBlurbsInitialRpcTimeout());
      LOGGER.info(
          "StreamBlurbsInitialRpcTimeout set to "
              + this.clientProperties.getStreamBlurbsInitialRpcTimeout());
    }
    if (this.clientProperties.getStreamBlurbsRpcTimeoutMultiplier() != null) {
      streamBlurbsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getStreamBlurbsRpcTimeoutMultiplier());
      LOGGER.info(
          "StreamBlurbsRpcTimeoutMultiplier set to "
              + this.clientProperties.getStreamBlurbsRpcTimeoutMultiplier());
    }
    if (this.clientProperties.getStreamBlurbsMaxRpcTimeout() != null) {
      streamBlurbsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getStreamBlurbsMaxRpcTimeout());
      LOGGER.info(
          "StreamBlurbsMaxRpcTimeout set to "
              + this.clientProperties.getStreamBlurbsMaxRpcTimeout());
    }
    if (this.clientProperties.getStreamBlurbsTotalTimeout() != null) {
      streamBlurbsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getStreamBlurbsTotalTimeout());
      LOGGER.info(
          "StreamBlurbsTotalTimeout set to " + this.clientProperties.getStreamBlurbsTotalTimeout());
    }
    clientSettingsBuilder
        .streamBlurbsSettings()
        .setRetrySettings(streamBlurbsRetrySettingBuilder.build());
    RetrySettings.Builder sendBlurbsRetrySettingBuilder =
        clientSettingsBuilder.sendBlurbsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSendBlurbsInitialRpcTimeout() != null) {
      sendBlurbsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSendBlurbsInitialRpcTimeout());
      LOGGER.info(
          "SendBlurbsInitialRpcTimeout set to "
              + this.clientProperties.getSendBlurbsInitialRpcTimeout());
    }
    if (this.clientProperties.getSendBlurbsRpcTimeoutMultiplier() != null) {
      sendBlurbsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSendBlurbsRpcTimeoutMultiplier());
      LOGGER.info(
          "SendBlurbsRpcTimeoutMultiplier set to "
              + this.clientProperties.getSendBlurbsRpcTimeoutMultiplier());
    }
    if (this.clientProperties.getSendBlurbsMaxRpcTimeout() != null) {
      sendBlurbsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSendBlurbsMaxRpcTimeout());
      LOGGER.info(
          "SendBlurbsMaxRpcTimeout set to " + this.clientProperties.getSendBlurbsMaxRpcTimeout());
    }
    if (this.clientProperties.getSendBlurbsTotalTimeout() != null) {
      sendBlurbsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSendBlurbsTotalTimeout());
      LOGGER.info(
          "SendBlurbsTotalTimeout set to " + this.clientProperties.getSendBlurbsTotalTimeout());
    }
    clientSettingsBuilder
        .sendBlurbsSettings()
        .setRetrySettings(sendBlurbsRetrySettingBuilder.build());
    RetrySettings.Builder connectRetrySettingBuilder =
        clientSettingsBuilder.connectSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getConnectInitialRetryDelay() != null) {
      connectRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getConnectInitialRetryDelay());
      LOGGER.info(
          "ConnectInitialRetryDelay set to " + this.clientProperties.getConnectInitialRetryDelay());
    }
    if (this.clientProperties.getConnectRetryDelayMultiplier() != null) {
      connectRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getConnectRetryDelayMultiplier());
      LOGGER.info(
          "ConnectRetryDelayMultiplier set to "
              + this.clientProperties.getConnectRetryDelayMultiplier());
    }
    if (this.clientProperties.getConnectMaxRetryDelay() != null) {
      connectRetrySettingBuilder.setMaxRetryDelay(this.clientProperties.getConnectMaxRetryDelay());
      LOGGER.info("ConnectMaxRetryDelay set to " + this.clientProperties.getConnectMaxRetryDelay());
    }
    if (this.clientProperties.getConnectInitialRpcTimeout() != null) {
      connectRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getConnectInitialRpcTimeout());
      LOGGER.info(
          "ConnectInitialRpcTimeout set to " + this.clientProperties.getConnectInitialRpcTimeout());
    }
    if (this.clientProperties.getConnectRpcTimeoutMultiplier() != null) {
      connectRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getConnectRpcTimeoutMultiplier());
      LOGGER.info(
          "ConnectRpcTimeoutMultiplier set to "
              + this.clientProperties.getConnectRpcTimeoutMultiplier());
    }
    if (this.clientProperties.getConnectMaxRpcTimeout() != null) {
      connectRetrySettingBuilder.setMaxRpcTimeout(this.clientProperties.getConnectMaxRpcTimeout());
      LOGGER.info("ConnectMaxRpcTimeout set to " + this.clientProperties.getConnectMaxRpcTimeout());
    }
    if (this.clientProperties.getConnectTotalTimeout() != null) {
      connectRetrySettingBuilder.setTotalTimeout(this.clientProperties.getConnectTotalTimeout());
      LOGGER.info("ConnectTotalTimeout set to " + this.clientProperties.getConnectTotalTimeout());
    }
    clientSettingsBuilder.connectSettings().setRetrySettings(connectRetrySettingBuilder.build());
    return MessagingClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-messaging";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
