/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.showcase.v1beta1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.showcase.v1beta1.SequenceServiceClient;
import com.google.showcase.v1beta1.SequenceServiceSettings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link SequenceServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by gapic-generator-java")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(SequenceServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.showcase.v1beta1.spring.auto.sequence-service.enabled",
    matchIfMissing = false)
@EnableConfigurationProperties(SequenceServiceSpringProperties.class)
public class SequenceServiceSpringAutoConfiguration {
  private final SequenceServiceSpringProperties clientProperties;
  private static final Log LOGGER = LogFactory.getLog(SequenceServiceSpringAutoConfig.class);

  protected SequenceServiceSpringAutoConfiguration(
      SequenceServiceSpringProperties clientProperties) {
    this.clientProperties = clientProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider sequenceServiceCredentials() throws IOException {
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultSequenceServiceTransportChannelProvider() {
    return SequenceServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a SequenceServiceClient bean configured to use the default credentials provider
   * (obtained with sequenceServiceCredentials()) and its default transport channel provider
   * (defaultSequenceServiceTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in SequenceServiceProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public SequenceServiceClient sequenceServiceClient(
      @Qualifier("sequenceServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultSequenceServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    SequenceServiceSettings.Builder clientSettingsBuilder =
        SequenceServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      LOGGER.info(
          "Quota project id set to "
              + this.clientProperties.getQuotaProjectId()
              + ", this overrides project id from credentials.");
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          SequenceServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      LOGGER.info(
          "Background executor thread count is " + this.clientProperties.getExecutorThreadCount());
    }
    RetrySettings.Builder createSequenceRetrySettingBuilder =
        clientSettingsBuilder.createSequenceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateSequenceInitialRpcTimeout() != null) {
      createSequenceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateSequenceInitialRpcTimeout());
      LOGGER.info(
          "CreateSequenceInitialRpcTimeout set to "
              + this.clientProperties.getCreateSequenceInitialRpcTimeout());
    }
    if (this.clientProperties.getCreateSequenceRpcTimeoutMultiplier() != null) {
      createSequenceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateSequenceRpcTimeoutMultiplier());
      LOGGER.info(
          "CreateSequenceRpcTimeoutMultiplier set to "
              + this.clientProperties.getCreateSequenceRpcTimeoutMultiplier());
    }
    if (this.clientProperties.getCreateSequenceMaxRpcTimeout() != null) {
      createSequenceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateSequenceMaxRpcTimeout());
      LOGGER.info(
          "CreateSequenceMaxRpcTimeout set to "
              + this.clientProperties.getCreateSequenceMaxRpcTimeout());
    }
    if (this.clientProperties.getCreateSequenceTotalTimeout() != null) {
      createSequenceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateSequenceTotalTimeout());
      LOGGER.info(
          "CreateSequenceTotalTimeout set to "
              + this.clientProperties.getCreateSequenceTotalTimeout());
    }
    clientSettingsBuilder
        .createSequenceSettings()
        .setRetrySettings(createSequenceRetrySettingBuilder.build());
    RetrySettings.Builder getSequenceReportRetrySettingBuilder =
        clientSettingsBuilder.getSequenceReportSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetSequenceReportInitialRpcTimeout() != null) {
      getSequenceReportRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetSequenceReportInitialRpcTimeout());
      LOGGER.info(
          "GetSequenceReportInitialRpcTimeout set to "
              + this.clientProperties.getGetSequenceReportInitialRpcTimeout());
    }
    if (this.clientProperties.getGetSequenceReportRpcTimeoutMultiplier() != null) {
      getSequenceReportRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetSequenceReportRpcTimeoutMultiplier());
      LOGGER.info(
          "GetSequenceReportRpcTimeoutMultiplier set to "
              + this.clientProperties.getGetSequenceReportRpcTimeoutMultiplier());
    }
    if (this.clientProperties.getGetSequenceReportMaxRpcTimeout() != null) {
      getSequenceReportRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetSequenceReportMaxRpcTimeout());
      LOGGER.info(
          "GetSequenceReportMaxRpcTimeout set to "
              + this.clientProperties.getGetSequenceReportMaxRpcTimeout());
    }
    if (this.clientProperties.getGetSequenceReportTotalTimeout() != null) {
      getSequenceReportRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetSequenceReportTotalTimeout());
      LOGGER.info(
          "GetSequenceReportTotalTimeout set to "
              + this.clientProperties.getGetSequenceReportTotalTimeout());
    }
    clientSettingsBuilder
        .getSequenceReportSettings()
        .setRetrySettings(getSequenceReportRetrySettingBuilder.build());
    RetrySettings.Builder attemptSequenceRetrySettingBuilder =
        clientSettingsBuilder.attemptSequenceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getAttemptSequenceInitialRetryDelay() != null) {
      attemptSequenceRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getAttemptSequenceInitialRetryDelay());
      LOGGER.info(
          "AttemptSequenceInitialRetryDelay set to "
              + this.clientProperties.getAttemptSequenceInitialRetryDelay());
    }
    if (this.clientProperties.getAttemptSequenceRetryDelayMultiplier() != null) {
      attemptSequenceRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getAttemptSequenceRetryDelayMultiplier());
      LOGGER.info(
          "AttemptSequenceRetryDelayMultiplier set to "
              + this.clientProperties.getAttemptSequenceRetryDelayMultiplier());
    }
    if (this.clientProperties.getAttemptSequenceMaxRetryDelay() != null) {
      attemptSequenceRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getAttemptSequenceMaxRetryDelay());
      LOGGER.info(
          "AttemptSequenceMaxRetryDelay set to "
              + this.clientProperties.getAttemptSequenceMaxRetryDelay());
    }
    if (this.clientProperties.getAttemptSequenceInitialRpcTimeout() != null) {
      attemptSequenceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getAttemptSequenceInitialRpcTimeout());
      LOGGER.info(
          "AttemptSequenceInitialRpcTimeout set to "
              + this.clientProperties.getAttemptSequenceInitialRpcTimeout());
    }
    if (this.clientProperties.getAttemptSequenceRpcTimeoutMultiplier() != null) {
      attemptSequenceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getAttemptSequenceRpcTimeoutMultiplier());
      LOGGER.info(
          "AttemptSequenceRpcTimeoutMultiplier set to "
              + this.clientProperties.getAttemptSequenceRpcTimeoutMultiplier());
    }
    if (this.clientProperties.getAttemptSequenceMaxRpcTimeout() != null) {
      attemptSequenceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getAttemptSequenceMaxRpcTimeout());
      LOGGER.info(
          "AttemptSequenceMaxRpcTimeout set to "
              + this.clientProperties.getAttemptSequenceMaxRpcTimeout());
    }
    if (this.clientProperties.getAttemptSequenceTotalTimeout() != null) {
      attemptSequenceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getAttemptSequenceTotalTimeout());
      LOGGER.info(
          "AttemptSequenceTotalTimeout set to "
              + this.clientProperties.getAttemptSequenceTotalTimeout());
    }
    clientSettingsBuilder
        .attemptSequenceSettings()
        .setRetrySettings(attemptSequenceRetrySettingBuilder.build());
    return SequenceServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-sequence-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
