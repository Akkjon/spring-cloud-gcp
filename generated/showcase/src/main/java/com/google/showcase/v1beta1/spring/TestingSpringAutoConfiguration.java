/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.showcase.v1beta1.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.showcase.v1beta1.TestingClient;
import com.google.showcase.v1beta1.TestingSettings;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link TestingClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by gapic-generator-java")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(TestingClient.class)
@ConditionalOnProperty(
    value = "com.google.showcase.v1beta1.spring.auto.testing.enabled",
    matchIfMissing = false)
@EnableConfigurationProperties(TestingSpringProperties.class)
public class TestingSpringAutoConfiguration {
  private final TestingSpringProperties clientProperties;
  private static final Log LOGGER = LogFactory.getLog(TestingSpringAutoConfig.class);

  protected TestingSpringAutoConfiguration(TestingSpringProperties clientProperties) {
    this.clientProperties = clientProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider testingCredentials() throws IOException {
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultTestingTransportChannelProvider() {
    return TestingSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a TestingClient bean configured to use the default credentials provider (obtained with
   * testingCredentials()) and its default transport channel provider
   * (defaultTestingTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in TestingProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public TestingClient testingClient(
      @Qualifier("testingCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultTestingTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    TestingSettings.Builder clientSettingsBuilder =
        TestingSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      LOGGER.info(
          "Quota project id set to "
              + this.clientProperties.getQuotaProjectId()
              + ", this overrides project id from credentials.");
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          TestingSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      LOGGER.info(
          "Background executor thread count is " + this.clientProperties.getExecutorThreadCount());
    }
    RetrySettings.Builder createSessionRetrySettingBuilder =
        clientSettingsBuilder.createSessionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateSessionRpcTimeoutMultiplier() != null) {
      createSessionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateSessionRpcTimeoutMultiplier());
      LOGGER.info(
          "CreateSessionRpcTimeoutMultiplier set to "
              + this.clientProperties.getCreateSessionRpcTimeoutMultiplier());
    }
    clientSettingsBuilder
        .createSessionSettings()
        .setRetrySettings(createSessionRetrySettingBuilder.build());
    RetrySettings.Builder getSessionRetrySettingBuilder =
        clientSettingsBuilder.getSessionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetSessionRpcTimeoutMultiplier() != null) {
      getSessionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetSessionRpcTimeoutMultiplier());
      LOGGER.info(
          "GetSessionRpcTimeoutMultiplier set to "
              + this.clientProperties.getGetSessionRpcTimeoutMultiplier());
    }
    clientSettingsBuilder
        .getSessionSettings()
        .setRetrySettings(getSessionRetrySettingBuilder.build());
    RetrySettings.Builder listSessionsRetrySettingBuilder =
        clientSettingsBuilder.listSessionsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListSessionsRpcTimeoutMultiplier() != null) {
      listSessionsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListSessionsRpcTimeoutMultiplier());
      LOGGER.info(
          "ListSessionsRpcTimeoutMultiplier set to "
              + this.clientProperties.getListSessionsRpcTimeoutMultiplier());
    }
    clientSettingsBuilder
        .listSessionsSettings()
        .setRetrySettings(listSessionsRetrySettingBuilder.build());
    RetrySettings.Builder deleteSessionRetrySettingBuilder =
        clientSettingsBuilder.deleteSessionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteSessionRpcTimeoutMultiplier() != null) {
      deleteSessionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteSessionRpcTimeoutMultiplier());
      LOGGER.info(
          "DeleteSessionRpcTimeoutMultiplier set to "
              + this.clientProperties.getDeleteSessionRpcTimeoutMultiplier());
    }
    clientSettingsBuilder
        .deleteSessionSettings()
        .setRetrySettings(deleteSessionRetrySettingBuilder.build());
    RetrySettings.Builder reportSessionRetrySettingBuilder =
        clientSettingsBuilder.reportSessionSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getReportSessionRpcTimeoutMultiplier() != null) {
      reportSessionRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getReportSessionRpcTimeoutMultiplier());
      LOGGER.info(
          "ReportSessionRpcTimeoutMultiplier set to "
              + this.clientProperties.getReportSessionRpcTimeoutMultiplier());
    }
    clientSettingsBuilder
        .reportSessionSettings()
        .setRetrySettings(reportSessionRetrySettingBuilder.build());
    RetrySettings.Builder listTestsRetrySettingBuilder =
        clientSettingsBuilder.listTestsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListTestsRpcTimeoutMultiplier() != null) {
      listTestsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListTestsRpcTimeoutMultiplier());
      LOGGER.info(
          "ListTestsRpcTimeoutMultiplier set to "
              + this.clientProperties.getListTestsRpcTimeoutMultiplier());
    }
    clientSettingsBuilder
        .listTestsSettings()
        .setRetrySettings(listTestsRetrySettingBuilder.build());
    RetrySettings.Builder deleteTestRetrySettingBuilder =
        clientSettingsBuilder.deleteTestSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteTestRpcTimeoutMultiplier() != null) {
      deleteTestRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteTestRpcTimeoutMultiplier());
      LOGGER.info(
          "DeleteTestRpcTimeoutMultiplier set to "
              + this.clientProperties.getDeleteTestRpcTimeoutMultiplier());
    }
    clientSettingsBuilder
        .deleteTestSettings()
        .setRetrySettings(deleteTestRetrySettingBuilder.build());
    RetrySettings.Builder verifyTestRetrySettingBuilder =
        clientSettingsBuilder.verifyTestSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getVerifyTestRpcTimeoutMultiplier() != null) {
      verifyTestRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getVerifyTestRpcTimeoutMultiplier());
      LOGGER.info(
          "VerifyTestRpcTimeoutMultiplier set to "
              + this.clientProperties.getVerifyTestRpcTimeoutMultiplier());
    }
    clientSettingsBuilder
        .verifyTestSettings()
        .setRetrySettings(verifyTestRetrySettingBuilder.build());
    return TestingClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-testing";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
