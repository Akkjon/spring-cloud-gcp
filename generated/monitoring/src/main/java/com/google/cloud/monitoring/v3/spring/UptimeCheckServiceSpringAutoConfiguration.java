/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.monitoring.v3.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.monitoring.v3.UptimeCheckServiceClient;
import com.google.cloud.monitoring.v3.UptimeCheckServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link UptimeCheckServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(UptimeCheckServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.monitoring.v3.spring.auto.uptime-check-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({UptimeCheckServiceSpringProperties.class, GlobalProperties.class})
public class UptimeCheckServiceSpringAutoConfiguration {
  private final UptimeCheckServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(UptimeCheckServiceSpringAutoConfiguration.class);

  protected UptimeCheckServiceSpringAutoConfiguration(
      UptimeCheckServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider uptimeCheckServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from UptimeCheckService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultUptimeCheckServiceTransportChannelProvider() {
    return UptimeCheckServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a UptimeCheckServiceClient bean configured to use the default credentials provider
   * (obtained with uptimeCheckServiceCredentials()) and its default transport channel provider
   * (defaultUptimeCheckServiceTransportChannelProvider()). It also configures the quota project ID
   * if provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in UptimeCheckServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public UptimeCheckServiceClient uptimeCheckServiceClient(
      @Qualifier("uptimeCheckServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultUptimeCheckServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    UptimeCheckServiceSettings.Builder clientSettingsBuilder =
        UptimeCheckServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          UptimeCheckServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    RetrySettings.Builder listUptimeCheckConfigsRetrySettingBuilder =
        clientSettingsBuilder.listUptimeCheckConfigsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListUptimeCheckConfigsInitialRetryDelay() != null) {
      listUptimeCheckConfigsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListUptimeCheckConfigsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListUptimeCheckConfigsInitialRetryDelay set to "
                + this.clientProperties.getListUptimeCheckConfigsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListUptimeCheckConfigsRetryDelayMultiplier() != null) {
      listUptimeCheckConfigsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListUptimeCheckConfigsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListUptimeCheckConfigsRetryDelayMultiplier set to "
                + this.clientProperties.getListUptimeCheckConfigsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListUptimeCheckConfigsMaxRetryDelay() != null) {
      listUptimeCheckConfigsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListUptimeCheckConfigsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListUptimeCheckConfigsMaxRetryDelay set to "
                + this.clientProperties.getListUptimeCheckConfigsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListUptimeCheckConfigsInitialRpcTimeout() != null) {
      listUptimeCheckConfigsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListUptimeCheckConfigsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListUptimeCheckConfigsInitialRpcTimeout set to "
                + this.clientProperties.getListUptimeCheckConfigsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListUptimeCheckConfigsRpcTimeoutMultiplier() != null) {
      listUptimeCheckConfigsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListUptimeCheckConfigsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListUptimeCheckConfigsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListUptimeCheckConfigsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListUptimeCheckConfigsMaxRpcTimeout() != null) {
      listUptimeCheckConfigsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListUptimeCheckConfigsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListUptimeCheckConfigsMaxRpcTimeout set to "
                + this.clientProperties.getListUptimeCheckConfigsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListUptimeCheckConfigsTotalTimeout() != null) {
      listUptimeCheckConfigsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListUptimeCheckConfigsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListUptimeCheckConfigsTotalTimeout set to "
                + this.clientProperties.getListUptimeCheckConfigsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listUptimeCheckConfigsSettings()
        .setRetrySettings(listUptimeCheckConfigsRetrySettingBuilder.build());
    RetrySettings.Builder getUptimeCheckConfigRetrySettingBuilder =
        clientSettingsBuilder.getUptimeCheckConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetUptimeCheckConfigInitialRetryDelay() != null) {
      getUptimeCheckConfigRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetUptimeCheckConfigInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetUptimeCheckConfigInitialRetryDelay set to "
                + this.clientProperties.getGetUptimeCheckConfigInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetUptimeCheckConfigRetryDelayMultiplier() != null) {
      getUptimeCheckConfigRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetUptimeCheckConfigRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetUptimeCheckConfigRetryDelayMultiplier set to "
                + this.clientProperties.getGetUptimeCheckConfigRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetUptimeCheckConfigMaxRetryDelay() != null) {
      getUptimeCheckConfigRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetUptimeCheckConfigMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetUptimeCheckConfigMaxRetryDelay set to "
                + this.clientProperties.getGetUptimeCheckConfigMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetUptimeCheckConfigInitialRpcTimeout() != null) {
      getUptimeCheckConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetUptimeCheckConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetUptimeCheckConfigInitialRpcTimeout set to "
                + this.clientProperties.getGetUptimeCheckConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetUptimeCheckConfigRpcTimeoutMultiplier() != null) {
      getUptimeCheckConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetUptimeCheckConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetUptimeCheckConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetUptimeCheckConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetUptimeCheckConfigMaxRpcTimeout() != null) {
      getUptimeCheckConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetUptimeCheckConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetUptimeCheckConfigMaxRpcTimeout set to "
                + this.clientProperties.getGetUptimeCheckConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetUptimeCheckConfigTotalTimeout() != null) {
      getUptimeCheckConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetUptimeCheckConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetUptimeCheckConfigTotalTimeout set to "
                + this.clientProperties.getGetUptimeCheckConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getUptimeCheckConfigSettings()
        .setRetrySettings(getUptimeCheckConfigRetrySettingBuilder.build());
    RetrySettings.Builder createUptimeCheckConfigRetrySettingBuilder =
        clientSettingsBuilder.createUptimeCheckConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateUptimeCheckConfigInitialRpcTimeout() != null) {
      createUptimeCheckConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateUptimeCheckConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateUptimeCheckConfigInitialRpcTimeout set to "
                + this.clientProperties.getCreateUptimeCheckConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateUptimeCheckConfigRpcTimeoutMultiplier() != null) {
      createUptimeCheckConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateUptimeCheckConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateUptimeCheckConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateUptimeCheckConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateUptimeCheckConfigMaxRpcTimeout() != null) {
      createUptimeCheckConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateUptimeCheckConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateUptimeCheckConfigMaxRpcTimeout set to "
                + this.clientProperties.getCreateUptimeCheckConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateUptimeCheckConfigTotalTimeout() != null) {
      createUptimeCheckConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateUptimeCheckConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateUptimeCheckConfigTotalTimeout set to "
                + this.clientProperties.getCreateUptimeCheckConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createUptimeCheckConfigSettings()
        .setRetrySettings(createUptimeCheckConfigRetrySettingBuilder.build());
    RetrySettings.Builder updateUptimeCheckConfigRetrySettingBuilder =
        clientSettingsBuilder.updateUptimeCheckConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateUptimeCheckConfigInitialRpcTimeout() != null) {
      updateUptimeCheckConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateUptimeCheckConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateUptimeCheckConfigInitialRpcTimeout set to "
                + this.clientProperties.getUpdateUptimeCheckConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateUptimeCheckConfigRpcTimeoutMultiplier() != null) {
      updateUptimeCheckConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateUptimeCheckConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateUptimeCheckConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateUptimeCheckConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateUptimeCheckConfigMaxRpcTimeout() != null) {
      updateUptimeCheckConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateUptimeCheckConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateUptimeCheckConfigMaxRpcTimeout set to "
                + this.clientProperties.getUpdateUptimeCheckConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateUptimeCheckConfigTotalTimeout() != null) {
      updateUptimeCheckConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateUptimeCheckConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateUptimeCheckConfigTotalTimeout set to "
                + this.clientProperties.getUpdateUptimeCheckConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateUptimeCheckConfigSettings()
        .setRetrySettings(updateUptimeCheckConfigRetrySettingBuilder.build());
    RetrySettings.Builder deleteUptimeCheckConfigRetrySettingBuilder =
        clientSettingsBuilder.deleteUptimeCheckConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteUptimeCheckConfigInitialRetryDelay() != null) {
      deleteUptimeCheckConfigRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteUptimeCheckConfigInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteUptimeCheckConfigInitialRetryDelay set to "
                + this.clientProperties.getDeleteUptimeCheckConfigInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteUptimeCheckConfigRetryDelayMultiplier() != null) {
      deleteUptimeCheckConfigRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteUptimeCheckConfigRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteUptimeCheckConfigRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteUptimeCheckConfigRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteUptimeCheckConfigMaxRetryDelay() != null) {
      deleteUptimeCheckConfigRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteUptimeCheckConfigMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteUptimeCheckConfigMaxRetryDelay set to "
                + this.clientProperties.getDeleteUptimeCheckConfigMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteUptimeCheckConfigInitialRpcTimeout() != null) {
      deleteUptimeCheckConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteUptimeCheckConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteUptimeCheckConfigInitialRpcTimeout set to "
                + this.clientProperties.getDeleteUptimeCheckConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteUptimeCheckConfigRpcTimeoutMultiplier() != null) {
      deleteUptimeCheckConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteUptimeCheckConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteUptimeCheckConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteUptimeCheckConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteUptimeCheckConfigMaxRpcTimeout() != null) {
      deleteUptimeCheckConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteUptimeCheckConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteUptimeCheckConfigMaxRpcTimeout set to "
                + this.clientProperties.getDeleteUptimeCheckConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteUptimeCheckConfigTotalTimeout() != null) {
      deleteUptimeCheckConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteUptimeCheckConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteUptimeCheckConfigTotalTimeout set to "
                + this.clientProperties.getDeleteUptimeCheckConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteUptimeCheckConfigSettings()
        .setRetrySettings(deleteUptimeCheckConfigRetrySettingBuilder.build());
    RetrySettings.Builder listUptimeCheckIpsRetrySettingBuilder =
        clientSettingsBuilder.listUptimeCheckIpsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListUptimeCheckIpsInitialRetryDelay() != null) {
      listUptimeCheckIpsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListUptimeCheckIpsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListUptimeCheckIpsInitialRetryDelay set to "
                + this.clientProperties.getListUptimeCheckIpsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListUptimeCheckIpsRetryDelayMultiplier() != null) {
      listUptimeCheckIpsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListUptimeCheckIpsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListUptimeCheckIpsRetryDelayMultiplier set to "
                + this.clientProperties.getListUptimeCheckIpsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListUptimeCheckIpsMaxRetryDelay() != null) {
      listUptimeCheckIpsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListUptimeCheckIpsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListUptimeCheckIpsMaxRetryDelay set to "
                + this.clientProperties.getListUptimeCheckIpsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListUptimeCheckIpsInitialRpcTimeout() != null) {
      listUptimeCheckIpsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListUptimeCheckIpsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListUptimeCheckIpsInitialRpcTimeout set to "
                + this.clientProperties.getListUptimeCheckIpsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListUptimeCheckIpsRpcTimeoutMultiplier() != null) {
      listUptimeCheckIpsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListUptimeCheckIpsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListUptimeCheckIpsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListUptimeCheckIpsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListUptimeCheckIpsMaxRpcTimeout() != null) {
      listUptimeCheckIpsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListUptimeCheckIpsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListUptimeCheckIpsMaxRpcTimeout set to "
                + this.clientProperties.getListUptimeCheckIpsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListUptimeCheckIpsTotalTimeout() != null) {
      listUptimeCheckIpsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListUptimeCheckIpsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListUptimeCheckIpsTotalTimeout set to "
                + this.clientProperties.getListUptimeCheckIpsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listUptimeCheckIpsSettings()
        .setRetrySettings(listUptimeCheckIpsRetrySettingBuilder.build());
    return UptimeCheckServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-uptime-check-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
