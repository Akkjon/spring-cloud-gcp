/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.monitoring.v3.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.monitoring.v3.GroupServiceClient;
import com.google.cloud.monitoring.v3.GroupServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link GroupServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(GroupServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.monitoring.v3.spring.auto.group-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({GroupServiceSpringProperties.class, GlobalProperties.class})
public class GroupServiceSpringAutoConfiguration {
  private final GroupServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(GroupServiceSpringAutoConfiguration.class);

  protected GroupServiceSpringAutoConfiguration(
      GroupServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider groupServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from GroupService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultGroupServiceTransportChannelProvider() {
    return GroupServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a GroupServiceClient bean configured to use the default credentials provider (obtained
   * with groupServiceCredentials()) and its default transport channel provider
   * (defaultGroupServiceTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in GroupServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public GroupServiceClient groupServiceClient(
      @Qualifier("groupServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultGroupServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    GroupServiceSettings.Builder clientSettingsBuilder =
        GroupServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          GroupServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    RetrySettings.Builder listGroupsRetrySettingBuilder =
        clientSettingsBuilder.listGroupsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListGroupsInitialRetryDelay() != null) {
      listGroupsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListGroupsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGroupsInitialRetryDelay set to "
                + this.clientProperties.getListGroupsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListGroupsRetryDelayMultiplier() != null) {
      listGroupsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListGroupsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGroupsRetryDelayMultiplier set to "
                + this.clientProperties.getListGroupsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListGroupsMaxRetryDelay() != null) {
      listGroupsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListGroupsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGroupsMaxRetryDelay set to " + this.clientProperties.getListGroupsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListGroupsInitialRpcTimeout() != null) {
      listGroupsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListGroupsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGroupsInitialRpcTimeout set to "
                + this.clientProperties.getListGroupsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListGroupsRpcTimeoutMultiplier() != null) {
      listGroupsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListGroupsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGroupsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListGroupsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListGroupsMaxRpcTimeout() != null) {
      listGroupsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListGroupsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGroupsMaxRpcTimeout set to " + this.clientProperties.getListGroupsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListGroupsTotalTimeout() != null) {
      listGroupsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListGroupsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGroupsTotalTimeout set to " + this.clientProperties.getListGroupsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listGroupsSettings()
        .setRetrySettings(listGroupsRetrySettingBuilder.build());
    RetrySettings.Builder getGroupRetrySettingBuilder =
        clientSettingsBuilder.getGroupSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetGroupInitialRetryDelay() != null) {
      getGroupRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetGroupInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGroupInitialRetryDelay set to "
                + this.clientProperties.getGetGroupInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetGroupRetryDelayMultiplier() != null) {
      getGroupRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetGroupRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGroupRetryDelayMultiplier set to "
                + this.clientProperties.getGetGroupRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetGroupMaxRetryDelay() != null) {
      getGroupRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetGroupMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGroupMaxRetryDelay set to " + this.clientProperties.getGetGroupMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetGroupInitialRpcTimeout() != null) {
      getGroupRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetGroupInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGroupInitialRpcTimeout set to "
                + this.clientProperties.getGetGroupInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetGroupRpcTimeoutMultiplier() != null) {
      getGroupRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetGroupRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGroupRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetGroupRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetGroupMaxRpcTimeout() != null) {
      getGroupRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetGroupMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGroupMaxRpcTimeout set to " + this.clientProperties.getGetGroupMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetGroupTotalTimeout() != null) {
      getGroupRetrySettingBuilder.setTotalTimeout(this.clientProperties.getGetGroupTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetGroupTotalTimeout set to " + this.clientProperties.getGetGroupTotalTimeout());
      }
    }
    clientSettingsBuilder.getGroupSettings().setRetrySettings(getGroupRetrySettingBuilder.build());
    RetrySettings.Builder createGroupRetrySettingBuilder =
        clientSettingsBuilder.createGroupSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateGroupInitialRpcTimeout() != null) {
      createGroupRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateGroupInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateGroupInitialRpcTimeout set to "
                + this.clientProperties.getCreateGroupInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateGroupRpcTimeoutMultiplier() != null) {
      createGroupRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateGroupRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateGroupRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateGroupRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateGroupMaxRpcTimeout() != null) {
      createGroupRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateGroupMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateGroupMaxRpcTimeout set to "
                + this.clientProperties.getCreateGroupMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateGroupTotalTimeout() != null) {
      createGroupRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateGroupTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateGroupTotalTimeout set to " + this.clientProperties.getCreateGroupTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createGroupSettings()
        .setRetrySettings(createGroupRetrySettingBuilder.build());
    RetrySettings.Builder updateGroupRetrySettingBuilder =
        clientSettingsBuilder.updateGroupSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateGroupInitialRetryDelay() != null) {
      updateGroupRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateGroupInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGroupInitialRetryDelay set to "
                + this.clientProperties.getUpdateGroupInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateGroupRetryDelayMultiplier() != null) {
      updateGroupRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateGroupRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGroupRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateGroupRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateGroupMaxRetryDelay() != null) {
      updateGroupRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateGroupMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGroupMaxRetryDelay set to "
                + this.clientProperties.getUpdateGroupMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateGroupInitialRpcTimeout() != null) {
      updateGroupRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateGroupInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGroupInitialRpcTimeout set to "
                + this.clientProperties.getUpdateGroupInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateGroupRpcTimeoutMultiplier() != null) {
      updateGroupRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateGroupRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGroupRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateGroupRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateGroupMaxRpcTimeout() != null) {
      updateGroupRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateGroupMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGroupMaxRpcTimeout set to "
                + this.clientProperties.getUpdateGroupMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateGroupTotalTimeout() != null) {
      updateGroupRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateGroupTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateGroupTotalTimeout set to " + this.clientProperties.getUpdateGroupTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateGroupSettings()
        .setRetrySettings(updateGroupRetrySettingBuilder.build());
    RetrySettings.Builder deleteGroupRetrySettingBuilder =
        clientSettingsBuilder.deleteGroupSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteGroupInitialRetryDelay() != null) {
      deleteGroupRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteGroupInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGroupInitialRetryDelay set to "
                + this.clientProperties.getDeleteGroupInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteGroupRetryDelayMultiplier() != null) {
      deleteGroupRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteGroupRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGroupRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteGroupRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteGroupMaxRetryDelay() != null) {
      deleteGroupRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteGroupMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGroupMaxRetryDelay set to "
                + this.clientProperties.getDeleteGroupMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteGroupInitialRpcTimeout() != null) {
      deleteGroupRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteGroupInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGroupInitialRpcTimeout set to "
                + this.clientProperties.getDeleteGroupInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteGroupRpcTimeoutMultiplier() != null) {
      deleteGroupRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteGroupRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGroupRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteGroupRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteGroupMaxRpcTimeout() != null) {
      deleteGroupRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteGroupMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGroupMaxRpcTimeout set to "
                + this.clientProperties.getDeleteGroupMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteGroupTotalTimeout() != null) {
      deleteGroupRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteGroupTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteGroupTotalTimeout set to " + this.clientProperties.getDeleteGroupTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteGroupSettings()
        .setRetrySettings(deleteGroupRetrySettingBuilder.build());
    RetrySettings.Builder listGroupMembersRetrySettingBuilder =
        clientSettingsBuilder.listGroupMembersSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListGroupMembersInitialRetryDelay() != null) {
      listGroupMembersRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListGroupMembersInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGroupMembersInitialRetryDelay set to "
                + this.clientProperties.getListGroupMembersInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListGroupMembersRetryDelayMultiplier() != null) {
      listGroupMembersRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListGroupMembersRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGroupMembersRetryDelayMultiplier set to "
                + this.clientProperties.getListGroupMembersRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListGroupMembersMaxRetryDelay() != null) {
      listGroupMembersRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListGroupMembersMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGroupMembersMaxRetryDelay set to "
                + this.clientProperties.getListGroupMembersMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListGroupMembersInitialRpcTimeout() != null) {
      listGroupMembersRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListGroupMembersInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGroupMembersInitialRpcTimeout set to "
                + this.clientProperties.getListGroupMembersInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListGroupMembersRpcTimeoutMultiplier() != null) {
      listGroupMembersRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListGroupMembersRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGroupMembersRpcTimeoutMultiplier set to "
                + this.clientProperties.getListGroupMembersRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListGroupMembersMaxRpcTimeout() != null) {
      listGroupMembersRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListGroupMembersMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGroupMembersMaxRpcTimeout set to "
                + this.clientProperties.getListGroupMembersMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListGroupMembersTotalTimeout() != null) {
      listGroupMembersRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListGroupMembersTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListGroupMembersTotalTimeout set to "
                + this.clientProperties.getListGroupMembersTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listGroupMembersSettings()
        .setRetrySettings(listGroupMembersRetrySettingBuilder.build());
    return GroupServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-group-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
