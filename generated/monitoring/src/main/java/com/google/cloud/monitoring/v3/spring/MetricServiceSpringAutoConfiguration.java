/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.monitoring.v3.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.monitoring.v3.MetricServiceClient;
import com.google.cloud.monitoring.v3.MetricServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link MetricServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(MetricServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.monitoring.v3.spring.auto.metric-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({MetricServiceSpringProperties.class, GlobalProperties.class})
public class MetricServiceSpringAutoConfiguration {
  private final MetricServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(MetricServiceSpringAutoConfiguration.class);

  protected MetricServiceSpringAutoConfiguration(
      MetricServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider metricServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from MetricService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultMetricServiceTransportChannelProvider() {
    return MetricServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a MetricServiceClient bean configured to use the default credentials provider
   * (obtained with metricServiceCredentials()) and its default transport channel provider
   * (defaultMetricServiceTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in MetricServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public MetricServiceClient metricServiceClient(
      @Qualifier("metricServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultMetricServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    MetricServiceSettings.Builder clientSettingsBuilder =
        MetricServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          MetricServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    RetrySettings.Builder listMonitoredResourceDescriptorsRetrySettingBuilder =
        clientSettingsBuilder
            .listMonitoredResourceDescriptorsSettings()
            .getRetrySettings()
            .toBuilder();
    if (this.clientProperties.getListMonitoredResourceDescriptorsInitialRetryDelay() != null) {
      listMonitoredResourceDescriptorsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListMonitoredResourceDescriptorsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMonitoredResourceDescriptorsInitialRetryDelay set to "
                + this.clientProperties.getListMonitoredResourceDescriptorsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListMonitoredResourceDescriptorsRetryDelayMultiplier() != null) {
      listMonitoredResourceDescriptorsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListMonitoredResourceDescriptorsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMonitoredResourceDescriptorsRetryDelayMultiplier set to "
                + this.clientProperties.getListMonitoredResourceDescriptorsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListMonitoredResourceDescriptorsMaxRetryDelay() != null) {
      listMonitoredResourceDescriptorsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListMonitoredResourceDescriptorsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMonitoredResourceDescriptorsMaxRetryDelay set to "
                + this.clientProperties.getListMonitoredResourceDescriptorsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListMonitoredResourceDescriptorsInitialRpcTimeout() != null) {
      listMonitoredResourceDescriptorsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListMonitoredResourceDescriptorsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMonitoredResourceDescriptorsInitialRpcTimeout set to "
                + this.clientProperties.getListMonitoredResourceDescriptorsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListMonitoredResourceDescriptorsRpcTimeoutMultiplier() != null) {
      listMonitoredResourceDescriptorsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListMonitoredResourceDescriptorsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMonitoredResourceDescriptorsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListMonitoredResourceDescriptorsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListMonitoredResourceDescriptorsMaxRpcTimeout() != null) {
      listMonitoredResourceDescriptorsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListMonitoredResourceDescriptorsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMonitoredResourceDescriptorsMaxRpcTimeout set to "
                + this.clientProperties.getListMonitoredResourceDescriptorsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListMonitoredResourceDescriptorsTotalTimeout() != null) {
      listMonitoredResourceDescriptorsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListMonitoredResourceDescriptorsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMonitoredResourceDescriptorsTotalTimeout set to "
                + this.clientProperties.getListMonitoredResourceDescriptorsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listMonitoredResourceDescriptorsSettings()
        .setRetrySettings(listMonitoredResourceDescriptorsRetrySettingBuilder.build());
    RetrySettings.Builder getMonitoredResourceDescriptorRetrySettingBuilder =
        clientSettingsBuilder
            .getMonitoredResourceDescriptorSettings()
            .getRetrySettings()
            .toBuilder();
    if (this.clientProperties.getGetMonitoredResourceDescriptorInitialRetryDelay() != null) {
      getMonitoredResourceDescriptorRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetMonitoredResourceDescriptorInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMonitoredResourceDescriptorInitialRetryDelay set to "
                + this.clientProperties.getGetMonitoredResourceDescriptorInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetMonitoredResourceDescriptorRetryDelayMultiplier() != null) {
      getMonitoredResourceDescriptorRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetMonitoredResourceDescriptorRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMonitoredResourceDescriptorRetryDelayMultiplier set to "
                + this.clientProperties.getGetMonitoredResourceDescriptorRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetMonitoredResourceDescriptorMaxRetryDelay() != null) {
      getMonitoredResourceDescriptorRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetMonitoredResourceDescriptorMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMonitoredResourceDescriptorMaxRetryDelay set to "
                + this.clientProperties.getGetMonitoredResourceDescriptorMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetMonitoredResourceDescriptorInitialRpcTimeout() != null) {
      getMonitoredResourceDescriptorRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetMonitoredResourceDescriptorInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMonitoredResourceDescriptorInitialRpcTimeout set to "
                + this.clientProperties.getGetMonitoredResourceDescriptorInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetMonitoredResourceDescriptorRpcTimeoutMultiplier() != null) {
      getMonitoredResourceDescriptorRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetMonitoredResourceDescriptorRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMonitoredResourceDescriptorRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetMonitoredResourceDescriptorRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetMonitoredResourceDescriptorMaxRpcTimeout() != null) {
      getMonitoredResourceDescriptorRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetMonitoredResourceDescriptorMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMonitoredResourceDescriptorMaxRpcTimeout set to "
                + this.clientProperties.getGetMonitoredResourceDescriptorMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetMonitoredResourceDescriptorTotalTimeout() != null) {
      getMonitoredResourceDescriptorRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetMonitoredResourceDescriptorTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMonitoredResourceDescriptorTotalTimeout set to "
                + this.clientProperties.getGetMonitoredResourceDescriptorTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getMonitoredResourceDescriptorSettings()
        .setRetrySettings(getMonitoredResourceDescriptorRetrySettingBuilder.build());
    RetrySettings.Builder listMetricDescriptorsRetrySettingBuilder =
        clientSettingsBuilder.listMetricDescriptorsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListMetricDescriptorsInitialRetryDelay() != null) {
      listMetricDescriptorsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListMetricDescriptorsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMetricDescriptorsInitialRetryDelay set to "
                + this.clientProperties.getListMetricDescriptorsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListMetricDescriptorsRetryDelayMultiplier() != null) {
      listMetricDescriptorsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListMetricDescriptorsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMetricDescriptorsRetryDelayMultiplier set to "
                + this.clientProperties.getListMetricDescriptorsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListMetricDescriptorsMaxRetryDelay() != null) {
      listMetricDescriptorsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListMetricDescriptorsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMetricDescriptorsMaxRetryDelay set to "
                + this.clientProperties.getListMetricDescriptorsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListMetricDescriptorsInitialRpcTimeout() != null) {
      listMetricDescriptorsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListMetricDescriptorsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMetricDescriptorsInitialRpcTimeout set to "
                + this.clientProperties.getListMetricDescriptorsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListMetricDescriptorsRpcTimeoutMultiplier() != null) {
      listMetricDescriptorsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListMetricDescriptorsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMetricDescriptorsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListMetricDescriptorsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListMetricDescriptorsMaxRpcTimeout() != null) {
      listMetricDescriptorsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListMetricDescriptorsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMetricDescriptorsMaxRpcTimeout set to "
                + this.clientProperties.getListMetricDescriptorsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListMetricDescriptorsTotalTimeout() != null) {
      listMetricDescriptorsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListMetricDescriptorsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListMetricDescriptorsTotalTimeout set to "
                + this.clientProperties.getListMetricDescriptorsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listMetricDescriptorsSettings()
        .setRetrySettings(listMetricDescriptorsRetrySettingBuilder.build());
    RetrySettings.Builder getMetricDescriptorRetrySettingBuilder =
        clientSettingsBuilder.getMetricDescriptorSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetMetricDescriptorInitialRetryDelay() != null) {
      getMetricDescriptorRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetMetricDescriptorInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMetricDescriptorInitialRetryDelay set to "
                + this.clientProperties.getGetMetricDescriptorInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetMetricDescriptorRetryDelayMultiplier() != null) {
      getMetricDescriptorRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetMetricDescriptorRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMetricDescriptorRetryDelayMultiplier set to "
                + this.clientProperties.getGetMetricDescriptorRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetMetricDescriptorMaxRetryDelay() != null) {
      getMetricDescriptorRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetMetricDescriptorMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMetricDescriptorMaxRetryDelay set to "
                + this.clientProperties.getGetMetricDescriptorMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetMetricDescriptorInitialRpcTimeout() != null) {
      getMetricDescriptorRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetMetricDescriptorInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMetricDescriptorInitialRpcTimeout set to "
                + this.clientProperties.getGetMetricDescriptorInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetMetricDescriptorRpcTimeoutMultiplier() != null) {
      getMetricDescriptorRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetMetricDescriptorRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMetricDescriptorRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetMetricDescriptorRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetMetricDescriptorMaxRpcTimeout() != null) {
      getMetricDescriptorRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetMetricDescriptorMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMetricDescriptorMaxRpcTimeout set to "
                + this.clientProperties.getGetMetricDescriptorMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetMetricDescriptorTotalTimeout() != null) {
      getMetricDescriptorRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetMetricDescriptorTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetMetricDescriptorTotalTimeout set to "
                + this.clientProperties.getGetMetricDescriptorTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getMetricDescriptorSettings()
        .setRetrySettings(getMetricDescriptorRetrySettingBuilder.build());
    RetrySettings.Builder createMetricDescriptorRetrySettingBuilder =
        clientSettingsBuilder.createMetricDescriptorSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateMetricDescriptorInitialRpcTimeout() != null) {
      createMetricDescriptorRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateMetricDescriptorInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateMetricDescriptorInitialRpcTimeout set to "
                + this.clientProperties.getCreateMetricDescriptorInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateMetricDescriptorRpcTimeoutMultiplier() != null) {
      createMetricDescriptorRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateMetricDescriptorRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateMetricDescriptorRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateMetricDescriptorRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateMetricDescriptorMaxRpcTimeout() != null) {
      createMetricDescriptorRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateMetricDescriptorMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateMetricDescriptorMaxRpcTimeout set to "
                + this.clientProperties.getCreateMetricDescriptorMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateMetricDescriptorTotalTimeout() != null) {
      createMetricDescriptorRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateMetricDescriptorTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateMetricDescriptorTotalTimeout set to "
                + this.clientProperties.getCreateMetricDescriptorTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createMetricDescriptorSettings()
        .setRetrySettings(createMetricDescriptorRetrySettingBuilder.build());
    RetrySettings.Builder deleteMetricDescriptorRetrySettingBuilder =
        clientSettingsBuilder.deleteMetricDescriptorSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteMetricDescriptorInitialRetryDelay() != null) {
      deleteMetricDescriptorRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteMetricDescriptorInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteMetricDescriptorInitialRetryDelay set to "
                + this.clientProperties.getDeleteMetricDescriptorInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteMetricDescriptorRetryDelayMultiplier() != null) {
      deleteMetricDescriptorRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteMetricDescriptorRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteMetricDescriptorRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteMetricDescriptorRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteMetricDescriptorMaxRetryDelay() != null) {
      deleteMetricDescriptorRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteMetricDescriptorMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteMetricDescriptorMaxRetryDelay set to "
                + this.clientProperties.getDeleteMetricDescriptorMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteMetricDescriptorInitialRpcTimeout() != null) {
      deleteMetricDescriptorRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteMetricDescriptorInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteMetricDescriptorInitialRpcTimeout set to "
                + this.clientProperties.getDeleteMetricDescriptorInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteMetricDescriptorRpcTimeoutMultiplier() != null) {
      deleteMetricDescriptorRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteMetricDescriptorRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteMetricDescriptorRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteMetricDescriptorRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteMetricDescriptorMaxRpcTimeout() != null) {
      deleteMetricDescriptorRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteMetricDescriptorMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteMetricDescriptorMaxRpcTimeout set to "
                + this.clientProperties.getDeleteMetricDescriptorMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteMetricDescriptorTotalTimeout() != null) {
      deleteMetricDescriptorRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteMetricDescriptorTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteMetricDescriptorTotalTimeout set to "
                + this.clientProperties.getDeleteMetricDescriptorTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteMetricDescriptorSettings()
        .setRetrySettings(deleteMetricDescriptorRetrySettingBuilder.build());
    RetrySettings.Builder listTimeSeriesRetrySettingBuilder =
        clientSettingsBuilder.listTimeSeriesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListTimeSeriesInitialRetryDelay() != null) {
      listTimeSeriesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListTimeSeriesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTimeSeriesInitialRetryDelay set to "
                + this.clientProperties.getListTimeSeriesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListTimeSeriesRetryDelayMultiplier() != null) {
      listTimeSeriesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListTimeSeriesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTimeSeriesRetryDelayMultiplier set to "
                + this.clientProperties.getListTimeSeriesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListTimeSeriesMaxRetryDelay() != null) {
      listTimeSeriesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListTimeSeriesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTimeSeriesMaxRetryDelay set to "
                + this.clientProperties.getListTimeSeriesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListTimeSeriesInitialRpcTimeout() != null) {
      listTimeSeriesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListTimeSeriesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTimeSeriesInitialRpcTimeout set to "
                + this.clientProperties.getListTimeSeriesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListTimeSeriesRpcTimeoutMultiplier() != null) {
      listTimeSeriesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListTimeSeriesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTimeSeriesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListTimeSeriesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListTimeSeriesMaxRpcTimeout() != null) {
      listTimeSeriesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListTimeSeriesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTimeSeriesMaxRpcTimeout set to "
                + this.clientProperties.getListTimeSeriesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListTimeSeriesTotalTimeout() != null) {
      listTimeSeriesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListTimeSeriesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListTimeSeriesTotalTimeout set to "
                + this.clientProperties.getListTimeSeriesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listTimeSeriesSettings()
        .setRetrySettings(listTimeSeriesRetrySettingBuilder.build());
    RetrySettings.Builder createTimeSeriesRetrySettingBuilder =
        clientSettingsBuilder.createTimeSeriesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateTimeSeriesInitialRpcTimeout() != null) {
      createTimeSeriesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateTimeSeriesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTimeSeriesInitialRpcTimeout set to "
                + this.clientProperties.getCreateTimeSeriesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateTimeSeriesRpcTimeoutMultiplier() != null) {
      createTimeSeriesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateTimeSeriesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTimeSeriesRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateTimeSeriesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateTimeSeriesMaxRpcTimeout() != null) {
      createTimeSeriesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateTimeSeriesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTimeSeriesMaxRpcTimeout set to "
                + this.clientProperties.getCreateTimeSeriesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateTimeSeriesTotalTimeout() != null) {
      createTimeSeriesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateTimeSeriesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateTimeSeriesTotalTimeout set to "
                + this.clientProperties.getCreateTimeSeriesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createTimeSeriesSettings()
        .setRetrySettings(createTimeSeriesRetrySettingBuilder.build());
    RetrySettings.Builder createServiceTimeSeriesRetrySettingBuilder =
        clientSettingsBuilder.createServiceTimeSeriesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateServiceTimeSeriesRpcTimeoutMultiplier() != null) {
      createServiceTimeSeriesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateServiceTimeSeriesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceTimeSeriesRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateServiceTimeSeriesRpcTimeoutMultiplier());
      }
    }
    clientSettingsBuilder
        .createServiceTimeSeriesSettings()
        .setRetrySettings(createServiceTimeSeriesRetrySettingBuilder.build());
    return MetricServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-metric-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
