/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.monitoring.v3.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.monitoring.v3.NotificationChannelServiceClient;
import com.google.cloud.monitoring.v3.NotificationChannelServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link NotificationChannelServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(NotificationChannelServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.monitoring.v3.spring.auto.notification-channel-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({
  NotificationChannelServiceSpringProperties.class,
  GlobalProperties.class
})
public class NotificationChannelServiceSpringAutoConfiguration {
  private final NotificationChannelServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(NotificationChannelServiceSpringAutoConfiguration.class);

  protected NotificationChannelServiceSpringAutoConfiguration(
      NotificationChannelServiceSpringProperties clientProperties,
      GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider notificationChannelServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from NotificationChannelService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultNotificationChannelServiceTransportChannelProvider() {
    return NotificationChannelServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a NotificationChannelServiceClient bean configured to use the default credentials
   * provider (obtained with notificationChannelServiceCredentials()) and its default transport
   * channel provider (defaultNotificationChannelServiceTransportChannelProvider()). It also
   * configures the quota project ID if provided. It will configure an executor provider in case
   * there is more than one thread configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in
   * NotificationChannelServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public NotificationChannelServiceClient notificationChannelServiceClient(
      @Qualifier("notificationChannelServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultNotificationChannelServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    NotificationChannelServiceSettings.Builder clientSettingsBuilder =
        NotificationChannelServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          NotificationChannelServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    RetrySettings.Builder listNotificationChannelDescriptorsRetrySettingBuilder =
        clientSettingsBuilder
            .listNotificationChannelDescriptorsSettings()
            .getRetrySettings()
            .toBuilder();
    if (this.clientProperties.getListNotificationChannelDescriptorsInitialRetryDelay() != null) {
      listNotificationChannelDescriptorsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListNotificationChannelDescriptorsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationChannelDescriptorsInitialRetryDelay set to "
                + this.clientProperties.getListNotificationChannelDescriptorsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListNotificationChannelDescriptorsRetryDelayMultiplier() != null) {
      listNotificationChannelDescriptorsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListNotificationChannelDescriptorsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationChannelDescriptorsRetryDelayMultiplier set to "
                + this.clientProperties
                    .getListNotificationChannelDescriptorsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListNotificationChannelDescriptorsMaxRetryDelay() != null) {
      listNotificationChannelDescriptorsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListNotificationChannelDescriptorsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationChannelDescriptorsMaxRetryDelay set to "
                + this.clientProperties.getListNotificationChannelDescriptorsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListNotificationChannelDescriptorsInitialRpcTimeout() != null) {
      listNotificationChannelDescriptorsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListNotificationChannelDescriptorsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationChannelDescriptorsInitialRpcTimeout set to "
                + this.clientProperties.getListNotificationChannelDescriptorsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListNotificationChannelDescriptorsRpcTimeoutMultiplier() != null) {
      listNotificationChannelDescriptorsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListNotificationChannelDescriptorsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationChannelDescriptorsRpcTimeoutMultiplier set to "
                + this.clientProperties
                    .getListNotificationChannelDescriptorsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListNotificationChannelDescriptorsMaxRpcTimeout() != null) {
      listNotificationChannelDescriptorsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListNotificationChannelDescriptorsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationChannelDescriptorsMaxRpcTimeout set to "
                + this.clientProperties.getListNotificationChannelDescriptorsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListNotificationChannelDescriptorsTotalTimeout() != null) {
      listNotificationChannelDescriptorsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListNotificationChannelDescriptorsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationChannelDescriptorsTotalTimeout set to "
                + this.clientProperties.getListNotificationChannelDescriptorsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listNotificationChannelDescriptorsSettings()
        .setRetrySettings(listNotificationChannelDescriptorsRetrySettingBuilder.build());
    RetrySettings.Builder getNotificationChannelDescriptorRetrySettingBuilder =
        clientSettingsBuilder
            .getNotificationChannelDescriptorSettings()
            .getRetrySettings()
            .toBuilder();
    if (this.clientProperties.getGetNotificationChannelDescriptorInitialRetryDelay() != null) {
      getNotificationChannelDescriptorRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetNotificationChannelDescriptorInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelDescriptorInitialRetryDelay set to "
                + this.clientProperties.getGetNotificationChannelDescriptorInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetNotificationChannelDescriptorRetryDelayMultiplier() != null) {
      getNotificationChannelDescriptorRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetNotificationChannelDescriptorRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelDescriptorRetryDelayMultiplier set to "
                + this.clientProperties.getGetNotificationChannelDescriptorRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetNotificationChannelDescriptorMaxRetryDelay() != null) {
      getNotificationChannelDescriptorRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetNotificationChannelDescriptorMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelDescriptorMaxRetryDelay set to "
                + this.clientProperties.getGetNotificationChannelDescriptorMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetNotificationChannelDescriptorInitialRpcTimeout() != null) {
      getNotificationChannelDescriptorRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetNotificationChannelDescriptorInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelDescriptorInitialRpcTimeout set to "
                + this.clientProperties.getGetNotificationChannelDescriptorInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetNotificationChannelDescriptorRpcTimeoutMultiplier() != null) {
      getNotificationChannelDescriptorRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetNotificationChannelDescriptorRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelDescriptorRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetNotificationChannelDescriptorRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetNotificationChannelDescriptorMaxRpcTimeout() != null) {
      getNotificationChannelDescriptorRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetNotificationChannelDescriptorMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelDescriptorMaxRpcTimeout set to "
                + this.clientProperties.getGetNotificationChannelDescriptorMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetNotificationChannelDescriptorTotalTimeout() != null) {
      getNotificationChannelDescriptorRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetNotificationChannelDescriptorTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelDescriptorTotalTimeout set to "
                + this.clientProperties.getGetNotificationChannelDescriptorTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getNotificationChannelDescriptorSettings()
        .setRetrySettings(getNotificationChannelDescriptorRetrySettingBuilder.build());
    RetrySettings.Builder listNotificationChannelsRetrySettingBuilder =
        clientSettingsBuilder.listNotificationChannelsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListNotificationChannelsInitialRetryDelay() != null) {
      listNotificationChannelsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListNotificationChannelsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationChannelsInitialRetryDelay set to "
                + this.clientProperties.getListNotificationChannelsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListNotificationChannelsRetryDelayMultiplier() != null) {
      listNotificationChannelsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListNotificationChannelsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationChannelsRetryDelayMultiplier set to "
                + this.clientProperties.getListNotificationChannelsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListNotificationChannelsMaxRetryDelay() != null) {
      listNotificationChannelsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListNotificationChannelsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationChannelsMaxRetryDelay set to "
                + this.clientProperties.getListNotificationChannelsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListNotificationChannelsInitialRpcTimeout() != null) {
      listNotificationChannelsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListNotificationChannelsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationChannelsInitialRpcTimeout set to "
                + this.clientProperties.getListNotificationChannelsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListNotificationChannelsRpcTimeoutMultiplier() != null) {
      listNotificationChannelsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListNotificationChannelsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationChannelsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListNotificationChannelsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListNotificationChannelsMaxRpcTimeout() != null) {
      listNotificationChannelsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListNotificationChannelsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationChannelsMaxRpcTimeout set to "
                + this.clientProperties.getListNotificationChannelsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListNotificationChannelsTotalTimeout() != null) {
      listNotificationChannelsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListNotificationChannelsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListNotificationChannelsTotalTimeout set to "
                + this.clientProperties.getListNotificationChannelsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listNotificationChannelsSettings()
        .setRetrySettings(listNotificationChannelsRetrySettingBuilder.build());
    RetrySettings.Builder getNotificationChannelRetrySettingBuilder =
        clientSettingsBuilder.getNotificationChannelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetNotificationChannelInitialRetryDelay() != null) {
      getNotificationChannelRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetNotificationChannelInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelInitialRetryDelay set to "
                + this.clientProperties.getGetNotificationChannelInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetNotificationChannelRetryDelayMultiplier() != null) {
      getNotificationChannelRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetNotificationChannelRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelRetryDelayMultiplier set to "
                + this.clientProperties.getGetNotificationChannelRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetNotificationChannelMaxRetryDelay() != null) {
      getNotificationChannelRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetNotificationChannelMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelMaxRetryDelay set to "
                + this.clientProperties.getGetNotificationChannelMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetNotificationChannelInitialRpcTimeout() != null) {
      getNotificationChannelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetNotificationChannelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelInitialRpcTimeout set to "
                + this.clientProperties.getGetNotificationChannelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetNotificationChannelRpcTimeoutMultiplier() != null) {
      getNotificationChannelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetNotificationChannelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetNotificationChannelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetNotificationChannelMaxRpcTimeout() != null) {
      getNotificationChannelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetNotificationChannelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelMaxRpcTimeout set to "
                + this.clientProperties.getGetNotificationChannelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetNotificationChannelTotalTimeout() != null) {
      getNotificationChannelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetNotificationChannelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelTotalTimeout set to "
                + this.clientProperties.getGetNotificationChannelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getNotificationChannelSettings()
        .setRetrySettings(getNotificationChannelRetrySettingBuilder.build());
    RetrySettings.Builder createNotificationChannelRetrySettingBuilder =
        clientSettingsBuilder.createNotificationChannelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateNotificationChannelInitialRpcTimeout() != null) {
      createNotificationChannelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateNotificationChannelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNotificationChannelInitialRpcTimeout set to "
                + this.clientProperties.getCreateNotificationChannelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateNotificationChannelRpcTimeoutMultiplier() != null) {
      createNotificationChannelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateNotificationChannelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNotificationChannelRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateNotificationChannelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateNotificationChannelMaxRpcTimeout() != null) {
      createNotificationChannelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateNotificationChannelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNotificationChannelMaxRpcTimeout set to "
                + this.clientProperties.getCreateNotificationChannelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateNotificationChannelTotalTimeout() != null) {
      createNotificationChannelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateNotificationChannelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateNotificationChannelTotalTimeout set to "
                + this.clientProperties.getCreateNotificationChannelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createNotificationChannelSettings()
        .setRetrySettings(createNotificationChannelRetrySettingBuilder.build());
    RetrySettings.Builder updateNotificationChannelRetrySettingBuilder =
        clientSettingsBuilder.updateNotificationChannelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateNotificationChannelInitialRpcTimeout() != null) {
      updateNotificationChannelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateNotificationChannelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateNotificationChannelInitialRpcTimeout set to "
                + this.clientProperties.getUpdateNotificationChannelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateNotificationChannelRpcTimeoutMultiplier() != null) {
      updateNotificationChannelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateNotificationChannelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateNotificationChannelRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateNotificationChannelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateNotificationChannelMaxRpcTimeout() != null) {
      updateNotificationChannelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateNotificationChannelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateNotificationChannelMaxRpcTimeout set to "
                + this.clientProperties.getUpdateNotificationChannelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateNotificationChannelTotalTimeout() != null) {
      updateNotificationChannelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateNotificationChannelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateNotificationChannelTotalTimeout set to "
                + this.clientProperties.getUpdateNotificationChannelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateNotificationChannelSettings()
        .setRetrySettings(updateNotificationChannelRetrySettingBuilder.build());
    RetrySettings.Builder deleteNotificationChannelRetrySettingBuilder =
        clientSettingsBuilder.deleteNotificationChannelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteNotificationChannelInitialRetryDelay() != null) {
      deleteNotificationChannelRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteNotificationChannelInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNotificationChannelInitialRetryDelay set to "
                + this.clientProperties.getDeleteNotificationChannelInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteNotificationChannelRetryDelayMultiplier() != null) {
      deleteNotificationChannelRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteNotificationChannelRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNotificationChannelRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteNotificationChannelRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteNotificationChannelMaxRetryDelay() != null) {
      deleteNotificationChannelRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteNotificationChannelMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNotificationChannelMaxRetryDelay set to "
                + this.clientProperties.getDeleteNotificationChannelMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteNotificationChannelInitialRpcTimeout() != null) {
      deleteNotificationChannelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteNotificationChannelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNotificationChannelInitialRpcTimeout set to "
                + this.clientProperties.getDeleteNotificationChannelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteNotificationChannelRpcTimeoutMultiplier() != null) {
      deleteNotificationChannelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteNotificationChannelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNotificationChannelRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteNotificationChannelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteNotificationChannelMaxRpcTimeout() != null) {
      deleteNotificationChannelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteNotificationChannelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNotificationChannelMaxRpcTimeout set to "
                + this.clientProperties.getDeleteNotificationChannelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteNotificationChannelTotalTimeout() != null) {
      deleteNotificationChannelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteNotificationChannelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteNotificationChannelTotalTimeout set to "
                + this.clientProperties.getDeleteNotificationChannelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteNotificationChannelSettings()
        .setRetrySettings(deleteNotificationChannelRetrySettingBuilder.build());
    RetrySettings.Builder sendNotificationChannelVerificationCodeRetrySettingBuilder =
        clientSettingsBuilder
            .sendNotificationChannelVerificationCodeSettings()
            .getRetrySettings()
            .toBuilder();
    if (this.clientProperties.getSendNotificationChannelVerificationCodeInitialRpcTimeout()
        != null) {
      sendNotificationChannelVerificationCodeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSendNotificationChannelVerificationCodeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SendNotificationChannelVerificationCodeInitialRpcTimeout set to "
                + this.clientProperties
                    .getSendNotificationChannelVerificationCodeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSendNotificationChannelVerificationCodeRpcTimeoutMultiplier()
        != null) {
      sendNotificationChannelVerificationCodeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSendNotificationChannelVerificationCodeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SendNotificationChannelVerificationCodeRpcTimeoutMultiplier set to "
                + this.clientProperties
                    .getSendNotificationChannelVerificationCodeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSendNotificationChannelVerificationCodeMaxRpcTimeout() != null) {
      sendNotificationChannelVerificationCodeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSendNotificationChannelVerificationCodeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SendNotificationChannelVerificationCodeMaxRpcTimeout set to "
                + this.clientProperties.getSendNotificationChannelVerificationCodeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSendNotificationChannelVerificationCodeTotalTimeout() != null) {
      sendNotificationChannelVerificationCodeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSendNotificationChannelVerificationCodeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SendNotificationChannelVerificationCodeTotalTimeout set to "
                + this.clientProperties.getSendNotificationChannelVerificationCodeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .sendNotificationChannelVerificationCodeSettings()
        .setRetrySettings(sendNotificationChannelVerificationCodeRetrySettingBuilder.build());
    RetrySettings.Builder getNotificationChannelVerificationCodeRetrySettingBuilder =
        clientSettingsBuilder
            .getNotificationChannelVerificationCodeSettings()
            .getRetrySettings()
            .toBuilder();
    if (this.clientProperties.getGetNotificationChannelVerificationCodeInitialRetryDelay()
        != null) {
      getNotificationChannelVerificationCodeRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetNotificationChannelVerificationCodeInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelVerificationCodeInitialRetryDelay set to "
                + this.clientProperties
                    .getGetNotificationChannelVerificationCodeInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetNotificationChannelVerificationCodeRetryDelayMultiplier()
        != null) {
      getNotificationChannelVerificationCodeRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetNotificationChannelVerificationCodeRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelVerificationCodeRetryDelayMultiplier set to "
                + this.clientProperties
                    .getGetNotificationChannelVerificationCodeRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetNotificationChannelVerificationCodeMaxRetryDelay() != null) {
      getNotificationChannelVerificationCodeRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetNotificationChannelVerificationCodeMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelVerificationCodeMaxRetryDelay set to "
                + this.clientProperties.getGetNotificationChannelVerificationCodeMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetNotificationChannelVerificationCodeInitialRpcTimeout()
        != null) {
      getNotificationChannelVerificationCodeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetNotificationChannelVerificationCodeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelVerificationCodeInitialRpcTimeout set to "
                + this.clientProperties
                    .getGetNotificationChannelVerificationCodeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetNotificationChannelVerificationCodeRpcTimeoutMultiplier()
        != null) {
      getNotificationChannelVerificationCodeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetNotificationChannelVerificationCodeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelVerificationCodeRpcTimeoutMultiplier set to "
                + this.clientProperties
                    .getGetNotificationChannelVerificationCodeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetNotificationChannelVerificationCodeMaxRpcTimeout() != null) {
      getNotificationChannelVerificationCodeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetNotificationChannelVerificationCodeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelVerificationCodeMaxRpcTimeout set to "
                + this.clientProperties.getGetNotificationChannelVerificationCodeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetNotificationChannelVerificationCodeTotalTimeout() != null) {
      getNotificationChannelVerificationCodeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetNotificationChannelVerificationCodeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetNotificationChannelVerificationCodeTotalTimeout set to "
                + this.clientProperties.getGetNotificationChannelVerificationCodeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getNotificationChannelVerificationCodeSettings()
        .setRetrySettings(getNotificationChannelVerificationCodeRetrySettingBuilder.build());
    RetrySettings.Builder verifyNotificationChannelRetrySettingBuilder =
        clientSettingsBuilder.verifyNotificationChannelSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getVerifyNotificationChannelInitialRetryDelay() != null) {
      verifyNotificationChannelRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getVerifyNotificationChannelInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "VerifyNotificationChannelInitialRetryDelay set to "
                + this.clientProperties.getVerifyNotificationChannelInitialRetryDelay());
      }
    }
    if (this.clientProperties.getVerifyNotificationChannelRetryDelayMultiplier() != null) {
      verifyNotificationChannelRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getVerifyNotificationChannelRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "VerifyNotificationChannelRetryDelayMultiplier set to "
                + this.clientProperties.getVerifyNotificationChannelRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getVerifyNotificationChannelMaxRetryDelay() != null) {
      verifyNotificationChannelRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getVerifyNotificationChannelMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "VerifyNotificationChannelMaxRetryDelay set to "
                + this.clientProperties.getVerifyNotificationChannelMaxRetryDelay());
      }
    }
    if (this.clientProperties.getVerifyNotificationChannelInitialRpcTimeout() != null) {
      verifyNotificationChannelRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getVerifyNotificationChannelInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "VerifyNotificationChannelInitialRpcTimeout set to "
                + this.clientProperties.getVerifyNotificationChannelInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getVerifyNotificationChannelRpcTimeoutMultiplier() != null) {
      verifyNotificationChannelRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getVerifyNotificationChannelRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "VerifyNotificationChannelRpcTimeoutMultiplier set to "
                + this.clientProperties.getVerifyNotificationChannelRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getVerifyNotificationChannelMaxRpcTimeout() != null) {
      verifyNotificationChannelRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getVerifyNotificationChannelMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "VerifyNotificationChannelMaxRpcTimeout set to "
                + this.clientProperties.getVerifyNotificationChannelMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getVerifyNotificationChannelTotalTimeout() != null) {
      verifyNotificationChannelRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getVerifyNotificationChannelTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "VerifyNotificationChannelTotalTimeout set to "
                + this.clientProperties.getVerifyNotificationChannelTotalTimeout());
      }
    }
    clientSettingsBuilder
        .verifyNotificationChannelSettings()
        .setRetrySettings(verifyNotificationChannelRetrySettingBuilder.build());
    return NotificationChannelServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-notification-channel-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
