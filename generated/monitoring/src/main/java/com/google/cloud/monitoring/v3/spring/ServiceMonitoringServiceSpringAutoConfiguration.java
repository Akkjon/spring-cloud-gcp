/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.monitoring.v3.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.monitoring.v3.ServiceMonitoringServiceClient;
import com.google.cloud.monitoring.v3.ServiceMonitoringServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ServiceMonitoringServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ServiceMonitoringServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.monitoring.v3.spring.auto.service-monitoring-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({
  ServiceMonitoringServiceSpringProperties.class,
  GlobalProperties.class
})
public class ServiceMonitoringServiceSpringAutoConfiguration {
  private final ServiceMonitoringServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(ServiceMonitoringServiceSpringAutoConfiguration.class);

  protected ServiceMonitoringServiceSpringAutoConfiguration(
      ServiceMonitoringServiceSpringProperties clientProperties,
      GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider serviceMonitoringServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from ServiceMonitoringService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultServiceMonitoringServiceTransportChannelProvider() {
    return ServiceMonitoringServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ServiceMonitoringServiceClient bean configured to use the default credentials
   * provider (obtained with serviceMonitoringServiceCredentials()) and its default transport
   * channel provider (defaultServiceMonitoringServiceTransportChannelProvider()). It also
   * configures the quota project ID if provided. It will configure an executor provider in case
   * there is more than one thread configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in ServiceMonitoringServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public ServiceMonitoringServiceClient serviceMonitoringServiceClient(
      @Qualifier("serviceMonitoringServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultServiceMonitoringServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ServiceMonitoringServiceSettings.Builder clientSettingsBuilder =
        ServiceMonitoringServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ServiceMonitoringServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    RetrySettings.Builder createServiceRetrySettingBuilder =
        clientSettingsBuilder.createServiceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateServiceInitialRpcTimeout() != null) {
      createServiceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateServiceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceInitialRpcTimeout set to "
                + this.clientProperties.getCreateServiceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateServiceRpcTimeoutMultiplier() != null) {
      createServiceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateServiceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateServiceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateServiceMaxRpcTimeout() != null) {
      createServiceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateServiceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceMaxRpcTimeout set to "
                + this.clientProperties.getCreateServiceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateServiceTotalTimeout() != null) {
      createServiceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateServiceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceTotalTimeout set to "
                + this.clientProperties.getCreateServiceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createServiceSettings()
        .setRetrySettings(createServiceRetrySettingBuilder.build());
    RetrySettings.Builder getServiceRetrySettingBuilder =
        clientSettingsBuilder.getServiceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetServiceInitialRetryDelay() != null) {
      getServiceRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetServiceInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceInitialRetryDelay set to "
                + this.clientProperties.getGetServiceInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetServiceRetryDelayMultiplier() != null) {
      getServiceRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetServiceRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceRetryDelayMultiplier set to "
                + this.clientProperties.getGetServiceRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetServiceMaxRetryDelay() != null) {
      getServiceRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetServiceMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceMaxRetryDelay set to " + this.clientProperties.getGetServiceMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetServiceInitialRpcTimeout() != null) {
      getServiceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetServiceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceInitialRpcTimeout set to "
                + this.clientProperties.getGetServiceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetServiceRpcTimeoutMultiplier() != null) {
      getServiceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetServiceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetServiceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetServiceMaxRpcTimeout() != null) {
      getServiceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetServiceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceMaxRpcTimeout set to " + this.clientProperties.getGetServiceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetServiceTotalTimeout() != null) {
      getServiceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetServiceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceTotalTimeout set to " + this.clientProperties.getGetServiceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getServiceSettings()
        .setRetrySettings(getServiceRetrySettingBuilder.build());
    RetrySettings.Builder listServicesRetrySettingBuilder =
        clientSettingsBuilder.listServicesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListServicesInitialRetryDelay() != null) {
      listServicesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListServicesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesInitialRetryDelay set to "
                + this.clientProperties.getListServicesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListServicesRetryDelayMultiplier() != null) {
      listServicesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListServicesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesRetryDelayMultiplier set to "
                + this.clientProperties.getListServicesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListServicesMaxRetryDelay() != null) {
      listServicesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListServicesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesMaxRetryDelay set to "
                + this.clientProperties.getListServicesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListServicesInitialRpcTimeout() != null) {
      listServicesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListServicesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesInitialRpcTimeout set to "
                + this.clientProperties.getListServicesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListServicesRpcTimeoutMultiplier() != null) {
      listServicesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListServicesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListServicesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListServicesMaxRpcTimeout() != null) {
      listServicesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListServicesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesMaxRpcTimeout set to "
                + this.clientProperties.getListServicesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListServicesTotalTimeout() != null) {
      listServicesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListServicesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServicesTotalTimeout set to "
                + this.clientProperties.getListServicesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listServicesSettings()
        .setRetrySettings(listServicesRetrySettingBuilder.build());
    RetrySettings.Builder updateServiceRetrySettingBuilder =
        clientSettingsBuilder.updateServiceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateServiceInitialRpcTimeout() != null) {
      updateServiceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateServiceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServiceInitialRpcTimeout set to "
                + this.clientProperties.getUpdateServiceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateServiceRpcTimeoutMultiplier() != null) {
      updateServiceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateServiceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServiceRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateServiceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateServiceMaxRpcTimeout() != null) {
      updateServiceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateServiceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServiceMaxRpcTimeout set to "
                + this.clientProperties.getUpdateServiceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateServiceTotalTimeout() != null) {
      updateServiceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateServiceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServiceTotalTimeout set to "
                + this.clientProperties.getUpdateServiceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateServiceSettings()
        .setRetrySettings(updateServiceRetrySettingBuilder.build());
    RetrySettings.Builder deleteServiceRetrySettingBuilder =
        clientSettingsBuilder.deleteServiceSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteServiceInitialRetryDelay() != null) {
      deleteServiceRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteServiceInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceInitialRetryDelay set to "
                + this.clientProperties.getDeleteServiceInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteServiceRetryDelayMultiplier() != null) {
      deleteServiceRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteServiceRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteServiceRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteServiceMaxRetryDelay() != null) {
      deleteServiceRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteServiceMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceMaxRetryDelay set to "
                + this.clientProperties.getDeleteServiceMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteServiceInitialRpcTimeout() != null) {
      deleteServiceRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteServiceInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceInitialRpcTimeout set to "
                + this.clientProperties.getDeleteServiceInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteServiceRpcTimeoutMultiplier() != null) {
      deleteServiceRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteServiceRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteServiceRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteServiceMaxRpcTimeout() != null) {
      deleteServiceRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteServiceMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceMaxRpcTimeout set to "
                + this.clientProperties.getDeleteServiceMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteServiceTotalTimeout() != null) {
      deleteServiceRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteServiceTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceTotalTimeout set to "
                + this.clientProperties.getDeleteServiceTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteServiceSettings()
        .setRetrySettings(deleteServiceRetrySettingBuilder.build());
    RetrySettings.Builder createServiceLevelObjectiveRetrySettingBuilder =
        clientSettingsBuilder.createServiceLevelObjectiveSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateServiceLevelObjectiveInitialRpcTimeout() != null) {
      createServiceLevelObjectiveRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateServiceLevelObjectiveInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceLevelObjectiveInitialRpcTimeout set to "
                + this.clientProperties.getCreateServiceLevelObjectiveInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateServiceLevelObjectiveRpcTimeoutMultiplier() != null) {
      createServiceLevelObjectiveRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateServiceLevelObjectiveRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceLevelObjectiveRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateServiceLevelObjectiveRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateServiceLevelObjectiveMaxRpcTimeout() != null) {
      createServiceLevelObjectiveRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateServiceLevelObjectiveMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceLevelObjectiveMaxRpcTimeout set to "
                + this.clientProperties.getCreateServiceLevelObjectiveMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateServiceLevelObjectiveTotalTimeout() != null) {
      createServiceLevelObjectiveRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateServiceLevelObjectiveTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateServiceLevelObjectiveTotalTimeout set to "
                + this.clientProperties.getCreateServiceLevelObjectiveTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createServiceLevelObjectiveSettings()
        .setRetrySettings(createServiceLevelObjectiveRetrySettingBuilder.build());
    RetrySettings.Builder getServiceLevelObjectiveRetrySettingBuilder =
        clientSettingsBuilder.getServiceLevelObjectiveSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetServiceLevelObjectiveInitialRetryDelay() != null) {
      getServiceLevelObjectiveRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetServiceLevelObjectiveInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceLevelObjectiveInitialRetryDelay set to "
                + this.clientProperties.getGetServiceLevelObjectiveInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetServiceLevelObjectiveRetryDelayMultiplier() != null) {
      getServiceLevelObjectiveRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetServiceLevelObjectiveRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceLevelObjectiveRetryDelayMultiplier set to "
                + this.clientProperties.getGetServiceLevelObjectiveRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetServiceLevelObjectiveMaxRetryDelay() != null) {
      getServiceLevelObjectiveRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetServiceLevelObjectiveMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceLevelObjectiveMaxRetryDelay set to "
                + this.clientProperties.getGetServiceLevelObjectiveMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetServiceLevelObjectiveInitialRpcTimeout() != null) {
      getServiceLevelObjectiveRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetServiceLevelObjectiveInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceLevelObjectiveInitialRpcTimeout set to "
                + this.clientProperties.getGetServiceLevelObjectiveInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetServiceLevelObjectiveRpcTimeoutMultiplier() != null) {
      getServiceLevelObjectiveRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetServiceLevelObjectiveRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceLevelObjectiveRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetServiceLevelObjectiveRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetServiceLevelObjectiveMaxRpcTimeout() != null) {
      getServiceLevelObjectiveRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetServiceLevelObjectiveMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceLevelObjectiveMaxRpcTimeout set to "
                + this.clientProperties.getGetServiceLevelObjectiveMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetServiceLevelObjectiveTotalTimeout() != null) {
      getServiceLevelObjectiveRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetServiceLevelObjectiveTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetServiceLevelObjectiveTotalTimeout set to "
                + this.clientProperties.getGetServiceLevelObjectiveTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getServiceLevelObjectiveSettings()
        .setRetrySettings(getServiceLevelObjectiveRetrySettingBuilder.build());
    RetrySettings.Builder listServiceLevelObjectivesRetrySettingBuilder =
        clientSettingsBuilder.listServiceLevelObjectivesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListServiceLevelObjectivesInitialRetryDelay() != null) {
      listServiceLevelObjectivesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListServiceLevelObjectivesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServiceLevelObjectivesInitialRetryDelay set to "
                + this.clientProperties.getListServiceLevelObjectivesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListServiceLevelObjectivesRetryDelayMultiplier() != null) {
      listServiceLevelObjectivesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListServiceLevelObjectivesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServiceLevelObjectivesRetryDelayMultiplier set to "
                + this.clientProperties.getListServiceLevelObjectivesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListServiceLevelObjectivesMaxRetryDelay() != null) {
      listServiceLevelObjectivesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListServiceLevelObjectivesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServiceLevelObjectivesMaxRetryDelay set to "
                + this.clientProperties.getListServiceLevelObjectivesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListServiceLevelObjectivesInitialRpcTimeout() != null) {
      listServiceLevelObjectivesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListServiceLevelObjectivesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServiceLevelObjectivesInitialRpcTimeout set to "
                + this.clientProperties.getListServiceLevelObjectivesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListServiceLevelObjectivesRpcTimeoutMultiplier() != null) {
      listServiceLevelObjectivesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListServiceLevelObjectivesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServiceLevelObjectivesRpcTimeoutMultiplier set to "
                + this.clientProperties.getListServiceLevelObjectivesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListServiceLevelObjectivesMaxRpcTimeout() != null) {
      listServiceLevelObjectivesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListServiceLevelObjectivesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServiceLevelObjectivesMaxRpcTimeout set to "
                + this.clientProperties.getListServiceLevelObjectivesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListServiceLevelObjectivesTotalTimeout() != null) {
      listServiceLevelObjectivesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListServiceLevelObjectivesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListServiceLevelObjectivesTotalTimeout set to "
                + this.clientProperties.getListServiceLevelObjectivesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listServiceLevelObjectivesSettings()
        .setRetrySettings(listServiceLevelObjectivesRetrySettingBuilder.build());
    RetrySettings.Builder updateServiceLevelObjectiveRetrySettingBuilder =
        clientSettingsBuilder.updateServiceLevelObjectiveSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateServiceLevelObjectiveInitialRpcTimeout() != null) {
      updateServiceLevelObjectiveRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateServiceLevelObjectiveInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServiceLevelObjectiveInitialRpcTimeout set to "
                + this.clientProperties.getUpdateServiceLevelObjectiveInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateServiceLevelObjectiveRpcTimeoutMultiplier() != null) {
      updateServiceLevelObjectiveRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateServiceLevelObjectiveRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServiceLevelObjectiveRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateServiceLevelObjectiveRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateServiceLevelObjectiveMaxRpcTimeout() != null) {
      updateServiceLevelObjectiveRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateServiceLevelObjectiveMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServiceLevelObjectiveMaxRpcTimeout set to "
                + this.clientProperties.getUpdateServiceLevelObjectiveMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateServiceLevelObjectiveTotalTimeout() != null) {
      updateServiceLevelObjectiveRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateServiceLevelObjectiveTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateServiceLevelObjectiveTotalTimeout set to "
                + this.clientProperties.getUpdateServiceLevelObjectiveTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateServiceLevelObjectiveSettings()
        .setRetrySettings(updateServiceLevelObjectiveRetrySettingBuilder.build());
    RetrySettings.Builder deleteServiceLevelObjectiveRetrySettingBuilder =
        clientSettingsBuilder.deleteServiceLevelObjectiveSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteServiceLevelObjectiveInitialRetryDelay() != null) {
      deleteServiceLevelObjectiveRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteServiceLevelObjectiveInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceLevelObjectiveInitialRetryDelay set to "
                + this.clientProperties.getDeleteServiceLevelObjectiveInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteServiceLevelObjectiveRetryDelayMultiplier() != null) {
      deleteServiceLevelObjectiveRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteServiceLevelObjectiveRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceLevelObjectiveRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteServiceLevelObjectiveRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteServiceLevelObjectiveMaxRetryDelay() != null) {
      deleteServiceLevelObjectiveRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteServiceLevelObjectiveMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceLevelObjectiveMaxRetryDelay set to "
                + this.clientProperties.getDeleteServiceLevelObjectiveMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteServiceLevelObjectiveInitialRpcTimeout() != null) {
      deleteServiceLevelObjectiveRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteServiceLevelObjectiveInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceLevelObjectiveInitialRpcTimeout set to "
                + this.clientProperties.getDeleteServiceLevelObjectiveInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteServiceLevelObjectiveRpcTimeoutMultiplier() != null) {
      deleteServiceLevelObjectiveRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteServiceLevelObjectiveRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceLevelObjectiveRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteServiceLevelObjectiveRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteServiceLevelObjectiveMaxRpcTimeout() != null) {
      deleteServiceLevelObjectiveRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteServiceLevelObjectiveMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceLevelObjectiveMaxRpcTimeout set to "
                + this.clientProperties.getDeleteServiceLevelObjectiveMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteServiceLevelObjectiveTotalTimeout() != null) {
      deleteServiceLevelObjectiveRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteServiceLevelObjectiveTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteServiceLevelObjectiveTotalTimeout set to "
                + this.clientProperties.getDeleteServiceLevelObjectiveTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteServiceLevelObjectiveSettings()
        .setRetrySettings(deleteServiceLevelObjectiveRetrySettingBuilder.build());
    return ServiceMonitoringServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-service-monitoring-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
