/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.retail.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.retail.v2.UserEventServiceClient;
import com.google.cloud.retail.v2.UserEventServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link UserEventServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(UserEventServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.retail.v2.spring.auto.user-event-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({UserEventServiceSpringProperties.class, GlobalProperties.class})
public class UserEventServiceSpringAutoConfiguration {
  private final UserEventServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER =
      LogFactory.getLog(UserEventServiceSpringAutoConfiguration.class);

  protected UserEventServiceSpringAutoConfiguration(
      UserEventServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider userEventServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from UserEventService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultUserEventServiceTransportChannelProvider() {
    return UserEventServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a UserEventServiceClient bean configured to use the default credentials provider
   * (obtained with userEventServiceCredentials()) and its default transport channel provider
   * (defaultUserEventServiceTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in UserEventServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public UserEventServiceClient userEventServiceClient(
      @Qualifier("userEventServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultUserEventServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    UserEventServiceSettings.Builder clientSettingsBuilder =
        UserEventServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          UserEventServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          UserEventServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder writeUserEventRetrySettingBuilder =
        clientSettingsBuilder.writeUserEventSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getWriteUserEventInitialRetryDelay() != null) {
      writeUserEventRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getWriteUserEventInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "WriteUserEventInitialRetryDelay set to "
                + this.clientProperties.getWriteUserEventInitialRetryDelay());
      }
    }
    if (this.clientProperties.getWriteUserEventRetryDelayMultiplier() != null) {
      writeUserEventRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getWriteUserEventRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "WriteUserEventRetryDelayMultiplier set to "
                + this.clientProperties.getWriteUserEventRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getWriteUserEventMaxRetryDelay() != null) {
      writeUserEventRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getWriteUserEventMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "WriteUserEventMaxRetryDelay set to "
                + this.clientProperties.getWriteUserEventMaxRetryDelay());
      }
    }
    if (this.clientProperties.getWriteUserEventInitialRpcTimeout() != null) {
      writeUserEventRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getWriteUserEventInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "WriteUserEventInitialRpcTimeout set to "
                + this.clientProperties.getWriteUserEventInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getWriteUserEventRpcTimeoutMultiplier() != null) {
      writeUserEventRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getWriteUserEventRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "WriteUserEventRpcTimeoutMultiplier set to "
                + this.clientProperties.getWriteUserEventRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getWriteUserEventMaxRpcTimeout() != null) {
      writeUserEventRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getWriteUserEventMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "WriteUserEventMaxRpcTimeout set to "
                + this.clientProperties.getWriteUserEventMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getWriteUserEventTotalTimeout() != null) {
      writeUserEventRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getWriteUserEventTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "WriteUserEventTotalTimeout set to "
                + this.clientProperties.getWriteUserEventTotalTimeout());
      }
    }
    clientSettingsBuilder
        .writeUserEventSettings()
        .setRetrySettings(writeUserEventRetrySettingBuilder.build());
    RetrySettings.Builder collectUserEventRetrySettingBuilder =
        clientSettingsBuilder.collectUserEventSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCollectUserEventInitialRetryDelay() != null) {
      collectUserEventRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCollectUserEventInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CollectUserEventInitialRetryDelay set to "
                + this.clientProperties.getCollectUserEventInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCollectUserEventRetryDelayMultiplier() != null) {
      collectUserEventRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCollectUserEventRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CollectUserEventRetryDelayMultiplier set to "
                + this.clientProperties.getCollectUserEventRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCollectUserEventMaxRetryDelay() != null) {
      collectUserEventRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCollectUserEventMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CollectUserEventMaxRetryDelay set to "
                + this.clientProperties.getCollectUserEventMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCollectUserEventInitialRpcTimeout() != null) {
      collectUserEventRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCollectUserEventInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CollectUserEventInitialRpcTimeout set to "
                + this.clientProperties.getCollectUserEventInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCollectUserEventRpcTimeoutMultiplier() != null) {
      collectUserEventRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCollectUserEventRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CollectUserEventRpcTimeoutMultiplier set to "
                + this.clientProperties.getCollectUserEventRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCollectUserEventMaxRpcTimeout() != null) {
      collectUserEventRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCollectUserEventMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CollectUserEventMaxRpcTimeout set to "
                + this.clientProperties.getCollectUserEventMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCollectUserEventTotalTimeout() != null) {
      collectUserEventRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCollectUserEventTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CollectUserEventTotalTimeout set to "
                + this.clientProperties.getCollectUserEventTotalTimeout());
      }
    }
    clientSettingsBuilder
        .collectUserEventSettings()
        .setRetrySettings(collectUserEventRetrySettingBuilder.build());
    RetrySettings.Builder purgeUserEventsRetrySettingBuilder =
        clientSettingsBuilder.purgeUserEventsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getPurgeUserEventsInitialRetryDelay() != null) {
      purgeUserEventsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getPurgeUserEventsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PurgeUserEventsInitialRetryDelay set to "
                + this.clientProperties.getPurgeUserEventsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getPurgeUserEventsRetryDelayMultiplier() != null) {
      purgeUserEventsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getPurgeUserEventsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PurgeUserEventsRetryDelayMultiplier set to "
                + this.clientProperties.getPurgeUserEventsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getPurgeUserEventsMaxRetryDelay() != null) {
      purgeUserEventsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getPurgeUserEventsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PurgeUserEventsMaxRetryDelay set to "
                + this.clientProperties.getPurgeUserEventsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getPurgeUserEventsInitialRpcTimeout() != null) {
      purgeUserEventsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getPurgeUserEventsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PurgeUserEventsInitialRpcTimeout set to "
                + this.clientProperties.getPurgeUserEventsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getPurgeUserEventsRpcTimeoutMultiplier() != null) {
      purgeUserEventsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getPurgeUserEventsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PurgeUserEventsRpcTimeoutMultiplier set to "
                + this.clientProperties.getPurgeUserEventsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getPurgeUserEventsMaxRpcTimeout() != null) {
      purgeUserEventsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getPurgeUserEventsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PurgeUserEventsMaxRpcTimeout set to "
                + this.clientProperties.getPurgeUserEventsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getPurgeUserEventsTotalTimeout() != null) {
      purgeUserEventsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getPurgeUserEventsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "PurgeUserEventsTotalTimeout set to "
                + this.clientProperties.getPurgeUserEventsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .purgeUserEventsSettings()
        .setRetrySettings(purgeUserEventsRetrySettingBuilder.build());
    RetrySettings.Builder importUserEventsRetrySettingBuilder =
        clientSettingsBuilder.importUserEventsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getImportUserEventsInitialRetryDelay() != null) {
      importUserEventsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getImportUserEventsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportUserEventsInitialRetryDelay set to "
                + this.clientProperties.getImportUserEventsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getImportUserEventsRetryDelayMultiplier() != null) {
      importUserEventsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getImportUserEventsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportUserEventsRetryDelayMultiplier set to "
                + this.clientProperties.getImportUserEventsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getImportUserEventsMaxRetryDelay() != null) {
      importUserEventsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getImportUserEventsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportUserEventsMaxRetryDelay set to "
                + this.clientProperties.getImportUserEventsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getImportUserEventsInitialRpcTimeout() != null) {
      importUserEventsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getImportUserEventsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportUserEventsInitialRpcTimeout set to "
                + this.clientProperties.getImportUserEventsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getImportUserEventsRpcTimeoutMultiplier() != null) {
      importUserEventsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getImportUserEventsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportUserEventsRpcTimeoutMultiplier set to "
                + this.clientProperties.getImportUserEventsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getImportUserEventsMaxRpcTimeout() != null) {
      importUserEventsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getImportUserEventsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportUserEventsMaxRpcTimeout set to "
                + this.clientProperties.getImportUserEventsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getImportUserEventsTotalTimeout() != null) {
      importUserEventsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getImportUserEventsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportUserEventsTotalTimeout set to "
                + this.clientProperties.getImportUserEventsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .importUserEventsSettings()
        .setRetrySettings(importUserEventsRetrySettingBuilder.build());
    RetrySettings.Builder rejoinUserEventsRetrySettingBuilder =
        clientSettingsBuilder.rejoinUserEventsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRejoinUserEventsInitialRetryDelay() != null) {
      rejoinUserEventsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getRejoinUserEventsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RejoinUserEventsInitialRetryDelay set to "
                + this.clientProperties.getRejoinUserEventsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getRejoinUserEventsRetryDelayMultiplier() != null) {
      rejoinUserEventsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getRejoinUserEventsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RejoinUserEventsRetryDelayMultiplier set to "
                + this.clientProperties.getRejoinUserEventsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getRejoinUserEventsMaxRetryDelay() != null) {
      rejoinUserEventsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getRejoinUserEventsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RejoinUserEventsMaxRetryDelay set to "
                + this.clientProperties.getRejoinUserEventsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getRejoinUserEventsInitialRpcTimeout() != null) {
      rejoinUserEventsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRejoinUserEventsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RejoinUserEventsInitialRpcTimeout set to "
                + this.clientProperties.getRejoinUserEventsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRejoinUserEventsRpcTimeoutMultiplier() != null) {
      rejoinUserEventsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRejoinUserEventsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RejoinUserEventsRpcTimeoutMultiplier set to "
                + this.clientProperties.getRejoinUserEventsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRejoinUserEventsMaxRpcTimeout() != null) {
      rejoinUserEventsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRejoinUserEventsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RejoinUserEventsMaxRpcTimeout set to "
                + this.clientProperties.getRejoinUserEventsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRejoinUserEventsTotalTimeout() != null) {
      rejoinUserEventsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRejoinUserEventsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RejoinUserEventsTotalTimeout set to "
                + this.clientProperties.getRejoinUserEventsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .rejoinUserEventsSettings()
        .setRetrySettings(rejoinUserEventsRetrySettingBuilder.build());
    return UserEventServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-user-event-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
