/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.retail.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.retail.v2.ProductServiceClient;
import com.google.cloud.retail.v2.ProductServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link ProductServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(ProductServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.retail.v2.spring.auto.product-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({ProductServiceSpringProperties.class, GlobalProperties.class})
public class ProductServiceSpringAutoConfiguration {
  private final ProductServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(ProductServiceSpringAutoConfiguration.class);

  protected ProductServiceSpringAutoConfiguration(
      ProductServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider productServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from ProductService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultProductServiceTransportChannelProvider() {
    return ProductServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a ProductServiceClient bean configured to use the default credentials provider
   * (obtained with productServiceCredentials()) and its default transport channel provider
   * (defaultProductServiceTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in ProductServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public ProductServiceClient productServiceClient(
      @Qualifier("productServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultProductServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    ProductServiceSettings.Builder clientSettingsBuilder =
        ProductServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          ProductServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          ProductServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder createProductRetrySettingBuilder =
        clientSettingsBuilder.createProductSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCreateProductInitialRetryDelay() != null) {
      createProductRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getCreateProductInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductInitialRetryDelay set to "
                + this.clientProperties.getCreateProductInitialRetryDelay());
      }
    }
    if (this.clientProperties.getCreateProductRetryDelayMultiplier() != null) {
      createProductRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getCreateProductRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductRetryDelayMultiplier set to "
                + this.clientProperties.getCreateProductRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getCreateProductMaxRetryDelay() != null) {
      createProductRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getCreateProductMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductMaxRetryDelay set to "
                + this.clientProperties.getCreateProductMaxRetryDelay());
      }
    }
    if (this.clientProperties.getCreateProductInitialRpcTimeout() != null) {
      createProductRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getCreateProductInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductInitialRpcTimeout set to "
                + this.clientProperties.getCreateProductInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateProductRpcTimeoutMultiplier() != null) {
      createProductRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCreateProductRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductRpcTimeoutMultiplier set to "
                + this.clientProperties.getCreateProductRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getCreateProductMaxRpcTimeout() != null) {
      createProductRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getCreateProductMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductMaxRpcTimeout set to "
                + this.clientProperties.getCreateProductMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getCreateProductTotalTimeout() != null) {
      createProductRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getCreateProductTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "CreateProductTotalTimeout set to "
                + this.clientProperties.getCreateProductTotalTimeout());
      }
    }
    clientSettingsBuilder
        .createProductSettings()
        .setRetrySettings(createProductRetrySettingBuilder.build());
    RetrySettings.Builder getProductRetrySettingBuilder =
        clientSettingsBuilder.getProductSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetProductInitialRetryDelay() != null) {
      getProductRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetProductInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductInitialRetryDelay set to "
                + this.clientProperties.getGetProductInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetProductRetryDelayMultiplier() != null) {
      getProductRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetProductRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductRetryDelayMultiplier set to "
                + this.clientProperties.getGetProductRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetProductMaxRetryDelay() != null) {
      getProductRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetProductMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductMaxRetryDelay set to " + this.clientProperties.getGetProductMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetProductInitialRpcTimeout() != null) {
      getProductRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetProductInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductInitialRpcTimeout set to "
                + this.clientProperties.getGetProductInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetProductRpcTimeoutMultiplier() != null) {
      getProductRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetProductRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetProductRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetProductMaxRpcTimeout() != null) {
      getProductRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetProductMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductMaxRpcTimeout set to " + this.clientProperties.getGetProductMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetProductTotalTimeout() != null) {
      getProductRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetProductTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetProductTotalTimeout set to " + this.clientProperties.getGetProductTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getProductSettings()
        .setRetrySettings(getProductRetrySettingBuilder.build());
    RetrySettings.Builder listProductsRetrySettingBuilder =
        clientSettingsBuilder.listProductsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListProductsInitialRetryDelay() != null) {
      listProductsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListProductsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsInitialRetryDelay set to "
                + this.clientProperties.getListProductsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListProductsRetryDelayMultiplier() != null) {
      listProductsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListProductsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsRetryDelayMultiplier set to "
                + this.clientProperties.getListProductsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListProductsMaxRetryDelay() != null) {
      listProductsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListProductsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsMaxRetryDelay set to "
                + this.clientProperties.getListProductsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListProductsInitialRpcTimeout() != null) {
      listProductsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListProductsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsInitialRpcTimeout set to "
                + this.clientProperties.getListProductsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListProductsRpcTimeoutMultiplier() != null) {
      listProductsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListProductsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListProductsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListProductsMaxRpcTimeout() != null) {
      listProductsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListProductsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsMaxRpcTimeout set to "
                + this.clientProperties.getListProductsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListProductsTotalTimeout() != null) {
      listProductsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListProductsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListProductsTotalTimeout set to "
                + this.clientProperties.getListProductsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listProductsSettings()
        .setRetrySettings(listProductsRetrySettingBuilder.build());
    RetrySettings.Builder updateProductRetrySettingBuilder =
        clientSettingsBuilder.updateProductSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateProductInitialRetryDelay() != null) {
      updateProductRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateProductInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductInitialRetryDelay set to "
                + this.clientProperties.getUpdateProductInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateProductRetryDelayMultiplier() != null) {
      updateProductRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateProductRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateProductRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateProductMaxRetryDelay() != null) {
      updateProductRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateProductMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductMaxRetryDelay set to "
                + this.clientProperties.getUpdateProductMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateProductInitialRpcTimeout() != null) {
      updateProductRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateProductInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductInitialRpcTimeout set to "
                + this.clientProperties.getUpdateProductInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateProductRpcTimeoutMultiplier() != null) {
      updateProductRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateProductRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateProductRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateProductMaxRpcTimeout() != null) {
      updateProductRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateProductMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductMaxRpcTimeout set to "
                + this.clientProperties.getUpdateProductMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateProductTotalTimeout() != null) {
      updateProductRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateProductTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateProductTotalTimeout set to "
                + this.clientProperties.getUpdateProductTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateProductSettings()
        .setRetrySettings(updateProductRetrySettingBuilder.build());
    RetrySettings.Builder deleteProductRetrySettingBuilder =
        clientSettingsBuilder.deleteProductSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getDeleteProductInitialRetryDelay() != null) {
      deleteProductRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getDeleteProductInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductInitialRetryDelay set to "
                + this.clientProperties.getDeleteProductInitialRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteProductRetryDelayMultiplier() != null) {
      deleteProductRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getDeleteProductRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductRetryDelayMultiplier set to "
                + this.clientProperties.getDeleteProductRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getDeleteProductMaxRetryDelay() != null) {
      deleteProductRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getDeleteProductMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductMaxRetryDelay set to "
                + this.clientProperties.getDeleteProductMaxRetryDelay());
      }
    }
    if (this.clientProperties.getDeleteProductInitialRpcTimeout() != null) {
      deleteProductRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getDeleteProductInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductInitialRpcTimeout set to "
                + this.clientProperties.getDeleteProductInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteProductRpcTimeoutMultiplier() != null) {
      deleteProductRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getDeleteProductRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductRpcTimeoutMultiplier set to "
                + this.clientProperties.getDeleteProductRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getDeleteProductMaxRpcTimeout() != null) {
      deleteProductRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getDeleteProductMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductMaxRpcTimeout set to "
                + this.clientProperties.getDeleteProductMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getDeleteProductTotalTimeout() != null) {
      deleteProductRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getDeleteProductTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "DeleteProductTotalTimeout set to "
                + this.clientProperties.getDeleteProductTotalTimeout());
      }
    }
    clientSettingsBuilder
        .deleteProductSettings()
        .setRetrySettings(deleteProductRetrySettingBuilder.build());
    RetrySettings.Builder importProductsRetrySettingBuilder =
        clientSettingsBuilder.importProductsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getImportProductsInitialRetryDelay() != null) {
      importProductsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getImportProductsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportProductsInitialRetryDelay set to "
                + this.clientProperties.getImportProductsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getImportProductsRetryDelayMultiplier() != null) {
      importProductsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getImportProductsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportProductsRetryDelayMultiplier set to "
                + this.clientProperties.getImportProductsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getImportProductsMaxRetryDelay() != null) {
      importProductsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getImportProductsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportProductsMaxRetryDelay set to "
                + this.clientProperties.getImportProductsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getImportProductsInitialRpcTimeout() != null) {
      importProductsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getImportProductsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportProductsInitialRpcTimeout set to "
                + this.clientProperties.getImportProductsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getImportProductsRpcTimeoutMultiplier() != null) {
      importProductsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getImportProductsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportProductsRpcTimeoutMultiplier set to "
                + this.clientProperties.getImportProductsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getImportProductsMaxRpcTimeout() != null) {
      importProductsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getImportProductsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportProductsMaxRpcTimeout set to "
                + this.clientProperties.getImportProductsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getImportProductsTotalTimeout() != null) {
      importProductsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getImportProductsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ImportProductsTotalTimeout set to "
                + this.clientProperties.getImportProductsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .importProductsSettings()
        .setRetrySettings(importProductsRetrySettingBuilder.build());
    RetrySettings.Builder setInventoryRetrySettingBuilder =
        clientSettingsBuilder.setInventorySettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetInventoryInitialRetryDelay() != null) {
      setInventoryRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getSetInventoryInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetInventoryInitialRetryDelay set to "
                + this.clientProperties.getSetInventoryInitialRetryDelay());
      }
    }
    if (this.clientProperties.getSetInventoryRetryDelayMultiplier() != null) {
      setInventoryRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getSetInventoryRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetInventoryRetryDelayMultiplier set to "
                + this.clientProperties.getSetInventoryRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getSetInventoryMaxRetryDelay() != null) {
      setInventoryRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getSetInventoryMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetInventoryMaxRetryDelay set to "
                + this.clientProperties.getSetInventoryMaxRetryDelay());
      }
    }
    if (this.clientProperties.getSetInventoryInitialRpcTimeout() != null) {
      setInventoryRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetInventoryInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetInventoryInitialRpcTimeout set to "
                + this.clientProperties.getSetInventoryInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetInventoryRpcTimeoutMultiplier() != null) {
      setInventoryRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetInventoryRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetInventoryRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetInventoryRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetInventoryMaxRpcTimeout() != null) {
      setInventoryRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetInventoryMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetInventoryMaxRpcTimeout set to "
                + this.clientProperties.getSetInventoryMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetInventoryTotalTimeout() != null) {
      setInventoryRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetInventoryTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetInventoryTotalTimeout set to "
                + this.clientProperties.getSetInventoryTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setInventorySettings()
        .setRetrySettings(setInventoryRetrySettingBuilder.build());
    RetrySettings.Builder addFulfillmentPlacesRetrySettingBuilder =
        clientSettingsBuilder.addFulfillmentPlacesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getAddFulfillmentPlacesInitialRetryDelay() != null) {
      addFulfillmentPlacesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getAddFulfillmentPlacesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddFulfillmentPlacesInitialRetryDelay set to "
                + this.clientProperties.getAddFulfillmentPlacesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getAddFulfillmentPlacesRetryDelayMultiplier() != null) {
      addFulfillmentPlacesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getAddFulfillmentPlacesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddFulfillmentPlacesRetryDelayMultiplier set to "
                + this.clientProperties.getAddFulfillmentPlacesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getAddFulfillmentPlacesMaxRetryDelay() != null) {
      addFulfillmentPlacesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getAddFulfillmentPlacesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddFulfillmentPlacesMaxRetryDelay set to "
                + this.clientProperties.getAddFulfillmentPlacesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getAddFulfillmentPlacesInitialRpcTimeout() != null) {
      addFulfillmentPlacesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getAddFulfillmentPlacesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddFulfillmentPlacesInitialRpcTimeout set to "
                + this.clientProperties.getAddFulfillmentPlacesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getAddFulfillmentPlacesRpcTimeoutMultiplier() != null) {
      addFulfillmentPlacesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getAddFulfillmentPlacesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddFulfillmentPlacesRpcTimeoutMultiplier set to "
                + this.clientProperties.getAddFulfillmentPlacesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getAddFulfillmentPlacesMaxRpcTimeout() != null) {
      addFulfillmentPlacesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getAddFulfillmentPlacesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddFulfillmentPlacesMaxRpcTimeout set to "
                + this.clientProperties.getAddFulfillmentPlacesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getAddFulfillmentPlacesTotalTimeout() != null) {
      addFulfillmentPlacesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getAddFulfillmentPlacesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddFulfillmentPlacesTotalTimeout set to "
                + this.clientProperties.getAddFulfillmentPlacesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .addFulfillmentPlacesSettings()
        .setRetrySettings(addFulfillmentPlacesRetrySettingBuilder.build());
    RetrySettings.Builder removeFulfillmentPlacesRetrySettingBuilder =
        clientSettingsBuilder.removeFulfillmentPlacesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRemoveFulfillmentPlacesInitialRetryDelay() != null) {
      removeFulfillmentPlacesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getRemoveFulfillmentPlacesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveFulfillmentPlacesInitialRetryDelay set to "
                + this.clientProperties.getRemoveFulfillmentPlacesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getRemoveFulfillmentPlacesRetryDelayMultiplier() != null) {
      removeFulfillmentPlacesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getRemoveFulfillmentPlacesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveFulfillmentPlacesRetryDelayMultiplier set to "
                + this.clientProperties.getRemoveFulfillmentPlacesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getRemoveFulfillmentPlacesMaxRetryDelay() != null) {
      removeFulfillmentPlacesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getRemoveFulfillmentPlacesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveFulfillmentPlacesMaxRetryDelay set to "
                + this.clientProperties.getRemoveFulfillmentPlacesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getRemoveFulfillmentPlacesInitialRpcTimeout() != null) {
      removeFulfillmentPlacesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRemoveFulfillmentPlacesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveFulfillmentPlacesInitialRpcTimeout set to "
                + this.clientProperties.getRemoveFulfillmentPlacesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRemoveFulfillmentPlacesRpcTimeoutMultiplier() != null) {
      removeFulfillmentPlacesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRemoveFulfillmentPlacesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveFulfillmentPlacesRpcTimeoutMultiplier set to "
                + this.clientProperties.getRemoveFulfillmentPlacesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRemoveFulfillmentPlacesMaxRpcTimeout() != null) {
      removeFulfillmentPlacesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRemoveFulfillmentPlacesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveFulfillmentPlacesMaxRpcTimeout set to "
                + this.clientProperties.getRemoveFulfillmentPlacesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRemoveFulfillmentPlacesTotalTimeout() != null) {
      removeFulfillmentPlacesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRemoveFulfillmentPlacesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveFulfillmentPlacesTotalTimeout set to "
                + this.clientProperties.getRemoveFulfillmentPlacesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .removeFulfillmentPlacesSettings()
        .setRetrySettings(removeFulfillmentPlacesRetrySettingBuilder.build());
    RetrySettings.Builder addLocalInventoriesRetrySettingBuilder =
        clientSettingsBuilder.addLocalInventoriesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getAddLocalInventoriesInitialRetryDelay() != null) {
      addLocalInventoriesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getAddLocalInventoriesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddLocalInventoriesInitialRetryDelay set to "
                + this.clientProperties.getAddLocalInventoriesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getAddLocalInventoriesRetryDelayMultiplier() != null) {
      addLocalInventoriesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getAddLocalInventoriesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddLocalInventoriesRetryDelayMultiplier set to "
                + this.clientProperties.getAddLocalInventoriesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getAddLocalInventoriesMaxRetryDelay() != null) {
      addLocalInventoriesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getAddLocalInventoriesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddLocalInventoriesMaxRetryDelay set to "
                + this.clientProperties.getAddLocalInventoriesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getAddLocalInventoriesInitialRpcTimeout() != null) {
      addLocalInventoriesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getAddLocalInventoriesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddLocalInventoriesInitialRpcTimeout set to "
                + this.clientProperties.getAddLocalInventoriesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getAddLocalInventoriesRpcTimeoutMultiplier() != null) {
      addLocalInventoriesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getAddLocalInventoriesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddLocalInventoriesRpcTimeoutMultiplier set to "
                + this.clientProperties.getAddLocalInventoriesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getAddLocalInventoriesMaxRpcTimeout() != null) {
      addLocalInventoriesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getAddLocalInventoriesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddLocalInventoriesMaxRpcTimeout set to "
                + this.clientProperties.getAddLocalInventoriesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getAddLocalInventoriesTotalTimeout() != null) {
      addLocalInventoriesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getAddLocalInventoriesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddLocalInventoriesTotalTimeout set to "
                + this.clientProperties.getAddLocalInventoriesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .addLocalInventoriesSettings()
        .setRetrySettings(addLocalInventoriesRetrySettingBuilder.build());
    RetrySettings.Builder removeLocalInventoriesRetrySettingBuilder =
        clientSettingsBuilder.removeLocalInventoriesSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRemoveLocalInventoriesInitialRetryDelay() != null) {
      removeLocalInventoriesRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getRemoveLocalInventoriesInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveLocalInventoriesInitialRetryDelay set to "
                + this.clientProperties.getRemoveLocalInventoriesInitialRetryDelay());
      }
    }
    if (this.clientProperties.getRemoveLocalInventoriesRetryDelayMultiplier() != null) {
      removeLocalInventoriesRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getRemoveLocalInventoriesRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveLocalInventoriesRetryDelayMultiplier set to "
                + this.clientProperties.getRemoveLocalInventoriesRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getRemoveLocalInventoriesMaxRetryDelay() != null) {
      removeLocalInventoriesRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getRemoveLocalInventoriesMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveLocalInventoriesMaxRetryDelay set to "
                + this.clientProperties.getRemoveLocalInventoriesMaxRetryDelay());
      }
    }
    if (this.clientProperties.getRemoveLocalInventoriesInitialRpcTimeout() != null) {
      removeLocalInventoriesRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRemoveLocalInventoriesInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveLocalInventoriesInitialRpcTimeout set to "
                + this.clientProperties.getRemoveLocalInventoriesInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRemoveLocalInventoriesRpcTimeoutMultiplier() != null) {
      removeLocalInventoriesRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRemoveLocalInventoriesRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveLocalInventoriesRpcTimeoutMultiplier set to "
                + this.clientProperties.getRemoveLocalInventoriesRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRemoveLocalInventoriesMaxRpcTimeout() != null) {
      removeLocalInventoriesRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRemoveLocalInventoriesMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveLocalInventoriesMaxRpcTimeout set to "
                + this.clientProperties.getRemoveLocalInventoriesMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRemoveLocalInventoriesTotalTimeout() != null) {
      removeLocalInventoriesRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRemoveLocalInventoriesTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveLocalInventoriesTotalTimeout set to "
                + this.clientProperties.getRemoveLocalInventoriesTotalTimeout());
      }
    }
    clientSettingsBuilder
        .removeLocalInventoriesSettings()
        .setRetrySettings(removeLocalInventoriesRetrySettingBuilder.build());
    return ProductServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-product-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
