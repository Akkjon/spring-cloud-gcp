/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.retail.v2.spring;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.retail.v2.CatalogServiceClient;
import com.google.cloud.retail.v2.CatalogServiceSettings;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.global.GlobalProperties;
import java.io.IOException;
import java.util.Collections;
import javax.annotation.Generated;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link CatalogServiceClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@Generated("by google-cloud-spring-generator")
@BetaApi("Autogenerated Spring autoconfiguration is not yet stable")
@AutoConfiguration
@ConditionalOnClass(CatalogServiceClient.class)
@ConditionalOnProperty(
    value = "com.google.cloud.retail.v2.spring.auto.catalog-service.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({CatalogServiceSpringProperties.class, GlobalProperties.class})
public class CatalogServiceSpringAutoConfiguration {
  private final CatalogServiceSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(CatalogServiceSpringAutoConfiguration.class);

  protected CatalogServiceSpringAutoConfiguration(
      CatalogServiceSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider catalogServiceCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from CatalogService-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultCatalogServiceTransportChannelProvider() {
    return CatalogServiceSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a CatalogServiceClient bean configured to use the default credentials provider
   * (obtained with catalogServiceCredentials()) and its default transport channel provider
   * (defaultCatalogServiceTransportChannelProvider()). It also configures the quota project ID if
   * provided. It will configure an executor provider in case there is more than one thread
   * configured in the client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in CatalogServiceSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public CatalogServiceClient catalogServiceClient(
      @Qualifier("catalogServiceCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultCatalogServiceTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    CatalogServiceSettings.Builder clientSettingsBuilder =
        CatalogServiceSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          CatalogServiceSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          CatalogServiceSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    RetrySettings.Builder listCatalogsRetrySettingBuilder =
        clientSettingsBuilder.listCatalogsSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getListCatalogsInitialRetryDelay() != null) {
      listCatalogsRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getListCatalogsInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCatalogsInitialRetryDelay set to "
                + this.clientProperties.getListCatalogsInitialRetryDelay());
      }
    }
    if (this.clientProperties.getListCatalogsRetryDelayMultiplier() != null) {
      listCatalogsRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getListCatalogsRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCatalogsRetryDelayMultiplier set to "
                + this.clientProperties.getListCatalogsRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getListCatalogsMaxRetryDelay() != null) {
      listCatalogsRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getListCatalogsMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCatalogsMaxRetryDelay set to "
                + this.clientProperties.getListCatalogsMaxRetryDelay());
      }
    }
    if (this.clientProperties.getListCatalogsInitialRpcTimeout() != null) {
      listCatalogsRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getListCatalogsInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCatalogsInitialRpcTimeout set to "
                + this.clientProperties.getListCatalogsInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getListCatalogsRpcTimeoutMultiplier() != null) {
      listCatalogsRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getListCatalogsRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCatalogsRpcTimeoutMultiplier set to "
                + this.clientProperties.getListCatalogsRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getListCatalogsMaxRpcTimeout() != null) {
      listCatalogsRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getListCatalogsMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCatalogsMaxRpcTimeout set to "
                + this.clientProperties.getListCatalogsMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getListCatalogsTotalTimeout() != null) {
      listCatalogsRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getListCatalogsTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ListCatalogsTotalTimeout set to "
                + this.clientProperties.getListCatalogsTotalTimeout());
      }
    }
    clientSettingsBuilder
        .listCatalogsSettings()
        .setRetrySettings(listCatalogsRetrySettingBuilder.build());
    RetrySettings.Builder updateCatalogRetrySettingBuilder =
        clientSettingsBuilder.updateCatalogSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateCatalogInitialRetryDelay() != null) {
      updateCatalogRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateCatalogInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCatalogInitialRetryDelay set to "
                + this.clientProperties.getUpdateCatalogInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateCatalogRetryDelayMultiplier() != null) {
      updateCatalogRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateCatalogRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCatalogRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateCatalogRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateCatalogMaxRetryDelay() != null) {
      updateCatalogRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateCatalogMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCatalogMaxRetryDelay set to "
                + this.clientProperties.getUpdateCatalogMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateCatalogInitialRpcTimeout() != null) {
      updateCatalogRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateCatalogInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCatalogInitialRpcTimeout set to "
                + this.clientProperties.getUpdateCatalogInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateCatalogRpcTimeoutMultiplier() != null) {
      updateCatalogRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateCatalogRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCatalogRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateCatalogRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateCatalogMaxRpcTimeout() != null) {
      updateCatalogRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateCatalogMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCatalogMaxRpcTimeout set to "
                + this.clientProperties.getUpdateCatalogMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateCatalogTotalTimeout() != null) {
      updateCatalogRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateCatalogTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCatalogTotalTimeout set to "
                + this.clientProperties.getUpdateCatalogTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateCatalogSettings()
        .setRetrySettings(updateCatalogRetrySettingBuilder.build());
    RetrySettings.Builder setDefaultBranchRetrySettingBuilder =
        clientSettingsBuilder.setDefaultBranchSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSetDefaultBranchInitialRetryDelay() != null) {
      setDefaultBranchRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getSetDefaultBranchInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetDefaultBranchInitialRetryDelay set to "
                + this.clientProperties.getSetDefaultBranchInitialRetryDelay());
      }
    }
    if (this.clientProperties.getSetDefaultBranchRetryDelayMultiplier() != null) {
      setDefaultBranchRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getSetDefaultBranchRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetDefaultBranchRetryDelayMultiplier set to "
                + this.clientProperties.getSetDefaultBranchRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getSetDefaultBranchMaxRetryDelay() != null) {
      setDefaultBranchRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getSetDefaultBranchMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetDefaultBranchMaxRetryDelay set to "
                + this.clientProperties.getSetDefaultBranchMaxRetryDelay());
      }
    }
    if (this.clientProperties.getSetDefaultBranchInitialRpcTimeout() != null) {
      setDefaultBranchRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getSetDefaultBranchInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetDefaultBranchInitialRpcTimeout set to "
                + this.clientProperties.getSetDefaultBranchInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getSetDefaultBranchRpcTimeoutMultiplier() != null) {
      setDefaultBranchRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSetDefaultBranchRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetDefaultBranchRpcTimeoutMultiplier set to "
                + this.clientProperties.getSetDefaultBranchRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getSetDefaultBranchMaxRpcTimeout() != null) {
      setDefaultBranchRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getSetDefaultBranchMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetDefaultBranchMaxRpcTimeout set to "
                + this.clientProperties.getSetDefaultBranchMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getSetDefaultBranchTotalTimeout() != null) {
      setDefaultBranchRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getSetDefaultBranchTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "SetDefaultBranchTotalTimeout set to "
                + this.clientProperties.getSetDefaultBranchTotalTimeout());
      }
    }
    clientSettingsBuilder
        .setDefaultBranchSettings()
        .setRetrySettings(setDefaultBranchRetrySettingBuilder.build());
    RetrySettings.Builder getDefaultBranchRetrySettingBuilder =
        clientSettingsBuilder.getDefaultBranchSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetDefaultBranchInitialRetryDelay() != null) {
      getDefaultBranchRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetDefaultBranchInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDefaultBranchInitialRetryDelay set to "
                + this.clientProperties.getGetDefaultBranchInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetDefaultBranchRetryDelayMultiplier() != null) {
      getDefaultBranchRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetDefaultBranchRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDefaultBranchRetryDelayMultiplier set to "
                + this.clientProperties.getGetDefaultBranchRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetDefaultBranchMaxRetryDelay() != null) {
      getDefaultBranchRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetDefaultBranchMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDefaultBranchMaxRetryDelay set to "
                + this.clientProperties.getGetDefaultBranchMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetDefaultBranchInitialRpcTimeout() != null) {
      getDefaultBranchRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetDefaultBranchInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDefaultBranchInitialRpcTimeout set to "
                + this.clientProperties.getGetDefaultBranchInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDefaultBranchRpcTimeoutMultiplier() != null) {
      getDefaultBranchRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetDefaultBranchRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDefaultBranchRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetDefaultBranchRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetDefaultBranchMaxRpcTimeout() != null) {
      getDefaultBranchRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetDefaultBranchMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDefaultBranchMaxRpcTimeout set to "
                + this.clientProperties.getGetDefaultBranchMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetDefaultBranchTotalTimeout() != null) {
      getDefaultBranchRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetDefaultBranchTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetDefaultBranchTotalTimeout set to "
                + this.clientProperties.getGetDefaultBranchTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getDefaultBranchSettings()
        .setRetrySettings(getDefaultBranchRetrySettingBuilder.build());
    RetrySettings.Builder getCompletionConfigRetrySettingBuilder =
        clientSettingsBuilder.getCompletionConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetCompletionConfigInitialRetryDelay() != null) {
      getCompletionConfigRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetCompletionConfigInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCompletionConfigInitialRetryDelay set to "
                + this.clientProperties.getGetCompletionConfigInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetCompletionConfigRetryDelayMultiplier() != null) {
      getCompletionConfigRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetCompletionConfigRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCompletionConfigRetryDelayMultiplier set to "
                + this.clientProperties.getGetCompletionConfigRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetCompletionConfigMaxRetryDelay() != null) {
      getCompletionConfigRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetCompletionConfigMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCompletionConfigMaxRetryDelay set to "
                + this.clientProperties.getGetCompletionConfigMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetCompletionConfigInitialRpcTimeout() != null) {
      getCompletionConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetCompletionConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCompletionConfigInitialRpcTimeout set to "
                + this.clientProperties.getGetCompletionConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetCompletionConfigRpcTimeoutMultiplier() != null) {
      getCompletionConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetCompletionConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCompletionConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetCompletionConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetCompletionConfigMaxRpcTimeout() != null) {
      getCompletionConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetCompletionConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCompletionConfigMaxRpcTimeout set to "
                + this.clientProperties.getGetCompletionConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetCompletionConfigTotalTimeout() != null) {
      getCompletionConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetCompletionConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetCompletionConfigTotalTimeout set to "
                + this.clientProperties.getGetCompletionConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getCompletionConfigSettings()
        .setRetrySettings(getCompletionConfigRetrySettingBuilder.build());
    RetrySettings.Builder updateCompletionConfigRetrySettingBuilder =
        clientSettingsBuilder.updateCompletionConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateCompletionConfigInitialRetryDelay() != null) {
      updateCompletionConfigRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateCompletionConfigInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCompletionConfigInitialRetryDelay set to "
                + this.clientProperties.getUpdateCompletionConfigInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateCompletionConfigRetryDelayMultiplier() != null) {
      updateCompletionConfigRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateCompletionConfigRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCompletionConfigRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateCompletionConfigRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateCompletionConfigMaxRetryDelay() != null) {
      updateCompletionConfigRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateCompletionConfigMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCompletionConfigMaxRetryDelay set to "
                + this.clientProperties.getUpdateCompletionConfigMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateCompletionConfigInitialRpcTimeout() != null) {
      updateCompletionConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateCompletionConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCompletionConfigInitialRpcTimeout set to "
                + this.clientProperties.getUpdateCompletionConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateCompletionConfigRpcTimeoutMultiplier() != null) {
      updateCompletionConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateCompletionConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCompletionConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateCompletionConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateCompletionConfigMaxRpcTimeout() != null) {
      updateCompletionConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateCompletionConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCompletionConfigMaxRpcTimeout set to "
                + this.clientProperties.getUpdateCompletionConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateCompletionConfigTotalTimeout() != null) {
      updateCompletionConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateCompletionConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateCompletionConfigTotalTimeout set to "
                + this.clientProperties.getUpdateCompletionConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateCompletionConfigSettings()
        .setRetrySettings(updateCompletionConfigRetrySettingBuilder.build());
    RetrySettings.Builder getAttributesConfigRetrySettingBuilder =
        clientSettingsBuilder.getAttributesConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getGetAttributesConfigInitialRetryDelay() != null) {
      getAttributesConfigRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getGetAttributesConfigInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAttributesConfigInitialRetryDelay set to "
                + this.clientProperties.getGetAttributesConfigInitialRetryDelay());
      }
    }
    if (this.clientProperties.getGetAttributesConfigRetryDelayMultiplier() != null) {
      getAttributesConfigRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getGetAttributesConfigRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAttributesConfigRetryDelayMultiplier set to "
                + this.clientProperties.getGetAttributesConfigRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getGetAttributesConfigMaxRetryDelay() != null) {
      getAttributesConfigRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getGetAttributesConfigMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAttributesConfigMaxRetryDelay set to "
                + this.clientProperties.getGetAttributesConfigMaxRetryDelay());
      }
    }
    if (this.clientProperties.getGetAttributesConfigInitialRpcTimeout() != null) {
      getAttributesConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getGetAttributesConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAttributesConfigInitialRpcTimeout set to "
                + this.clientProperties.getGetAttributesConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAttributesConfigRpcTimeoutMultiplier() != null) {
      getAttributesConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getGetAttributesConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAttributesConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getGetAttributesConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getGetAttributesConfigMaxRpcTimeout() != null) {
      getAttributesConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getGetAttributesConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAttributesConfigMaxRpcTimeout set to "
                + this.clientProperties.getGetAttributesConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getGetAttributesConfigTotalTimeout() != null) {
      getAttributesConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getGetAttributesConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "GetAttributesConfigTotalTimeout set to "
                + this.clientProperties.getGetAttributesConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .getAttributesConfigSettings()
        .setRetrySettings(getAttributesConfigRetrySettingBuilder.build());
    RetrySettings.Builder updateAttributesConfigRetrySettingBuilder =
        clientSettingsBuilder.updateAttributesConfigSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getUpdateAttributesConfigInitialRetryDelay() != null) {
      updateAttributesConfigRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getUpdateAttributesConfigInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAttributesConfigInitialRetryDelay set to "
                + this.clientProperties.getUpdateAttributesConfigInitialRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateAttributesConfigRetryDelayMultiplier() != null) {
      updateAttributesConfigRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getUpdateAttributesConfigRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAttributesConfigRetryDelayMultiplier set to "
                + this.clientProperties.getUpdateAttributesConfigRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getUpdateAttributesConfigMaxRetryDelay() != null) {
      updateAttributesConfigRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getUpdateAttributesConfigMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAttributesConfigMaxRetryDelay set to "
                + this.clientProperties.getUpdateAttributesConfigMaxRetryDelay());
      }
    }
    if (this.clientProperties.getUpdateAttributesConfigInitialRpcTimeout() != null) {
      updateAttributesConfigRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getUpdateAttributesConfigInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAttributesConfigInitialRpcTimeout set to "
                + this.clientProperties.getUpdateAttributesConfigInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateAttributesConfigRpcTimeoutMultiplier() != null) {
      updateAttributesConfigRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getUpdateAttributesConfigRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAttributesConfigRpcTimeoutMultiplier set to "
                + this.clientProperties.getUpdateAttributesConfigRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getUpdateAttributesConfigMaxRpcTimeout() != null) {
      updateAttributesConfigRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getUpdateAttributesConfigMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAttributesConfigMaxRpcTimeout set to "
                + this.clientProperties.getUpdateAttributesConfigMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getUpdateAttributesConfigTotalTimeout() != null) {
      updateAttributesConfigRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getUpdateAttributesConfigTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "UpdateAttributesConfigTotalTimeout set to "
                + this.clientProperties.getUpdateAttributesConfigTotalTimeout());
      }
    }
    clientSettingsBuilder
        .updateAttributesConfigSettings()
        .setRetrySettings(updateAttributesConfigRetrySettingBuilder.build());
    RetrySettings.Builder addCatalogAttributeRetrySettingBuilder =
        clientSettingsBuilder.addCatalogAttributeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getAddCatalogAttributeInitialRetryDelay() != null) {
      addCatalogAttributeRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getAddCatalogAttributeInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddCatalogAttributeInitialRetryDelay set to "
                + this.clientProperties.getAddCatalogAttributeInitialRetryDelay());
      }
    }
    if (this.clientProperties.getAddCatalogAttributeRetryDelayMultiplier() != null) {
      addCatalogAttributeRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getAddCatalogAttributeRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddCatalogAttributeRetryDelayMultiplier set to "
                + this.clientProperties.getAddCatalogAttributeRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getAddCatalogAttributeMaxRetryDelay() != null) {
      addCatalogAttributeRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getAddCatalogAttributeMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddCatalogAttributeMaxRetryDelay set to "
                + this.clientProperties.getAddCatalogAttributeMaxRetryDelay());
      }
    }
    if (this.clientProperties.getAddCatalogAttributeInitialRpcTimeout() != null) {
      addCatalogAttributeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getAddCatalogAttributeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddCatalogAttributeInitialRpcTimeout set to "
                + this.clientProperties.getAddCatalogAttributeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getAddCatalogAttributeRpcTimeoutMultiplier() != null) {
      addCatalogAttributeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getAddCatalogAttributeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddCatalogAttributeRpcTimeoutMultiplier set to "
                + this.clientProperties.getAddCatalogAttributeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getAddCatalogAttributeMaxRpcTimeout() != null) {
      addCatalogAttributeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getAddCatalogAttributeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddCatalogAttributeMaxRpcTimeout set to "
                + this.clientProperties.getAddCatalogAttributeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getAddCatalogAttributeTotalTimeout() != null) {
      addCatalogAttributeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getAddCatalogAttributeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "AddCatalogAttributeTotalTimeout set to "
                + this.clientProperties.getAddCatalogAttributeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .addCatalogAttributeSettings()
        .setRetrySettings(addCatalogAttributeRetrySettingBuilder.build());
    RetrySettings.Builder removeCatalogAttributeRetrySettingBuilder =
        clientSettingsBuilder.removeCatalogAttributeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getRemoveCatalogAttributeInitialRetryDelay() != null) {
      removeCatalogAttributeRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getRemoveCatalogAttributeInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveCatalogAttributeInitialRetryDelay set to "
                + this.clientProperties.getRemoveCatalogAttributeInitialRetryDelay());
      }
    }
    if (this.clientProperties.getRemoveCatalogAttributeRetryDelayMultiplier() != null) {
      removeCatalogAttributeRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getRemoveCatalogAttributeRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveCatalogAttributeRetryDelayMultiplier set to "
                + this.clientProperties.getRemoveCatalogAttributeRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getRemoveCatalogAttributeMaxRetryDelay() != null) {
      removeCatalogAttributeRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getRemoveCatalogAttributeMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveCatalogAttributeMaxRetryDelay set to "
                + this.clientProperties.getRemoveCatalogAttributeMaxRetryDelay());
      }
    }
    if (this.clientProperties.getRemoveCatalogAttributeInitialRpcTimeout() != null) {
      removeCatalogAttributeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getRemoveCatalogAttributeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveCatalogAttributeInitialRpcTimeout set to "
                + this.clientProperties.getRemoveCatalogAttributeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getRemoveCatalogAttributeRpcTimeoutMultiplier() != null) {
      removeCatalogAttributeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getRemoveCatalogAttributeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveCatalogAttributeRpcTimeoutMultiplier set to "
                + this.clientProperties.getRemoveCatalogAttributeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getRemoveCatalogAttributeMaxRpcTimeout() != null) {
      removeCatalogAttributeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getRemoveCatalogAttributeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveCatalogAttributeMaxRpcTimeout set to "
                + this.clientProperties.getRemoveCatalogAttributeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getRemoveCatalogAttributeTotalTimeout() != null) {
      removeCatalogAttributeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getRemoveCatalogAttributeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "RemoveCatalogAttributeTotalTimeout set to "
                + this.clientProperties.getRemoveCatalogAttributeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .removeCatalogAttributeSettings()
        .setRetrySettings(removeCatalogAttributeRetrySettingBuilder.build());
    RetrySettings.Builder replaceCatalogAttributeRetrySettingBuilder =
        clientSettingsBuilder.replaceCatalogAttributeSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getReplaceCatalogAttributeInitialRetryDelay() != null) {
      replaceCatalogAttributeRetrySettingBuilder.setInitialRetryDelay(
          this.clientProperties.getReplaceCatalogAttributeInitialRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceCatalogAttributeInitialRetryDelay set to "
                + this.clientProperties.getReplaceCatalogAttributeInitialRetryDelay());
      }
    }
    if (this.clientProperties.getReplaceCatalogAttributeRetryDelayMultiplier() != null) {
      replaceCatalogAttributeRetrySettingBuilder.setRetryDelayMultiplier(
          this.clientProperties.getReplaceCatalogAttributeRetryDelayMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceCatalogAttributeRetryDelayMultiplier set to "
                + this.clientProperties.getReplaceCatalogAttributeRetryDelayMultiplier());
      }
    }
    if (this.clientProperties.getReplaceCatalogAttributeMaxRetryDelay() != null) {
      replaceCatalogAttributeRetrySettingBuilder.setMaxRetryDelay(
          this.clientProperties.getReplaceCatalogAttributeMaxRetryDelay());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceCatalogAttributeMaxRetryDelay set to "
                + this.clientProperties.getReplaceCatalogAttributeMaxRetryDelay());
      }
    }
    if (this.clientProperties.getReplaceCatalogAttributeInitialRpcTimeout() != null) {
      replaceCatalogAttributeRetrySettingBuilder.setInitialRpcTimeout(
          this.clientProperties.getReplaceCatalogAttributeInitialRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceCatalogAttributeInitialRpcTimeout set to "
                + this.clientProperties.getReplaceCatalogAttributeInitialRpcTimeout());
      }
    }
    if (this.clientProperties.getReplaceCatalogAttributeRpcTimeoutMultiplier() != null) {
      replaceCatalogAttributeRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getReplaceCatalogAttributeRpcTimeoutMultiplier());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceCatalogAttributeRpcTimeoutMultiplier set to "
                + this.clientProperties.getReplaceCatalogAttributeRpcTimeoutMultiplier());
      }
    }
    if (this.clientProperties.getReplaceCatalogAttributeMaxRpcTimeout() != null) {
      replaceCatalogAttributeRetrySettingBuilder.setMaxRpcTimeout(
          this.clientProperties.getReplaceCatalogAttributeMaxRpcTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceCatalogAttributeMaxRpcTimeout set to "
                + this.clientProperties.getReplaceCatalogAttributeMaxRpcTimeout());
      }
    }
    if (this.clientProperties.getReplaceCatalogAttributeTotalTimeout() != null) {
      replaceCatalogAttributeRetrySettingBuilder.setTotalTimeout(
          this.clientProperties.getReplaceCatalogAttributeTotalTimeout());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "ReplaceCatalogAttributeTotalTimeout set to "
                + this.clientProperties.getReplaceCatalogAttributeTotalTimeout());
      }
    }
    clientSettingsBuilder
        .replaceCatalogAttributeSettings()
        .setRetrySettings(replaceCatalogAttributeRetrySettingBuilder.build());
    return CatalogServiceClient.create(clientSettingsBuilder.build());
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-catalog-service";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
